
var Module = (function() {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  
  return (
function(Module) {
  Module = Module || {};

// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
// if (!Module)` is crucial for Closure Compiler here as it will otherwise replace every `Module` occurrence with a string
var Module;
if (!Module) Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
var args = Array.prototype.slice.call(arguments);
var imgData = args[0];
if(!imgData){
  throw new Error('require image data')
}
var result = [];


// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = true;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_HAS_NODE = ENVIRONMENT_IS_NODE;
var ENVIRONMENT_IS_SHELL = false;




// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;


// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_HAS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // When MODULARIZE (and not _INSTANCE), this JS may be executed later, after document.currentScript
  // is gone, so we saved it, and we use it here instead of any other info.
  if (_scriptDir) {
    scriptDirectory = _scriptDir;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {


  read_ = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };




  }

  setWindowTitle = function(title) { document.title = title };
} else
{
}


// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];
if (Module['thisProgram']) thisProgram = Module['thisProgram'];
if (Module['quit']) quit_ = Module['quit'];

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message

// TODO remove when SDL2 is fixed (also see above)



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;


function dynamicAlloc(size) {
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  if (end > _emscripten_get_heap_size()) {
    abort();
  }
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);


// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {


  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';

}

function removeFunction(index) {

  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};


var Runtime = {
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html


var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];




// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}





// Wasm globals

var wasmMemory;

// In fastcomp asm.js, we don't need a wasm Table at all.
// In the wasm backend, we polyfill the WebAssembly object,
// so this creates a (non-native-wasm) table for us.


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  argTypes = argTypes || [];
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs && !opts) {
    return getCFunc(ident);
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  abort("this function has been removed - you should use UTF8ToString(ptr, maxBytesToRead) instead!");
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}


// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}


// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}




// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var STATIC_BASE = 8,
    STACK_BASE = 136608,
    STACKTOP = STACK_BASE,
    STACK_MAX = 5379488,
    DYNAMIC_BASE = 5379488,
    DYNAMICTOP_PTR = 136416;




var TOTAL_STACK = 5242880;

var INITIAL_TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;







// In standalone mode, the wasm creates the memory, and the user can't provide it.
// In non-standalone/normal mode, we create the memory here.

// Create the main memory. (Note: this isn't used in STANDALONE_WASM mode since the wasm
// memory is created in the wasm, not in JS.)

  if (Module['buffer']) {
    buffer = Module['buffer'];
  }
  else {
    buffer = new ArrayBuffer(INITIAL_TOTAL_MEMORY);
  }


// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['TOTAL_MEMORY'].
INITIAL_TOTAL_MEMORY = buffer.byteLength;
updateGlobalBufferAndViews(buffer);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;










function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
PIPEFS.root = FS.mount(PIPEFS, {}, null);
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  runtimeExited = true;
}

function postRun() {

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}



var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  out(what);
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  what = 'abort(' + what + '). Build with -s ASSERTIONS=1 for more info.';

  // Throw a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  throw what;
}


var memoryInitializer = null;







// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}






// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = [];





// STATICTOP = STATIC_BASE + 136600;
/* global initializers */ /*__ATINIT__.push();*/


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = 136592

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  function demangle(func) {
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b__Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var err = new Error();
      if (!err.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error(0);
        } catch(e) {
          err = e;
        }
        if (!err.stack) {
          return '(no stack trace available)';
        }
      }
      return err.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + UTF8ToString(condition) + ', at: ' + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);
    }

  
  
   
  
   
  
     

  function ___lock() {}

  
    

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    }
  
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  
  var PATH_FS={resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[44];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                contents.buffer === buffer.buffer ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            // malloc() can lead to growing the heap. If targeting the heap, we need to
            // re-acquire the heap buffer object in case growth had occurred.
            var fromHeap = (buffer.buffer == HEAP8.buffer);
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            (fromHeap ? HEAP8 : buffer).set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 2;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 2;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(70);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(10);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            console.log("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function (stream) {
        return stream.fd === null;
      },llseek:function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
        {}
        if (!random_device) {
          // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
          random_device = function() { abort("random_device"); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
          };
          this.setErrno(errno);
          this.message = 'FS error';
  
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },init:function (input, output, error) {
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH_FS.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(29);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(29);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(29);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(8);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -28;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function (fd) {
        // TODO: when all syscalls use wasi, can remove the next line
        if (fd === undefined) fd = SYSCALLS.get();
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        return low;
      },getZero:function () {
        SYSCALLS.get();
      }};function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -28;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -28; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(28);
          return -1;
        default: {
          return -28;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall3(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // read
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.read(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall4(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // write
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.write(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
  var ERRNO_CODES={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135};var PIPEFS={BUCKET_BUFFER_SIZE:8192,mount:function (mount) {
        // Do not pollute the real root directory or its child nodes with pipes
        // Looks like it is OK to create another pseudo-root node not linked to the FS.root hierarchy this way
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createPipe:function () {
        var pipe = {
          buckets: []
        };
  
        pipe.buckets.push({
          buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),
          offset: 0,
          roffset: 0
        });
  
        var rName = PIPEFS.nextname();
        var wName = PIPEFS.nextname();
        var rNode = FS.createNode(PIPEFS.root, rName, 4096, 0);
        var wNode = FS.createNode(PIPEFS.root, wName, 4096, 0);
  
        rNode.pipe = pipe;
        wNode.pipe = pipe;
  
        var readableStream = FS.createStream({
          path: rName,
          node: rNode,
          flags: FS.modeStringToFlags('r'),
          seekable: false,
          stream_ops: PIPEFS.stream_ops
        });
        rNode.stream = readableStream;
  
        var writableStream = FS.createStream({
          path: wName,
          node: wNode,
          flags: FS.modeStringToFlags('w'),
          seekable: false,
          stream_ops: PIPEFS.stream_ops
        });
        wNode.stream = writableStream;
  
        return {
          readable_fd: readableStream.fd,
          writable_fd: writableStream.fd
        };
      },stream_ops:{poll:function (stream) {
          var pipe = stream.node.pipe;
  
          if ((stream.flags & 2097155) === 1) {
            return (256 | 4);
          } else {
            if (pipe.buckets.length > 0) {
              for (var i = 0; i < pipe.buckets.length; i++) {
                var bucket = pipe.buckets[i];
                if (bucket.offset - bucket.roffset > 0) {
                  return (64 | 1);
                }
              }
            }
          }
  
          return 0;
        },ioctl:function (stream, request, varargs) {
          return ERRNO_CODES.EINVAL;
        },fsync:function (stream) {
          return ERRNO_CODES.EINVAL;
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var pipe = stream.node.pipe;
          var currentLength = 0;
  
          for (var i = 0; i < pipe.buckets.length; i++) {
            var bucket = pipe.buckets[i];
            currentLength += bucket.offset - bucket.roffset;
          }
  
          assert(buffer instanceof ArrayBuffer || ArrayBuffer.isView(buffer));
          var data = buffer.subarray(offset, offset + length);
  
          if (length <= 0) {
            return 0;
          }
          if (currentLength == 0) {
            // Behave as if the read end is always non-blocking
            throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
          }
          var toRead = Math.min(currentLength, length);
  
          var totalRead = toRead;
          var toRemove = 0;
  
          for (var i = 0; i < pipe.buckets.length; i++) {
            var currBucket = pipe.buckets[i];
            var bucketSize = currBucket.offset - currBucket.roffset;
  
            if (toRead <= bucketSize) {
              var tmpSlice = currBucket.buffer.subarray(currBucket.roffset, currBucket.offset);
              if (toRead < bucketSize) {
                tmpSlice = tmpSlice.subarray(0, toRead);
                currBucket.roffset += toRead;
              } else {
                toRemove++;
              }
              data.set(tmpSlice);
              break;
            } else {
              var tmpSlice = currBucket.buffer.subarray(currBucket.roffset, currBucket.offset);
              data.set(tmpSlice);
              data = data.subarray(tmpSlice.byteLength);
              toRead -= tmpSlice.byteLength;
              toRemove++;
            }
          }
  
          if (toRemove && toRemove == pipe.buckets.length) {
            // Do not generate excessive garbage in use cases such as
            // write several bytes, read everything, write several bytes, read everything...
            toRemove--;
            pipe.buckets[toRemove].offset = 0;
            pipe.buckets[toRemove].roffset = 0;
          }
  
          pipe.buckets.splice(0, toRemove);
  
          return totalRead;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var pipe = stream.node.pipe;
  
          assert(buffer instanceof ArrayBuffer || ArrayBuffer.isView(buffer));
          var data = buffer.subarray(offset, offset + length);
  
          var dataLen = data.byteLength;
          if (dataLen <= 0) {
            return 0;
          }
  
          var currBucket = null;
  
          if (pipe.buckets.length == 0) {
            currBucket = {
              buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),
              offset: 0,
              roffset: 0
            };
            pipe.buckets.push(currBucket);
          } else {
            currBucket = pipe.buckets[pipe.buckets.length - 1];
          }
  
          assert(currBucket.offset <= PIPEFS.BUCKET_BUFFER_SIZE);
  
          var freeBytesInCurrBuffer = PIPEFS.BUCKET_BUFFER_SIZE - currBucket.offset;
          if (freeBytesInCurrBuffer >= dataLen) {
            currBucket.buffer.set(data, currBucket.offset);
            currBucket.offset += dataLen;
            return dataLen;
          } else if (freeBytesInCurrBuffer > 0) {
            currBucket.buffer.set(data.subarray(0, freeBytesInCurrBuffer), currBucket.offset);
            currBucket.offset += freeBytesInCurrBuffer;
            data = data.subarray(freeBytesInCurrBuffer, data.byteLength);
          }
  
          var numBuckets = (data.byteLength / PIPEFS.BUCKET_BUFFER_SIZE) | 0;
          var remElements = data.byteLength % PIPEFS.BUCKET_BUFFER_SIZE;
  
          for (var i = 0; i < numBuckets; i++) {
            var newBucket = {
              buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),
              offset: PIPEFS.BUCKET_BUFFER_SIZE,
              roffset: 0
            };
            pipe.buckets.push(newBucket);
            newBucket.buffer.set(data.subarray(0, PIPEFS.BUCKET_BUFFER_SIZE));
            data = data.subarray(PIPEFS.BUCKET_BUFFER_SIZE, data.byteLength);
          }
  
          if (remElements > 0) {
            var newBucket = {
              buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),
              offset: data.byteLength,
              roffset: 0
            };
            pipe.buckets.push(newBucket);
            newBucket.buffer.set(data);
          }
  
          return dataLen;
        },close:function (stream) {
          var pipe = stream.node.pipe;
          pipe.buckets = null;
        }},nextname:function () {
        if (!PIPEFS.nextname.current) {
          PIPEFS.nextname.current = 0;
        }
        return 'pipe[' + (PIPEFS.nextname.current++) + ']';
      }};function ___syscall42(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // pipe
      var fdPtr = SYSCALLS.get();
  
      if (fdPtr == 0) {
        throw new FS.ErrnoError(21);
      }
  
      var res = PIPEFS.createPipe();
  
      HEAP32[((fdPtr)>>2)]=res.readable_fd;
      HEAP32[(((fdPtr)+(4))>>2)]=res.writable_fd;
  
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get(); // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -59;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -59;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -59;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -59;
          return -28; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -59;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -59;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   

  function ___unlock() {}

  
  function _fd_close(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_close() {
  return _fd_close.apply(null, arguments)
  }

  
  function _fd_read(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_read() {
  return _fd_read.apply(null, arguments)
  }

  
  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -61;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((newOffset)>>2)]=tempI64[0],HEAP32[(((newOffset)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_seek() {
  return _fd_seek.apply(null, arguments)
  }

  
  function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doWritev(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_write() {
  return _fd_write.apply(null, arguments)
  }

   

   

   

  
  function _emscripten_get_now() { abort() }
  
  function _emscripten_get_now_is_monotonic() {
      // return whether emscripten_get_now is guaranteed monotonic; the Date.now
      // implementation is not :(
      return (0
        || (typeof performance === 'object' && performance && typeof performance['now'] === 'function')
        );
    }function _clock_gettime(clk_id, tp) {
      // int clock_gettime(clockid_t clk_id, struct timespec *tp);
      var now;
      if (clk_id === 0) {
        now = Date.now();
      } else if (clk_id === 1 && _emscripten_get_now_is_monotonic()) {
        now = _emscripten_get_now();
      } else {
        ___setErrNo(28);
        return -1;
      }
      HEAP32[((tp)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((tp)+(4))>>2)]=((now % 1000)*1000*1000)|0; // nanoseconds
      return 0;
    }

  function _emscripten_get_heap_size() {
      return HEAP8.length;
    }

   

  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('OOM');
    }function _emscripten_resize_heap(requestedSize) {
      abortOnCannotGrowMemory(requestedSize);
    }



  function _js_emit_data(data) {
      result[result.length - 1].data = UTF8ToString(data)
    }

  function _js_emit_loc(x, y) {
      result[result.length - 1].loc.push({
        x: x,
        y: y
      })
    }

  function _js_emit_type(symbol, addon) {
      result.push({
        symbol: UTF8ToString(symbol),
        addon: UTF8ToString(addon),
        data: null,
        loc: []
      })
    }

  function _js_get_height() { return imgData.height }

  function _js_get_width() { return imgData.width }

  function _js_set_data(dataPtr, len) {
      var HEAPU8 = Module['HEAPU8'];
      var grayData = HEAPU8.subarray(dataPtr, dataPtr + len);
      var data = imgData.data
      if (!data) {
        return array.length;
      }
      var d = imgData.data;
      for (var i = 0, j = 0; i < d.length; i += 4, j++) {
        grayData[j] = (d[i] * 66 + d[i + 1] * 129 + d[i + 2] * 25 + 4096) >> 8;
      }
    }

   

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
    }
  
   

   

   
FS.staticInit();;
if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof performance === 'object' && performance && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
var ASSERTIONS = false;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


// ASM_LIBRARY EXTERN PRIMITIVES: Math_clz32,Math_imul,Int8Array,Int32Array


var asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Float32Array": Float32Array, "Float64Array": Float64Array };

var asmLibraryArg = { "A": _fd_write, "B": _js_emit_data, "C": _js_emit_loc, "D": _js_emit_type, "E": _js_get_height, "F": _js_get_width, "G": _js_set_data, "H": abortOnCannotGrowMemory, "I": demangle, "J": demangleAll, "K": jsStackTrace, "L": stackTrace, "M": tempDoublePtr, "a": abort, "b": setTempRet0, "c": getTempRet0, "d": ___assert_fail, "e": ___lock, "f": ___setErrNo, "g": ___syscall221, "h": ___syscall3, "i": ___syscall4, "j": ___syscall42, "k": ___syscall5, "l": ___syscall54, "m": ___unlock, "n": ___wasi_fd_close, "o": ___wasi_fd_read, "p": ___wasi_fd_seek, "q": ___wasi_fd_write, "r": _clock_gettime, "s": _emscripten_get_heap_size, "t": _emscripten_get_now, "u": _emscripten_get_now_is_monotonic, "v": _emscripten_memcpy_big, "w": _emscripten_resize_heap, "x": _fd_close, "y": _fd_read, "z": _fd_seek };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';

  var HEAP8 = new global.Int8Array(buffer),
  HEAP16 = new global.Int16Array(buffer),
  HEAP32 = new global.Int32Array(buffer),
  HEAPU8 = new global.Uint8Array(buffer),
  HEAPU16 = new global.Uint16Array(buffer),
  HEAPF32 = new global.Float32Array(buffer),
  HEAPF64 = new global.Float64Array(buffer),
  tempDoublePtr=env.M|0,
  __THREW__ = 0,
  threwValue = 0,
  setjmpId = 0,
  tempInt = 0,
  tempBigInt = 0,
  tempBigIntS = 0,
  tempValue = 0,
  tempDouble = 0.0,
  Math_imul=global.Math.imul,
  Math_clz32=global.Math.clz32,
  abort=env.a,
  setTempRet0=env.b,
  getTempRet0=env.c,
  ___assert_fail=env.d,
  ___lock=env.e,
  ___setErrNo=env.f,
  ___syscall221=env.g,
  ___syscall3=env.h,
  ___syscall4=env.i,
  ___syscall42=env.j,
  ___syscall5=env.k,
  ___syscall54=env.l,
  ___unlock=env.m,
  ___wasi_fd_close=env.n,
  ___wasi_fd_read=env.o,
  ___wasi_fd_seek=env.p,
  ___wasi_fd_write=env.q,
  _clock_gettime=env.r,
  _emscripten_get_heap_size=env.s,
  _emscripten_get_now=env.t,
  _emscripten_get_now_is_monotonic=env.u,
  _emscripten_memcpy_big=env.v,
  _emscripten_resize_heap=env.w,
  _fd_close=env.x,
  _fd_read=env.y,
  _fd_seek=env.z,
  _fd_write=env.A,
  _js_emit_data=env.B,
  _js_emit_loc=env.C,
  _js_emit_type=env.D,
  _js_get_height=env.E,
  _js_get_width=env.F,
  _js_set_data=env.G,
  abortOnCannotGrowMemory=env.H,
  demangle=env.I,
  demangleAll=env.J,
  jsStackTrace=env.K,
  stackTrace=env.L,
  STACKTOP = 136608,
  STACK_MAX = 5379488,
  tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  
  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function _main($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$05759 = 0, $$060 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_zbar_processor_create(0)|0);
 (_zbar_processor_init($2,0,0)|0);
 $3 = (_zbar_image_create()|0);
 _zbar_image_set_format($3,808466521);
 $4 = (_js_get_width()|0);
 $5 = (_js_get_height()|0);
 _zbar_image_set_size($3,$4,$5);
 $6 = Math_imul($5, $4)|0;
 $7 = (_malloc($6)|0);
 _zbar_image_set_data($3,$7,$6,1);
 (_js_set_data(($7|0),($6|0))|0);
 (_zbar_process_image($2,$3)|0);
 $8 = (_zbar_image_first_symbol($3)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  return 0;
 }
 $$060 = $8;
 while(1) {
  $10 = (_zbar_symbol_get_type($$060)|0);
  $11 = ($10|0)==(1);
  if (!($11)) {
   $12 = (_zbar_get_symbol_name($10)|0);
   $13 = (_zbar_get_addon_name($10)|0);
   _js_emit_type(($12|0),($13|0));
   $14 = (_zbar_symbol_get_data($$060)|0);
   _js_emit_data(($14|0));
   $15 = (_zbar_symbol_get_loc_size($$060)|0);
   $16 = ($15|0)>(0);
   if ($16) {
    $$05759 = 0;
    while(1) {
     $17 = (_zbar_symbol_get_loc_x($$060,$$05759)|0);
     $18 = (_zbar_symbol_get_loc_y($$060,$$05759)|0);
     _js_emit_loc(($17|0),($18|0));
     $19 = (($$05759) + 1)|0;
     $exitcond = ($19|0)==($15|0);
     if ($exitcond) {
      break;
     } else {
      $$05759 = $19;
     }
    }
   }
  }
  $20 = (_zbar_symbol_next($$060)|0);
  $21 = ($20|0)==(0|0);
  if ($21) {
   break;
  } else {
   $$060 = $20;
  }
 }
 return 0;
}
function _zbar_get_symbol_name($0) {
 $0 = $0|0;
 var $$0 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $trunc = $0&255;
 do {
  switch ($trunc<<24>>24) {
  case 2:  {
   $$0 = 130370;
   break;
  }
  case 5:  {
   $$0 = 130364;
   break;
  }
  case 8:  {
   $$0 = 130358;
   break;
  }
  case 9:  {
   $$0 = 130352;
   break;
  }
  case 10:  {
   $$0 = 130344;
   break;
  }
  case 12:  {
   $$0 = 130338;
   break;
  }
  case 13:  {
   $$0 = 130331;
   break;
  }
  case 14:  {
   $$0 = 130323;
   break;
  }
  case 15:  {
   $$0 = 130313;
   break;
  }
  case 25:  {
   $$0 = 130308;
   break;
  }
  case 34:  {
   $$0 = 130300;
   break;
  }
  case 35:  {
   $$0 = 130288;
   break;
  }
  case 38:  {
   $$0 = 130280;
   break;
  }
  case 39:  {
   $$0 = 130272;
   break;
  }
  case 93:  {
   $$0 = 130264;
   break;
  }
  case -128:  {
   $$0 = 130255;
   break;
  }
  case 57:  {
   $$0 = 130248;
   break;
  }
  case 64:  {
   $$0 = 130240;
   break;
  }
  default: {
   $$0 = 130232;
  }
  }
 } while(0);
 return ($$0|0);
}
function _zbar_get_addon_name($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (136388|0);
}
function __zbar_get_symbol_hash($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 & 31;
 $2 = $0 >>> 4;
 $3 = $2 & 31;
 $4 = $3 ^ 31;
 $5 = -25102353 >>> $1;
 $6 = -25102353 >>> $4;
 $7 = $5 & 1;
 $8 = $7 & $6;
 $9 = ($8|0)==(0);
 if ($9) {
  ___assert_fail((130376|0),(130395|0),109,(130409|0));
  // unreachable;
 } else {
  $10 = (16 + ($4)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = (16 + ($1)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = 25102352 >>> $1;
  $17 = 25102352 >>> $4;
  $18 = $17 | $16;
  $19 = $18 & 1;
  $20 = ($19|0)==(0);
  $21 = (($15) + ($12))|0;
  $22 = $21 & 31;
  $$0 = $20 ? $22 : 0;
  return ($$0|0);
 }
 return (0)|0;
}
function __zbar_symbol_free($0) {
 $0 = $0|0;
 var $$0$i$i9 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$2>>2]|0;
  $5 = (($4) + -1)|0;
  HEAP32[$2>>2] = $5;
  $6 = ($4|0)>(0);
  if (!($6)) {
   ___assert_fail((134216|0),(134224|0),87,(134240|0));
   // unreachable;
  }
  $7 = ($5|0)==(0);
  if ($7) {
   $8 = ((($2)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   L8: do {
    if (!($10)) {
     $$0$i$i9 = $9;
     while(1) {
      $11 = ((($$0$i$i9)) + 44|0);
      $12 = HEAP32[$11>>2]|0;
      HEAP32[$11>>2] = 0;
      $13 = ((($$0$i$i9)) + 40|0);
      $14 = HEAP32[$13>>2]|0;
      $15 = (($14) + -1)|0;
      HEAP32[$13>>2] = $15;
      $16 = ($14|0)>(0);
      if (!($16)) {
       break;
      }
      $17 = ($15|0)==(0);
      if ($17) {
       __zbar_symbol_free($$0$i$i9);
      }
      $18 = ($12|0)==(0|0);
      if ($18) {
       break L8;
      } else {
       $$0$i$i9 = $12;
      }
     }
     ___assert_fail((134216|0),(134224|0),87,(134240|0));
     // unreachable;
    }
   } while(0);
   _free($2);
  }
  HEAP32[$1>>2] = 0;
 }
 $19 = ((($0)) + 32|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0|0);
 if (!($21)) {
  _free($20);
 }
 $22 = ((($0)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0);
 if ($24) {
  _free($0);
  return;
 }
 $25 = ((($0)) + 20|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if ($27) {
  _free($0);
  return;
 }
 _free($26);
 _free($0);
 return;
}
function _zbar_symbol_set_ref($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + ($1))|0;
 HEAP32[$0>>2] = $3;
 $4 = ($3|0)>(-1);
 if (!($4)) {
  ___assert_fail((134216|0),(134224|0),87,(134240|0));
  // unreachable;
 }
 $5 = ($3|0)==(0);
 $6 = ($1|0)<(1);
 $or$cond = $6 & $5;
 if (!($or$cond)) {
  return;
 }
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 L7: do {
  if (!($9)) {
   $$0$i6 = $8;
   while(1) {
    $10 = ((($$0$i6)) + 44|0);
    $11 = HEAP32[$10>>2]|0;
    HEAP32[$10>>2] = 0;
    $12 = ((($$0$i6)) + 40|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (($13) + -1)|0;
    HEAP32[$12>>2] = $14;
    $15 = ($13|0)>(0);
    if (!($15)) {
     break;
    }
    $16 = ($14|0)==(0);
    if ($16) {
     __zbar_symbol_free($$0$i6);
    }
    $17 = ($11|0)==(0|0);
    if ($17) {
     break L7;
    } else {
     $$0$i6 = $11;
    }
   }
   ___assert_fail((134216|0),(134224|0),87,(134240|0));
   // unreachable;
  }
 } while(0);
 _free($0);
 return;
}
function _zbar_symbol_get_type($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _zbar_symbol_get_data($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _zbar_symbol_get_count($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _zbar_symbol_get_quality($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _zbar_symbol_get_loc_size($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _zbar_symbol_get_loc_x($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3>>>0)>($1>>>0);
 if (!($4)) {
  $$0 = -1;
  return ($$0|0);
 }
 $5 = ((($0)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($1<<3)|0);
 $8 = HEAP32[$7>>2]|0;
 $$0 = $8;
 return ($$0|0);
}
function _zbar_symbol_get_loc_y($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3>>>0)>($1>>>0);
 if (!($4)) {
  $$0 = -1;
  return ($$0|0);
 }
 $5 = ((($0)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (((($6) + ($1<<3)|0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $$0 = $8;
 return ($$0|0);
}
function _zbar_symbol_get_orientation($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _zbar_symbol_next($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $4 = 0;
  return ($4|0);
 }
 $2 = ((($0)) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3;
 return ($4|0);
}
function __zbar_symbol_set_create() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,16)|0);
 HEAP32[$0>>2] = 1;
 return ($0|0);
}
function __zbar_symbol_set_free($0) {
 $0 = $0|0;
 var $$011 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _free($0);
  return;
 }
 $$011 = $2;
 while(1) {
  $4 = ((($$011)) + 44|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$4>>2] = 0;
  $6 = ((($$011)) + 40|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + -1)|0;
  HEAP32[$6>>2] = $8;
  $9 = ($7|0)>(0);
  if (!($9)) {
   label = 4;
   break;
  }
  $10 = ($8|0)==(0);
  if ($10) {
   __zbar_symbol_free($$011);
  }
  $11 = ($5|0)==(0|0);
  if ($11) {
   label = 8;
   break;
  } else {
   $$011 = $5;
  }
 }
 if ((label|0) == 4) {
  ___assert_fail((134216|0),(134224|0),87,(134240|0));
  // unreachable;
 }
 else if ((label|0) == 8) {
  _free($0);
  return;
 }
}
function _zbar_image_create() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,68)|0);
 $1 = ((($0)) + 44|0);
 HEAP32[$1>>2] = 1;
 $2 = ((($0)) + 52|0);
 HEAP32[$2>>2] = -1;
 return ($0|0);
}
function __zbar_image_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 64|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _free($0);
  return;
 }
 _zbar_symbol_set_ref($2,-1);
 _free($0);
 return;
}
function _zbar_image_destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 44|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -1)|0;
 HEAP32[$1>>2] = $3;
 $4 = ($2|0)>(0);
 if (!($4)) {
  ___assert_fail((134216|0),(134224|0),87,(134240|0));
  // unreachable;
 }
 $5 = ($3|0)==(0);
 if (!($5)) {
  return;
 }
 $6 = ((($0)) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  FUNCTION_TABLE_vi[$7 & 7]($0);
 }
 $9 = ((($0)) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  return;
 }
 $12 = ((($0)) + 64|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  _zbar_symbol_set_ref($13,-1);
 }
 _free($0);
 return;
}
function _zbar_image_get_format($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _zbar_image_get_width($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _zbar_image_get_height($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _zbar_image_get_data($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _zbar_image_set_format($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 return;
}
function _zbar_image_set_size($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 24|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 20|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 28|0);
 HEAP32[$5>>2] = $1;
 $6 = ((($0)) + 4|0);
 HEAP32[$6>>2] = $1;
 $7 = ((($0)) + 32|0);
 HEAP32[$7>>2] = $2;
 $8 = ((($0)) + 8|0);
 HEAP32[$8>>2] = $2;
 return;
}
function _zbar_image_set_crop($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$029 = 0, $$030 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, $spec$select31 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6>>>0)<($1>>>0);
 $spec$select = $7 ? $6 : $1;
 $8 = (($spec$select) + ($3))|0;
 $9 = ($8>>>0)>($6>>>0);
 $10 = (($6) - ($spec$select))|0;
 $$030 = $9 ? $10 : $3;
 $11 = ((($0)) + 20|0);
 HEAP32[$11>>2] = $spec$select;
 $12 = ((($0)) + 28|0);
 HEAP32[$12>>2] = $$030;
 $13 = ((($0)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14>>>0)<($2>>>0);
 $spec$select31 = $15 ? $14 : $2;
 $16 = (($spec$select31) + ($4))|0;
 $17 = ($16>>>0)>($14>>>0);
 $18 = (($14) - ($spec$select31))|0;
 $$029 = $17 ? $18 : $4;
 $19 = ((($0)) + 24|0);
 HEAP32[$19>>2] = $spec$select31;
 $20 = ((($0)) + 32|0);
 HEAP32[$20>>2] = $$029;
 return;
}
function _zbar_image_free_data($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 do {
  if ($4) {
   $13 = ((($0)) + 40|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0|0);
   if (!($15)) {
    $16 = ((($0)) + 12|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(0|0);
    if (!($18)) {
     $19 = ($14|0)==(1|0);
     if ($19) {
      _free($17);
      break;
     } else {
      HEAP32[$13>>2] = 1;
      FUNCTION_TABLE_vi[$14 & 7]($0);
      break;
     }
    }
   }
  } else {
   $5 = ((($0)) + 44|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0);
   if ($7) {
    ___assert_fail((130431|0),(130443|0),154,(130456|0));
    // unreachable;
   } else {
    $8 = (_calloc(1,68)|0);
    dest=$8; src=$0; stop=dest+68|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    $9 = ((($8)) + 40|0);
    $10 = HEAP32[$9>>2]|0;
    FUNCTION_TABLE_vi[$10 & 7]($8);
    $11 = ((($0)) + 40|0);
    HEAP32[$11>>2] = 0;
    HEAP32[$2>>2] = 0;
    $12 = ((($0)) + 52|0);
    HEAP32[$12>>2] = -1;
    break;
   }
  }
 } while(0);
 $20 = ((($0)) + 12|0);
 HEAP32[$20>>2] = 0;
 return;
}
function _zbar_image_set_data($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 if ($4) {
  $$pre = ((($0)) + 12|0);
  $$pre$phiZ2D = $$pre;
  HEAP32[$$pre$phiZ2D>>2] = $1;
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $2;
  $25 = ((($0)) + 40|0);
  HEAP32[$25>>2] = $3;
  return;
 }
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 do {
  if ($7) {
   $16 = ((($0)) + 40|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(0|0);
   if (!($18)) {
    $19 = ((($0)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(0|0);
    if (!($21)) {
     $22 = ($17|0)==(1|0);
     if ($22) {
      _free($20);
      break;
     } else {
      HEAP32[$16>>2] = 1;
      FUNCTION_TABLE_vi[$17 & 7]($0);
      break;
     }
    }
   }
  } else {
   $8 = ((($0)) + 44|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0);
   if ($10) {
    ___assert_fail((130431|0),(130443|0),154,(130456|0));
    // unreachable;
   } else {
    $11 = (_calloc(1,68)|0);
    dest=$11; src=$0; stop=dest+68|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    $12 = ((($11)) + 40|0);
    $13 = HEAP32[$12>>2]|0;
    FUNCTION_TABLE_vi[$13 & 7]($11);
    $14 = ((($0)) + 40|0);
    HEAP32[$14>>2] = 0;
    HEAP32[$5>>2] = 0;
    $15 = ((($0)) + 52|0);
    HEAP32[$15>>2] = -1;
    break;
   }
  }
 } while(0);
 $23 = ((($0)) + 12|0);
 HEAP32[$23>>2] = 0;
 $$pre$phiZ2D = $23;
 HEAP32[$$pre$phiZ2D>>2] = $1;
 $24 = ((($0)) + 16|0);
 HEAP32[$24>>2] = $2;
 $25 = ((($0)) + 40|0);
 HEAP32[$25>>2] = $3;
 return;
}
function _zbar_image_first_symbol($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 64|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $6 = 0;
  return ($6|0);
 }
 $4 = ((($2)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5;
 return ($6|0);
}
function _zbar_image_write($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$043 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0;
 var $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer17 = sp + 48|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 64|0;
 $3 = (_strlen($1)|0);
 $4 = (($3) + 16)|0;
 $5 = (_malloc($4)|0);
 (_strcpy($5,$1)|0);
 $6 = HEAP32[$0>>2]|0;
 $7 = $6 & 224;
 $8 = ($7|0)==(0);
 if ($8) {
  HEAP32[$vararg_buffer2>>2] = $1;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $6;
  $10 = (_snprintf($5,$4,130490,$vararg_buffer2)|0);
  $$0 = $10;
 } else {
  HEAP32[$vararg_buffer>>2] = $1;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $0;
  $9 = (_snprintf($5,$4,130477,$vararg_buffer)|0);
  $$0 = $9;
 }
 $11 = (($3) + 15)|0;
 $12 = ($$0|0)<($11|0);
 if (!($12)) {
  ___assert_fail((130503|0),(130443|0),256,(130515|0));
  // unreachable;
 }
 $13 = (($5) + ($11)|0);
 HEAP8[$13>>0] = 0;
 $14 = (0)>(0);
 if ($14) {
  $15 = HEAP32[32495]|0;
  $16 = HEAP32[$0>>2]|0;
  HEAP32[$vararg_buffer6>>2] = 130515;
  $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $0;
  $vararg_ptr10 = ((($vararg_buffer6)) + 8|0);
  HEAP32[$vararg_ptr10>>2] = $16;
  $vararg_ptr11 = ((($vararg_buffer6)) + 12|0);
  HEAP32[$vararg_ptr11>>2] = $5;
  (_fprintf($15,130532,$vararg_buffer6)|0);
 }
 $17 = (_fopen($5,130568)|0);
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = (___errno_location()|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (0)>(0);
  if (!($21)) {
   $$043 = $20;
   _free($5);
   STACKTOP = sp;return ($$043|0);
  }
  $22 = HEAP32[32495]|0;
  $23 = (_strerror($20)|0);
  HEAP32[$vararg_buffer12>>2] = 130515;
  $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
  HEAP32[$vararg_ptr15>>2] = $5;
  $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
  HEAP32[$vararg_ptr16>>2] = $23;
  (_fprintf($22,130570,$vararg_buffer12)|0);
  $$043 = $20;
  _free($5);
  STACKTOP = sp;return ($$043|0);
 }
 HEAP32[$2>>2] = 1735223674;
 $24 = HEAP32[$0>>2]|0;
 $25 = ((($2)) + 4|0);
 HEAP32[$25>>2] = $24;
 $26 = ((($0)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $27&65535;
 $29 = ((($2)) + 8|0);
 HEAP16[$29>>1] = $28;
 $30 = ((($0)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $31&65535;
 $33 = ((($2)) + 10|0);
 HEAP16[$33>>1] = $32;
 $34 = ((($0)) + 16|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($2)) + 12|0);
 HEAP32[$36>>2] = $35;
 $37 = (_fwrite($2,16,1,$17)|0);
 $38 = ($37|0)==(1);
 if ($38) {
  $39 = ((($0)) + 12|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = HEAP32[$34>>2]|0;
  $42 = (_fwrite($40,1,$41,$17)|0);
  $43 = HEAP32[$34>>2]|0;
  $44 = ($42|0)==($43|0);
  if ($44) {
   $50 = (_fclose($17)|0);
   $$043 = $50;
   _free($5);
   STACKTOP = sp;return ($$043|0);
  }
 }
 $45 = (___errno_location()|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (0)>(0);
 if ($47) {
  $48 = HEAP32[32495]|0;
  $49 = (_strerror($46)|0);
  HEAP32[$vararg_buffer17>>2] = 130515;
  $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
  HEAP32[$vararg_ptr20>>2] = $5;
  $vararg_ptr21 = ((($vararg_buffer17)) + 8|0);
  HEAP32[$vararg_ptr21>>2] = $49;
  (_fprintf($48,130596,$vararg_buffer17)|0);
 }
 (_fclose($17)|0);
 $$043 = $46;
 _free($5);
 STACKTOP = sp;return ($$043|0);
}
function __zbar_process_image($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$080 = 0, $$08487 = 0, $$283 = 0, $$3 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0;
 var $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer = sp;
 $2 = sp + 52|0;
 $3 = ((($0)) + 80|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($1|0)==(0|0);
 L1: do {
  if ($5) {
   $$3 = 0;
  } else {
   $6 = ((($0)) + 100|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0);
   if (!($8)) {
    $9 = ((($0)) + 48|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ((($10)) + 40|0);
    $12 = HEAP32[$11>>2]|0;
    (_zbar_image_write($12,130622)|0);
    HEAP32[$6>>2] = 0;
   }
   $13 = (_zbar_image_get_format($1)|0);
   HEAP32[$2>>2] = $13;
   $14 = (0)>(15);
   if ($14) {
    $15 = HEAP32[32495]|0;
    $16 = (_zbar_image_get_width($1)|0);
    $17 = (_zbar_image_get_height($1)|0);
    $18 = (_zbar_image_get_data($1)|0);
    HEAP32[$vararg_buffer>>2] = 130665;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $13;
    $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
    HEAP32[$vararg_ptr3>>2] = $16;
    $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
    HEAP32[$vararg_ptr4>>2] = $17;
    $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
    HEAP32[$vararg_ptr5>>2] = $18;
    (_fprintf($15,130627,$vararg_buffer)|0);
   }
   $19 = (_zbar_image_convert($1,808466521)|0);
   $20 = ($19|0)==(0|0);
   do {
    if (!($20)) {
     $21 = ((($0)) + 168|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ($22|0)==(0|0);
     if (!($23)) {
      _zbar_symbol_set_ref($22,-1);
      HEAP32[$21>>2] = 0;
     }
     $24 = ((($0)) + 52|0);
     $25 = HEAP32[$24>>2]|0;
     _zbar_image_scanner_recycle_image($25,$1);
     $26 = HEAP32[$24>>2]|0;
     $27 = (_zbar_scan_image($26,$19)|0);
     $28 = ((($1)) + 64|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = ((($19)) + 64|0);
     $31 = HEAP32[$30>>2]|0;
     HEAP32[$28>>2] = $31;
     HEAP32[$30>>2] = $29;
     _zbar_image_destroy($19);
     $32 = ($27|0)<(0);
     if (!($32)) {
      $33 = HEAP32[$24>>2]|0;
      $34 = (_zbar_image_scanner_get_results($33)|0);
      HEAP32[$21>>2] = $34;
      $35 = ($34|0)==(0|0);
      if (!($35)) {
       _zbar_symbol_set_ref($34,1);
      }
      $36 = (0)>(7);
      if ($36) {
       $37 = (_zbar_image_first_symbol($1)|0);
       $38 = ($37|0)==(0|0);
       if (!($38)) {
        $39 = HEAP32[32495]|0;
        $$08487 = $37;
        while(1) {
         $40 = (_zbar_symbol_get_type($$08487)|0);
         $41 = (_zbar_symbol_get_count($$08487)|0);
         $42 = (0)>(7);
         if ($42) {
          $43 = (_zbar_get_symbol_name($40)|0);
          $44 = (_zbar_symbol_get_data($$08487)|0);
          $45 = (_zbar_symbol_get_loc_size($$08487)|0);
          $46 = (_zbar_symbol_get_orientation($$08487)|0);
          $47 = (_zbar_symbol_get_quality($$08487)|0);
          $48 = ($41|0)<(0);
          $49 = ($41|0)==(0);
          $50 = $49 ? 130685 : 130689;
          $51 = $48 ? 130699 : $50;
          HEAP32[$vararg_buffer6>>2] = 130665;
          $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
          HEAP32[$vararg_ptr9>>2] = $43;
          $vararg_ptr10 = ((($vararg_buffer6)) + 8|0);
          HEAP32[$vararg_ptr10>>2] = $44;
          $vararg_ptr11 = ((($vararg_buffer6)) + 12|0);
          HEAP32[$vararg_ptr11>>2] = $45;
          $vararg_ptr12 = ((($vararg_buffer6)) + 16|0);
          HEAP32[$vararg_ptr12>>2] = $46;
          $vararg_ptr13 = ((($vararg_buffer6)) + 20|0);
          HEAP32[$vararg_ptr13>>2] = $47;
          $vararg_ptr14 = ((($vararg_buffer6)) + 24|0);
          HEAP32[$vararg_ptr14>>2] = $51;
          (_fprintf($39,130709,$vararg_buffer6)|0);
         }
         $52 = (_zbar_symbol_next($$08487)|0);
         $53 = ($52|0)==(0|0);
         if ($53) {
          break;
         } else {
          $$08487 = $52;
         }
        }
       }
      }
      $54 = ($27|0)==(0);
      if (!($54)) {
       __zbar_processor_notify($0,2);
       $55 = ((($0)) + 56|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = ($56|0)==(0|0);
       if (!($57)) {
        $58 = ((($0)) + 40|0);
        $59 = HEAP32[$58>>2]|0;
        FUNCTION_TABLE_vii[$56 & 1]($1,$59);
       }
      }
      $60 = ($4|0)==(0);
      if ($60) {
       $$283 = $1;
      } else {
       $61 = HEAP32[$28>>2]|0;
       $62 = (_zbar_image_convert($1,$4)|0);
       $63 = ($62|0)==(0|0);
       if ($63) {
        break;
       }
       $64 = ((($62)) + 64|0);
       HEAP32[$64>>2] = $61;
       _zbar_symbol_set_ref($61,1);
       $$283 = $62;
      }
      $$3 = $$283;
      break L1;
     }
    }
   } while(0);
   $98 = HEAP32[$0>>2]|0;
   $99 = ($98|0)==(1381123450);
   if (!($99)) {
    ___assert_fail((134377|0),(134405|0),150,(134420|0));
    // unreachable;
   }
   $100 = ((($0)) + 16|0);
   HEAP32[$100>>2] = -1;
   $101 = ((($0)) + 20|0);
   HEAP32[$101>>2] = 3;
   $102 = ((($0)) + 24|0);
   HEAP32[$102>>2] = 130665;
   $103 = ((($0)) + 28|0);
   HEAP32[$103>>2] = 130816;
   $104 = (0)>(0);
   if (!($104)) {
    $$080 = -1;
    STACKTOP = sp;return ($$080|0);
   }
   (__zbar_error_spew($0,0)|0);
   $$080 = -1;
   STACKTOP = sp;return ($$080|0);
  }
 } while(0);
 $65 = ((($0)) + 48|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66|0)==(0|0);
 if ($67) {
  $$0 = 0;
 } else {
  $68 = (_zbar_window_draw($66,$$3)|0);
  $69 = ($68|0)==(0);
  do {
   if (!($69)) {
    $70 = HEAP32[$65>>2]|0;
    $71 = HEAP32[$0>>2]|0;
    $72 = ($71|0)==(1381123450);
    if (!($72)) {
     ___assert_fail((130751|0),(134405|0),129,(130779|0));
     // unreachable;
    }
    $73 = HEAP32[$70>>2]|0;
    $74 = ($73|0)==(1381123450);
    if ($74) {
     $75 = ((($70)) + 12|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ((($0)) + 12|0);
     HEAP32[$77>>2] = $76;
     $78 = ((($70)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ((($0)) + 16|0);
     HEAP32[$80>>2] = $79;
     $81 = ((($70)) + 20|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = ((($0)) + 20|0);
     HEAP32[$83>>2] = $82;
     $84 = ((($70)) + 24|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ((($0)) + 24|0);
     HEAP32[$86>>2] = $85;
     $87 = ((($70)) + 28|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = ((($0)) + 28|0);
     HEAP32[$89>>2] = $88;
     $90 = ((($70)) + 32|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = ((($0)) + 32|0);
     HEAP32[$92>>2] = $91;
     HEAP32[$90>>2] = 0;
     $93 = ((($70)) + 36|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = ((($0)) + 36|0);
     HEAP32[$95>>2] = $94;
     break;
    } else {
     ___assert_fail((130788|0),(134405|0),130,(130779|0));
     // unreachable;
    }
   }
  } while(0);
  (__zbar_processor_invalidate($0)|0);
  $$0 = $68;
 }
 $96 = ($4|0)!=(0);
 $97 = ($$3|0)!=(0|0);
 $or$cond = $96 & $97;
 if (!($or$cond)) {
  $$080 = $$0;
  STACKTOP = sp;return ($$080|0);
 }
 _zbar_image_destroy($$3);
 $$080 = $$0;
 STACKTOP = sp;return ($$080|0);
}
function _zbar_processor_create($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_calloc(1,200)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$1>>2] = 1381123450;
 $3 = (_zbar_image_scanner_create()|0);
 $4 = ((($1)) + 52|0);
 HEAP32[$4>>2] = $3;
 $5 = ($3|0)==(0|0);
 if ($5) {
  _free($1);
  $$0 = 0;
  return ($$0|0);
 } else {
  $6 = ((($1)) + 88|0);
  HEAP32[$6>>2] = 0;
  (__zbar_processor_init($1)|0);
  $$0 = $1;
  return ($$0|0);
 }
 return (0)|0;
}
function _zbar_processor_init($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$08$i = 0, $$2 = 0, $$pr = 0, $$pr86 = 0, $$pr87 = 0, $$pre85 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = ((($0)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  (_zbar_processor_set_active($0,0)|0);
 }
 $6 = ((($0)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $9 = ((($0)) + 116|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  if ($11) {
   (__zbar_processor_close($0)|0);
  }
 }
 (__zbar_processor_lock($0)|0);
 $12 = HEAP32[$6>>2]|0;
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  _zbar_window_destroy($12);
  HEAP32[$6>>2] = 0;
 }
 $14 = HEAP32[$3>>2]|0;
 $15 = ($14|0)==(0|0);
 if (!($15)) {
  _zbar_video_destroy($14);
  HEAP32[$3>>2] = 0;
 }
 $16 = ($1|0)!=(0|0);
 $17 = ($2|0)!=(0);
 $or$cond = $16 | $17;
 if (!($or$cond)) {
  $$2 = 0;
  (__zbar_processor_unlock($0,0)|0);
  STACKTOP = sp;return ($$2|0);
 }
 if ($17) {
  $18 = (_zbar_window_create()|0);
  HEAP32[$6>>2] = $18;
  $19 = ($18|0)==(0|0);
  if ($19) {
   $20 = HEAP32[$0>>2]|0;
   $21 = ($20|0)==(1381123450);
   if (!($21)) {
    ___assert_fail((134377|0),(134405|0),150,(134420|0));
    // unreachable;
   }
   $22 = ((($0)) + 16|0);
   HEAP32[$22>>2] = -2;
   $23 = ((($0)) + 20|0);
   HEAP32[$23>>2] = 1;
   $24 = ((($0)) + 24|0);
   HEAP32[$24>>2] = 130837;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = 130857;
   $26 = (0)>(0);
   if (!($26)) {
    $$2 = -1;
    (__zbar_processor_unlock($0,0)|0);
    STACKTOP = sp;return ($$2|0);
   }
   (__zbar_error_spew($0,0)|0);
   $$2 = -1;
   (__zbar_processor_unlock($0,0)|0);
   STACKTOP = sp;return ($$2|0);
  }
 }
 do {
  if ($16) {
   $27 = (_zbar_video_create()|0);
   HEAP32[$3>>2] = $27;
   $28 = ($27|0)==(0|0);
   if ($28) {
    $29 = HEAP32[$0>>2]|0;
    $30 = ($29|0)==(1381123450);
    if (!($30)) {
     ___assert_fail((134377|0),(134405|0),150,(134420|0));
     // unreachable;
    }
    $31 = ((($0)) + 16|0);
    HEAP32[$31>>2] = -2;
    $32 = ((($0)) + 20|0);
    HEAP32[$32>>2] = 1;
    $33 = ((($0)) + 24|0);
    HEAP32[$33>>2] = 130837;
    $34 = ((($0)) + 28|0);
    HEAP32[$34>>2] = 130885;
    $35 = (0)>(0);
    if (!($35)) {
     $$2 = -1;
     (__zbar_processor_unlock($0,0)|0);
     STACKTOP = sp;return ($$2|0);
    }
    (__zbar_error_spew($0,0)|0);
    $$2 = -1;
    (__zbar_processor_unlock($0,0)|0);
    STACKTOP = sp;return ($$2|0);
   }
   $36 = ((($0)) + 60|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ((($0)) + 64|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $37 | $39;
   $41 = ($40|0)==(0);
   if (!($41)) {
    (_zbar_video_request_size($27,$37,$39)|0);
   }
   $42 = ((($0)) + 68|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($43|0)==(0);
   if (!($44)) {
    $45 = HEAP32[$3>>2]|0;
    (_zbar_video_request_interface($45,$43)|0);
   }
   $46 = ((($0)) + 72|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==(0);
   if ($48) {
    label = 29;
   } else {
    $49 = HEAP32[$3>>2]|0;
    $50 = (_zbar_video_request_iomode($49,$47)|0);
    $51 = ($50|0)==(0);
    if ($51) {
     label = 29;
    }
   }
   if ((label|0) == 29) {
    $52 = HEAP32[$3>>2]|0;
    $53 = (_zbar_video_open($52,$1)|0);
    $54 = ($53|0)==(0);
    if ($54) {
     break;
    }
   }
   $55 = HEAP32[$3>>2]|0;
   $56 = HEAP32[$0>>2]|0;
   $57 = ($56|0)==(1381123450);
   if (!($57)) {
    ___assert_fail((130751|0),(134405|0),129,(130779|0));
    // unreachable;
   }
   $58 = HEAP32[$55>>2]|0;
   $59 = ($58|0)==(1381123450);
   if (!($59)) {
    ___assert_fail((130788|0),(134405|0),130,(130779|0));
    // unreachable;
   }
   $60 = ((($55)) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ((($0)) + 12|0);
   HEAP32[$62>>2] = $61;
   $63 = ((($55)) + 16|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ((($0)) + 16|0);
   HEAP32[$65>>2] = $64;
   $66 = ((($55)) + 20|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ((($0)) + 20|0);
   HEAP32[$68>>2] = $67;
   $69 = ((($55)) + 24|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ((($0)) + 24|0);
   HEAP32[$71>>2] = $70;
   $72 = ((($55)) + 28|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ((($0)) + 28|0);
   HEAP32[$74>>2] = $73;
   $75 = ((($55)) + 32|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ((($0)) + 32|0);
   HEAP32[$77>>2] = $76;
   HEAP32[$75>>2] = 0;
   $78 = ((($55)) + 36|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ((($0)) + 36|0);
   HEAP32[$80>>2] = $79;
   $$2 = -1;
   (__zbar_processor_unlock($0,0)|0);
   STACKTOP = sp;return ($$2|0);
  }
 } while(0);
 $81 = ((($0)) + 88|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = ($82|0)==(0);
 L59: do {
  if (!($83)) {
   $84 = HEAP32[$3>>2]|0;
   $85 = ($84|0)==(0|0);
   do {
    if (!($85)) {
     $86 = (_zbar_video_get_fd($84)|0);
     $87 = ($86|0)<(0);
     if (!($87)) {
      $$pr = HEAP32[$81>>2]|0;
      $98 = ($$pr|0)==(0);
      if ($98) {
       break L59;
      } else {
       break;
      }
     }
     $88 = HEAP32[$0>>2]|0;
     $89 = ($88|0)==(1381123450);
     if (!($89)) {
      ___assert_fail((134377|0),(134405|0),150,(134420|0));
      // unreachable;
     }
     $90 = (___errno_location()|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = ((($0)) + 12|0);
     HEAP32[$92>>2] = $91;
     $93 = ((($0)) + 16|0);
     HEAP32[$93>>2] = -1;
     $94 = ((($0)) + 20|0);
     HEAP32[$94>>2] = 5;
     $95 = ((($0)) + 24|0);
     HEAP32[$95>>2] = 130837;
     $96 = ((($0)) + 28|0);
     HEAP32[$96>>2] = 130912;
     $97 = (0)>(0);
     if (!($97)) {
      $$2 = -1;
      (__zbar_processor_unlock($0,0)|0);
      STACKTOP = sp;return ($$2|0);
     }
     (__zbar_error_spew($0,0)|0);
     $$2 = -1;
     (__zbar_processor_unlock($0,0)|0);
     STACKTOP = sp;return ($$2|0);
    }
   } while(0);
   $99 = HEAP32[$6>>2]|0;
   $100 = ($99|0)==(0|0);
   if ($100) {
    $101 = HEAP32[$3>>2]|0;
    $102 = ($101|0)==(0|0);
    if ($102) {
     $$2 = 0;
     (__zbar_processor_unlock($0,0)|0);
     STACKTOP = sp;return ($$2|0);
    }
   }
   $103 = HEAP32[$0>>2]|0;
   $104 = ($103|0)==(1381123450);
   if (!($104)) {
    ___assert_fail((134377|0),(134405|0),150,(134420|0));
    // unreachable;
   }
   $105 = (___errno_location()|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = ((($0)) + 12|0);
   HEAP32[$107>>2] = $106;
   $108 = ((($0)) + 16|0);
   HEAP32[$108>>2] = -1;
   $109 = ((($0)) + 20|0);
   HEAP32[$109>>2] = 5;
   $110 = ((($0)) + 24|0);
   HEAP32[$110>>2] = 130837;
   $111 = ((($0)) + 28|0);
   HEAP32[$111>>2] = 130934;
   $112 = (0)>(0);
   if (!($112)) {
    $$2 = -1;
    (__zbar_processor_unlock($0,0)|0);
    STACKTOP = sp;return ($$2|0);
   }
   (__zbar_error_spew($0,0)|0);
   $$2 = -1;
   (__zbar_processor_unlock($0,0)|0);
   STACKTOP = sp;return ($$2|0);
  }
 } while(0);
 $$pr86 = HEAP32[$6>>2]|0;
 $113 = ($$pr86|0)==(0|0);
 if (!($113)) {
  $114 = HEAP32[$3>>2]|0;
  $115 = ($114|0)==(0|0);
  if ($115) {
   $$0$i = 480;$$08$i = 640;
  } else {
   $116 = (_zbar_video_get_width($114)|0);
   $117 = HEAP32[$3>>2]|0;
   $118 = (_zbar_video_get_height($117)|0);
   $$0$i = $118;$$08$i = $116;
  }
  $119 = (__zbar_processor_open($0,130956,$$08$i,$$0$i)|0);
  $120 = ($119|0)==(0);
  if (!($120)) {
   $$2 = $119;
   (__zbar_processor_unlock($0,0)|0);
   STACKTOP = sp;return ($$2|0);
  }
 }
 $$pr87 = HEAP32[$3>>2]|0;
 $121 = ($$pr87|0)==(0|0);
 if ($121) {
  $$2 = 0;
  (__zbar_processor_unlock($0,0)|0);
  STACKTOP = sp;return ($$2|0);
 }
 $122 = ((($0)) + 76|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = ($123|0)==(0);
 if (!($124)) {
  $125 = (_zbar_video_init($$pr87,$123)|0);
  $126 = ($125|0)==(0);
  if ($126) {
   $$2 = 0;
   (__zbar_processor_unlock($0,0)|0);
   STACKTOP = sp;return ($$2|0);
  }
  $127 = HEAP32[$3>>2]|0;
  $128 = HEAP32[$0>>2]|0;
  $129 = ($128|0)==(1381123450);
  if (!($129)) {
   ___assert_fail((130751|0),(134405|0),129,(130779|0));
   // unreachable;
  }
  $130 = HEAP32[$127>>2]|0;
  $131 = ($130|0)==(1381123450);
  if (!($131)) {
   ___assert_fail((130788|0),(134405|0),130,(130779|0));
   // unreachable;
  }
  $132 = ((($127)) + 12|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = ((($0)) + 12|0);
  HEAP32[$134>>2] = $133;
  $135 = ((($127)) + 16|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = ((($0)) + 16|0);
  HEAP32[$137>>2] = $136;
  $138 = ((($127)) + 20|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = ((($0)) + 20|0);
  HEAP32[$140>>2] = $139;
  $141 = ((($127)) + 24|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = ((($0)) + 24|0);
  HEAP32[$143>>2] = $142;
  $144 = ((($127)) + 28|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = ((($0)) + 28|0);
  HEAP32[$146>>2] = $145;
  $147 = ((($127)) + 32|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = ((($0)) + 32|0);
  HEAP32[$149>>2] = $148;
  HEAP32[$147>>2] = 0;
  $150 = ((($127)) + 36|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = ((($0)) + 36|0);
  HEAP32[$152>>2] = $151;
  $$2 = -1;
  (__zbar_processor_unlock($0,0)|0);
  STACKTOP = sp;return ($$2|0);
 }
 $153 = HEAP32[$6>>2]|0;
 $154 = ($153|0)==(0|0);
 do {
  if ($154) {
   $158 = $$pr87;
  } else {
   $155 = (_zbar_negotiate_format($$pr87,$153)|0);
   $156 = ($155|0)==(0);
   if ($156) {
    $$2 = 0;
    (__zbar_processor_unlock($0,0)|0);
    STACKTOP = sp;return ($$2|0);
   } else {
    $157 = HEAP32[32495]|0;
    (_fwrite(130976,83,1,$157)|0);
    $$pre85 = HEAP32[$3>>2]|0;
    $158 = $$pre85;
    break;
   }
  }
 } while(0);
 $159 = (_zbar_negotiate_format($158,0)|0);
 $160 = ($159|0)==(0);
 if ($160) {
  $$2 = 0;
  (__zbar_processor_unlock($0,0)|0);
  STACKTOP = sp;return ($$2|0);
 }
 $161 = (0)>(0);
 if ($161) {
  $162 = HEAP32[32495]|0;
  $163 = HEAP32[$3>>2]|0;
  $164 = ($163|0)==(0|0);
  $165 = $164 ? 131060 : 131074;
  HEAP32[$vararg_buffer>>2] = 130837;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $165;
  (_fprintf($162,131086,$vararg_buffer)|0);
 }
 $166 = HEAP32[$0>>2]|0;
 $167 = ($166|0)==(1381123450);
 if (!($167)) {
  ___assert_fail((134377|0),(134405|0),150,(134420|0));
  // unreachable;
 }
 $168 = ((($0)) + 16|0);
 HEAP32[$168>>2] = -1;
 $169 = ((($0)) + 20|0);
 HEAP32[$169>>2] = 3;
 $170 = ((($0)) + 24|0);
 HEAP32[$170>>2] = 130837;
 $171 = ((($0)) + 28|0);
 HEAP32[$171>>2] = 131122;
 $172 = (0)>(0);
 if (!($172)) {
  $$2 = -1;
  (__zbar_processor_unlock($0,0)|0);
  STACKTOP = sp;return ($$2|0);
 }
 (__zbar_error_spew($0,0)|0);
 $$2 = -1;
 (__zbar_processor_unlock($0,0)|0);
 STACKTOP = sp;return ($$2|0);
}
function _zbar_processor_set_active($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (__zbar_processor_lock($0)|0);
 $2 = ((($0)) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $6 = ($5|0)==(1381123450);
  if (!($6)) {
   ___assert_fail((134377|0),(134405|0),150,(134420|0));
   // unreachable;
  }
  $7 = ((($0)) + 16|0);
  HEAP32[$7>>2] = -1;
  $8 = ((($0)) + 20|0);
  HEAP32[$8>>2] = 4;
  $9 = ((($0)) + 24|0);
  HEAP32[$9>>2] = 131149;
  $10 = ((($0)) + 28|0);
  HEAP32[$10>>2] = 131175;
  $11 = (0)>(0);
  if (!($11)) {
   $$3 = -1;
   (__zbar_processor_unlock($0,0)|0);
   return ($$3|0);
  }
  (__zbar_error_spew($0,0)|0);
  $$3 = -1;
  (__zbar_processor_unlock($0,0)|0);
  return ($$3|0);
 }
 $12 = ((($0)) + 52|0);
 $13 = HEAP32[$12>>2]|0;
 _zbar_image_scanner_enable_cache($13,$1);
 $14 = HEAP32[$2>>2]|0;
 $15 = (_zbar_video_enable($14,$1)|0);
 $16 = ($15|0)==(0);
 do {
  if ($16) {
   $17 = ((($0)) + 96|0);
   HEAP32[$17>>2] = $1;
   $18 = (__zbar_processor_enable($0)|0);
   $$0 = $18;$$pre$phiZ2D = $17;
  } else {
   $19 = HEAP32[$2>>2]|0;
   $20 = HEAP32[$0>>2]|0;
   $21 = ($20|0)==(1381123450);
   if (!($21)) {
    ___assert_fail((130751|0),(134405|0),129,(130779|0));
    // unreachable;
   }
   $22 = HEAP32[$19>>2]|0;
   $23 = ($22|0)==(1381123450);
   if ($23) {
    $24 = ((($19)) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($0)) + 12|0);
    HEAP32[$26>>2] = $25;
    $27 = ((($19)) + 16|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ((($0)) + 16|0);
    HEAP32[$29>>2] = $28;
    $30 = ((($19)) + 20|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($0)) + 20|0);
    HEAP32[$32>>2] = $31;
    $33 = ((($19)) + 24|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($0)) + 24|0);
    HEAP32[$35>>2] = $34;
    $36 = ((($19)) + 28|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ((($0)) + 28|0);
    HEAP32[$38>>2] = $37;
    $39 = ((($19)) + 32|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ((($0)) + 32|0);
    HEAP32[$41>>2] = $40;
    HEAP32[$39>>2] = 0;
    $42 = ((($19)) + 36|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ((($0)) + 36|0);
    HEAP32[$44>>2] = $43;
    $$pre = ((($0)) + 96|0);
    $$0 = $15;$$pre$phiZ2D = $$pre;
    break;
   } else {
    ___assert_fail((130788|0),(134405|0),130,(130779|0));
    // unreachable;
   }
  }
 } while(0);
 $45 = HEAP32[$$pre$phiZ2D>>2]|0;
 $46 = ($45|0)==(0);
 if ($46) {
  $47 = ((($0)) + 48|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)==(0|0);
  if ($49) {
   $$2 = $$0;
  } else {
   $50 = (_zbar_window_draw($48,0)|0);
   $51 = ($50|0)==(0);
   $52 = ($$0|0)!=(0);
   $or$cond = $52 | $51;
   do {
    if ($or$cond) {
     $$1 = $$0;
    } else {
     $53 = HEAP32[$47>>2]|0;
     $54 = HEAP32[$0>>2]|0;
     $55 = ($54|0)==(1381123450);
     if (!($55)) {
      ___assert_fail((130751|0),(134405|0),129,(130779|0));
      // unreachable;
     }
     $56 = HEAP32[$53>>2]|0;
     $57 = ($56|0)==(1381123450);
     if ($57) {
      $58 = ((($53)) + 12|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = ((($0)) + 12|0);
      HEAP32[$60>>2] = $59;
      $61 = ((($53)) + 16|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ((($0)) + 16|0);
      HEAP32[$63>>2] = $62;
      $64 = ((($53)) + 20|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ((($0)) + 20|0);
      HEAP32[$66>>2] = $65;
      $67 = ((($53)) + 24|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ((($0)) + 24|0);
      HEAP32[$69>>2] = $68;
      $70 = ((($53)) + 28|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = ((($0)) + 28|0);
      HEAP32[$72>>2] = $71;
      $73 = ((($53)) + 32|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = ((($0)) + 32|0);
      HEAP32[$75>>2] = $74;
      HEAP32[$73>>2] = 0;
      $76 = ((($53)) + 36|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = ((($0)) + 36|0);
      HEAP32[$78>>2] = $77;
      $$1 = -1;
      break;
     } else {
      ___assert_fail((130788|0),(134405|0),130,(130779|0));
      // unreachable;
     }
    }
   } while(0);
   (__zbar_processor_invalidate($0)|0);
   $$2 = $$1;
  }
 } else {
  $$2 = $$0;
 }
 $79 = ((($0)) + 144|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ($80|0)==(0);
 if ($81) {
  $$3 = $$2;
  (__zbar_processor_unlock($0,0)|0);
  return ($$3|0);
 }
 $82 = ((($0)) + 152|0);
 __zbar_event_trigger($82);
 $$3 = $$2;
 (__zbar_processor_unlock($0,0)|0);
 return ($$3|0);
}
function _zbar_process_image($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (__zbar_processor_lock($0)|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($0)) + 48|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = (_zbar_image_get_width($1)|0);
   $7 = (_zbar_image_get_height($1)|0);
   $8 = (__zbar_processor_set_size($0,$6,$7)|0);
   $9 = ($8|0)==(0);
   if (!($9)) {
    $$1 = $8;
    (__zbar_processor_unlock($0,0)|0);
    return ($$1|0);
   }
  }
 }
 $10 = ((($0)) + 52|0);
 $11 = HEAP32[$10>>2]|0;
 _zbar_image_scanner_enable_cache($11,0);
 $12 = (__zbar_process_image($0,$1)|0);
 $13 = ((($0)) + 96|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  $$1 = $12;
  (__zbar_processor_unlock($0,0)|0);
  return ($$1|0);
 }
 $16 = HEAP32[$10>>2]|0;
 _zbar_image_scanner_enable_cache($16,1);
 $$1 = $12;
 (__zbar_processor_unlock($0,0)|0);
 return ($$1|0);
}
function __zbar_processor_lock($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 172|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 176|0);
  HEAP32[$4>>2] = 0;
  $storemerge = 1;
 } else {
  $5 = (($2) + 1)|0;
  $storemerge = $5;
 }
 HEAP32[$1>>2] = $storemerge;
 return 0;
}
function __zbar_processor_unlock($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$in$i = 0, $$02531$i = 0, $$02531$i$phi = 0, $$1$i = 0, $$130$i = 0, $$132$i = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 172|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if (!($4)) {
  ___assert_fail((131203|0),(131224|0),126,(131246|0));
  // unreachable;
 }
 $5 = ($1|0)==(0);
 $6 = (($3) + -1)|0;
 $storemerge = $5 ? $6 : 0;
 HEAP32[$2>>2] = $storemerge;
 $7 = ($storemerge|0)==(0);
 if (!($7)) {
  return 0;
 }
 $8 = ((($0)) + 188|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 $11 = ((($0)) + 180|0);
 $$0$in$i = $10 ? $11 : $9;
 $$130$i = HEAP32[$$0$in$i>>2]|0;
 $12 = ($$130$i|0)==(0|0);
 if ($12) {
  return 0;
 }
 $$02531$i = $9;$$132$i = $$130$i;
 while(1) {
  $13 = ((($$132$i)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 & 3;
  $16 = ($15|0)==(0);
  if ($16) {
   break;
  }
  HEAP32[$8>>2] = $$132$i;
  $$1$i = HEAP32[$$132$i>>2]|0;
  $17 = ($$1$i|0)==(0|0);
  if ($17) {
   label = 14;
   break;
  } else {
   $$02531$i$phi = $$132$i;$$132$i = $$1$i;$$02531$i = $$02531$i$phi;
  }
 }
 if ((label|0) == 14) {
  return 0;
 }
 $18 = ($$02531$i|0)==(0|0);
 $19 = HEAP32[$$132$i>>2]|0;
 if ($18) {
  $20 = $19;
  HEAP32[$11>>2] = $19;
  $22 = $20;
 } else {
  HEAP32[$$02531$i>>2] = $19;
  $$pre$i = HEAP32[$$132$i>>2]|0;
  $22 = $$pre$i;
 }
 $21 = ($22|0)==(0|0);
 if ($21) {
  $23 = ((($0)) + 184|0);
  HEAP32[$23>>2] = $$02531$i;
 }
 HEAP32[$$132$i>>2] = 0;
 HEAP32[$2>>2] = 1;
 $24 = ((($$132$i)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($0)) + 176|0);
 HEAP32[$26>>2] = $25;
 $27 = ((($$132$i)) + 4|0);
 __zbar_event_trigger($27);
 return 0;
}
function __zbar_processor_notify($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$014 = 0, $$015 = 0, $$02531$i = 0, $$02531$i$phi = 0, $$1$i = 0, $$132$i = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $brmerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 188|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 180|0);
 $$014 = HEAP32[$3>>2]|0;
 $4 = ($$014|0)==(0|0);
 if (!($4)) {
  $5 = $1 ^ -1;
  $6 = $1 & 128;
  $$015 = $$014;
  while(1) {
   $7 = ((($$015)) + 16|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = $8 & $5;
   $10 = $9 | $6;
   HEAP32[$7>>2] = $10;
   $$0 = HEAP32[$$015>>2]|0;
   $11 = ($$0|0)==(0|0);
   if ($11) {
    break;
   } else {
    $$015 = $$0;
   }
  }
 }
 $12 = ((($0)) + 172|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0);
 $brmerge = $14 | $4;
 if ($brmerge) {
  return;
 }
 $$02531$i = 0;$$132$i = $$014;
 while(1) {
  $15 = ((($$132$i)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16 & 3;
  $18 = ($17|0)==(0);
  if ($18) {
   break;
  }
  HEAP32[$2>>2] = $$132$i;
  $$1$i = HEAP32[$$132$i>>2]|0;
  $19 = ($$1$i|0)==(0|0);
  if ($19) {
   label = 14;
   break;
  } else {
   $$02531$i$phi = $$132$i;$$132$i = $$1$i;$$02531$i = $$02531$i$phi;
  }
 }
 if ((label|0) == 14) {
  return;
 }
 $20 = ($$02531$i|0)==(0|0);
 $21 = HEAP32[$$132$i>>2]|0;
 if ($20) {
  $22 = $21;
  HEAP32[$3>>2] = $21;
  $24 = $22;
 } else {
  HEAP32[$$02531$i>>2] = $21;
  $$pre$i = HEAP32[$$132$i>>2]|0;
  $24 = $$pre$i;
 }
 $23 = ($24|0)==(0|0);
 if ($23) {
  $25 = ((($0)) + 184|0);
  HEAP32[$25>>2] = $$02531$i;
 }
 HEAP32[$$132$i>>2] = 0;
 HEAP32[$12>>2] = 1;
 $26 = ((($$132$i)) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($0)) + 176|0);
 HEAP32[$28>>2] = $27;
 $29 = ((($$132$i)) + 4|0);
 __zbar_event_trigger($29);
 return;
}
function __zbar_refcnt_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _zbar_window_create() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,148)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$0>>2] = 1381123450;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 2;
 $3 = ((($0)) + 44|0);
 HEAP32[$3>>2] = 1;
 $$0 = $0;
 return ($$0|0);
}
function _zbar_window_destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_zbar_window_attach($0,0,0)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1381123450);
 if (!($2)) {
  ___assert_fail((134377|0),(134405|0),218,(131372|0));
  // unreachable;
 }
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  _free($4);
  HEAP32[$3>>2] = 0;
 }
 $6 = ((($0)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  _free($0);
  return;
 }
 _free($7);
 _free($0);
 return;
}
function _zbar_window_attach($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 140|0);
 $4 = ((($0)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = ((($5)) + 44|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + -1)|0;
  HEAP32[$7>>2] = $9;
  $10 = ($8|0)>(0);
  if (!($10)) {
   ___assert_fail((134216|0),(134224|0),87,(134240|0));
   // unreachable;
  }
  $11 = ($9|0)==(0);
  if ($11) {
   $12 = ((($5)) + 40|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0|0);
   if (!($14)) {
    FUNCTION_TABLE_vi[$13 & 7]($5);
   }
   $15 = ((($5)) + 48|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(0|0);
   if ($17) {
    __zbar_image_free($5);
   }
  }
 }
 HEAP32[$4>>2] = 0;
 $18 = ((($0)) + 144|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 if (!($20)) {
  (FUNCTION_TABLE_ii[$19 & 3]($0)|0);
  HEAP32[$18>>2] = 0;
  HEAP32[$3>>2] = 0;
 }
 $21 = ((($0)) + 112|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 if (!($23)) {
  _free($22);
  HEAP32[$21>>2] = 0;
 }
 $24 = ((($0)) + 68|0);
 $25 = ((($0)) + 108|0);
 HEAP32[$25>>2] = 0;
 $26 = ((($0)) + 104|0);
 HEAP32[$26>>2] = 0;
 $27 = ((($0)) + 64|0);
 ;HEAP32[$24>>2]=0|0;HEAP32[$24+4>>2]=0|0;HEAP32[$24+8>>2]=0|0;HEAP32[$24+12>>2]=0|0;HEAP32[$24+16>>2]=0|0;
 HEAP32[$27>>2] = 32768;
 $28 = ((($0)) + 60|0);
 HEAP32[$28>>2] = 32768;
 $29 = ((($0)) + 92|0);
 HEAP32[$29>>2] = 1;
 $30 = ((($0)) + 88|0);
 HEAP32[$30>>2] = 1;
 $31 = (__zbar_window_attach($0,$1,$2)|0);
 return ($31|0);
}
function _zbar_window_draw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 140|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 $$0 = $4 ? 0 : $1;
 $5 = ($$0|0)==(0|0);
 do {
  if (!($5)) {
   $6 = ((($$0)) + 44|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($7) + 1)|0;
   HEAP32[$6>>2] = $8;
   $9 = ($7|0)>(-2);
   if (!($9)) {
    ___assert_fail((134216|0),(134224|0),87,(134240|0));
    // unreachable;
   }
   $10 = ((($$0)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($0)) + 72|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($11|0)==($13|0);
   if ($14) {
    $15 = ((($$0)) + 8|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($0)) + 76|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($16|0)==($18|0);
    if ($19) {
     break;
    }
   }
   $20 = ((($0)) + 80|0);
   HEAP32[$20>>2] = 0;
  }
 } while(0);
 $21 = ((($0)) + 40|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 if ($23) {
  HEAP32[$21>>2] = $$0;
  return 0;
 }
 $24 = ((($22)) + 44|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + -1)|0;
 HEAP32[$24>>2] = $26;
 $27 = ($25|0)>(0);
 if (!($27)) {
  ___assert_fail((134216|0),(134224|0),87,(134240|0));
  // unreachable;
 }
 $28 = ($26|0)==(0);
 if (!($28)) {
  HEAP32[$21>>2] = $$0;
  return 0;
 }
 $29 = ((($22)) + 40|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0|0);
 if (!($31)) {
  FUNCTION_TABLE_vi[$30 & 7]($22);
 }
 $32 = ((($22)) + 48|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0|0);
 if (!($34)) {
  HEAP32[$21>>2] = $$0;
  return 0;
 }
 __zbar_image_free($22);
 HEAP32[$21>>2] = $$0;
 return 0;
}
function _zbar_video_create() {
 var $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,140)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$2 = 0;
  return ($$2|0);
 }
 HEAP32[$0>>2] = 1381123450;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 1;
 $3 = ((($0)) + 40|0);
 HEAP32[$3>>2] = -1;
 $4 = ((($0)) + 92|0);
 HEAP32[$4>>2] = 4;
 $5 = (_calloc(4,4)|0);
 $6 = ((($0)) + 96|0);
 HEAP32[$6>>2] = $5;
 $7 = ($5|0)==(0|0);
 if ($7) {
  _zbar_video_destroy($0);
  $$2 = 0;
  return ($$2|0);
 }
 $8 = (_zbar_image_create()|0);
 $9 = HEAP32[$6>>2]|0;
 HEAP32[$9>>2] = $8;
 $10 = ($8|0)==(0|0);
 if (!($10)) {
  $11 = ((($8)) + 44|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($8)) + 40|0);
  HEAP32[$12>>2] = 2;
  $13 = ((($8)) + 52|0);
  HEAP32[$13>>2] = 0;
  $14 = ((($8)) + 48|0);
  HEAP32[$14>>2] = $0;
  $15 = (_zbar_image_create()|0);
  $16 = HEAP32[$6>>2]|0;
  $17 = ((($16)) + 4|0);
  HEAP32[$17>>2] = $15;
  $18 = ($15|0)==(0|0);
  if (!($18)) {
   $19 = ((($15)) + 44|0);
   HEAP32[$19>>2] = 0;
   $20 = ((($15)) + 40|0);
   HEAP32[$20>>2] = 2;
   $21 = ((($15)) + 52|0);
   HEAP32[$21>>2] = 1;
   $22 = ((($15)) + 48|0);
   HEAP32[$22>>2] = $0;
   $23 = (_zbar_image_create()|0);
   $24 = HEAP32[$6>>2]|0;
   $25 = ((($24)) + 8|0);
   HEAP32[$25>>2] = $23;
   $26 = ($23|0)==(0|0);
   if (!($26)) {
    $27 = ((($23)) + 44|0);
    HEAP32[$27>>2] = 0;
    $28 = ((($23)) + 40|0);
    HEAP32[$28>>2] = 2;
    $29 = ((($23)) + 52|0);
    HEAP32[$29>>2] = 2;
    $30 = ((($23)) + 48|0);
    HEAP32[$30>>2] = $0;
    $31 = (_zbar_image_create()|0);
    $32 = HEAP32[$6>>2]|0;
    $33 = ((($32)) + 12|0);
    HEAP32[$33>>2] = $31;
    $34 = ($31|0)==(0|0);
    if (!($34)) {
     $35 = ((($31)) + 44|0);
     HEAP32[$35>>2] = 0;
     $36 = ((($31)) + 40|0);
     HEAP32[$36>>2] = 2;
     $37 = ((($31)) + 52|0);
     HEAP32[$37>>2] = 3;
     $38 = ((($31)) + 48|0);
     HEAP32[$38>>2] = $0;
     $$2 = $0;
     return ($$2|0);
    }
   }
  }
 }
 _zbar_video_destroy($0);
 $$2 = 0;
 return ($$2|0);
}
function _zbar_video_destroy($0) {
 $0 = $0|0;
 var $$035$i$i = 0, $$pre = 0, $$pre25 = 0, $$pre26 = 0, $$pre27 = 0, $$pre28 = 0, $$pre41$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 52|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 do {
  if (!($3)) {
   $4 = ((($0)) + 60|0);
   $5 = HEAP8[$4>>0]|0;
   $6 = $5 & 2;
   $7 = ($6<<24>>24)==(0);
   if (!($7)) {
    $8 = $5 & -3;
    HEAP8[$4>>0] = $8;
    $9 = ((($0)) + 92|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($10|0)>(0);
    if ($11) {
     $12 = ((($0)) + 96|0);
     $$pre41$i$i = HEAP32[$12>>2]|0;
     $$035$i$i = 0;
     while(1) {
      $13 = (($$pre41$i$i) + ($$035$i$i<<2)|0);
      $14 = HEAP32[$13>>2]|0;
      $15 = ((($14)) + 56|0);
      HEAP32[$15>>2] = 0;
      $16 = (($$035$i$i) + 1)|0;
      $exitcond$i = ($16|0)==($10|0);
      if ($exitcond$i) {
       break;
      } else {
       $$035$i$i = $16;
      }
     }
    }
    $17 = ((($0)) + 104|0);
    HEAP32[$17>>2] = 0;
    $18 = ((($0)) + 100|0);
    HEAP32[$18>>2] = 0;
    $19 = ((($0)) + 128|0);
    $20 = HEAP32[$19>>2]|0;
    (FUNCTION_TABLE_ii[$20 & 3]($0)|0);
    $$pre = HEAP32[$1>>2]|0;
    $21 = ($$pre|0)==(0);
    if ($21) {
     break;
    }
   }
   $22 = ((($0)) + 120|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)==(0|0);
   if (!($24)) {
    (FUNCTION_TABLE_ii[$23 & 3]($0)|0);
    HEAP32[$22>>2] = 0;
   }
   $25 = (0)>(0);
   if ($25) {
    $26 = HEAP32[32495]|0;
    $27 = ((($0)) + 40|0);
    $28 = HEAP32[$27>>2]|0;
    HEAP32[$vararg_buffer>>2] = 131356;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $28;
    (_fprintf($26,131329,$vararg_buffer)|0);
   }
   HEAP32[$1>>2] = 0;
  }
 } while(0);
 $29 = ((($0)) + 96|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0|0);
 if (!($31)) {
  $32 = HEAP32[$30>>2]|0;
  $33 = ($32|0)==(0|0);
  if ($33) {
   $35 = $30;
  } else {
   __zbar_image_free($32);
   $$pre25 = HEAP32[$29>>2]|0;
   $35 = $$pre25;
  }
  $34 = ((($35)) + 4|0);
  $36 = HEAP32[$34>>2]|0;
  $37 = ($36|0)==(0|0);
  if ($37) {
   $63 = $35;
  } else {
   __zbar_image_free($36);
   $$pre26 = HEAP32[$29>>2]|0;
   $63 = $$pre26;
  }
  $62 = ((($63)) + 8|0);
  $64 = HEAP32[$62>>2]|0;
  $65 = ($64|0)==(0|0);
  if ($65) {
   $67 = $63;
  } else {
   __zbar_image_free($64);
   $$pre27 = HEAP32[$29>>2]|0;
   $67 = $$pre27;
  }
  $66 = ((($67)) + 12|0);
  $68 = HEAP32[$66>>2]|0;
  $69 = ($68|0)==(0|0);
  if ($69) {
   $70 = $67;
  } else {
   __zbar_image_free($68);
   $$pre28 = HEAP32[$29>>2]|0;
   $70 = $$pre28;
  }
  _free($70);
 }
 $38 = ((($0)) + 108|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(0|0);
 if (!($40)) {
  $42 = $39;
  while(1) {
   $41 = ((($42)) + 56|0);
   $43 = HEAP32[$41>>2]|0;
   HEAP32[$38>>2] = $43;
   $44 = ((($42)) + 12|0);
   $45 = HEAP32[$44>>2]|0;
   _free($45);
   _free($42);
   $46 = HEAP32[$38>>2]|0;
   $47 = ($46|0)==(0|0);
   if ($47) {
    break;
   } else {
    $42 = $46;
   }
  }
 }
 $48 = ((($0)) + 84|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)==(0|0);
 if (!($50)) {
  _free($49);
 }
 $51 = ((($0)) + 72|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)==(0|0);
 if (!($53)) {
  _free($52);
 }
 $54 = HEAP32[$0>>2]|0;
 $55 = ($54|0)==(1381123450);
 if (!($55)) {
  ___assert_fail((134377|0),(134405|0),218,(131372|0));
  // unreachable;
 }
 $56 = ((($0)) + 8|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($57|0)==(0|0);
 if (!($58)) {
  _free($57);
  HEAP32[$56>>2] = 0;
 }
 $59 = ((($0)) + 32|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60|0)==(0|0);
 if ($61) {
  _free($0);
  STACKTOP = sp;return;
 }
 _free($60);
 _free($0);
 STACKTOP = sp;return;
}
function __zbar_video_recycle_image($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  ___assert_fail((131269|0),(131273|0),36,(131286|0));
  // unreachable;
 }
 $4 = ((($0)) + 52|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(-1);
 if (!($6)) {
  ___assert_fail((131312|0),(131273|0),37,(131286|0));
  // unreachable;
 }
 $7 = ((($2)) + 96|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($5<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==($0|0);
 if (!($11)) {
  HEAP32[$9>>2] = $0;
 }
 $12 = ((($2)) + 60|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13 & 2;
 $15 = ($14<<24>>24)==(0);
 if ($15) {
  return;
 }
 $16 = ((($2)) + 132|0);
 $17 = HEAP32[$16>>2]|0;
 (FUNCTION_TABLE_iii[$17 & 7]($2,$0)|0);
 return;
}
function _zbar_video_open($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$035$i = 0, $$pre41$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 60|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 & 2;
 $5 = ($4<<24>>24)==(0);
 if (!($5)) {
  $6 = $3 & -3;
  HEAP8[$2>>0] = $6;
  $7 = ((($0)) + 92|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)>(0);
  if ($9) {
   $10 = ((($0)) + 96|0);
   $$pre41$i = HEAP32[$10>>2]|0;
   $$035$i = 0;
   while(1) {
    $11 = (($$pre41$i) + ($$035$i<<2)|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($12)) + 56|0);
    HEAP32[$13>>2] = 0;
    $14 = (($$035$i) + 1)|0;
    $exitcond = ($14|0)==($8|0);
    if ($exitcond) {
     break;
    } else {
     $$035$i = $14;
    }
   }
  }
  $15 = ((($0)) + 104|0);
  HEAP32[$15>>2] = 0;
  $16 = ((($0)) + 100|0);
  HEAP32[$16>>2] = 0;
  $17 = ((($0)) + 128|0);
  $18 = HEAP32[$17>>2]|0;
  (FUNCTION_TABLE_ii[$18 & 3]($0)|0);
 }
 $19 = ((($0)) + 52|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0);
 if (!($21)) {
  $22 = ((($0)) + 120|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(0|0);
  if (!($24)) {
   (FUNCTION_TABLE_ii[$23 & 3]($0)|0);
   HEAP32[$22>>2] = 0;
  }
  $25 = (0)>(0);
  if ($25) {
   $26 = HEAP32[32495]|0;
   $27 = ((($0)) + 40|0);
   $28 = HEAP32[$27>>2]|0;
   HEAP32[$vararg_buffer>>2] = 131356;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $28;
   (_fprintf($26,131329,$vararg_buffer)|0);
  }
  HEAP32[$19>>2] = 0;
 }
 $29 = ($1|0)==(0|0);
 if ($29) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $30 = HEAP8[$1>>0]|0;
 $31 = ($30&255)<(16);
 if (!($31)) {
  $32 = (__zbar_video_open($0,$1)|0);
  $$0 = $32;
  STACKTOP = sp;return ($$0|0);
 }
 $33 = $30&255;
 $34 = (($33) + 48)|0;
 $35 = (___strdup(131384)|0);
 $36 = $34&255;
 $37 = ((($35)) + 10|0);
 HEAP8[$37>>0] = $36;
 $38 = (__zbar_video_open($0,$35)|0);
 $39 = ($35|0)==(0|0);
 if ($39) {
  $$0 = $38;
  STACKTOP = sp;return ($$0|0);
 }
 _free($35);
 $$0 = $38;
 STACKTOP = sp;return ($$0|0);
}
function _zbar_video_enable($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$03336 = 0, $$035 = 0, $$2 = 0, $$pre = 0, $$pre41 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 60|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3&255) >>> 1;
 $5 = $4 & 1;
 $6 = $5&255;
 $7 = ($6|0)==($1|0);
 if ($7) {
  $$2 = 0;
  return ($$2|0);
 }
 $8 = ($1|0)==(0);
 if ($8) {
  $46 = $3 & -3;
  HEAP8[$2>>0] = $46;
  $47 = ((($0)) + 92|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)>(0);
  if ($49) {
   $50 = ((($0)) + 96|0);
   $$pre41 = HEAP32[$50>>2]|0;
   $$035 = 0;
   while(1) {
    $51 = (($$pre41) + ($$035<<2)|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ((($52)) + 56|0);
    HEAP32[$53>>2] = 0;
    $54 = (($$035) + 1)|0;
    $55 = ($54|0)<($48|0);
    if ($55) {
     $$035 = $54;
    } else {
     break;
    }
   }
  }
  $56 = ((($0)) + 104|0);
  HEAP32[$56>>2] = 0;
  $57 = ((($0)) + 100|0);
  HEAP32[$57>>2] = 0;
  $58 = ((($0)) + 128|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (FUNCTION_TABLE_ii[$59 & 3]($0)|0);
  $$2 = $60;
  return ($$2|0);
 }
 $9 = ((($0)) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = HEAP32[$0>>2]|0;
  $13 = ($12|0)==(1381123450);
  if (!($13)) {
   ___assert_fail((134377|0),(134405|0),150,(134420|0));
   // unreachable;
  }
  $14 = ((($0)) + 16|0);
  HEAP32[$14>>2] = -1;
  $15 = ((($0)) + 20|0);
  HEAP32[$15>>2] = 4;
  $16 = ((($0)) + 24|0);
  HEAP32[$16>>2] = 131396;
  $17 = ((($0)) + 28|0);
  HEAP32[$17>>2] = 131414;
  $18 = (0)>(0);
  if (!($18)) {
   $$2 = -1;
   return ($$2|0);
  }
  (__zbar_error_spew($0,0)|0);
  $$2 = -1;
  return ($$2|0);
 }
 $19 = $3 & 1;
 $20 = ($19<<24>>24)==(0);
 do {
  if ($20) {
   $21 = (_zbar_negotiate_format($0,0)|0);
   $22 = ($21|0)==(0);
   if ($22) {
    $$pre = HEAP8[$2>>0]|0;
    $27 = $$pre;
    break;
   } else {
    $$2 = -1;
    return ($$2|0);
   }
  } else {
   $27 = $3;
  }
 } while(0);
 $23 = $1&255;
 $24 = ($23 << 1)&255;
 $25 = $24 & 2;
 $26 = $27 & -3;
 $28 = $26 | $25;
 HEAP8[$2>>0] = $28;
 $29 = ((($0)) + 92|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)>(0);
 L29: do {
  if ($31) {
   $32 = ((($0)) + 132|0);
   $33 = ((($0)) + 96|0);
   $$03336 = 0;
   while(1) {
    $37 = HEAP32[$32>>2]|0;
    $38 = HEAP32[$33>>2]|0;
    $39 = (($38) + ($$03336<<2)|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (FUNCTION_TABLE_iii[$37 & 7]($0,$40)|0);
    $42 = ($41|0)==(0);
    $36 = (($$03336) + 1)|0;
    if (!($42)) {
     $$2 = -1;
     break;
    }
    $34 = HEAP32[$29>>2]|0;
    $35 = ($36|0)<($34|0);
    if ($35) {
     $$03336 = $36;
    } else {
     break L29;
    }
   }
   return ($$2|0);
  }
 } while(0);
 $43 = ((($0)) + 124|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (FUNCTION_TABLE_ii[$44 & 3]($0)|0);
 $$2 = $45;
 return ($$2|0);
}
function _zbar_video_get_fd($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 52|0);
 $2 = HEAP32[$1>>2]|0;
 switch ($2|0) {
 case 0:  {
  $3 = HEAP32[$0>>2]|0;
  $4 = ($3|0)==(1381123450);
  if (!($4)) {
   ___assert_fail((134377|0),(134405|0),150,(134420|0));
   // unreachable;
  }
  $5 = ((($0)) + 16|0);
  HEAP32[$5>>2] = -1;
  $6 = ((($0)) + 20|0);
  HEAP32[$6>>2] = 4;
  $7 = ((($0)) + 24|0);
  HEAP32[$7>>2] = 131438;
  $8 = ((($0)) + 28|0);
  HEAP32[$8>>2] = 131414;
  $9 = (0)>(0);
  if (!($9)) {
   $$0 = -1;
   return ($$0|0);
  }
  (__zbar_error_spew($0,0)|0);
  $$0 = -1;
  return ($$0|0);
  break;
 }
 case 2:  {
  $17 = ((($0)) + 40|0);
  $18 = HEAP32[$17>>2]|0;
  $$0 = $18;
  return ($$0|0);
  break;
 }
 default: {
  $10 = HEAP32[$0>>2]|0;
  $11 = ($10|0)==(1381123450);
  if (!($11)) {
   ___assert_fail((134377|0),(134405|0),150,(134420|0));
   // unreachable;
  }
  $12 = ((($0)) + 16|0);
  HEAP32[$12>>2] = 1;
  $13 = ((($0)) + 20|0);
  HEAP32[$13>>2] = 3;
  $14 = ((($0)) + 24|0);
  HEAP32[$14>>2] = 131438;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = 131456;
  $16 = (0)>(0);
  if (!($16)) {
   $$0 = -1;
   return ($$0|0);
  }
  (__zbar_error_spew($0,0)|0);
  $$0 = -1;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function _zbar_video_request_size($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = ((($0)) + 60|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4 & 1;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  $14 = ((($0)) + 44|0);
  HEAP32[$14>>2] = $1;
  $15 = ((($0)) + 48|0);
  HEAP32[$15>>2] = $2;
  $16 = (0)>(0);
  if (!($16)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $17 = HEAP32[32495]|0;
  HEAP32[$vararg_buffer>>2] = 131494;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $1;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $2;
  (_fprintf($17,131556,$vararg_buffer)|0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)==(1381123450);
 if (!($8)) {
  ___assert_fail((134377|0),(134405|0),150,(134420|0));
  // unreachable;
 }
 $9 = ((($0)) + 16|0);
 HEAP32[$9>>2] = -1;
 $10 = ((($0)) + 20|0);
 HEAP32[$10>>2] = 4;
 $11 = ((($0)) + 24|0);
 HEAP32[$11>>2] = 131494;
 $12 = ((($0)) + 28|0);
 HEAP32[$12>>2] = 131518;
 $13 = (0)>(0);
 if (!($13)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 (__zbar_error_spew($0,0)|0);
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _zbar_video_request_interface($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  HEAP32[$2>>2] = $1;
  $12 = (0)>(0);
  if (!($12)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $13 = HEAP32[32495]|0;
  HEAP32[$vararg_buffer>>2] = 131583;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $1;
  (_fprintf($13,131662,$vararg_buffer)|0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5|0)==(1381123450);
 if (!($6)) {
  ___assert_fail((134377|0),(134405|0),150,(134420|0));
  // unreachable;
 }
 $7 = ((($0)) + 16|0);
 HEAP32[$7>>2] = -1;
 $8 = ((($0)) + 20|0);
 HEAP32[$8>>2] = 4;
 $9 = ((($0)) + 24|0);
 HEAP32[$9>>2] = 131583;
 $10 = ((($0)) + 28|0);
 HEAP32[$10>>2] = 131612;
 $11 = (0)>(0);
 if (!($11)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 (__zbar_error_spew($0,0)|0);
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _zbar_video_request_iomode($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = HEAP32[$0>>2]|0;
  $6 = ($5|0)==(1381123450);
  if (!($6)) {
   ___assert_fail((134377|0),(134405|0),150,(134420|0));
   // unreachable;
  }
  $7 = ((($0)) + 16|0);
  HEAP32[$7>>2] = -1;
  $8 = ((($0)) + 20|0);
  HEAP32[$8>>2] = 4;
  $9 = ((($0)) + 24|0);
  HEAP32[$9>>2] = 131696;
  $10 = ((($0)) + 28|0);
  HEAP32[$10>>2] = 131722;
  $11 = (0)>(0);
  if (!($11)) {
   $$0 = -1;
   return ($$0|0);
  }
  (__zbar_error_spew($0,0)|0);
  $$0 = -1;
  return ($$0|0);
 }
 $12 = ($1>>>0)>(3);
 if (!($12)) {
  $20 = ((($0)) + 56|0);
  HEAP32[$20>>2] = $1;
  $$0 = 0;
  return ($$0|0);
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = ($13|0)==(1381123450);
 if (!($14)) {
  ___assert_fail((134377|0),(134405|0),150,(134420|0));
  // unreachable;
 }
 $15 = ((($0)) + 16|0);
 HEAP32[$15>>2] = -1;
 $16 = ((($0)) + 20|0);
 HEAP32[$16>>2] = 4;
 $17 = ((($0)) + 24|0);
 HEAP32[$17>>2] = 131696;
 $18 = ((($0)) + 28|0);
 HEAP32[$18>>2] = 131769;
 $19 = (0)>(0);
 if (!($19)) {
  $$0 = -1;
  return ($$0|0);
 }
 (__zbar_error_spew($0,0)|0);
 $$0 = -1;
 return ($$0|0);
}
function _zbar_video_get_width($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 44|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _zbar_video_get_height($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _zbar_video_init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$03839$i = 0, $$pre$i = 0, $$pre$phi$iZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 60|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if (!($5)) {
  $6 = HEAP32[$0>>2]|0;
  $7 = ($6|0)==(1381123450);
  if (!($7)) {
   ___assert_fail((134377|0),(134405|0),150,(134420|0));
   // unreachable;
  }
  $8 = ((($0)) + 16|0);
  HEAP32[$8>>2] = -1;
  $9 = ((($0)) + 20|0);
  HEAP32[$9>>2] = 4;
  $10 = ((($0)) + 24|0);
  HEAP32[$10>>2] = 131794;
  $11 = ((($0)) + 28|0);
  HEAP32[$11>>2] = 131810;
  $12 = (0)>(0);
  if (!($12)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  (__zbar_error_spew($0,0)|0);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = ((($0)) + 116|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_iii[$14 & 7]($0,$1)|0);
 $16 = ($15|0)==(0);
 if (!($16)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = ((($0)) + 64|0);
 HEAP32[$17>>2] = $1;
 $18 = ((($0)) + 76|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0);
 if ($20) {
  ___assert_fail((131853|0),(131273|0),232,(131866|0));
  // unreachable;
 }
 $21 = ((($0)) + 56|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(2);
 do {
  if ($23) {
   $$pre$i = ((($0)) + 92|0);
   $$pre$phi$iZ2D = $$pre$i;
  } else {
   $24 = ((($0)) + 84|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0|0);
   if (!($26)) {
    ___assert_fail((131884|0),(131273|0),234,(131866|0));
    // unreachable;
   }
   $27 = ((($0)) + 92|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = Math_imul($28, $19)|0;
   $30 = ((($0)) + 80|0);
   HEAP32[$30>>2] = $29;
   $31 = (_calloc(1,$29)|0);
   HEAP32[$24>>2] = $31;
   $32 = ($31|0)==(0|0);
   if (!($32)) {
    $40 = (0)>(0);
    if (!($40)) {
     $$pre$phi$iZ2D = $27;
     break;
    }
    $41 = ($22|0)==(1);
    $42 = $41 ? 131927 : 131932;
    $43 = HEAP32[32495]|0;
    HEAP32[$vararg_buffer>>2] = 131866;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $28;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $42;
    $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
    HEAP32[$vararg_ptr3>>2] = $29;
    (_fprintf($43,131940,$vararg_buffer)|0);
    $$pre$phi$iZ2D = $27;
    break;
   }
   $33 = HEAP32[$0>>2]|0;
   $34 = ($33|0)==(1381123450);
   if (!($34)) {
    ___assert_fail((134377|0),(134405|0),150,(134420|0));
    // unreachable;
   }
   $35 = ((($0)) + 16|0);
   HEAP32[$35>>2] = -2;
   $36 = ((($0)) + 20|0);
   HEAP32[$36>>2] = 1;
   $37 = ((($0)) + 24|0);
   HEAP32[$37>>2] = 131866;
   $38 = ((($0)) + 28|0);
   HEAP32[$38>>2] = 131894;
   $39 = (0)>(0);
   if (!($39)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   (__zbar_error_spew($0,0)|0);
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $44 = HEAP32[$$pre$phi$iZ2D>>2]|0;
 $45 = ($44|0)>(0);
 if ($45) {
  $46 = ((($0)) + 96|0);
  $47 = ((($0)) + 44|0);
  $48 = ((($0)) + 48|0);
  $49 = ((($0)) + 84|0);
  $50 = HEAP32[32495]|0;
  $$03839$i = 0;
  while(1) {
   $51 = HEAP32[$46>>2]|0;
   $52 = (($51) + ($$03839$i<<2)|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = HEAP32[$17>>2]|0;
   HEAP32[$53>>2] = $54;
   $55 = HEAP32[$47>>2]|0;
   $56 = HEAP32[$48>>2]|0;
   _zbar_image_set_size($53,$55,$56);
   $57 = HEAP32[$21>>2]|0;
   $58 = ($57|0)==(2);
   if (!($58)) {
    $59 = HEAP32[$18>>2]|0;
    $60 = Math_imul($59, $$03839$i)|0;
    $61 = ((($53)) + 16|0);
    HEAP32[$61>>2] = $59;
    $62 = HEAP32[$49>>2]|0;
    $63 = (($62) + ($60)|0);
    $64 = ((($53)) + 12|0);
    HEAP32[$64>>2] = $63;
    $65 = (0)>(1);
    if ($65) {
     HEAP32[$vararg_buffer4>>2] = 131866;
     $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
     HEAP32[$vararg_ptr7>>2] = $$03839$i;
     $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
     HEAP32[$vararg_ptr8>>2] = $60;
     (_fprintf($50,131984,$vararg_buffer4)|0);
    }
   }
   $66 = (($$03839$i) + 1)|0;
   $67 = HEAP32[$$pre$phi$iZ2D>>2]|0;
   $68 = ($66|0)<($67|0);
   if ($68) {
    $$03839$i = $66;
   } else {
    break;
   }
  }
 }
 $69 = HEAP8[$2>>0]|0;
 $70 = $69 | 1;
 HEAP8[$2>>0] = $70;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _zbar_video_next_image($0) {
 $0 = $0|0;
 var $$0 = 0, $$045 = 0, $$1 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phi47Z2D = 0, $$pre46 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 60|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 & 2;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($0)) + 88|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[$5>>2] = $7;
 $8 = ((($0)) + 136|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 3]($0)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  $$0 = 0;
  return ($$0|0);
 }
 $12 = ((($10)) + 60|0);
 HEAP32[$12>>2] = $6;
 $13 = ((($0)) + 92|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)<(2);
 if ($15) {
  $16 = ((($0)) + 108|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0|0);
  do {
   if ($18) {
    HEAP32[$16>>2] = 0;
    $21 = (_zbar_image_create()|0);
    $22 = ($21|0)==(0|0);
    if ($22) {
     ___assert_fail((132007|0),(131273|0),364,(132011|0));
     // unreachable;
    } else {
     $23 = ((($21)) + 44|0);
     HEAP32[$23>>2] = 0;
     $24 = ((($21)) + 48|0);
     HEAP32[$24>>2] = $0;
     $25 = ((($0)) + 64|0);
     $26 = HEAP32[$25>>2]|0;
     HEAP32[$21>>2] = $26;
     $27 = ((($0)) + 44|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ((($0)) + 48|0);
     $30 = HEAP32[$29>>2]|0;
     _zbar_image_set_size($21,$28,$30);
     $31 = ((($0)) + 76|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ((($21)) + 16|0);
     HEAP32[$33>>2] = $32;
     $34 = (_malloc($32)|0);
     $35 = ((($21)) + 12|0);
     HEAP32[$35>>2] = $34;
     $$045 = $21;$$pre$phi47Z2D = $33;$41 = $34;
     break;
    }
   } else {
    $19 = ((($17)) + 56|0);
    $20 = HEAP32[$19>>2]|0;
    HEAP32[$16>>2] = $20;
    $$phi$trans$insert = ((($17)) + 12|0);
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $$pre46 = ((($17)) + 16|0);
    $$045 = $17;$$pre$phi47Z2D = $$pre46;$41 = $$pre;
   }
  } while(0);
  $36 = ((($$045)) + 40|0);
  HEAP32[$36>>2] = 3;
  $37 = ((($$045)) + 60|0);
  HEAP32[$37>>2] = $6;
  $38 = ((($10)) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = HEAP32[$$pre$phi47Z2D>>2]|0;
  _memcpy(($41|0),($39|0),($40|0))|0;
  $42 = ((($10)) + 48|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)==(0|0);
  if ($44) {
   ___assert_fail((131269|0),(131273|0),36,(131286|0));
   // unreachable;
  }
  $45 = ((($10)) + 52|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)>(-1);
  if (!($47)) {
   ___assert_fail((131312|0),(131273|0),37,(131286|0));
   // unreachable;
  }
  $48 = ((($43)) + 96|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + ($46<<2)|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)==($10|0);
  if (!($52)) {
   HEAP32[$50>>2] = $10;
  }
  $53 = ((($43)) + 60|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54 & 2;
  $56 = ($55<<24>>24)==(0);
  if ($56) {
   $$1 = $$045;
  } else {
   $57 = ((($43)) + 132|0);
   $58 = HEAP32[$57>>2]|0;
   (FUNCTION_TABLE_iii[$58 & 7]($43,$10)|0);
   $$1 = $$045;
  }
 } else {
  $59 = ((($10)) + 40|0);
  HEAP32[$59>>2] = 2;
  $$1 = $10;
 }
 $60 = ((($$1)) + 44|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($61) + 1)|0;
 HEAP32[$60>>2] = $62;
 $63 = ($61|0)>(-2);
 if ($63) {
  $$0 = $$1;
  return ($$0|0);
 } else {
  ___assert_fail((134216|0),(134224|0),87,(134240|0));
  // unreachable;
 }
 return (0)|0;
}
function __zbar_video_recycle_shadow($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  ___assert_fail((131269|0),(131273|0),50,(132033|0));
  // unreachable;
 }
 $4 = ((($0)) + 52|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(-1);
 if ($6) {
  $7 = ((($2)) + 108|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($0)) + 56|0);
  HEAP32[$9>>2] = $8;
  HEAP32[$7>>2] = $0;
  return;
 } else {
  ___assert_fail((132060|0),(131273|0),51,(132033|0));
  // unreachable;
 }
}
function __zbar_image_scanner_recycle_syms($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$041 = 0, $$1 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $$041 = $1;
 while(1) {
  $3 = ((($$041)) + 44|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($$041)) + 40|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0);
  if ($7) {
   label = 10;
  } else {
   $8 = (($6) + -1)|0;
   HEAP32[$5>>2] = $8;
   $9 = ($6|0)>(0);
   if (!($9)) {
    label = 5;
    break;
   }
   $10 = ($8|0)==(0);
   if ($10) {
    label = 10;
   } else {
    $11 = ((($$041)) + 12|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(0);
    if ($13) {
     label = 8;
     break;
    }
    HEAP32[$3>>2] = 0;
   }
  }
  if ((label|0) == 10) {
   label = 0;
   $14 = ((($$041)) + 12|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0);
   if ($16) {
    $17 = ((($$041)) + 20|0);
    HEAP32[$17>>2] = 0;
    $18 = ((($$041)) + 16|0);
    HEAP32[$18>>2] = 0;
   }
   $19 = ((($$041)) + 48|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(0|0);
   if ($21) {
    $31 = $15;
   } else {
    $22 = HEAP32[$20>>2]|0;
    $23 = (($22) + -1)|0;
    HEAP32[$20>>2] = $23;
    $24 = ($22|0)>(0);
    if (!($24)) {
     label = 14;
     break;
    }
    $25 = ($23|0)==(0);
    if (!($25)) {
     label = 16;
     break;
    }
    $26 = ((($20)) + 8|0);
    $27 = HEAP32[$26>>2]|0;
    __zbar_image_scanner_recycle_syms($0,$27);
    $28 = HEAP32[$19>>2]|0;
    $29 = ((($28)) + 8|0);
    HEAP32[$29>>2] = 0;
    __zbar_symbol_set_free($28);
    HEAP32[$19>>2] = 0;
    $$pre = HEAP32[$14>>2]|0;
    $31 = $$pre;
   }
   $30 = ($31|0)==(0);
   if ($30) {
    $$1 = 0;
   } else {
    $32 = ($31>>>0)<(4);
    if ($32) {
     $$1 = 1;
    } else {
     $42 = ($31>>>0)<(16);
     if ($42) {
      $$1 = 2;
     } else {
      $43 = ($31>>>0)<(64);
      if ($43) {
       $$1 = 3;
      } else {
       $44 = ($31>>>0)<(256);
       if ($44) {
        $$1 = 4;
       } else {
        $33 = ((($$041)) + 20|0);
        $34 = HEAP32[$33>>2]|0;
        $35 = ($34|0)==(0|0);
        if ($35) {
         label = 21;
         break;
        }
        _free($34);
        HEAP32[$33>>2] = 0;
        HEAP32[$14>>2] = 0;
        $$1 = 0;
       }
      }
     }
    }
   }
   $36 = (((($0)) + 52|0) + ($$1<<3)|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) + 1)|0;
   HEAP32[$36>>2] = $38;
   $39 = (((((($0)) + 52|0) + ($$1<<3)|0)) + 4|0);
   $40 = HEAP32[$39>>2]|0;
   HEAP32[$3>>2] = $40;
   HEAP32[$39>>2] = $$041;
  }
  $41 = ($4|0)==(0|0);
  if ($41) {
   label = 25;
   break;
  } else {
   $$041 = $4;
  }
 }
 if ((label|0) == 5) {
  ___assert_fail((134216|0),(134224|0),87,(134240|0));
  // unreachable;
 }
 else if ((label|0) == 8) {
  ___assert_fail((132078|0),(132094|0),133,(132113|0));
  // unreachable;
 }
 else if ((label|0) == 14) {
  ___assert_fail((134216|0),(134224|0),87,(134240|0));
  // unreachable;
 }
 else if ((label|0) == 16) {
  ___assert_fail((132146|0),(132094|0),146,(132113|0));
  // unreachable;
 }
 else if ((label|0) == 21) {
  ___assert_fail((132148|0),(132094|0),156,(132113|0));
  // unreachable;
 }
 else if ((label|0) == 25) {
  return;
 }
}
function _zbar_image_scanner_recycle_image($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 do {
  if (!($4)) {
   $5 = HEAP32[$3>>2]|0;
   $6 = ($5|0)==(0);
   if (!($6)) {
    $7 = (($5) + -1)|0;
    HEAP32[$3>>2] = $7;
    $8 = ($5|0)>(0);
    if (!($8)) {
     ___assert_fail((134216|0),(134224|0),87,(134240|0));
     // unreachable;
    }
    $9 = ($7|0)==(0);
    if ($9) {
     $13 = ((($3)) + 8|0);
     $14 = HEAP32[$13>>2]|0;
     __zbar_image_scanner_recycle_syms($0,$14);
     $15 = ((($3)) + 12|0);
     HEAP32[$15>>2] = 0;
     HEAP32[$13>>2] = 0;
     $16 = ((($3)) + 4|0);
     HEAP32[$16>>2] = 0;
     $17 = ((($0)) + 204|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($18) + 1)|0;
     HEAP32[$17>>2] = $19;
     break;
    } else {
     $10 = ((($0)) + 200|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = (($11) + 1)|0;
     HEAP32[$10>>2] = $12;
     HEAP32[$2>>2] = 0;
     break;
    }
   }
  }
 } while(0);
 $20 = ((($1)) + 64|0);
 $21 = HEAP32[$20>>2]|0;
 HEAP32[$20>>2] = 0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  return;
 }
 $23 = HEAP32[$21>>2]|0;
 $24 = (($23) + -1)|0;
 HEAP32[$21>>2] = $24;
 $25 = ($23|0)>(0);
 if (!($25)) {
  ___assert_fail((134216|0),(134224|0),87,(134240|0));
  // unreachable;
 }
 $26 = ($24|0)==(0);
 if (!($26)) {
  $27 = ((($0)) + 208|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 1)|0;
  HEAP32[$27>>2] = $29;
  return;
 }
 $30 = ((($21)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 __zbar_image_scanner_recycle_syms($0,$31);
 $32 = ((($21)) + 12|0);
 HEAP32[$32>>2] = 0;
 HEAP32[$30>>2] = 0;
 $33 = ((($21)) + 4|0);
 HEAP32[$33>>2] = 0;
 $34 = ((($0)) + 212|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + 1)|0;
 HEAP32[$34>>2] = $36;
 $37 = HEAP32[$2>>2]|0;
 $38 = ($37|0)==(0|0);
 if ($38) {
  HEAP32[$2>>2] = $21;
  return;
 } else {
  __zbar_symbol_set_free($21);
  return;
 }
}
function __zbar_image_scanner_alloc_sym($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$151 = 0, $$151$ph = 0, $$2 = 0, $$sink = 0, $$sink64 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)>(1);
 L1: do {
  if ($3) {
   $4 = ($2|0)>(4);
   if ($4) {
    $48 = ($2|0)>(16);
    if ($48) {
     $49 = ($2|0)>(64);
     $spec$select = $49 ? 4 : 3;
     $$151$ph = $spec$select;
    } else {
     $$151$ph = 2;
    }
   } else {
    $$151$ph = 1;
   }
   $$151 = $$151$ph;
   while(1) {
    $5 = (((((($0)) + 52|0) + ($$151<<3)|0)) + 4|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==(0|0);
    if (!($7)) {
     break;
    }
    $8 = (($$151) + -1)|0;
    $9 = ($$151|0)>(1);
    if ($9) {
     $$151 = $8;
    } else {
     label = 9;
     break L1;
    }
   }
   $10 = (((($0)) + 220|0) + ($$151<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + 1)|0;
   HEAP32[$10>>2] = $12;
   $13 = ((($6)) + 44|0);
   $14 = HEAP32[$13>>2]|0;
   HEAP32[$5>>2] = $14;
   HEAP32[$13>>2] = 0;
   $15 = (((($0)) + 52|0) + ($$151<<3)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(0);
   if ($17) {
    ___assert_fail((132158|0),(132094|0),232,(132181|0));
    // unreachable;
   } else {
    $18 = (($16) + -1)|0;
    $$2 = $6;$$sink = $18;$$sink64 = $15;
    break;
   }
  } else {
   label = 9;
  }
 } while(0);
 if ((label|0) == 9) {
  $19 = (_calloc(1,64)|0);
  $20 = ((($0)) + 216|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + 1)|0;
  $$2 = $19;$$sink = $22;$$sink64 = $20;
 }
 HEAP32[$$sink64>>2] = $$sink;
 HEAP32[$$2>>2] = $1;
 $23 = ((($$2)) + 60|0);
 HEAP32[$23>>2] = 1;
 $24 = ((($$2)) + 28|0);
 HEAP32[$24>>2] = 0;
 $25 = ((($$2)) + 36|0);
 HEAP32[$25>>2] = -1;
 $26 = ((($$2)) + 56|0);
 HEAP32[$26>>2] = 0;
 $27 = ((($0)) + 20|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($$2)) + 52|0);
 HEAP32[$29>>2] = $28;
 $30 = ((($$2)) + 48|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(0|0);
 if (!($32)) {
  ___assert_fail((132211|0),(132094|0),247,(132181|0));
  // unreachable;
 }
 $33 = ($2|0)>(0);
 if (!($33)) {
  $43 = ((($$2)) + 20|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)==(0|0);
  if (!($45)) {
   _free($44);
  }
  HEAP32[$43>>2] = 0;
  $46 = ((($$2)) + 12|0);
  HEAP32[$46>>2] = 0;
  $47 = ((($$2)) + 16|0);
  HEAP32[$47>>2] = 0;
  return ($$2|0);
 }
 $34 = (($2) + -1)|0;
 $35 = ((($$2)) + 16|0);
 HEAP32[$35>>2] = $34;
 $36 = ((($$2)) + 12|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37>>>0)<($2>>>0);
 if (!($38)) {
  return ($$2|0);
 }
 $39 = ((($$2)) + 20|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)==(0|0);
 if (!($41)) {
  _free($40);
 }
 HEAP32[$36>>2] = $2;
 $42 = (_malloc($2)|0);
 HEAP32[$39>>2] = $42;
 return ($$2|0);
}
function __zbar_image_scanner_add_sym($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$022$i$i = 0, $$1$i$i = 0, $$phi$trans$insert$i = 0, $$phi$trans$insert62$i = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$phi$iZ2D = 0, $$pre$phi64$iZ2D = 0, $$pre$phi65$iZ2D = 0, $$pre$phi71$iZ2D = 0, $$pre$phi73$iZ2D = 0, $$pre63$i = 0, $$pre68$i = 0, $$pre70$i = 0, $$pre72$i = 0, $$sink = 0, $$sink30 = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $or$cond$not$i = 0, $or$cond$not$i$demorgan = 0, $or$cond$not$i$demorgan22 = 0, $or$cond3$i = 0, $storemerge = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 92|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $70 = ((($1)) + 56|0);
   HEAP32[$70>>2] = 0;
   $71 = ((($0)) + 48|0);
   $72 = HEAP32[$71>>2]|0;
   $78 = $72;
   label = 20;
  } else {
   $5 = ((($0)) + 96|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   $$pre68$i = ((($1)) + 16|0);
   L4: do {
    if ($7) {
     $$pre70$i = ((($1)) + 20|0);
     $$pre72$i = ((($1)) + 52|0);
     $$pre$phi71$iZ2D = $$pre70$i;$$pre$phi73$iZ2D = $$pre72$i;
     label = 12;
    } else {
     $8 = ((($1)) + 52|0);
     $9 = ((($1)) + 20|0);
     $$022$i$i = $5;$11 = $6;
     while(1) {
      $10 = HEAP32[$11>>2]|0;
      $12 = HEAP32[$1>>2]|0;
      $13 = ($10|0)==($12|0);
      if ($13) {
       $14 = ((($11)) + 16|0);
       $15 = HEAP32[$14>>2]|0;
       $16 = HEAP32[$$pre68$i>>2]|0;
       $17 = ($15|0)==($16|0);
       if ($17) {
        $18 = ((($11)) + 20|0);
        $19 = HEAP32[$18>>2]|0;
        $20 = HEAP32[$9>>2]|0;
        $21 = (_memcmp($19,$20,$15)|0);
        $22 = ($21|0)==(0);
        if ($22) {
         break;
        }
       }
      }
      $23 = HEAP32[$8>>2]|0;
      $24 = ((($11)) + 52|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = (($23) - ($25))|0;
      $27 = ($26>>>0)>(4000);
      $28 = ((($11)) + 44|0);
      if ($27) {
       $29 = HEAP32[$28>>2]|0;
       HEAP32[$28>>2] = 0;
       $30 = HEAP32[$$022$i$i>>2]|0;
       __zbar_image_scanner_recycle_syms($0,$30);
       HEAP32[$$022$i$i>>2] = $29;
       $31 = $29;
       $$1$i$i = $$022$i$i;$33 = $31;
      } else {
       $$pre$i$i = HEAP32[$28>>2]|0;
       $$1$i$i = $28;$33 = $$pre$i$i;
      }
      $32 = ($33|0)==(0|0);
      if ($32) {
       $$pre$phi71$iZ2D = $9;$$pre$phi73$iZ2D = $8;
       label = 12;
       break L4;
      } else {
       $$022$i$i = $$1$i$i;$11 = $33;
      }
     }
     $$phi$trans$insert$i = ((($11)) + 52|0);
     $$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
     $$phi$trans$insert62$i = ((($11)) + 56|0);
     $$pre63$i = HEAP32[$$phi$trans$insert62$i>>2]|0;
     $$pre$phi$iZ2D = $8;$$pre$phi64$iZ2D = $$phi$trans$insert$i;$$pre$phi65$iZ2D = $$phi$trans$insert62$i;$56 = $$pre$i;$60 = $$pre63$i;
    }
   } while(0);
   if ((label|0) == 12) {
    $34 = HEAP32[$1>>2]|0;
    $35 = HEAP32[$$pre68$i>>2]|0;
    $36 = (($35) + 1)|0;
    $37 = (__zbar_image_scanner_alloc_sym($0,$34,$36)|0);
    $38 = ((($1)) + 4|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ((($37)) + 4|0);
    HEAP32[$40>>2] = $39;
    $41 = ((($1)) + 8|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ((($37)) + 8|0);
    HEAP32[$43>>2] = $42;
    $44 = ((($37)) + 20|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = HEAP32[$$pre$phi71$iZ2D>>2]|0;
    $47 = HEAP32[$$pre68$i>>2]|0;
    _memcpy(($45|0),($46|0),($47|0))|0;
    $48 = HEAP32[$$pre$phi73$iZ2D>>2]|0;
    $49 = (($48) + -2000)|0;
    $50 = ((($37)) + 52|0);
    HEAP32[$50>>2] = $49;
    $51 = ((($37)) + 56|0);
    HEAP32[$51>>2] = 0;
    $52 = HEAP32[$5>>2]|0;
    $53 = ((($37)) + 44|0);
    HEAP32[$53>>2] = $52;
    HEAP32[$5>>2] = $37;
    $$pre$phi$iZ2D = $$pre$phi73$iZ2D;$$pre$phi64$iZ2D = $50;$$pre$phi65$iZ2D = $51;$56 = $49;$60 = 0;
   }
   $54 = HEAP32[$$pre$phi$iZ2D>>2]|0;
   $55 = (($54) - ($56))|0;
   HEAP32[$$pre$phi64$iZ2D>>2] = $54;
   $57 = ($55>>>0)<(1000);
   $58 = ($55>>>0)>(1999);
   $59 = ($60|0)>(-1);
   $or$cond$not$i$demorgan22 = $59 | $57;
   $or$cond$not$i = $or$cond$not$i$demorgan22 ^ 1;
   $or$cond3$i = $58 | $or$cond$not$i;
   if ($or$cond3$i) {
    $61 = HEAP32[$1>>2]|0;
    $62 = (__zbar_get_symbol_hash($61)|0);
    $63 = (((($0)) + 116|0) + ($62<<2)|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = (0 - ($64))|0;
    $storemerge = $65;
    label = 19;
   } else {
    $or$cond$not$i$demorgan = $59 | $57;
    $66 = (($60) + 1)|0;
    if ($or$cond$not$i$demorgan) {
     $storemerge = $66;
     label = 19;
    } else {
     $67 = ((($1)) + 56|0);
     HEAP32[$67>>2] = $60;
     $68 = ((($0)) + 48|0);
     $69 = HEAP32[$68>>2]|0;
     $89 = $69;
    }
   }
   if ((label|0) == 19) {
    HEAP32[$$pre$phi65$iZ2D>>2] = $storemerge;
    $73 = ((($1)) + 56|0);
    HEAP32[$73>>2] = $storemerge;
    $74 = ((($0)) + 48|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($storemerge|0)==(0);
    if ($76) {
     $78 = $75;
     label = 20;
     break;
    } else {
     $89 = $75;
    }
   }
   $88 = ((($89)) + 8|0);
   $90 = HEAP32[$88>>2]|0;
   $91 = ((($1)) + 44|0);
   HEAP32[$91>>2] = $90;
   HEAP32[$88>>2] = $1;
   $92 = ((($89)) + 12|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ($93|0)==(0|0);
   if ($94) {
    HEAP32[$92>>2] = $1;
   }
  }
 } while(0);
 if ((label|0) == 20) {
  $77 = ((($78)) + 12|0);
  $79 = HEAP32[$77>>2]|0;
  $80 = ($79|0)==(0|0);
  $81 = ((($78)) + 8|0);
  $82 = ((($79)) + 44|0);
  $$sink30 = $80 ? $81 : $82;
  $$sink = $80 ? $81 : $82;
  $83 = HEAP32[$$sink30>>2]|0;
  $84 = ((($1)) + 44|0);
  HEAP32[$84>>2] = $83;
  HEAP32[$$sink>>2] = $1;
  $85 = ((($78)) + 4|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (($86) + 1)|0;
  HEAP32[$85>>2] = $87;
 }
 $95 = ((($1)) + 40|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = (($96) + 1)|0;
 HEAP32[$95>>2] = $97;
 $98 = ($96|0)>(-2);
 if ($98) {
  return;
 } else {
  ___assert_fail((134216|0),(134224|0),87,(134240|0));
  // unreachable;
 }
}
function _zbar_image_scanner_create() {
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,240)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (_zbar_decoder_create()|0);
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = (_zbar_scanner_create($2)|0);
 HEAP32[$0>>2] = $4;
 $5 = HEAP32[$3>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _zbar_image_scanner_destroy($0);
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ($4|0)==(0|0);
 if ($7) {
  _zbar_image_scanner_destroy($0);
  $$0 = 0;
  return ($$0|0);
 } else {
  _zbar_decoder_set_userdata($5,$0);
  $8 = HEAP32[$3>>2]|0;
  (_zbar_decoder_set_handler($8,4)|0);
  $9 = (__zbar_qr_create()|0);
  $10 = ((($0)) + 8|0);
  HEAP32[$10>>2] = $9;
  $11 = ((($0)) + 108|0);
  HEAP32[$11>>2] = 1;
  $12 = ((($0)) + 112|0);
  HEAP32[$12>>2] = 1;
  $13 = ((($0)) + 100|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 | 1;
  HEAP32[$13>>2] = $15;
  $16 = ((($0)) + 116|0);
  HEAP32[$16>>2] = 2;
  $17 = ((($0)) + 120|0);
  HEAP32[$17>>2] = 2;
  $18 = ((($0)) + 124|0);
  HEAP32[$18>>2] = 2;
  $19 = ((($0)) + 128|0);
  HEAP32[$19>>2] = 2;
  $20 = ((($0)) + 132|0);
  HEAP32[$20>>2] = 2;
  $21 = ((($0)) + 136|0);
  HEAP32[$21>>2] = 2;
  $22 = ((($0)) + 140|0);
  HEAP32[$22>>2] = 2;
  $23 = ((($0)) + 144|0);
  HEAP32[$23>>2] = 2;
  $24 = ((($0)) + 148|0);
  HEAP32[$24>>2] = 2;
  $25 = ((($0)) + 152|0);
  HEAP32[$25>>2] = 2;
  $26 = ((($0)) + 156|0);
  HEAP32[$26>>2] = 2;
  $27 = ((($0)) + 160|0);
  HEAP32[$27>>2] = 2;
  $28 = ((($0)) + 164|0);
  HEAP32[$28>>2] = 2;
  $29 = ((($0)) + 168|0);
  HEAP32[$29>>2] = 2;
  $30 = ((($0)) + 172|0);
  HEAP32[$30>>2] = 2;
  $31 = ((($0)) + 176|0);
  HEAP32[$31>>2] = 2;
  $32 = ((($0)) + 180|0);
  HEAP32[$32>>2] = 2;
  $33 = ((($0)) + 184|0);
  HEAP32[$33>>2] = 2;
  $34 = ((($0)) + 188|0);
  HEAP32[$34>>2] = 2;
  $35 = ((($0)) + 192|0);
  HEAP32[$35>>2] = 2;
  $36 = (__zbar_get_symbol_hash(64)|0);
  $37 = (((($0)) + 116|0) + ($36<<2)|0);
  HEAP32[$37>>2] = 0;
  $38 = (__zbar_get_symbol_hash(128)|0);
  $39 = (((($0)) + 116|0) + ($38<<2)|0);
  HEAP32[$39>>2] = 0;
  $40 = (__zbar_get_symbol_hash(93)|0);
  $41 = (((($0)) + 116|0) + ($40<<2)|0);
  HEAP32[$41>>2] = 0;
  $42 = (__zbar_get_symbol_hash(39)|0);
  $43 = (((($0)) + 116|0) + ($42<<2)|0);
  HEAP32[$43>>2] = 0;
  $44 = (__zbar_get_symbol_hash(38)|0);
  $45 = (((($0)) + 116|0) + ($44<<2)|0);
  HEAP32[$45>>2] = 1;
  $46 = (__zbar_get_symbol_hash(15)|0);
  $47 = (((($0)) + 116|0) + ($46<<2)|0);
  HEAP32[$47>>2] = 0;
  $$0 = $0;
  return ($$0|0);
 }
 return (0)|0;
}
function _zbar_image_scanner_destroy($0) {
 $0 = $0|0;
 var $$02728 = 0, $$02728$1 = 0, $$02728$2 = 0, $$02728$3 = 0, $$02728$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = (0)>(0);
 if ($1) {
  $2 = HEAP32[32495]|0;
  $3 = ((($0)) + 196|0);
  $4 = HEAP32[$3>>2]|0;
  HEAP32[$vararg_buffer>>2] = 132394;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $4;
  (_fprintf($2,132358,$vararg_buffer)|0);
 }
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = HEAP32[$6>>2]|0;
  $9 = ($8|0)==(0);
  if ($9) {
   __zbar_symbol_set_free($6);
  } else {
   _zbar_symbol_set_ref($6,-1);
  }
  HEAP32[$5>>2] = 0;
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  _zbar_scanner_destroy($10);
 }
 HEAP32[$0>>2] = 0;
 $12 = ((($0)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  _zbar_decoder_destroy($13);
 }
 HEAP32[$12>>2] = 0;
 $15 = ((($0)) + 56|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if (!($17)) {
  $$02728 = $16;
  while(1) {
   $18 = ((($$02728)) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   __zbar_symbol_free($$02728);
   $20 = ($19|0)==(0|0);
   if ($20) {
    break;
   } else {
    $$02728 = $19;
   }
  }
 }
 $21 = ((($0)) + 64|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 if (!($23)) {
  $$02728$1 = $22;
  while(1) {
   $25 = ((($$02728$1)) + 44|0);
   $26 = HEAP32[$25>>2]|0;
   __zbar_symbol_free($$02728$1);
   $27 = ($26|0)==(0|0);
   if ($27) {
    break;
   } else {
    $$02728$1 = $26;
   }
  }
 }
 $28 = ((($0)) + 72|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 if (!($30)) {
  $$02728$2 = $29;
  while(1) {
   $31 = ((($$02728$2)) + 44|0);
   $32 = HEAP32[$31>>2]|0;
   __zbar_symbol_free($$02728$2);
   $33 = ($32|0)==(0|0);
   if ($33) {
    break;
   } else {
    $$02728$2 = $32;
   }
  }
 }
 $34 = ((($0)) + 80|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(0|0);
 if (!($36)) {
  $$02728$3 = $35;
  while(1) {
   $37 = ((($$02728$3)) + 44|0);
   $38 = HEAP32[$37>>2]|0;
   __zbar_symbol_free($$02728$3);
   $39 = ($38|0)==(0|0);
   if ($39) {
    break;
   } else {
    $$02728$3 = $38;
   }
  }
 }
 $40 = ((($0)) + 88|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)==(0|0);
 if (!($42)) {
  $$02728$4 = $41;
  while(1) {
   $43 = ((($$02728$4)) + 44|0);
   $44 = HEAP32[$43>>2]|0;
   __zbar_symbol_free($$02728$4);
   $45 = ($44|0)==(0|0);
   if ($45) {
    break;
   } else {
    $$02728$4 = $44;
   }
  }
 }
 $46 = ((($0)) + 8|0);
 $24 = HEAP32[$46>>2]|0;
 $47 = ($24|0)==(0|0);
 if ($47) {
  _free($0);
  STACKTOP = sp;return;
 }
 __zbar_qr_destroy($24);
 _free($0);
 STACKTOP = sp;return;
}
function _symbol_handler($0) {
 $0 = $0|0;
 var $$ = 0, $$0$i = 0, $$085 = 0, $$08591 = 0, $$08592 = 0, $$1 = 0, $$184 = 0, $$86 = 0, $$pre$i = 0, $$pre$i87 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $1 = (_zbar_decoder_get_userdata($0)|0);
 $2 = (_zbar_decoder_get_type($0)|0);
 $3 = ($2|0)==(64);
 if ($3) {
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (__zbar_decoder_get_qr_finder_line($5)|0);
  $7 = ($6|0)==(0|0);
  if ($7) {
   ___assert_fail((132222|0),(132094|0),367,(132227|0));
   // unreachable;
  }
  $8 = HEAP32[$1>>2]|0;
  $9 = HEAP32[$6>>2]|0;
  $10 = (_zbar_scanner_get_edge($8,$9,2)|0);
  $11 = HEAP32[$1>>2]|0;
  $12 = ((($6)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (_zbar_scanner_get_edge($11,$13,2)|0);
  $15 = (($10) - ($14))|0;
  HEAP32[$12>>2] = $15;
  $16 = HEAP32[$1>>2]|0;
  $17 = ((($6)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_zbar_scanner_get_edge($16,$18,2)|0);
  HEAP32[$17>>2] = $19;
  $20 = HEAP32[$1>>2]|0;
  $21 = ((($6)) + 16|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (_zbar_scanner_get_edge($20,$22,2)|0);
  $24 = HEAP32[$17>>2]|0;
  $25 = (($23) - ($24))|0;
  HEAP32[$21>>2] = $25;
  $26 = (($24) - ($10))|0;
  HEAP32[$17>>2] = $26;
  $27 = ((($1)) + 40|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $28 << 2;
  $30 = ((($1)) + 36|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = Math_imul($31, $10)|0;
  $33 = (($32) + ($29))|0;
  $34 = ($31|0)<(0);
  if ($34) {
   $35 = (($33) - ($26))|0;
   $36 = HEAP32[$12>>2]|0;
   HEAP32[$12>>2] = $25;
   HEAP32[$21>>2] = $36;
   $$0$i = $35;
  } else {
   $$0$i = $33;
  }
  $37 = ((($1)) + 28|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)!=(0);
  $40 = $39 ^ 1;
  $41 = $40&1;
  $42 = (($6) + ($41<<2)|0);
  HEAP32[$42>>2] = $$0$i;
  $43 = ((($1)) + 44|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $44 << 2;
  $46 = $45 | 2;
  $47 = $39&1;
  $48 = (($6) + ($47<<2)|0);
  HEAP32[$48>>2] = $46;
  $49 = ((($1)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  (__zbar_qr_found_line($50,$41,$6)|0);
  STACKTOP = sp;return;
 }
 $51 = ((($1)) + 100|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $52 & 1;
 $54 = ($53|0)==(0);
 if ($54) {
  $$1 = 0;$$184 = 0;
 } else {
  $55 = HEAP32[$1>>2]|0;
  $56 = (_zbar_scanner_get_width($55)|0);
  $57 = ((($1)) + 40|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ((($1)) + 36|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = HEAP32[$1>>2]|0;
  $62 = (_zbar_scanner_get_edge($61,$56,0)|0);
  $63 = Math_imul($62, $60)|0;
  $64 = (($63) + ($58))|0;
  $65 = ((($1)) + 28|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ($66|0)==(0);
  $68 = ((($1)) + 44|0);
  $69 = HEAP32[$68>>2]|0;
  $$ = $67 ? $64 : $69;
  $$86 = $67 ? $69 : $64;
  $$1 = $$86;$$184 = $$;
 }
 $70 = ($2>>>0)<(2);
 if ($70) {
  $71 = (0)>(255);
  if (!($71)) {
   STACKTOP = sp;return;
  }
  $72 = HEAP32[32495]|0;
  HEAP32[$vararg_buffer>>2] = 132267;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $$1;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $$184;
  (_fprintf($72,132238,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
 $73 = (_zbar_decoder_get_data($0)|0);
 $74 = (_zbar_decoder_get_data_length($0)|0);
 $75 = ((($1)) + 48|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ((($76)) + 8|0);
 $$08591 = HEAP32[$77>>2]|0;
 $78 = ($$08591|0)==(0|0);
 L21: do {
  if (!($78)) {
   $$08592 = $$08591;
   while(1) {
    $79 = HEAP32[$$08592>>2]|0;
    $80 = ($79|0)==($2|0);
    if ($80) {
     $81 = ((($$08592)) + 16|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = ($82|0)==($74|0);
     if ($83) {
      $84 = ((($$08592)) + 20|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = (_memcmp($85,$73,$74)|0);
      $87 = ($86|0)==(0);
      if ($87) {
       break;
      }
     }
    }
    $111 = ((($$08592)) + 44|0);
    $$085 = HEAP32[$111>>2]|0;
    $112 = ($$085|0)==(0|0);
    if ($112) {
     break L21;
    } else {
     $$08592 = $$085;
    }
   }
   $88 = ((($$08592)) + 60|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = (($89) + 1)|0;
   HEAP32[$88>>2] = $90;
   $91 = (0)>(223);
   if ($91) {
    $92 = HEAP32[32495]|0;
    $93 = (_zbar_get_symbol_name($2)|0);
    HEAP32[$vararg_buffer3>>2] = 132267;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $$1;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$184;
    $vararg_ptr8 = ((($vararg_buffer3)) + 12|0);
    HEAP32[$vararg_ptr8>>2] = $93;
    $vararg_ptr9 = ((($vararg_buffer3)) + 16|0);
    HEAP32[$vararg_ptr9>>2] = $73;
    (_fprintf($92,132282,$vararg_buffer3)|0);
   }
   $94 = HEAP32[$51>>2]|0;
   $95 = $94 & 1;
   $96 = ($95|0)==(0);
   if ($96) {
    STACKTOP = sp;return;
   }
   $97 = ((($$08592)) + 28|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = (($98) + 1)|0;
   HEAP32[$97>>2] = $99;
   $100 = ((($$08592)) + 24|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ($99>>>0)<($101>>>0);
   $103 = ((($$08592)) + 32|0);
   $104 = (($101) + 1)|0;
   if ($102) {
    $$pre$i = HEAP32[$103>>2]|0;
    $109 = $$pre$i;
   } else {
    $105 = $104 << 3;
    $106 = HEAP32[$103>>2]|0;
    HEAP32[$100>>2] = $104;
    $107 = (_realloc($106,$105)|0);
    HEAP32[$103>>2] = $107;
    $109 = $107;
   }
   $108 = (($109) + ($98<<3)|0);
   HEAP32[$108>>2] = $$1;
   $110 = (((($109) + ($98<<3)|0)) + 4|0);
   HEAP32[$110>>2] = $$184;
   STACKTOP = sp;return;
  }
 } while(0);
 $113 = (($74) + 1)|0;
 $114 = (__zbar_image_scanner_alloc_sym($1,$2,$113)|0);
 $115 = (_zbar_decoder_get_configs($0,$2)|0);
 $116 = ((($114)) + 4|0);
 HEAP32[$116>>2] = $115;
 $117 = (_zbar_decoder_get_modifiers($0)|0);
 $118 = ((($114)) + 8|0);
 HEAP32[$118>>2] = $117;
 $119 = ((($114)) + 20|0);
 $120 = HEAP32[$119>>2]|0;
 _memcpy(($120|0),($73|0),($113|0))|0;
 $121 = HEAP32[$51>>2]|0;
 $122 = $121 & 1;
 $123 = ($122|0)==(0);
 if (!($123)) {
  $124 = (0)>(191);
  if ($124) {
   $125 = HEAP32[32495]|0;
   $126 = (_zbar_get_symbol_name($2)|0);
   HEAP32[$vararg_buffer10>>2] = 132267;
   $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
   HEAP32[$vararg_ptr13>>2] = $$1;
   $vararg_ptr14 = ((($vararg_buffer10)) + 8|0);
   HEAP32[$vararg_ptr14>>2] = $$184;
   $vararg_ptr15 = ((($vararg_buffer10)) + 12|0);
   HEAP32[$vararg_ptr15>>2] = $126;
   $vararg_ptr16 = ((($vararg_buffer10)) + 16|0);
   HEAP32[$vararg_ptr16>>2] = $73;
   (_fprintf($125,132322,$vararg_buffer10)|0);
  }
  $127 = ((($114)) + 28|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = (($128) + 1)|0;
  HEAP32[$127>>2] = $129;
  $130 = ((($114)) + 24|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = ($129>>>0)<($131>>>0);
  $133 = ((($114)) + 32|0);
  $134 = (($131) + 1)|0;
  if ($132) {
   $$pre$i87 = HEAP32[$133>>2]|0;
   $139 = $$pre$i87;
  } else {
   $135 = $134 << 3;
   $136 = HEAP32[$133>>2]|0;
   HEAP32[$130>>2] = $134;
   $137 = (_realloc($136,$135)|0);
   HEAP32[$133>>2] = $137;
   $139 = $137;
  }
  $138 = (($139) + ($128<<3)|0);
  HEAP32[$138>>2] = $$1;
  $140 = (((($139) + ($128<<3)|0)) + 4|0);
  HEAP32[$140>>2] = $$184;
 }
 $141 = (_zbar_decoder_get_direction($0)|0);
 $142 = ($141|0)==(0);
 if (!($142)) {
  $143 = ((($1)) + 32|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = ($144|0)!=(0);
  $146 = $145&1;
  $147 = ((($1)) + 36|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = $148 ^ $141;
  $150 = $149 & 2;
  $151 = $150 | $146;
  $152 = ((($114)) + 36|0);
  HEAP32[$152>>2] = $151;
 }
 __zbar_image_scanner_add_sym($1,$114);
 STACKTOP = sp;return;
}
function _zbar_image_scanner_enable_cache($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 96|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  __zbar_image_scanner_recycle_syms($0,$3);
  HEAP32[$2>>2] = 0;
 }
 $5 = ($1|0)!=(0);
 $6 = $5&1;
 $7 = ((($0)) + 92|0);
 HEAP32[$7>>2] = $6;
 return;
}
function _zbar_image_scanner_get_results($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _zbar_scan_image($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$0349 = 0, $$0 = 0, $$022$i = 0, $$022$i$us = 0, $$0348 = 0, $$0349427 = 0, $$0350$ = 0, $$0350426 = 0, $$0354480 = 0, $$0357$ph441 = 0, $$0361$ph$lcssa422 = 0, $$0361$ph438 = 0, $$0364$ph$lcssa424 = 0, $$0364$ph435 = 0, $$0367479 = 0, $$0376460 = 0, $$0381459 = 0, $$1 = 0, $$1$i = 0, $$1$i$us = 0;
 var $$1351 = 0, $$1355$lcssa = 0, $$1355465 = 0, $$1362 = 0, $$1365 = 0, $$1368$lcssa = 0, $$1368464 = 0, $$1377$lcssa = 0, $$1377445 = 0, $$1382$lcssa = 0, $$1382444 = 0, $$2356$lcssa = 0, $$2356472 = 0, $$2359425 = 0, $$2369$lcssa = 0, $$2369471 = 0, $$2378$lcssa = 0, $$2378452 = 0, $$2383$lcssa = 0, $$2383451 = 0;
 var $$3360 = 0, $$idx$val = 0, $$idx394$val = 0, $$idx395$val = 0, $$idx396$val = 0, $$lcssa415 = 0, $$lcssa418 = 0, $$off = 0, $$off$us = 0, $$off406 = 0, $$pr = 0, $$pre = 0, $$pre$i = 0, $$pre$i$us = 0, $$pre541 = 0, $$pre543 = 0, $$pre545 = 0, $$pre546 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $exitcond = 0, $exitcond536 = 0;
 var $or$cond = 0, $or$cond392 = 0, $phitmp = 0, $scevgep = 0, $scevgep532 = 0, $scevgep533 = 0, $scevgep534 = 0, $scevgep535 = 0, $scevgep537 = 0, $scevgep538 = 0, $spec$select = 0, $spec$select389 = 0, $storemerge407478 = 0, $storemerge458 = 0, $switch$split2D = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer16 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 64|0;
 $3 = HEAP32[$0>>2]|0;
 (_clock_gettime(0,($2|0))|0);
 $4 = HEAP32[$2>>2]|0;
 $5 = ($4*1000)|0;
 $6 = ((($2)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7|0) / 1000000)&-1;
 $9 = (($8) + ($5))|0;
 $10 = ((($0)) + 20|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($0)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 __zbar_qr_reset($12);
 $13 = HEAP32[$1>>2]|0;
 $switch$split2D = ($13|0)<(1497715271);
 L1: do {
  if ($switch$split2D) {
   switch ($13|0) {
   case 808466521:  {
    break L1;
    break;
   }
   default: {
    $$0 = -1;
   }
   }
   STACKTOP = sp;return ($$0|0);
  } else {
   switch ($13|0) {
   case 1497715271:  {
    break L1;
    break;
   }
   default: {
    $$0 = -1;
   }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $14 = ((($0)) + 24|0);
 HEAP32[$14>>2] = $1;
 _zbar_image_scanner_recycle_image($0,$1);
 $15 = ((($0)) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $18 = (__zbar_symbol_set_create()|0);
  HEAP32[$15>>2] = $18;
  $19 = ((($0)) + 196|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 1)|0;
  HEAP32[$19>>2] = $21;
  _zbar_symbol_set_ref($18,1);
  $$0348 = $18;
 } else {
  _zbar_symbol_set_ref($16,2);
  $$0348 = $16;
 }
 $22 = ((($1)) + 64|0);
 HEAP32[$22>>2] = $$0348;
 $23 = ((($1)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($1)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($1)) + 20|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($1)) + 28|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + ($28))|0;
 $32 = ($31>>>0)>($24>>>0);
 if ($32) {
  ___assert_fail((132405|0),(132094|0),683,(132414|0));
  // unreachable;
 }
 $33 = ((($1)) + 24|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($1)) + 32|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + ($34))|0;
 $38 = ($37>>>0)>($26>>>0);
 if ($38) {
  ___assert_fail((132430|0),(132094|0),685,(132414|0));
  // unreachable;
 }
 $39 = ((($1)) + 12|0);
 $40 = HEAP32[$39>>2]|0;
 (_zbar_scanner_new_scan($3)|0);
 $41 = ((($0)) + 112|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)>(0);
 L17: do {
  if ($43) {
   $44 = HEAP32[$35>>2]|0;
   $45 = (($44) + -1)|0;
   $46 = (($45>>>0) % ($42>>>0))&-1;
   $47 = (($46) + 1)|0;
   $48 = $47 >>> 1;
   $49 = $44 >>> 1;
   $50 = ($48>>>0)>($49>>>0);
   $spec$select = $50 ? $49 : $48;
   $51 = HEAP32[$33>>2]|0;
   $52 = (($spec$select) + ($51))|0;
   $53 = ($52>>>0)>($26>>>0);
   if ($53) {
    ___assert_fail((132439|0),(132094|0),703,(132414|0));
    // unreachable;
   }
   $54 = ((($0)) + 32|0);
   HEAP32[$54>>2] = 0;
   $55 = HEAP32[$27>>2]|0;
   $56 = ((($0)) + 44|0);
   HEAP32[$56>>2] = $52;
   $57 = ($52>>>0)<($37>>>0);
   if ($57) {
    $58 = Math_imul($52, $24)|0;
    $59 = (($55) + ($58))|0;
    $60 = (($40) + ($59)|0);
    $61 = HEAP32[32495]|0;
    $62 = ((($0)) + 36|0);
    $63 = ((($0)) + 28|0);
    $64 = ((($0)) + 40|0);
    $65 = Math_imul($42, $24)|0;
    $66 = (($65) + -1)|0;
    $67 = (($65) + 1)|0;
    $$0354480 = $60;$$0367479 = $55;$69 = $55;$storemerge407478 = $52;
    while(1) {
     $68 = (0)>(127);
     if ($68) {
      HEAP32[$vararg_buffer>>2] = 132414;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $$0367479;
      $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
      HEAP32[$vararg_ptr2>>2] = $storemerge407478;
      $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
      HEAP32[$vararg_ptr3>>2] = $$0354480;
      (_fprintf($61,132451,$vararg_buffer)|0);
     }
     HEAP32[$62>>2] = 1;
     HEAP32[$63>>2] = 1;
     HEAP32[$64>>2] = $69;
     $70 = ($$0367479>>>0)<($31>>>0);
     if ($70) {
      $71 = (0 - ($$0367479))|0;
      $$1355465 = $$0354480;$$1368464 = $$0367479;
      while(1) {
       $72 = HEAP8[$$1355465>>0]|0;
       $73 = (($$1368464) + 1)|0;
       $74 = ((($$1355465)) + 1|0);
       $75 = $72&255;
       (_zbar_scan_y($3,$75)|0);
       $exitcond536 = ($73|0)==($31|0);
       if ($exitcond536) {
        break;
       } else {
        $$1355465 = $74;$$1368464 = $73;
       }
      }
      $scevgep534 = (($$0354480) + ($31)|0);
      $scevgep535 = (($scevgep534) + ($71)|0);
      $$1355$lcssa = $scevgep535;$$1368$lcssa = $31;
     } else {
      $$1355$lcssa = $$0354480;$$1368$lcssa = $$0367479;
     }
     $76 = (($40) + ($$1368$lcssa)|0);
     $77 = Math_imul($storemerge407478, $24)|0;
     $78 = (($76) + ($77)|0);
     $79 = ($$1355$lcssa|0)==($78|0);
     if (!($79)) {
      label = 21;
      break;
     }
     $$idx396$val = HEAP32[$0>>2]|0;
     (_zbar_scanner_flush($$idx396$val)|0);
     (_zbar_scanner_flush($$idx396$val)|0);
     (_zbar_scanner_new_scan($$idx396$val)|0);
     $80 = (($$1368$lcssa) + -1)|0;
     $81 = (($storemerge407478) + ($42))|0;
     $82 = (($$1355$lcssa) + ($66)|0);
     HEAP32[$56>>2] = $81;
     $83 = ($81>>>0)<($37>>>0);
     if (!($83)) {
      break L17;
     }
     $84 = (0)>(127);
     if ($84) {
      HEAP32[$vararg_buffer4>>2] = 132414;
      $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
      HEAP32[$vararg_ptr7>>2] = $80;
      $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
      HEAP32[$vararg_ptr8>>2] = $81;
      $vararg_ptr9 = ((($vararg_buffer4)) + 12|0);
      HEAP32[$vararg_ptr9>>2] = $82;
      (_fprintf($61,132510,$vararg_buffer4)|0);
     }
     HEAP32[$62>>2] = -1;
     HEAP32[$63>>2] = -1;
     HEAP32[$64>>2] = $31;
     $85 = ($$1368$lcssa|0)>($69|0);
     if ($85) {
      $86 = (($69) + -1)|0;
      $87 = (($69) - ($$0367479))|0;
      $$2356472 = $82;$$2369471 = $80;
      while(1) {
       $88 = HEAP8[$$2356472>>0]|0;
       $89 = (($$2369471) + -1)|0;
       $90 = ((($$2356472)) + -1|0);
       $91 = $88&255;
       (_zbar_scan_y($3,$91)|0);
       $92 = ($$2369471|0)>($69|0);
       if ($92) {
        $$2356472 = $90;$$2369471 = $89;
       } else {
        break;
       }
      }
      $scevgep537 = (($$0354480) + ($66)|0);
      $scevgep538 = (($scevgep537) + ($87)|0);
      $$2356$lcssa = $scevgep538;$$2369$lcssa = $86;
     } else {
      $$2356$lcssa = $82;$$2369$lcssa = $80;
     }
     $93 = (($40) + ($$2369$lcssa)|0);
     $94 = Math_imul($81, $24)|0;
     $95 = (($93) + ($94)|0);
     $96 = ($$2356$lcssa|0)==($95|0);
     if (!($96)) {
      label = 30;
      break;
     }
     $$idx395$val = HEAP32[$0>>2]|0;
     (_zbar_scanner_flush($$idx395$val)|0);
     (_zbar_scanner_flush($$idx395$val)|0);
     (_zbar_scanner_new_scan($$idx395$val)|0);
     $97 = (($81) + ($42))|0;
     HEAP32[$56>>2] = $97;
     $98 = ($97>>>0)<($37>>>0);
     if (!($98)) {
      break L17;
     }
     $99 = (($$2356$lcssa) + ($67)|0);
     $100 = (($$2369$lcssa) + 1)|0;
     $$pre = HEAP32[$27>>2]|0;
     $$0354480 = $99;$$0367479 = $100;$69 = $$pre;$storemerge407478 = $97;
    }
    if ((label|0) == 21) {
     ___assert_fail((132478|0),(132094|0),721,(132414|0));
     // unreachable;
    }
    else if ((label|0) == 30) {
     ___assert_fail((132478|0),(132094|0),739,(132414|0));
     // unreachable;
    }
   }
  }
 } while(0);
 $101 = ((($0)) + 28|0);
 HEAP32[$101>>2] = 0;
 $102 = ((($0)) + 108|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = ($103|0)>(0);
 L51: do {
  if ($104) {
   $105 = HEAP32[$29>>2]|0;
   $106 = (($105) + -1)|0;
   $107 = (($106>>>0) % ($103>>>0))&-1;
   $108 = (($107) + 1)|0;
   $109 = $108 >>> 1;
   $110 = $105 >>> 1;
   $111 = ($109>>>0)>($110>>>0);
   $spec$select389 = $111 ? $110 : $109;
   $112 = HEAP32[$27>>2]|0;
   $113 = (($spec$select389) + ($112))|0;
   $114 = ($113>>>0)>($24>>>0);
   if ($114) {
    ___assert_fail((132537|0),(132094|0),759,(132414|0));
    // unreachable;
   }
   $115 = HEAP32[$33>>2]|0;
   $116 = ((($0)) + 44|0);
   HEAP32[$116>>2] = $113;
   $117 = ($113>>>0)<($31>>>0);
   if ($117) {
    $118 = Math_imul($115, $24)|0;
    $119 = (($118) + ($113))|0;
    $120 = (($40) + ($119)|0);
    $121 = HEAP32[32495]|0;
    $122 = ((($0)) + 36|0);
    $123 = ((($0)) + 32|0);
    $124 = ((($0)) + 40|0);
    $125 = (0 - ($24))|0;
    $126 = (($103) - ($24))|0;
    $127 = (($103) + ($24))|0;
    $$0376460 = $120;$$0381459 = $115;$129 = $115;$storemerge458 = $113;
    while(1) {
     $128 = (0)>(127);
     if ($128) {
      HEAP32[$vararg_buffer10>>2] = 132414;
      $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
      HEAP32[$vararg_ptr13>>2] = $storemerge458;
      $vararg_ptr14 = ((($vararg_buffer10)) + 8|0);
      HEAP32[$vararg_ptr14>>2] = $$0381459;
      $vararg_ptr15 = ((($vararg_buffer10)) + 12|0);
      HEAP32[$vararg_ptr15>>2] = $$0376460;
      (_fprintf($121,132549,$vararg_buffer10)|0);
     }
     HEAP32[$122>>2] = 1;
     HEAP32[$123>>2] = 1;
     HEAP32[$124>>2] = $129;
     $130 = ($37>>>0)>($$0381459>>>0);
     if ($130) {
      $131 = (($37) - ($$0381459))|0;
      $132 = Math_imul($24, $131)|0;
      $$1377445 = $$0376460;$$1382444 = $$0381459;
      while(1) {
       $133 = HEAP8[$$1377445>>0]|0;
       $134 = (($$1382444) + 1)|0;
       $135 = (($$1377445) + ($24)|0);
       $136 = $133&255;
       (_zbar_scan_y($3,$136)|0);
       $exitcond = ($134|0)==($37|0);
       if ($exitcond) {
        break;
       } else {
        $$1377445 = $135;$$1382444 = $134;
       }
      }
      $scevgep = (($$0376460) + ($132)|0);
      $$1377$lcssa = $scevgep;$$1382$lcssa = $37;
     } else {
      $$1377$lcssa = $$0376460;$$1382$lcssa = $$0381459;
     }
     $137 = (($40) + ($storemerge458)|0);
     $138 = Math_imul($$1382$lcssa, $24)|0;
     $139 = (($137) + ($138)|0);
     $140 = ($$1377$lcssa|0)==($139|0);
     if (!($140)) {
      label = 45;
      break;
     }
     $$idx394$val = HEAP32[$0>>2]|0;
     (_zbar_scanner_flush($$idx394$val)|0);
     (_zbar_scanner_flush($$idx394$val)|0);
     (_zbar_scanner_new_scan($$idx394$val)|0);
     $141 = (($storemerge458) + ($103))|0;
     $142 = (($$1382$lcssa) + -1)|0;
     $143 = (($$1377$lcssa) + ($126)|0);
     HEAP32[$116>>2] = $141;
     $144 = ($141>>>0)<($31>>>0);
     if (!($144)) {
      break L51;
     }
     $145 = (0)>(127);
     if ($145) {
      HEAP32[$vararg_buffer16>>2] = 132414;
      $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
      HEAP32[$vararg_ptr19>>2] = $141;
      $vararg_ptr20 = ((($vararg_buffer16)) + 8|0);
      HEAP32[$vararg_ptr20>>2] = $142;
      $vararg_ptr21 = ((($vararg_buffer16)) + 12|0);
      HEAP32[$vararg_ptr21>>2] = $143;
      (_fprintf($121,132576,$vararg_buffer16)|0);
     }
     HEAP32[$122>>2] = -1;
     HEAP32[$123>>2] = -1;
     HEAP32[$124>>2] = $37;
     $146 = ($$1382$lcssa|0)>($129|0);
     if ($146) {
      $147 = (($129) + -1)|0;
      $148 = (($147) - ($$1382$lcssa))|0;
      $149 = Math_imul($24, $148)|0;
      $$2378452 = $143;$$2383451 = $142;
      while(1) {
       $150 = HEAP8[$$2378452>>0]|0;
       $151 = (($$2383451) + -1)|0;
       $152 = (($$2378452) + ($125)|0);
       $153 = $150&255;
       (_zbar_scan_y($3,$153)|0);
       $154 = ($$2383451|0)>($129|0);
       if ($154) {
        $$2378452 = $152;$$2383451 = $151;
       } else {
        break;
       }
      }
      $scevgep532 = (($$1377$lcssa) + ($103)|0);
      $scevgep533 = (($scevgep532) + ($149)|0);
      $$2378$lcssa = $scevgep533;$$2383$lcssa = $147;
     } else {
      $$2378$lcssa = $143;$$2383$lcssa = $142;
     }
     $155 = (($40) + ($141)|0);
     $156 = Math_imul($$2383$lcssa, $24)|0;
     $157 = (($155) + ($156)|0);
     $158 = ($$2378$lcssa|0)==($157|0);
     if (!($158)) {
      label = 54;
      break;
     }
     $$idx$val = HEAP32[$0>>2]|0;
     (_zbar_scanner_flush($$idx$val)|0);
     (_zbar_scanner_flush($$idx$val)|0);
     (_zbar_scanner_new_scan($$idx$val)|0);
     $159 = (($141) + ($103))|0;
     HEAP32[$116>>2] = $159;
     $160 = ($159>>>0)<($31>>>0);
     if (!($160)) {
      break L51;
     }
     $161 = (($$2378$lcssa) + ($127)|0);
     $162 = (($$2383$lcssa) + 1)|0;
     $$pre541 = HEAP32[$33>>2]|0;
     $$0376460 = $161;$$0381459 = $162;$129 = $$pre541;$storemerge458 = $159;
    }
    if ((label|0) == 45) {
     ___assert_fail((132478|0),(132094|0),775,(132414|0));
     // unreachable;
    }
    else if ((label|0) == 54) {
     ___assert_fail((132478|0),(132094|0),793,(132414|0));
     // unreachable;
    }
   }
  }
 } while(0);
 $163 = ((($0)) + 32|0);
 HEAP32[$163>>2] = 0;
 HEAP32[$14>>2] = 0;
 $164 = HEAP32[$11>>2]|0;
 (__zbar_qr_decode($164,$0,$1)|0);
 $165 = ((($0)) + 92|0);
 $166 = HEAP32[$165>>2]|0;
 $167 = ($166|0)==(0);
 if ($167) {
  $168 = ($103|0)==(1);
  if ($168) {
   $178 = 1;
  } else {
   $169 = HEAP32[$41>>2]|0;
   $170 = ($169|0)==(1);
   $phitmp = $170&1;
   $178 = $phitmp;
  }
 } else {
  $178 = 0;
 }
 $171 = ((($$0348)) + 4|0);
 $172 = HEAP32[$171>>2]|0;
 $173 = ($172|0)==(0);
 if ($173) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $174 = ((($$0348)) + 8|0);
 $175 = HEAP32[$174>>2]|0;
 $176 = ($175|0)==(0|0);
 do {
  if (!($176)) {
   $177 = ($178|0)==(0);
   $179 = ((($0)) + 96|0);
   $$0357$ph441 = $174;$$0361$ph438 = 0;$$0364$ph435 = 0;$340 = $175;
   L94: while(1) {
    L96: do {
     if ($177) {
      $181 = $340;
      while(1) {
       $180 = ((($181)) + 56|0);
       $182 = HEAP32[$180>>2]|0;
       $183 = ($182|0)<(1);
       if (!($183)) {
        $$1362 = $$0361$ph438;$$1365 = $$0364$ph435;$284 = $181;
        break L96;
       }
       $184 = HEAP32[$181>>2]|0;
       $$off$us = (($184) + -2)|0;
       $185 = ($$off$us>>>0)<(13);
       if ($185) {
        $$lcssa415 = $181;$$lcssa418 = $184;
        label = 100;
        break L96;
       }
       $cond = ($184|0)==(38);
       if (!($cond)) {
        $$1362 = $$0361$ph438;$$1365 = $$0364$ph435;$284 = $181;
        break L96;
       }
       $186 = ((($181)) + 60|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)<(4);
       if (!($188)) {
        $$1362 = $$0361$ph438;$$1365 = $$0364$ph435;$284 = $181;
        break L96;
       }
       $189 = HEAP32[$165>>2]|0;
       $190 = ($189|0)==(0);
       if (!($190)) {
        $191 = HEAP32[$179>>2]|0;
        $192 = ($191|0)==(0|0);
        if ($192) {
         label = 99;
         break L94;
        }
        $193 = ((($181)) + 16|0);
        $194 = ((($181)) + 52|0);
        $195 = ((($181)) + 20|0);
        $$022$i$us = $179;$197 = $191;$199 = 38;
        L107: while(1) {
         $196 = HEAP32[$197>>2]|0;
         $198 = ($196|0)==($199|0);
         do {
          if ($198) {
           $200 = ((($197)) + 16|0);
           $201 = HEAP32[$200>>2]|0;
           $202 = HEAP32[$193>>2]|0;
           $203 = ($201|0)==($202|0);
           if (!($203)) {
            break;
           }
           $204 = ((($197)) + 20|0);
           $205 = HEAP32[$204>>2]|0;
           $206 = HEAP32[$195>>2]|0;
           $207 = (_memcmp($205,$206,$201)|0);
           $208 = ($207|0)==(0);
           if ($208) {
            break L107;
           }
          }
         } while(0);
         $209 = HEAP32[$194>>2]|0;
         $210 = ((($197)) + 52|0);
         $211 = HEAP32[$210>>2]|0;
         $212 = (($209) - ($211))|0;
         $213 = ($212>>>0)>(4000);
         $214 = ((($197)) + 44|0);
         if ($213) {
          $215 = HEAP32[$214>>2]|0;
          HEAP32[$214>>2] = 0;
          $216 = HEAP32[$$022$i$us>>2]|0;
          __zbar_image_scanner_recycle_syms($0,$216);
          HEAP32[$$022$i$us>>2] = $215;
          $217 = $215;
          $$1$i$us = $$022$i$us;$219 = $217;
         } else {
          $$pre$i$us = HEAP32[$214>>2]|0;
          $$1$i$us = $214;$219 = $$pre$i$us;
         }
         $218 = ($219|0)==(0|0);
         if ($218) {
          label = 99;
          break L94;
         }
         $$pre545 = HEAP32[$181>>2]|0;
         $$022$i$us = $$1$i$us;$197 = $219;$199 = $$pre545;
        }
        $220 = ((($197)) + 56|0);
        $221 = HEAP32[$220>>2]|0;
        $222 = (($221) + -1)|0;
        HEAP32[$220>>2] = $222;
       }
       $223 = ((($181)) + 44|0);
       $224 = HEAP32[$223>>2]|0;
       HEAP32[$$0357$ph441>>2] = $224;
       $225 = HEAP32[$171>>2]|0;
       $226 = (($225) + -1)|0;
       HEAP32[$171>>2] = $226;
       HEAP32[$223>>2] = 0;
       __zbar_image_scanner_recycle_syms($0,$181);
       $227 = HEAP32[$$0357$ph441>>2]|0;
       $228 = ($227|0)==(0|0);
       if ($228) {
        $$0361$ph$lcssa422 = $$0361$ph438;$$0364$ph$lcssa424 = $$0364$ph435;
        label = 106;
        break L94;
       } else {
        $181 = $227;
       }
      }
     } else {
      $230 = $340;
      while(1) {
       $229 = ((($230)) + 56|0);
       $231 = HEAP32[$229>>2]|0;
       $232 = ($231|0)<(1);
       if (!($232)) {
        $$1362 = $$0361$ph438;$$1365 = $$0364$ph435;$284 = $230;
        break L96;
       }
       $233 = HEAP32[$230>>2]|0;
       $$off = (($233) + -2)|0;
       $234 = ($$off>>>0)<(13);
       if (!($234)) {
        switch ($233|0) {
        case 38: case 35: case 34:  {
         break;
        }
        default: {
         $$1362 = $$0361$ph438;$$1365 = $$0364$ph435;$284 = $230;
         break L96;
        }
        }
       }
       $235 = ((($230)) + 60|0);
       $236 = HEAP32[$235>>2]|0;
       $237 = ($236|0)<(4);
       if (!($237)) {
        $$lcssa415 = $230;$$lcssa418 = $233;
        label = 100;
        break L96;
       }
       $238 = HEAP32[$165>>2]|0;
       $239 = ($238|0)==(0);
       if (!($239)) {
        $240 = HEAP32[$179>>2]|0;
        $241 = ($240|0)==(0|0);
        if ($241) {
         label = 99;
         break L94;
        }
        $242 = ((($230)) + 16|0);
        $243 = ((($230)) + 52|0);
        $244 = ((($230)) + 20|0);
        $$022$i = $179;$246 = $240;$248 = $233;
        L131: while(1) {
         $245 = HEAP32[$246>>2]|0;
         $247 = ($245|0)==($248|0);
         do {
          if ($247) {
           $249 = ((($246)) + 16|0);
           $250 = HEAP32[$249>>2]|0;
           $251 = HEAP32[$242>>2]|0;
           $252 = ($250|0)==($251|0);
           if (!($252)) {
            break;
           }
           $253 = ((($246)) + 20|0);
           $254 = HEAP32[$253>>2]|0;
           $255 = HEAP32[$244>>2]|0;
           $256 = (_memcmp($254,$255,$250)|0);
           $257 = ($256|0)==(0);
           if ($257) {
            break L131;
           }
          }
         } while(0);
         $258 = HEAP32[$243>>2]|0;
         $259 = ((($246)) + 52|0);
         $260 = HEAP32[$259>>2]|0;
         $261 = (($258) - ($260))|0;
         $262 = ($261>>>0)>(4000);
         $263 = ((($246)) + 44|0);
         if ($262) {
          $264 = HEAP32[$263>>2]|0;
          HEAP32[$263>>2] = 0;
          $265 = HEAP32[$$022$i>>2]|0;
          __zbar_image_scanner_recycle_syms($0,$265);
          HEAP32[$$022$i>>2] = $264;
          $266 = $264;
          $$1$i = $$022$i;$268 = $266;
         } else {
          $$pre$i = HEAP32[$263>>2]|0;
          $$1$i = $263;$268 = $$pre$i;
         }
         $267 = ($268|0)==(0|0);
         if ($267) {
          label = 99;
          break L94;
         }
         $$pre543 = HEAP32[$230>>2]|0;
         $$022$i = $$1$i;$246 = $268;$248 = $$pre543;
        }
        $269 = ((($246)) + 56|0);
        $270 = HEAP32[$269>>2]|0;
        $271 = (($270) + -1)|0;
        HEAP32[$269>>2] = $271;
       }
       $277 = ((($230)) + 44|0);
       $278 = HEAP32[$277>>2]|0;
       HEAP32[$$0357$ph441>>2] = $278;
       $279 = HEAP32[$171>>2]|0;
       $280 = (($279) + -1)|0;
       HEAP32[$171>>2] = $280;
       HEAP32[$277>>2] = 0;
       __zbar_image_scanner_recycle_syms($0,$230);
       $281 = HEAP32[$$0357$ph441>>2]|0;
       $282 = ($281|0)==(0|0);
       if ($282) {
        $$0361$ph$lcssa422 = $$0361$ph438;$$0364$ph$lcssa424 = $$0364$ph435;
        label = 106;
        break L94;
       } else {
        $230 = $281;
       }
      }
     }
    } while(0);
    do {
     if ((label|0) == 100) {
      label = 0;
      $272 = ($$lcssa418>>>0)>(14);
      $273 = ($$lcssa418|0)==(10);
      $or$cond392 = $272 | $273;
      if ($or$cond392) {
       $$1362 = $$0361$ph438;$$1365 = $$0364$ph435;$284 = $$lcssa415;
      } else {
       $274 = ($$lcssa418>>>0)>(5);
       if ($274) {
        $275 = (($$0364$ph435) + 1)|0;
        $$1362 = $$0361$ph438;$$1365 = $275;$284 = $$lcssa415;
        break;
       } else {
        $276 = (($$0361$ph438) + 1)|0;
        $$1362 = $276;$$1365 = $$0364$ph435;$284 = $$lcssa415;
        break;
       }
      }
     }
    } while(0);
    $283 = ((($284)) + 44|0);
    $285 = HEAP32[$283>>2]|0;
    $286 = ($285|0)==(0|0);
    if ($286) {
     $$0361$ph$lcssa422 = $$1362;$$0364$ph$lcssa424 = $$1365;
     label = 106;
     break;
    } else {
     $$0357$ph441 = $283;$$0361$ph438 = $$1362;$$0364$ph435 = $$1365;$340 = $285;
    }
   }
   if ((label|0) == 99) {
    ___assert_fail((132146|0),(132094|0),831,(132414|0));
    // unreachable;
   }
   else if ((label|0) == 106) {
    $287 = ($$0364$ph$lcssa424|0)==(1);
    $288 = ($$0361$ph$lcssa422|0)==(1);
    $or$cond = $287 & $288;
    if (!($or$cond)) {
     break;
    }
    $289 = ((($0)) + 104|0);
    $290 = HEAP32[$289>>2]|0;
    $291 = ($290|0)==(0);
    if ($291) {
     break;
    }
    $292 = HEAP32[$174>>2]|0;
    $293 = ($292|0)==(0|0);
    if ($293) {
     ___assert_fail((132603|0),(132094|0),871,(132414|0));
     // unreachable;
    }
    $$0349427 = 0;$$0350426 = 0;$$2359425 = $174;$295 = $292;
    while(1) {
     $294 = HEAP32[$295>>2]|0;
     $$off406 = (($294) + -2)|0;
     $296 = ($$off406>>>0)<(13);
     $297 = ((($295)) + 44|0);
     if ($296) {
      $298 = HEAP32[$297>>2]|0;
      HEAP32[$$2359425>>2] = $298;
      $299 = HEAP32[$171>>2]|0;
      $300 = (($299) + -1)|0;
      HEAP32[$171>>2] = $300;
      HEAP32[$297>>2] = 0;
      $301 = ($294>>>0)<(6);
      $$0350$ = $301 ? $$0350426 : $295;
      $$$0349 = $301 ? $295 : $$0349427;
      $$1 = $$$0349;$$1351 = $$0350$;$$3360 = $$2359425;
     } else {
      $$1 = $$0349427;$$1351 = $$0350426;$$3360 = $297;
     }
     $302 = HEAP32[$$3360>>2]|0;
     $303 = ($302|0)==(0|0);
     if ($303) {
      break;
     } else {
      $$0349427 = $$1;$$0350426 = $$1351;$$2359425 = $$3360;$295 = $302;
     }
    }
    $304 = ($$1351|0)==(0|0);
    if ($304) {
     ___assert_fail((132603|0),(132094|0),871,(132414|0));
     // unreachable;
    }
    $305 = ($$1|0)==(0|0);
    if ($305) {
     ___assert_fail((132607|0),(132094|0),872,(132414|0));
     // unreachable;
    } else {
     $306 = ((($$1351)) + 16|0);
     $307 = HEAP32[$306>>2]|0;
     $308 = ((($$1)) + 16|0);
     $309 = HEAP32[$308>>2]|0;
     $310 = (($307) + 1)|0;
     $311 = (($310) + ($309))|0;
     $312 = (__zbar_image_scanner_alloc_sym($0,15,$311)|0);
     $313 = ((($$1351)) + 36|0);
     $314 = HEAP32[$313>>2]|0;
     $315 = ((($312)) + 36|0);
     HEAP32[$315>>2] = $314;
     $316 = (__zbar_symbol_set_create()|0);
     $317 = ((($312)) + 48|0);
     HEAP32[$317>>2] = $316;
     $318 = ((($312)) + 20|0);
     $319 = HEAP32[$318>>2]|0;
     $320 = ((($$1351)) + 20|0);
     $321 = HEAP32[$320>>2]|0;
     $322 = HEAP32[$306>>2]|0;
     _memcpy(($319|0),($321|0),($322|0))|0;
     $323 = HEAP32[$318>>2]|0;
     $324 = HEAP32[$306>>2]|0;
     $325 = (($323) + ($324)|0);
     $326 = ((($$1)) + 20|0);
     $327 = HEAP32[$326>>2]|0;
     $328 = HEAP32[$308>>2]|0;
     $329 = (($328) + 1)|0;
     _memcpy(($325|0),($327|0),($329|0))|0;
     $330 = HEAP32[$317>>2]|0;
     $331 = ((($330)) + 8|0);
     HEAP32[$331>>2] = $$1351;
     $332 = ((($$1351)) + 44|0);
     HEAP32[$332>>2] = $$1;
     $333 = ((($330)) + 4|0);
     HEAP32[$333>>2] = 2;
     __zbar_image_scanner_add_sym($0,$312);
     break;
    }
   }
  }
 } while(0);
 $$pr = HEAP32[$171>>2]|0;
 $334 = ($$pr|0)==(0);
 if ($334) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $335 = ((($0)) + 16|0);
 $336 = HEAP32[$335>>2]|0;
 $337 = ($336|0)==(0|0);
 if ($337) {
  $$0 = $$pr;
  STACKTOP = sp;return ($$0|0);
 }
 $338 = ((($0)) + 12|0);
 $339 = HEAP32[$338>>2]|0;
 FUNCTION_TABLE_vii[$336 & 1]($1,$339);
 $$pre546 = HEAP32[$171>>2]|0;
 $$0 = $$pre546;
 STACKTOP = sp;return ($$0|0);
}
function _zbar_scanner_create($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $1 = (_malloc(48)|0);
 HEAP32[$1>>2] = $0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 4;
 $3 = ((($1)) + 8|0);
 dest=$3; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($1)) + 32|0);
 HEAP32[$4>>2] = 4;
 $5 = ($0|0)==(0|0);
 if ($5) {
  return ($1|0);
 }
 _zbar_decoder_reset($0);
 return ($1|0);
}
function _zbar_scanner_destroy($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function _zbar_scanner_get_width($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 44|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _zbar_scanner_get_edge($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) - ($1))|0;
 $6 = (($5) + -48)|0;
 $7 = (5 - ($2))|0;
 $8 = ($7|0)>(0);
 if ($8) {
  $9 = $6 >>> $7;
  return ($9|0);
 } else {
  $10 = ($7|0)==(0);
  $11 = (0 - ($7))|0;
  $12 = $10 ? 0 : $11;
  $spec$select = $6 << $12;
  return ($spec$select|0);
 }
 return (0)|0;
}
function _zbar_scanner_flush($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 << 5;
 $7 = $6 | 16;
 $8 = ((($0)) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=($7|0);
 $11 = ($2|0)>(0);
 $or$cond = $11 | $10;
 if (!($or$cond)) {
  $23 = ((($0)) + 44|0);
  HEAP32[$23>>2] = 0;
  HEAP32[$1>>2] = 0;
  $24 = HEAP32[$0>>2]|0;
  $25 = ($24|0)==(0|0);
  if ($25) {
   $$0 = 1;
   return ($$0|0);
  }
  $26 = (_zbar_decode_width($24,0)|0);
  $$0 = $26;
  return ($$0|0);
 }
 $12 = ((($0)) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 if ($14) {
  HEAP32[$12>>2] = $9;
  $16 = $9;
 } else {
  $16 = $13;
 }
 $15 = (($9) - ($16))|0;
 $17 = ((($0)) + 44|0);
 HEAP32[$17>>2] = $15;
 HEAP32[$12>>2] = $9;
 $18 = HEAP32[$0>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $$0$i = 1;$22 = $2;
 } else {
  $20 = (_zbar_decode_width($18,$15)|0);
  $$pre = HEAP32[$1>>2]|0;
  $$0$i = $20;$22 = $$pre;
 }
 HEAP32[$8>>2] = $7;
 $21 = (0 - ($22))|0;
 HEAP32[$1>>2] = $21;
 $$0 = $$0$i;
 return ($$0|0);
}
function _zbar_scanner_new_scan($0) {
 $0 = $0|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$lcssa = 0, $$014 = 0, $$1 = 0, $$117 = 0, $$pre = 0, $$pre$i = 0, $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 $4 = ((($0)) + 8|0);
 L1: do {
  if ($3) {
   $$0$lcssa = 0;$$pre$phiZ2D = $0;
  } else {
   $5 = ((($0)) + 36|0);
   $6 = ((($0)) + 40|0);
   $7 = ((($0)) + 44|0);
   $$014 = 0;$14 = $2;
   while(1) {
    $8 = HEAP32[$4>>2]|0;
    $9 = $8 << 5;
    $10 = $9 | 16;
    $11 = HEAP32[$5>>2]|0;
    $12 = ($11|0)!=($10|0);
    $13 = ($14|0)>(0);
    $or$cond$i = $13 | $12;
    if ($or$cond$i) {
     $15 = HEAP32[$6>>2]|0;
     $16 = ($15|0)==(0);
     if ($16) {
      HEAP32[$6>>2] = $11;
      $18 = $11;
     } else {
      $18 = $15;
     }
     $17 = (($11) - ($18))|0;
     HEAP32[$7>>2] = $17;
     HEAP32[$6>>2] = $11;
     $19 = HEAP32[$0>>2]|0;
     $20 = ($19|0)==(0|0);
     if ($20) {
      $$0$i$i = 1;$23 = $14;
     } else {
      $21 = (_zbar_decode_width($19,$17)|0);
      $$pre$i = HEAP32[$1>>2]|0;
      $$0$i$i = $21;$23 = $$pre$i;
     }
     HEAP32[$5>>2] = $10;
     $22 = (0 - ($23))|0;
     HEAP32[$1>>2] = $22;
     $$0$i = $$0$i$i;$30 = $22;
    } else {
     HEAP32[$7>>2] = 0;
     HEAP32[$1>>2] = 0;
     $24 = HEAP32[$0>>2]|0;
     $25 = ($24|0)==(0|0);
     if ($25) {
      break;
     }
     $27 = (_zbar_decode_width($24,0)|0);
     $$pre = HEAP32[$1>>2]|0;
     $$0$i = $27;$30 = $$pre;
    }
    $28 = ($$0$i>>>0)>($$014>>>0);
    $$1 = $28 ? $$0$i : $$014;
    $29 = ($30|0)==(0);
    if ($29) {
     $$0$lcssa = $$1;$$pre$phiZ2D = $0;
     break L1;
    } else {
     $$014 = $$1;$14 = $30;
    }
   }
   $26 = ($$014|0)==(0);
   $$117 = $26 ? 1 : $$014;
   $$0$lcssa = $$117;$$pre$phiZ2D = $0;
  }
 } while(0);
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $31 = ((($0)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($0)) + 32|0);
 HEAP32[$33>>2] = $32;
 $34 = HEAP32[$$pre$phiZ2D>>2]|0;
 $35 = ($34|0)==(0|0);
 if ($35) {
  return ($$0$lcssa|0);
 }
 _zbar_decoder_new_scan($34);
 return ($$0$lcssa|0);
}
function _zbar_scan_y($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$i = 0, $$089 = 0, $$090 = 0, $$090$lobit = 0, $$091101 = 0, $$1 = 0, $$pre = 0, $$pre$phi1$iZ2D = 0, $$sink = 0, $$unshifted = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ispos = 0, $ispos92 = 0, $ispos94 = 0, $ispos96 = 0, $neg = 0, $neg93 = 0, $neg95 = 0, $neg97 = 0, $or$cond = 0;
 var $spec$store$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 3)|0;
 $5 = $4 & 3;
 $6 = (((($0)) + 12|0) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($3|0)==(0);
 if ($8) {
  $15 = ((($0)) + 24|0);
  HEAP32[$15>>2] = $1;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $1;
  $17 = ((($0)) + 16|0);
  HEAP32[$17>>2] = $1;
  $18 = ((($0)) + 12|0);
  HEAP32[$18>>2] = $1;
  $$0 = $1;$$089 = $1;
 } else {
  $9 = (($1) - ($7))|0;
  $10 = ($9*25)|0;
  $11 = $10 >> 5;
  $12 = (($11) + ($7))|0;
  $13 = $3 & 3;
  $14 = (((($0)) + 12|0) + ($13<<2)|0);
  HEAP32[$14>>2] = $12;
  $$0 = $7;$$089 = $12;
 }
 $19 = (($3) + 2)|0;
 $20 = $19 & 3;
 $21 = (((($0)) + 12|0) + ($20<<2)|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($3) + 1)|0;
 $24 = $23 & 3;
 $25 = (((($0)) + 12|0) + ($24<<2)|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($$0) - ($22))|0;
 $28 = (($22) - ($26))|0;
 $ispos = ($27|0)>(-1);
 $neg = (0 - ($27))|0;
 $29 = $ispos ? $27 : $neg;
 $ispos92 = ($28|0)>(-1);
 $neg93 = (0 - ($28))|0;
 $30 = $ispos92 ? $28 : $neg93;
 $31 = ($29|0)<($30|0);
 $$unshifted = $28 ^ $27;
 $32 = ($$unshifted|0)>(-1);
 $or$cond = $32 & $31;
 $$090 = $or$cond ? $28 : $27;
 $33 = $$0 << 1;
 $34 = (($$089) - ($33))|0;
 $35 = (($34) + ($22))|0;
 $36 = $22 << 1;
 $37 = (($$0) - ($36))|0;
 $38 = (($37) + ($26))|0;
 $39 = ($35|0)!=(0);
 do {
  if ($39) {
   $40 = ($35|0)>(0);
   if ($40) {
    $41 = ($38|0)<(0);
    if ($41) {
     break;
    } else {
     $$1 = 0;
    }
    HEAP32[$2>>2] = $23;
    return ($$1|0);
   } else {
    $42 = ($38|0)>(0);
    if ($42) {
     break;
    } else {
     $$1 = 0;
    }
    HEAP32[$2>>2] = $23;
    return ($$1|0);
   }
  }
 } while(0);
 $43 = ((($0)) + 32|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($0)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($44>>>0)>($46>>>0);
 do {
  if ($47) {
   $48 = ((($0)) + 44|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($49|0)==(0);
   if ($50) {
    $$0$i = $46;
   } else {
    $51 = $3 << 5;
    $52 = ((($0)) + 40|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (($51) - ($53))|0;
    $55 = Math_imul($54, $44)|0;
    $56 = (($55>>>0) / ($49>>>0))&-1;
    $57 = $56 >>> 3;
    $58 = ($44>>>0)>($57>>>0);
    if ($58) {
     $59 = (($44) - ($57))|0;
     $60 = ($59>>>0)>($46>>>0);
     if ($60) {
      $$0$i = $59;
      break;
     }
    }
    HEAP32[$43>>2] = $46;
    $$0$i = $46;
   }
  } else {
   $$0$i = $46;
  }
 } while(0);
 $ispos94 = ($$090|0)>(-1);
 $neg95 = (0 - ($$090))|0;
 $61 = $ispos94 ? $$090 : $neg95;
 $62 = ($$0$i>>>0)>($61>>>0);
 if ($62) {
  $$1 = 0;
  HEAP32[$2>>2] = $23;
  return ($$1|0);
 }
 $63 = ((($0)) + 28|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ($64|0)>(0);
 $$090$lobit = $$090 >>> 31;
 $66 = ($$090|0)>(0);
 $67 = $66&1;
 $68 = $65 ? $$090$lobit : $67;
 $69 = ($68|0)==(0);
 if ($69) {
  $ispos96 = ($64|0)>(-1);
  $neg97 = (0 - ($64))|0;
  $85 = $ispos96 ? $64 : $neg97;
  $86 = ($85|0)<($61|0);
  if ($86) {
   $$091101 = 0;$91 = $46;
  } else {
   $$1 = 0;
   HEAP32[$2>>2] = $23;
   return ($$1|0);
  }
 } else {
  $70 = ($64|0)==(0);
  if ($70) {
   $71 = ((($0)) + 36|0);
   HEAP32[$71>>2] = 48;
   $72 = ((($0)) + 40|0);
   HEAP32[$72>>2] = 48;
   $$pre$phi1$iZ2D = $72;$79 = 48;$80 = 48;
  } else {
   $73 = ((($0)) + 40|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($74|0)==(0);
   $76 = ((($0)) + 36|0);
   $77 = HEAP32[$76>>2]|0;
   if ($75) {
    HEAP32[$73>>2] = $77;
    $$pre$phi1$iZ2D = $73;$79 = $77;$80 = $77;
   } else {
    $$pre$phi1$iZ2D = $73;$79 = $74;$80 = $77;
   }
  }
  $78 = (($80) - ($79))|0;
  $81 = ((($0)) + 44|0);
  HEAP32[$81>>2] = $78;
  HEAP32[$$pre$phi1$iZ2D>>2] = $80;
  $82 = HEAP32[$0>>2]|0;
  $83 = ($82|0)==(0|0);
  if ($83) {
   $$091101 = 1;$91 = $46;
  } else {
   $84 = (_zbar_decode_width($82,$78)|0);
   $$pre = HEAP32[$45>>2]|0;
   $$091101 = $84;$91 = $$pre;
  }
 }
 HEAP32[$63>>2] = $$090;
 $87 = ($61*14)|0;
 $88 = (($87) + 16)|0;
 $89 = $88 >>> 5;
 $90 = ($89>>>0)<($91>>>0);
 $spec$store$select = $90 ? $91 : $89;
 HEAP32[$43>>2] = $spec$store$select;
 $92 = (($35) - ($38))|0;
 $93 = ((($0)) + 36|0);
 HEAP32[$93>>2] = 32;
 $94 = ($92|0)==(0);
 if ($94) {
  $$sink = 16;
  label = 25;
 } else {
  if ($39) {
   $95 = $35 << 5;
   $96 = $95 | 1;
   $97 = (($96|0) / ($92|0))&-1;
   $98 = (32 - ($97))|0;
   $$sink = $98;
   label = 25;
  } else {
   $101 = 32;
  }
 }
 if ((label|0) == 25) {
  HEAP32[$93>>2] = $$sink;
  $101 = $$sink;
 }
 $99 = $3 << 5;
 $100 = (($101) + ($99))|0;
 HEAP32[$93>>2] = $100;
 $$1 = $$091101;
 HEAP32[$2>>2] = $23;
 return ($$1|0);
}
function _zbar_decoder_create() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,136)|0);
 $1 = ((($0)) + 88|0);
 HEAP32[$1>>2] = 32;
 $2 = (_malloc(32)|0);
 $3 = ((($0)) + 96|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($0)) + 132|0);
 HEAP32[$4>>2] = 1;
 dest=$0; stop=dest+88|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 return ($0|0);
}
function _zbar_decoder_reset($0) {
 $0 = $0|0;
 var $1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest=$0; stop=dest+88|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $1 = ((($0)) + 108|0);
 HEAP32[$1>>2] = 0;
 return;
}
function _zbar_decoder_destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 96|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  _free($2);
 }
 _free($0);
 return;
}
function _zbar_decoder_new_scan($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 dest=$1; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $2 = ((($0)) + 72|0);
 HEAP32[$2>>2] = 0;
 HEAP8[$0>>0] = 0;
 $3 = ((($0)) + 84|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 108|0);
 HEAP32[$4>>2] = 0;
 return;
}
function _zbar_decoder_get_data($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 96|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _zbar_decoder_get_data_length($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 92|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _zbar_decoder_get_direction($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 80|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _zbar_decoder_set_handler($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 104|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$2>>2] = $1;
 return ($3|0);
}
function _zbar_decoder_set_userdata($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 100|0);
 HEAP32[$2>>2] = $1;
 return;
}
function _zbar_decoder_get_userdata($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 100|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _zbar_decoder_get_type($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _zbar_decoder_get_modifiers($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _zbar_decode_width($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$028 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$0>>0]|0;
 $3 = $2 & 15;
 $4 = $3&255;
 $5 = (((($0)) + 4|0) + ($4<<2)|0);
 HEAP32[$5>>2] = $1;
 $6 = (($2) + 9)<<24>>24;
 $7 = $6 & 15;
 $8 = $7&255;
 $9 = (((($0)) + 4|0) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) - ($10))|0;
 HEAP32[$11>>2] = $13;
 $14 = (($2) + 15)<<24>>24;
 $15 = $14 & 15;
 $16 = $15&255;
 $17 = (((($0)) + 4|0) + ($16<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + ($13))|0;
 HEAP32[$11>>2] = $19;
 $20 = ((($0)) + 132|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 & 1;
 $23 = ($22|0)==(0);
 if ($23) {
  $28 = $2;
 } else {
  $24 = (__zbar_find_qr($0)|0);
  $25 = ($24>>>0)>(1);
  $26 = HEAP8[$0>>0]|0;
  if ($25) {
   $30 = (($26) + 1)<<24>>24;
   HEAP8[$0>>0] = $30;
   $31 = ((($0)) + 68|0);
   HEAP32[$31>>2] = $24;
   $32 = ((($0)) + 72|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)!=(0);
   $35 = ($24|0)!=(64);
   $or$cond3 = $35 & $34;
   do {
    if ($or$cond3) {
     $36 = ($33|0)==($24|0);
     if ($36) {
      HEAP32[$32>>2] = 0;
      break;
     } else {
      $37 = HEAP32[32495]|0;
      HEAP32[$vararg_buffer>>2] = 132673;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = 263;
      $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
      HEAP32[$vararg_ptr2>>2] = 132690;
      $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
      HEAP32[$vararg_ptr3>>2] = 132703;
      $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
      HEAP32[$vararg_ptr4>>2] = $33;
      $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
      HEAP32[$vararg_ptr5>>2] = $24;
      (_fprintf($37,132613,$vararg_buffer)|0);
      break;
     }
    }
   } while(0);
   $38 = ((($0)) + 104|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)==(0|0);
   if ($40) {
    $$028 = $24;
    STACKTOP = sp;return ($$028|0);
   }
   FUNCTION_TABLE_vi[$39 & 7]($0);
   $$028 = $24;
   STACKTOP = sp;return ($$028|0);
  } else {
   $28 = $26;
  }
 }
 $27 = (($28) + 1)<<24>>24;
 HEAP8[$0>>0] = $27;
 $29 = ((($0)) + 68|0);
 HEAP32[$29>>2] = 0;
 $$028 = 0;
 STACKTOP = sp;return ($$028|0);
}
function _zbar_decoder_get_configs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cond$i = ($1|0)==(64);
 if (!($cond$i)) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($0)) + 132|0);
 $3 = HEAP32[$2>>2]|0;
 $$0 = $3;
 return ($$0|0);
}
function __zbar_decoder_get_qr_finder_line($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 112|0);
 return ($1|0);
}
function __zbar_find_qr($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = (($1) + 10)<<24>>24;
 $3 = $2 & 15;
 $4 = $3&255;
 $5 = (((($0)) + 4|0) + ($4<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 108|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($6))|0;
 HEAP32[$7>>2] = $9;
 $10 = (($1) + 15)<<24>>24;
 $11 = $10 & 15;
 $12 = $11&255;
 $13 = (((($0)) + 4|0) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + ($9))|0;
 HEAP32[$7>>2] = $15;
 $16 = $1 & 1;
 $17 = ($16<<24>>24)!=(0);
 $18 = ($15>>>0)<(7);
 $or$cond = $18 | $17;
 if ($or$cond) {
  $$0 = 0;
  return ($$0|0);
 }
 $19 = HEAP32[$13>>2]|0;
 $20 = (($1) + 14)<<24>>24;
 $21 = $20 & 15;
 $22 = $21&255;
 $23 = (((($0)) + 4|0) + ($22<<2)|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + ($19))|0;
 $26 = ($25*14)|0;
 $27 = $26 | 1;
 $28 = (($27>>>0) / ($15>>>0))&-1;
 $29 = (($28) + 509)|0;
 $30 = $29 & 510;
 $31 = ($30|0)==(0);
 if (!($31)) {
  $$0 = 0;
  return ($$0|0);
 }
 $32 = (($1) + 13)<<24>>24;
 $33 = $32 & 15;
 $34 = $33&255;
 $35 = (((($0)) + 4|0) + ($34<<2)|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + ($24))|0;
 $38 = ($37*14)|0;
 $39 = $38 | 1;
 $40 = (($39>>>0) / ($15>>>0))&-1;
 $41 = (($40) + 509)|0;
 $42 = $41 & 510;
 $43 = ($42|0)==(4);
 if (!($43)) {
  $$0 = 0;
  return ($$0|0);
 }
 $44 = (($1) + 12)<<24>>24;
 $45 = $44 & 15;
 $46 = $45&255;
 $47 = (((($0)) + 4|0) + ($46<<2)|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($48) + ($36))|0;
 $50 = ($49*14)|0;
 $51 = $50 | 1;
 $52 = (($51>>>0) / ($15>>>0))&-1;
 $53 = (($52) + 509)|0;
 $54 = $53 & 510;
 $55 = ($54|0)==(4);
 if (!($55)) {
  $$0 = 0;
  return ($$0|0);
 }
 $56 = (($1) + 11)<<24>>24;
 $57 = $56 & 15;
 $58 = $57&255;
 $59 = (((($0)) + 4|0) + ($58<<2)|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($60) + ($48))|0;
 $62 = ($61*14)|0;
 $63 = $62 | 1;
 $64 = (($63>>>0) / ($15>>>0))&-1;
 $65 = (($64) + 509)|0;
 $66 = $65 & 510;
 $67 = ($66|0)==(0);
 if (!($67)) {
  $$0 = 0;
  return ($$0|0);
 }
 $68 = $1 & 15;
 $69 = $68&255;
 $70 = (((($0)) + 4|0) + ($69<<2)|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (($19) + 1)|0;
 $73 = $72 >>> 1;
 $74 = (($71) + ($73))|0;
 $75 = ((($0)) + 128|0);
 HEAP32[$75>>2] = $74;
 $76 = (($71) + ($19))|0;
 $77 = HEAP32[$23>>2]|0;
 $78 = (($76) + ($77))|0;
 $79 = ((($0)) + 120|0);
 HEAP32[$79>>2] = $78;
 $80 = HEAP32[$35>>2]|0;
 $81 = (($80) + ($78))|0;
 $82 = ((($0)) + 112|0);
 HEAP32[$82>>2] = $81;
 $83 = ((($0)) + 116|0);
 HEAP32[$83>>2] = $81;
 $84 = HEAP32[$59>>2]|0;
 $85 = HEAP32[$47>>2]|0;
 $86 = (($85) + ($81))|0;
 $87 = (($84) + 1)|0;
 $88 = $87 >>> 1;
 $89 = (($86) + ($88))|0;
 $90 = ((($0)) + 124|0);
 HEAP32[$90>>2] = $89;
 $91 = ((($0)) + 80|0);
 HEAP32[$91>>2] = 0;
 $92 = ((($0)) + 92|0);
 HEAP32[$92>>2] = 0;
 $$0 = 64;
 return ($$0|0);
}
function __zbar_qr_create() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_calloc(1,2856)|0);
 $1 = ((($0)) + 768|0);
 _isaac_init($1,0,0);
 _rs_gf256_init($0,29);
 return ($0|0);
}
function __zbar_qr_destroy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = (0)>(0);
 if ($1) {
  $2 = HEAP32[32495]|0;
  $3 = ((($0)) + 2840|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($0)) + 2852|0);
  $6 = HEAP32[$5>>2]|0;
  HEAP32[$vararg_buffer>>2] = 132752;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $4;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $6;
  (_fprintf($2,132722,$vararg_buffer)|0);
 }
 $7 = ((($0)) + 2832|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  _free($8);
 }
 $10 = ((($0)) + 2844|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  _free($0);
  STACKTOP = sp;return;
 }
 _free($11);
 _free($0);
 STACKTOP = sp;return;
}
function __zbar_qr_reset($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 2836|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 2848|0);
 HEAP32[$2>>2] = 0;
 return;
}
function _qr_reader_match_centers($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0117169 = 0, $$0121206 = 0, $$0126184 = 0, $$0129 = 0, $$0129$in198 = 0, $$0129196 = 0, $$0129201 = 0, $$0146$i = 0, $$0147$i = 0, $$0149$i = 0, $$0207 = 0, $$0268$i = 0, $$033$i$i$i = 0, $$033$i808$i$i = 0, $$0629$i$i = 0, $$0633$i$i = 0, $$0637$i$i = 0, $$0641$i$i = 0, $$0650887$i$i = 0, $$0661$i$i = 0;
 var $$0666$i$i = 0, $$0671$i$i = 0, $$0676$i$i = 0, $$0680$i$i = 0, $$0685$i$i = 0, $$0690$i$i = 0, $$0696$i$i = 0, $$0702$i$i = 0, $$0707$i$i = 0, $$0712$i$i = 0, $$0717$i$i = 0, $$0722$i$i = 0, $$0729$i$i = 0, $$0734$i$i = 0, $$0739$i$i = 0, $$0745$i$i = 0, $$0751$i$i = 0, $$1$i = 0, $$1$lcssa = 0, $$1114170 = 0;
 var $$1118 = 0, $$1122199 = 0, $$1127 = 0, $$1130$lcssa = 0, $$1130181 = 0, $$1145267$i = 0, $$1148$i = 0, $$1200 = 0, $$1630$i$i = 0, $$1638$i$i = 0, $$1642$i$i = 0, $$1651886$i$i = 0, $$1672$i$i = 0, $$1677$i$i = 0, $$1686$i$i = 0, $$1718$i$i = 0, $$1723$i$i = 0, $$2$lcssa = 0, $$2115172 = 0, $$2119171 = 0;
 var $$2123$lcssa = 0, $$2123187 = 0, $$2128 = 0, $$2131 = 0, $$2190 = 0, $$2635$i$i = 0, $$2655$ph$i$i = 0, $$2659$ph$i$i = 0, $$2663$i$i = 0, $$2668$i$i = 0, $$2673$i$i = 0, $$2682$i$i = 0, $$2704$i$i = 0, $$2709$i$i = 0, $$2714$i$i = 0, $$2719$i$i = 0, $$2731$i$i = 0, $$2736$i$i = 0, $$2753$i$i = 0, $$3 = 0;
 var $$3116177 = 0, $$3120 = 0, $$3124 = 0, $$3132 = 0, $$3632$ph$i$i = 0, $$3640$ph$i$i = 0, $$3644$ph$i$i = 0, $$3656$i$i = 0, $$3660$i$i = 0, $$3679$ph$i$i = 0, $$3688$i$i = 0, $$3693$i$i = 0, $$3699$i$i = 0, $$3725$i$i = 0, $$3742$i$i = 0, $$3748$i$i = 0, $$4 = 0, $$4$ph$i$i = 0, $$4125 = 0, $$4665$ph$i$i = 0;
 var $$4670$ph$i$i = 0, $$4675$ph$i$i = 0, $$4684$ph$i$i = 0, $$4689$i$i = 0, $$4706$ph$i$i = 0, $$4711$ph$i$i = 0, $$4716$ph$i$i = 0, $$4721$ph$i$i = 0, $$4726$i$i = 0, $$4733$ph$i$i = 0, $$4738$ph$i$i = 0, $$4755$ph$i$i = 0, $$5695$ph$i$i = 0, $$5701$ph$i$i = 0, $$5744$ph$i$i = 0, $$5750$ph$i$i = 0, $$6$ph$i$i = 0, $$6728$ph$i$i = 0, $$idx$i = 0, $$idx$i$i$i$i = 0;
 var $$idx$val$i = 0, $$idx$val$i$i$i$i = 0, $$idx$val$i$i812$i$i = 0, $$idx143$val = 0, $$idx149$val = 0, $$idx153$val = 0, $$idx155$val = 0, $$idx157 = 0, $$idx157$val = 0, $$idx167$i = 0, $$idx167$val$i = 0, $$idx169$i = 0, $$idx169$val$i = 0, $$idx171$i = 0, $$idx171$val$i = 0, $$idx173$1$i = 0, $$idx173$val$1$i = 0, $$idx179$i = 0, $$idx179$val$i = 0, $$idx181$i = 0;
 var $$idx181$val$i = 0, $$idx779$val$i$i = 0, $$idx780$val$i$i = 0, $$idx785$val$i$i = 0, $$idx786$val$i$i = 0, $$idx791$i$i = 0, $$idx791$val$i$i = 0, $$idx792$i$i = 0, $$idx792$val$i$i = 0, $$idx797$i$i = 0, $$idx797$val$i$i = 0, $$idx798$i$i = 0, $$idx798$val$i$i = 0, $$idx8$i$i$i$i = 0, $$idx8$i$i813$i$i = 0, $$idx8$val$i$i$i$i = 0, $$idx8$val$i$i814$i$i = 0, $$idx800$i$i = 0, $$idx800$val$i$i = 0, $$idx802$val$i$i = 0;
 var $$lobit$i = 0, $$neg$i = 0, $$neg$i$i = 0, $$not$i$i = 0, $$op$i$i = 0, $$ph$i$i = 0, $$ph837$i$i = 0, $$ph838$i$i = 0, $$ph839$i$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$phiZ2D = 0, $$pre10$i = 0, $$pre901$i$i = 0, $$pre902$i$i = 0, $$pre903$i$i = 0, $$pre904$i$i = 0, $$pre911$i$i = 0, $$sink$i187$i = 0;
 var $$sink$i193$i = 0, $$sroa$0$0$$sroa_idx$i = 0, $$sroa$10$0$$sroa_idx203$i = 0, $$sroa$15$0$$sroa_idx208$i = 0, $$sroa$20$0$$sroa_idx213$i = 0, $$sroa$25$0$$sroa_idx218$i = 0, $$sroa$30$0$$sroa_idx223$i = 0, $$sroa$31$0$$sroa_idx227$i = 0, $$sroa$7$0$$sroa_idx199$i = 0, $$val$i = 0, $$val$i$i$i$i = 0, $$val$i$i810$i$i = 0, $$val142 = 0, $$val148 = 0, $$val152 = 0, $$val154 = 0, $$val156 = 0, $$val166$i = 0, $$val168$i = 0, $$val170$i = 0;
 var $$val172$1$i = 0, $$val178$i = 0, $$val180$i = 0, $$val778$i$i = 0, $$val784$i$i = 0, $$val790$i$i = 0, $$val796$i$i = 0, $$val799$i$i = 0, $$val801$i$i = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0;
 var $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0;
 var $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0;
 var $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0;
 var $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0;
 var $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0;
 var $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0;
 var $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0;
 var $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0;
 var $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0;
 var $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0;
 var $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0;
 var $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0;
 var $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0;
 var $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0;
 var $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0;
 var $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0;
 var $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0;
 var $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0;
 var $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0;
 var $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0;
 var $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0;
 var $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0;
 var $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0;
 var $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0;
 var $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0;
 var $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0;
 var $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0;
 var $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0;
 var $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0;
 var $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0;
 var $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0;
 var $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0;
 var $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0;
 var $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0;
 var $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0;
 var $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0;
 var $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0;
 var $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0;
 var $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0;
 var $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0;
 var $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0;
 var $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0;
 var $1766 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0;
 var $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0;
 var $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0;
 var $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0;
 var $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0;
 var $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0;
 var $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0;
 var $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
 var $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0;
 var $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0;
 var $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0;
 var $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0;
 var $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0;
 var $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0;
 var $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0;
 var $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0;
 var $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0;
 var $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $exitcond = 0, $exitcond$i$i = 0, $exitcond$i$i$i = 0, $exitcond$i809$i$i = 0, $exitcond214 = 0, $exitcond215 = 0, $exitcond892$i$i = 0, $ispos$i = 0, $ispos$i$i = 0, $ispos$i$i$i = 0, $ispos$i182$i = 0;
 var $ispos1$i$i$i = 0, $ispos11$i$i$i = 0, $ispos13$i$i$i = 0, $ispos15$i$i$i = 0, $ispos150$i = 0, $ispos152$i = 0, $ispos154$i = 0, $ispos156$i = 0, $ispos158$i = 0, $ispos160$i = 0, $ispos162$i = 0, $ispos17$i$i$i = 0, $ispos19$i$i$i = 0, $ispos21$i$i$i = 0, $ispos23$i$i$i = 0, $ispos25$i$i$i = 0, $ispos27$i$i$i = 0, $ispos3$i$i$i = 0, $ispos5$i$i$i = 0, $ispos7$i$i$i = 0;
 var $ispos756$i$i = 0, $ispos758$i$i = 0, $ispos760$i$i = 0, $ispos762$i$i = 0, $ispos764$i$i = 0, $ispos766$i$i = 0, $ispos768$i$i = 0, $ispos9$i$i$i = 0, $neg$i = 0, $neg$i$i = 0, $neg$i$i$i = 0, $neg$i183$i = 0, $neg10$i$i$i = 0, $neg12$i$i$i = 0, $neg14$i$i$i = 0, $neg151$i = 0, $neg153$i = 0, $neg155$i = 0, $neg157$i = 0, $neg159$i = 0;
 var $neg16$i$i$i = 0, $neg161$i = 0, $neg163$i = 0, $neg18$i$i$i = 0, $neg2$i$i$i = 0, $neg20$i$i$i = 0, $neg22$i$i$i = 0, $neg24$i$i$i = 0, $neg26$i$i$i = 0, $neg28$i$i$i = 0, $neg4$i$i$i = 0, $neg6$i$i$i = 0, $neg757$i$i = 0, $neg759$i$i = 0, $neg761$i$i = 0, $neg763$i$i = 0, $neg765$i$i = 0, $neg767$i$i = 0, $neg769$i$i = 0, $neg8$i$i$i = 0;
 var $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i$i$i = 0, $or$cond$i819$i$i = 0, $or$cond1$i$i$i = 0, $or$cond1$i822$i$i = 0, $or$cond133 = 0, $or$cond133180 = 0, $or$cond165$i = 0, $or$cond197 = 0, $or$cond3$i$i$i = 0, $or$cond3$i820$i$i = 0, $or$cond5$not$i$i$i = 0, $or$cond5$not$i821$i$i = 0, $or$cond773$1$i$i = 0, $or$cond773$2$i$i = 0, $or$cond773$3$i$i = 0, $or$cond773$i$i = 0, $or$cond775$1$i$i = 0;
 var $or$cond775$2$i$i = 0, $or$cond775$3$i$i = 0, $or$cond775$i$i = 0, $or$cond776$i$i = 0, $spec$select = 0, $spec$select$1$i = 0, $spec$select$i = 0, $spec$select$i$1$i$i = 0, $spec$select$i$2$i$i = 0, $spec$select$i$3$i$i = 0, $spec$select$i$i = 0, $spec$select$i$i$i = 0, $spec$select$i184$i = 0, $spec$select$i190$i = 0, $spec$select134 = 0, $spec$select135 = 0, $spec$select164$i = 0, $spec$select37$i$1$i$i = 0, $spec$select37$i$2$i$i = 0, $spec$select37$i$3$i$i = 0;
 var $spec$select37$i$i$i = 0, $spec$select38$i$1$i$i = 0, $spec$select38$i$2$i$i = 0, $spec$select38$i$3$i$i = 0, $spec$select38$i$i$i = 0, $spec$select48$i$i = 0, $spec$select48$i185$i = 0, $spec$select48$i191$i = 0, $spec$select49$i$i = 0, $spec$select49$i186$i = 0, $spec$select49$i192$i = 0, $spec$store$select$i = 0, $spec$store$select1$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0;
 $7 = sp + 32|0;
 $8 = sp + 552|0;
 $9 = sp + 548|0;
 $10 = sp + 496|0;
 $11 = sp + 488|0;
 $12 = sp;
 $13 = sp + 440|0;
 $14 = sp + 368|0;
 $15 = sp + 292|0;
 $16 = sp + 216|0;
 $17 = sp + 140|0;
 $18 = sp + 128|0;
 $19 = sp + 80|0;
 $20 = (_calloc($3,1)|0);
 $21 = Math_imul($6, $5)|0;
 $22 = $21 >> 9;
 $23 = ($21|0)>(4194815);
 $24 = $23 ? $22 : 8192;
 $25 = ($3|0)>(0);
 if (!($25)) {
  _free($20);
  STACKTOP = sp;return;
 }
 $26 = ((($18)) + 4|0);
 $27 = ((($18)) + 8|0);
 $28 = ((($12)) + 12|0);
 $29 = ((($12)) + 24|0);
 $30 = ((($12)) + 4|0);
 $31 = ((($12)) + 16|0);
 $32 = ((($12)) + 8|0);
 $33 = ((($12)) + 20|0);
 $34 = ((($15)) + 72|0);
 $35 = ((($16)) + 72|0);
 $36 = ((($17)) + 72|0);
 $37 = ($6|0)>($5|0);
 $38 = (($6) - ($5))|0;
 $$neg$i = $37 ? $38 : 0;
 $39 = (($5) + -1)|0;
 $40 = (($39) + ($$neg$i))|0;
 $41 = ((($13)) + 4|0);
 $42 = ((($13)) + 8|0);
 $43 = ((($13)) + 12|0);
 $44 = ((($13)) + 16|0);
 $45 = ((($13)) + 20|0);
 $46 = ((($13)) + 24|0);
 $47 = ((($13)) + 28|0);
 $48 = ((($13)) + 32|0);
 $49 = ((($13)) + 36|0);
 $50 = ((($13)) + 40|0);
 $51 = ((($13)) + 44|0);
 $52 = ((($16)) + 64|0);
 $53 = ((($16)) + 68|0);
 $54 = ((($17)) + 64|0);
 $55 = ((($17)) + 68|0);
 $56 = ((($16)) + 12|0);
 $57 = ((($17)) + 8|0);
 $58 = ((($15)) + 64|0);
 $59 = ((($15)) + 68|0);
 $60 = ((($15)) + 12|0);
 $61 = ((($15)) + 8|0);
 $62 = ((($0)) + 768|0);
 $$idx797$i$i = ((($7)) + 4|0);
 $$idx798$i$i = ((($7)) + 8|0);
 $$sroa$0$0$$sroa_idx$i = ((($19)) + 16|0);
 $$sroa$7$0$$sroa_idx199$i = ((($19)) + 20|0);
 $$sroa$10$0$$sroa_idx203$i = ((($19)) + 24|0);
 $$sroa$15$0$$sroa_idx208$i = ((($19)) + 28|0);
 $$sroa$20$0$$sroa_idx213$i = ((($19)) + 32|0);
 $$sroa$25$0$$sroa_idx218$i = ((($19)) + 36|0);
 $$sroa$30$0$$sroa_idx223$i = ((($19)) + 40|0);
 $$sroa$31$0$$sroa_idx227$i = ((($19)) + 44|0);
 $63 = ((($14)) + 56|0);
 $64 = ((($14)) + 60|0);
 $65 = ((($14)) + 24|0);
 $66 = ((($14)) + 28|0);
 $67 = ((($14)) + 32|0);
 $68 = ((($14)) + 36|0);
 $69 = ((($14)) + 40|0);
 $70 = ((($14)) + 44|0);
 $71 = ((($14)) + 52|0);
 $72 = ((($14)) + 64|0);
 $73 = ((($7)) + 24|0);
 $$idx791$i$i = ((($7)) + 28|0);
 $$idx792$i$i = ((($7)) + 32|0);
 $74 = ((($16)) + 4|0);
 $75 = ((($7)) + 12|0);
 $76 = ((($16)) + 52|0);
 $77 = ((($7)) + 36|0);
 $78 = ((($17)) + 60|0);
 $79 = ((($16)) + 20|0);
 $80 = ((($17)) + 4|0);
 $81 = ((($17)) + 28|0);
 $$idx$i$i$i$i = ((($7)) + 16|0);
 $$idx8$i$i$i$i = ((($7)) + 20|0);
 $$idx800$i$i = ((($7)) + 40|0);
 $$idx8$i$i813$i$i = ((($7)) + 44|0);
 $82 = ((($14)) + 4|0);
 $83 = ((($14)) + 8|0);
 $84 = ((($14)) + 12|0);
 $85 = ((($14)) + 16|0);
 $86 = ((($14)) + 20|0);
 $87 = ((($15)) + 4|0);
 $88 = $5 << 2;
 $89 = (0 - ($88))|0;
 $90 = $5 << 3;
 $91 = $6 << 2;
 $92 = (0 - ($91))|0;
 $93 = $6 << 3;
 $94 = ((($16)) + 8|0);
 $95 = ((($17)) + 12|0);
 $96 = ((($11)) + 4|0);
 $97 = ((($14)) + 48|0);
 $98 = ((($1)) + 4|0);
 $99 = ((($1)) + 8|0);
 $$0121206 = 0;$$0207 = 0;
 while(1) {
  $$0129196 = (($$0121206) + 1)|0;
  $100 = (($20) + ($$0121206)|0);
  $101 = HEAP8[$100>>0]|0;
  $102 = ($101<<24>>24)==(0);
  $103 = ($$0129196|0)<($3|0);
  $or$cond197 = $103 & $102;
  if ($or$cond197) {
   $$0129$in198 = $$0121206;$$0129201 = $$0129196;$$1122199 = $$0121206;$$1200 = $$0207;
   while(1) {
    $104 = (($$0129$in198) + 2)|0;
    $105 = (($20) + ($$0129201)|0);
    $106 = HEAP8[$105>>0]|0;
    $107 = ($106<<24>>24)==(0);
    $108 = ($104|0)<($3|0);
    $or$cond133180 = $108 & $107;
    if ($or$cond133180) {
     $$0126184 = $104;$$1130181 = $$0129201;$$2123187 = $$1122199;$$2190 = $$1200;$1697 = $105;
     while(1) {
      $109 = (($20) + ($$0126184)|0);
      $110 = HEAP8[$109>>0]|0;
      $111 = ($110<<24>>24)==(0);
      if ($111) {
       $112 = (($2) + ($$2123187<<4)|0);
       HEAP32[$18>>2] = $112;
       $113 = (($2) + ($$1130181<<4)|0);
       HEAP32[$26>>2] = $113;
       $114 = (($2) + ($$0126184<<4)|0);
       HEAP32[$27>>2] = $114;
       $$val$i = HEAP32[$112>>2]|0;
       $$idx$i = (((($2) + ($$2123187<<4)|0)) + 4|0);
       $$idx$val$i = HEAP32[$$idx$i>>2]|0;
       $$val166$i = HEAP32[$113>>2]|0;
       $$idx167$i = (((($2) + ($$1130181<<4)|0)) + 4|0);
       $$idx167$val$i = HEAP32[$$idx167$i>>2]|0;
       $$val168$i = HEAP32[$114>>2]|0;
       $$idx169$i = (((($2) + ($$0126184<<4)|0)) + 4|0);
       $$idx169$val$i = HEAP32[$$idx169$i>>2]|0;
       $115 = (($$val166$i) - ($$val$i))|0;
       $116 = (($$idx169$val$i) - ($$idx$val$i))|0;
       $117 = Math_imul($116, $115)|0;
       $118 = (($$idx167$val$i) - ($$idx$val$i))|0;
       $119 = (($$val168$i) - ($$val$i))|0;
       $120 = Math_imul($119, $118)|0;
       $121 = (($117) - ($120))|0;
       $122 = ($121|0)==(0);
       L16: do {
        if ($122) {
         label = 142;
        } else {
         HEAP32[$12>>2] = 0;
         HEAP32[$28>>2] = 0;
         HEAP32[$29>>2] = 0;
         $$lobit$i = $121 >>> 31;
         $123 = (($$lobit$i) + 1)|0;
         HEAP32[$30>>2] = $123;
         HEAP32[$31>>2] = $123;
         $124 = (2 - ($$lobit$i))|0;
         HEAP32[$32>>2] = $124;
         HEAP32[$33>>2] = $124;
         $125 = (($$val166$i) - ($$val168$i))|0;
         $126 = Math_imul($125, $125)|0;
         $127 = (($$idx167$val$i) - ($$idx169$val$i))|0;
         $128 = Math_imul($127, $127)|0;
         $129 = (($128) + ($126))|0;
         $130 = (($18) + ($124<<2)|0);
         $131 = HEAP32[$130>>2]|0;
         $$val170$i = HEAP32[$131>>2]|0;
         $$idx171$i = ((($131)) + 4|0);
         $$idx171$val$i = HEAP32[$$idx171$i>>2]|0;
         $132 = (($$val170$i) - ($$val$i))|0;
         $133 = Math_imul($132, $132)|0;
         $134 = (($$idx171$val$i) - ($$idx$val$i))|0;
         $135 = Math_imul($134, $134)|0;
         $136 = (($135) + ($133))|0;
         $137 = ($136>>>0)>($129>>>0);
         $spec$select$i = $137&1;
         $spec$select164$i = $137 ? $136 : $129;
         $138 = (($18) + ($123<<2)|0);
         $139 = HEAP32[$138>>2]|0;
         $$val172$1$i = HEAP32[$139>>2]|0;
         $$idx173$1$i = ((($139)) + 4|0);
         $$idx173$val$1$i = HEAP32[$$idx173$1$i>>2]|0;
         $140 = (($$val$i) - ($$val172$1$i))|0;
         $141 = Math_imul($140, $140)|0;
         $142 = (($$idx$val$i) - ($$idx173$val$1$i))|0;
         $143 = Math_imul($142, $142)|0;
         $144 = (($143) + ($141))|0;
         $145 = ($144>>>0)>($spec$select164$i>>>0);
         $spec$select$1$i = $145 ? 2 : $spec$select$i;
         $146 = (($spec$select$1$i) + 2)|0;
         $$0268$i = 0;$$1145267$i = $spec$select$1$i;
         while(1) {
          $148 = (($12) + ($$1145267$i<<2)|0);
          $149 = HEAP32[$148>>2]|0;
          $150 = (($18) + ($149<<2)|0);
          $151 = HEAP32[$150>>2]|0;
          HEAP32[$34>>2] = $151;
          $152 = (($$1145267$i) + 1)|0;
          $153 = (($12) + ($152<<2)|0);
          $154 = HEAP32[$153>>2]|0;
          $155 = (($18) + ($154<<2)|0);
          $156 = HEAP32[$155>>2]|0;
          HEAP32[$35>>2] = $156;
          $157 = (($$1145267$i) + 2)|0;
          $158 = (($12) + ($157<<2)|0);
          $159 = HEAP32[$158>>2]|0;
          $160 = (($18) + ($159<<2)|0);
          $161 = HEAP32[$160>>2]|0;
          HEAP32[$36>>2] = $161;
          $162 = (_qr_ilog($40)|0);
          $163 = (28 - ($162))|0;
          $164 = $151;
          $165 = $156;
          $166 = $161;
          $$val178$i = HEAP32[$165>>2]|0;
          $$idx179$i = ((($165)) + 4|0);
          $$idx179$val$i = HEAP32[$$idx179$i>>2]|0;
          $$val180$i = HEAP32[$166>>2]|0;
          $$idx181$i = ((($166)) + 4|0);
          $$idx181$val$i = HEAP32[$$idx181$i>>2]|0;
          $167 = HEAP32[$164>>2]|0;
          $168 = (($$val178$i) - ($167))|0;
          $169 = (($$val180$i) - ($167))|0;
          $170 = ((($164)) + 4|0);
          $171 = HEAP32[$170>>2]|0;
          $172 = (($$idx179$val$i) - ($171))|0;
          $173 = (($$idx181$val$i) - ($171))|0;
          $174 = Math_imul($173, $168)|0;
          $175 = Math_imul($172, $169)|0;
          $176 = (($174) - ($175))|0;
          $ispos$i$i = ($176|0)>(-1);
          $neg$i$i = (0 - ($176))|0;
          $177 = $ispos$i$i ? $176 : $neg$i$i;
          $178 = (_qr_ilog($177)|0);
          $179 = $178 >> 1;
          $180 = (($179) + -2)|0;
          $181 = (_qr_ilog($177)|0);
          $182 = $181 >> 1;
          $183 = (_qr_ilog($177)|0);
          $184 = ($183|0)<(4);
          $$op$i$i = (2 - ($182))|0;
          $$neg$i$i = $184 ? $$op$i$i : 0;
          $185 = (($180) + ($$neg$i$i))|0;
          HEAP32[$13>>2] = $168;
          HEAP32[$41>>2] = $169;
          HEAP32[$42>>2] = $172;
          HEAP32[$43>>2] = $173;
          $186 = $173 << $163;
          $187 = $176 >> $185;
          $188 = $187 >> 1;
          $189 = $186 >> 31;
          $190 = (($188) + ($189))|0;
          $191 = $190 ^ $189;
          $192 = (($191) + ($186))|0;
          $193 = (($192|0) / ($187|0))&-1;
          HEAP32[$44>>2] = $193;
          $194 = (0 - ($169))|0;
          $195 = $194 << $163;
          $196 = $195 >> 31;
          $197 = (($188) + ($196))|0;
          $198 = $197 ^ $196;
          $199 = (($198) + ($195))|0;
          $200 = (($199|0) / ($187|0))&-1;
          HEAP32[$45>>2] = $200;
          $201 = (0 - ($172))|0;
          $202 = $201 << $163;
          $203 = $202 >> 31;
          $204 = (($188) + ($203))|0;
          $205 = $204 ^ $203;
          $206 = (($205) + ($202))|0;
          $207 = (($206|0) / ($187|0))&-1;
          HEAP32[$46>>2] = $207;
          $208 = $168 << $163;
          $209 = $208 >> 31;
          $210 = (($188) + ($209))|0;
          $211 = $210 ^ $209;
          $212 = (($211) + ($208))|0;
          $213 = (($212|0) / ($187|0))&-1;
          HEAP32[$47>>2] = $213;
          $214 = HEAP32[$164>>2]|0;
          HEAP32[$48>>2] = $214;
          $215 = HEAP32[$170>>2]|0;
          HEAP32[$49>>2] = $215;
          HEAP32[$50>>2] = $163;
          HEAP32[$51>>2] = $185;
          $216 = HEAP32[$165>>2]|0;
          $217 = HEAP32[$$idx179$i>>2]|0;
          $218 = (($216) - ($214))|0;
          $219 = Math_imul($218, $193)|0;
          $220 = (($217) - ($215))|0;
          $221 = Math_imul($220, $200)|0;
          $222 = 1 << $185;
          $223 = $222 >> 1;
          $224 = (($219) + ($223))|0;
          $225 = (($224) + ($221))|0;
          $226 = $225 >> $185;
          HEAP32[$52>>2] = $226;
          $227 = Math_imul($218, $207)|0;
          $228 = Math_imul($220, $213)|0;
          $229 = (($227) + ($223))|0;
          $230 = (($229) + ($228))|0;
          $231 = $230 >> $185;
          HEAP32[$53>>2] = $231;
          _qr_finder_edge_pts_aff_classify($16,$13);
          $232 = 1 << $163;
          $233 = (_qr_finder_estimate_module_size_and_version($16,$232,$232)|0);
          $234 = ($233|0)<(0);
          L20: do {
           if ($234) {
            $$0146$i = 1;$$1$i = $$0268$i;
           } else {
            $235 = HEAP32[$36>>2]|0;
            $236 = HEAP32[$235>>2]|0;
            $237 = ((($235)) + 4|0);
            $238 = HEAP32[$237>>2]|0;
            $239 = HEAP32[$44>>2]|0;
            $240 = HEAP32[$48>>2]|0;
            $241 = (($236) - ($240))|0;
            $242 = Math_imul($241, $239)|0;
            $243 = HEAP32[$45>>2]|0;
            $244 = HEAP32[$49>>2]|0;
            $245 = (($238) - ($244))|0;
            $246 = Math_imul($245, $243)|0;
            $247 = (($246) + ($242))|0;
            $248 = HEAP32[$51>>2]|0;
            $249 = 1 << $248;
            $250 = $249 >> 1;
            $251 = (($247) + ($250))|0;
            $252 = $251 >> $248;
            HEAP32[$54>>2] = $252;
            $253 = HEAP32[$46>>2]|0;
            $254 = Math_imul($253, $241)|0;
            $255 = HEAP32[$47>>2]|0;
            $256 = Math_imul($255, $245)|0;
            $257 = (($254) + ($250))|0;
            $258 = (($257) + ($256))|0;
            $259 = $258 >> $248;
            HEAP32[$55>>2] = $259;
            _qr_finder_edge_pts_aff_classify($17,$13);
            $260 = (_qr_finder_estimate_module_size_and_version($17,$232,$232)|0);
            $261 = ($260|0)<(0);
            if ($261) {
             $$0146$i = 1;$$1$i = $$0268$i;
            } else {
             $262 = HEAP32[$56>>2]|0;
             $263 = HEAP32[$57>>2]|0;
             $264 = (($262) - ($263))|0;
             $ispos$i = ($264|0)>(-1);
             $neg$i = (0 - ($264))|0;
             $265 = $ispos$i ? $264 : $neg$i;
             $266 = ($265|0)>(3);
             if ($266) {
              $$0146$i = 1;$$1$i = $$0268$i;
             } else {
              $267 = HEAP32[$34>>2]|0;
              $268 = HEAP32[$267>>2]|0;
              $269 = ((($267)) + 4|0);
              $270 = HEAP32[$269>>2]|0;
              $271 = HEAP32[$44>>2]|0;
              $272 = HEAP32[$48>>2]|0;
              $273 = (($268) - ($272))|0;
              $274 = Math_imul($273, $271)|0;
              $275 = HEAP32[$45>>2]|0;
              $276 = HEAP32[$49>>2]|0;
              $277 = (($270) - ($276))|0;
              $278 = Math_imul($277, $275)|0;
              $279 = (($278) + ($274))|0;
              $280 = HEAP32[$51>>2]|0;
              $281 = 1 << $280;
              $282 = $281 >> 1;
              $283 = (($279) + ($282))|0;
              $284 = $283 >> $280;
              HEAP32[$58>>2] = $284;
              $285 = HEAP32[$46>>2]|0;
              $286 = Math_imul($285, $273)|0;
              $287 = HEAP32[$47>>2]|0;
              $288 = Math_imul($287, $277)|0;
              $289 = (($286) + ($282))|0;
              $290 = (($289) + ($288))|0;
              $291 = $290 >> $280;
              HEAP32[$59>>2] = $291;
              _qr_finder_edge_pts_aff_classify($15,$13);
              $292 = (_qr_finder_estimate_module_size_and_version($15,$232,$232)|0);
              $293 = ($292|0)<(0);
              if ($293) {
               $$0146$i = 1;$$1$i = $$0268$i;
              } else {
               $294 = HEAP32[$60>>2]|0;
               $295 = (($294) - ($262))|0;
               $ispos150$i = ($295|0)>(-1);
               $neg151$i = (0 - ($295))|0;
               $296 = $ispos150$i ? $295 : $neg151$i;
               $297 = ($296|0)>(3);
               if ($297) {
                $$0146$i = 1;$$1$i = $$0268$i;
               } else {
                $298 = HEAP32[$61>>2]|0;
                $299 = (($298) - ($263))|0;
                $ispos152$i = ($299|0)>(-1);
                $neg153$i = (0 - ($299))|0;
                $300 = $ispos152$i ? $299 : $neg153$i;
                $301 = ($300|0)>(3);
                if ($301) {
                 $$0146$i = 1;$$1$i = $$0268$i;
                } else {
                 _qr_finder_ransac($15,$13,$62,0);
                 _qr_finder_ransac($17,$13,$62,0);
                 _qr_line_fit_finder_pair($7,$13,$15,$17,0);
                 $302 = HEAP32[$36>>2]|0;
                 $303 = HEAP32[$302>>2]|0;
                 $304 = ((($302)) + 4|0);
                 $305 = HEAP32[$304>>2]|0;
                 $$val796$i$i = HEAP32[$7>>2]|0;
                 $$idx797$val$i$i = HEAP32[$$idx797$i$i>>2]|0;
                 $$idx798$val$i$i = HEAP32[$$idx798$i$i>>2]|0;
                 $306 = Math_imul($$val796$i$i, $303)|0;
                 $307 = Math_imul($$idx797$val$i$i, $305)|0;
                 $308 = (($$idx798$val$i$i) + ($306))|0;
                 $309 = (($308) + ($307))|0;
                 $310 = ($309|0)<(0);
                 L27: do {
                  if (!($310)) {
                   $311 = HEAP32[$35>>2]|0;
                   $312 = HEAP32[$311>>2]|0;
                   $313 = ((($311)) + 4|0);
                   $314 = HEAP32[$313>>2]|0;
                   $315 = Math_imul($312, $$val796$i$i)|0;
                   $316 = Math_imul($314, $$idx797$val$i$i)|0;
                   $317 = (($315) + ($$idx798$val$i$i))|0;
                   $318 = (($317) + ($316))|0;
                   $319 = ($318|0)<(0);
                   if ($319) {
                    break;
                   }
                   _qr_finder_ransac($15,$13,$62,2);
                   _qr_finder_ransac($16,$13,$62,2);
                   _qr_line_fit_finder_pair($73,$13,$15,$16,2);
                   $320 = HEAP32[$302>>2]|0;
                   $321 = HEAP32[$304>>2]|0;
                   $$val790$i$i = HEAP32[$73>>2]|0;
                   $$idx791$val$i$i = HEAP32[$$idx791$i$i>>2]|0;
                   $$idx792$val$i$i = HEAP32[$$idx792$i$i>>2]|0;
                   $322 = Math_imul($$val790$i$i, $320)|0;
                   $323 = Math_imul($$idx791$val$i$i, $321)|0;
                   $324 = (($$idx792$val$i$i) + ($322))|0;
                   $325 = (($324) + ($323))|0;
                   $326 = ($325|0)<(0);
                   if ($326) {
                    break;
                   }
                   $327 = HEAP32[$35>>2]|0;
                   $328 = HEAP32[$327>>2]|0;
                   $329 = ((($327)) + 4|0);
                   $330 = HEAP32[$329>>2]|0;
                   $331 = Math_imul($328, $$val790$i$i)|0;
                   $332 = Math_imul($330, $$idx791$val$i$i)|0;
                   $333 = (($331) + ($$idx792$val$i$i))|0;
                   $334 = (($333) + ($332))|0;
                   $335 = ($334|0)<(0);
                   if ($335) {
                    break;
                   }
                   $336 = HEAP32[$74>>2]|0;
                   $337 = $336 >> 1;
                   _qr_finder_ransac($16,$13,$62,1);
                   $338 = HEAP32[$50>>2]|0;
                   $339 = HEAP32[$76>>2]|0;
                   $340 = ($339|0)<(2);
                   if ($340) {
                    HEAP32[$8>>2] = 0;
                    $385 = 0;
                   } else {
                    $341 = $339 << 3;
                    $342 = (_malloc($341)|0);
                    $343 = HEAP32[$79>>2]|0;
                    $$033$i$i$i = 0;
                    while(1) {
                     $344 = (($343) + ($$033$i$i$i<<4)|0);
                     $345 = HEAP32[$344>>2]|0;
                     $346 = (($342) + ($$033$i$i$i<<3)|0);
                     HEAP32[$346>>2] = $345;
                     $347 = (((($343) + ($$033$i$i$i<<4)|0)) + 4|0);
                     $348 = HEAP32[$347>>2]|0;
                     $349 = (((($342) + ($$033$i$i$i<<3)|0)) + 4|0);
                     HEAP32[$349>>2] = $348;
                     $350 = (($$033$i$i$i) + 1)|0;
                     $exitcond$i$i$i = ($350|0)==($339|0);
                     if ($exitcond$i$i$i) {
                      break;
                     } else {
                      $$033$i$i$i = $350;
                     }
                    }
                    _qr_line_fit_points($75,$342,$339,$338);
                    $351 = HEAP32[$35>>2]|0;
                    $352 = HEAP32[$351>>2]|0;
                    $353 = ((($351)) + 4|0);
                    $354 = HEAP32[$353>>2]|0;
                    $$val$i$i$i$i = HEAP32[$75>>2]|0;
                    $$idx$val$i$i$i$i = HEAP32[$$idx$i$i$i$i>>2]|0;
                    $$idx8$val$i$i$i$i = HEAP32[$$idx8$i$i$i$i>>2]|0;
                    $355 = Math_imul($$val$i$i$i$i, $352)|0;
                    $356 = Math_imul($$idx$val$i$i$i$i, $354)|0;
                    $357 = (($$idx8$val$i$i$i$i) + ($355))|0;
                    $358 = (($357) + ($356))|0;
                    $359 = ($358|0)<(0);
                    $360 = (0 - ($$val$i$i$i$i))|0;
                    $361 = (0 - ($$idx$val$i$i$i$i))|0;
                    $362 = (0 - ($$idx8$val$i$i$i$i))|0;
                    if ($359) {
                     HEAP32[$75>>2] = $360;
                     HEAP32[$$idx$i$i$i$i>>2] = $361;
                     HEAP32[$$idx8$i$i$i$i>>2] = $362;
                     $$idx785$val$i$i = $361;$$idx786$val$i$i = $362;$$val784$i$i = $360;
                    } else {
                     $$idx785$val$i$i = $$idx$val$i$i$i$i;$$idx786$val$i$i = $$idx8$val$i$i$i$i;$$val784$i$i = $$val$i$i$i$i;
                    }
                    _free($342);
                    $363 = HEAP32[$34>>2]|0;
                    $364 = HEAP32[$363>>2]|0;
                    $365 = ((($363)) + 4|0);
                    $366 = HEAP32[$365>>2]|0;
                    $367 = Math_imul($364, $$val784$i$i)|0;
                    $368 = Math_imul($366, $$idx785$val$i$i)|0;
                    $369 = (($367) + ($$idx786$val$i$i))|0;
                    $370 = (($369) + ($368))|0;
                    $371 = ($370|0)<(0);
                    if ($371) {
                     break;
                    }
                    $372 = HEAP32[$302>>2]|0;
                    $373 = HEAP32[$304>>2]|0;
                    $374 = Math_imul($372, $$val784$i$i)|0;
                    $375 = Math_imul($373, $$idx785$val$i$i)|0;
                    $376 = (($374) + ($$idx786$val$i$i))|0;
                    $377 = (($376) + ($375))|0;
                    $378 = ($377|0)<(0);
                    if ($378) {
                     break;
                    }
                    $379 = (_qr_aff_line_step($13,$$val784$i$i,$$idx785$val$i$i,1,$337,$8)|0);
                    $380 = ($379|0)<(0);
                    if ($380) {
                     break;
                    }
                    $$pre$i$i = HEAP32[$8>>2]|0;
                    $385 = $$pre$i$i;
                   }
                   $381 = HEAP32[$52>>2]|0;
                   $382 = HEAP32[$16>>2]|0;
                   $383 = ($382*3)|0;
                   $384 = $385 << 1;
                   $386 = (($381) - ($384))|0;
                   $387 = (($383) + ($386))|0;
                   $388 = HEAP32[$53>>2]|0;
                   $389 = $336 & -2;
                   $390 = (($388) - ($389))|0;
                   $391 = HEAP32[$17>>2]|0;
                   $392 = $391 >> 1;
                   _qr_finder_ransac($17,$13,$62,3);
                   $393 = HEAP32[$50>>2]|0;
                   $394 = HEAP32[$78>>2]|0;
                   $395 = ($394|0)<(2);
                   if ($395) {
                    HEAP32[$9>>2] = 0;
                    $445 = 0;
                   } else {
                    $396 = $394 << 3;
                    $397 = (_malloc($396)|0);
                    $398 = HEAP32[$81>>2]|0;
                    $$033$i808$i$i = 0;
                    while(1) {
                     $399 = (($398) + ($$033$i808$i$i<<4)|0);
                     $400 = HEAP32[$399>>2]|0;
                     $401 = (($397) + ($$033$i808$i$i<<3)|0);
                     HEAP32[$401>>2] = $400;
                     $402 = (((($398) + ($$033$i808$i$i<<4)|0)) + 4|0);
                     $403 = HEAP32[$402>>2]|0;
                     $404 = (((($397) + ($$033$i808$i$i<<3)|0)) + 4|0);
                     HEAP32[$404>>2] = $403;
                     $405 = (($$033$i808$i$i) + 1)|0;
                     $exitcond$i809$i$i = ($405|0)==($394|0);
                     if ($exitcond$i809$i$i) {
                      break;
                     } else {
                      $$033$i808$i$i = $405;
                     }
                    }
                    _qr_line_fit_points($77,$397,$394,$393);
                    $406 = HEAP32[$36>>2]|0;
                    $407 = HEAP32[$406>>2]|0;
                    $408 = ((($406)) + 4|0);
                    $409 = HEAP32[$408>>2]|0;
                    $$val$i$i810$i$i = HEAP32[$77>>2]|0;
                    $$idx$val$i$i812$i$i = HEAP32[$$idx800$i$i>>2]|0;
                    $$idx8$val$i$i814$i$i = HEAP32[$$idx8$i$i813$i$i>>2]|0;
                    $410 = Math_imul($$val$i$i810$i$i, $407)|0;
                    $411 = Math_imul($$idx$val$i$i812$i$i, $409)|0;
                    $412 = (($$idx8$val$i$i814$i$i) + ($410))|0;
                    $413 = (($412) + ($411))|0;
                    $414 = ($413|0)<(0);
                    $415 = (0 - ($$val$i$i810$i$i))|0;
                    $416 = (0 - ($$idx$val$i$i812$i$i))|0;
                    $417 = (0 - ($$idx8$val$i$i814$i$i))|0;
                    if ($414) {
                     HEAP32[$77>>2] = $415;
                     HEAP32[$$idx800$i$i>>2] = $416;
                     HEAP32[$$idx8$i$i813$i$i>>2] = $417;
                     $$idx779$val$i$i = $416;$$idx780$val$i$i = $417;$$val778$i$i = $415;
                    } else {
                     $$idx779$val$i$i = $$idx$val$i$i812$i$i;$$idx780$val$i$i = $$idx8$val$i$i814$i$i;$$val778$i$i = $$val$i$i810$i$i;
                    }
                    _free($397);
                    $418 = HEAP32[$34>>2]|0;
                    $419 = HEAP32[$418>>2]|0;
                    $420 = ((($418)) + 4|0);
                    $421 = HEAP32[$420>>2]|0;
                    $422 = Math_imul($419, $$val778$i$i)|0;
                    $423 = Math_imul($421, $$idx779$val$i$i)|0;
                    $424 = (($422) + ($$idx780$val$i$i))|0;
                    $425 = (($424) + ($423))|0;
                    $426 = ($425|0)<(0);
                    if ($426) {
                     break;
                    }
                    $427 = HEAP32[$35>>2]|0;
                    $428 = HEAP32[$427>>2]|0;
                    $429 = ((($427)) + 4|0);
                    $430 = HEAP32[$429>>2]|0;
                    $431 = Math_imul($428, $$val778$i$i)|0;
                    $432 = Math_imul($430, $$idx779$val$i$i)|0;
                    $433 = (($431) + ($$idx780$val$i$i))|0;
                    $434 = (($433) + ($432))|0;
                    $435 = ($434|0)<(0);
                    if ($435) {
                     break;
                    }
                    $436 = (_qr_aff_line_step($13,$$val778$i$i,$$idx779$val$i$i,0,$392,$9)|0);
                    $437 = ($436|0)<(0);
                    if ($437) {
                     break;
                    }
                    $$pre901$i$i = HEAP32[$9>>2]|0;
                    $445 = $$pre901$i$i;
                   }
                   $438 = HEAP32[$54>>2]|0;
                   $439 = $391 & -2;
                   $440 = (($438) - ($439))|0;
                   $441 = HEAP32[$55>>2]|0;
                   $442 = HEAP32[$80>>2]|0;
                   $443 = ($442*3)|0;
                   $444 = $445 << 1;
                   $446 = (($441) - ($444))|0;
                   $447 = (($443) + ($446))|0;
                   $448 = (($337) + -1)|0;
                   $449 = (($448) - ($390))|0;
                   $450 = (($449) + ($441))|0;
                   $451 = (($450|0) / ($337|0))&-1;
                   $452 = (($451) + ($339))|0;
                   $453 = $452 << 3;
                   $454 = (_malloc($453)|0);
                   $455 = ($339|0)>(0);
                   if ($455) {
                    $456 = HEAP32[$79>>2]|0;
                    $$0650887$i$i = 0;
                    while(1) {
                     $457 = (($454) + ($$0650887$i$i<<3)|0);
                     $458 = (($456) + ($$0650887$i$i<<4)|0);
                     $459 = $458;
                     $460 = $459;
                     $461 = HEAP32[$460>>2]|0;
                     $462 = (($459) + 4)|0;
                     $463 = $462;
                     $464 = HEAP32[$463>>2]|0;
                     $465 = $457;
                     $466 = $465;
                     HEAP32[$466>>2] = $461;
                     $467 = (($465) + 4)|0;
                     $468 = $467;
                     HEAP32[$468>>2] = $464;
                     $469 = (($$0650887$i$i) + 1)|0;
                     $exitcond892$i$i = ($469|0)==($339|0);
                     if ($exitcond892$i$i) {
                      break;
                     } else {
                      $$0650887$i$i = $469;
                     }
                    }
                   }
                   $470 = (($381) + -1)|0;
                   $471 = (($470) + ($392))|0;
                   $472 = (($471) - ($440))|0;
                   $473 = (($472|0) / ($392|0))&-1;
                   $474 = (($473) + ($394))|0;
                   $475 = $474 << 3;
                   $476 = (_malloc($475)|0);
                   $477 = ($394|0)>(0);
                   if ($477) {
                    $478 = HEAP32[$81>>2]|0;
                    $$1651886$i$i = 0;
                    while(1) {
                     $479 = (($476) + ($$1651886$i$i<<3)|0);
                     $480 = (($478) + ($$1651886$i$i<<4)|0);
                     $481 = $480;
                     $482 = $481;
                     $483 = HEAP32[$482>>2]|0;
                     $484 = (($481) + 4)|0;
                     $485 = $484;
                     $486 = HEAP32[$485>>2]|0;
                     $487 = $479;
                     $488 = $487;
                     HEAP32[$488>>2] = $483;
                     $489 = (($487) + 4)|0;
                     $490 = $489;
                     HEAP32[$490>>2] = $486;
                     $491 = (($$1651886$i$i) + 1)|0;
                     $exitcond$i$i = ($491|0)==($394|0);
                     if ($exitcond$i$i) {
                      break;
                     } else {
                      $$1651886$i$i = $491;
                     }
                    }
                   }
                   $492 = HEAP32[$48>>2]|0;
                   $493 = HEAP32[$50>>2]|0;
                   $494 = $492 << $493;
                   $495 = (($493) + -1)|0;
                   $496 = 1 << $495;
                   $497 = (($496) + ($494))|0;
                   $498 = HEAP32[$49>>2]|0;
                   $499 = $498 << $493;
                   $500 = (($499) + ($496))|0;
                   $501 = HEAP32[$13>>2]|0;
                   $502 = Math_imul($501, $387)|0;
                   $503 = HEAP32[$41>>2]|0;
                   $504 = Math_imul($503, $390)|0;
                   $505 = (($497) + ($502))|0;
                   $506 = (($505) + ($504))|0;
                   $507 = HEAP32[$42>>2]|0;
                   $508 = Math_imul($507, $387)|0;
                   $509 = HEAP32[$43>>2]|0;
                   $510 = Math_imul($509, $390)|0;
                   $511 = (($508) + ($500))|0;
                   $512 = (($511) + ($510))|0;
                   $513 = Math_imul($501, $385)|0;
                   $514 = Math_imul($503, $337)|0;
                   $515 = (($514) + ($513))|0;
                   $516 = Math_imul($507, $385)|0;
                   $517 = Math_imul($509, $337)|0;
                   $518 = (($517) + ($516))|0;
                   $519 = Math_imul($501, $382)|0;
                   $520 = Math_imul($507, $382)|0;
                   $521 = Math_imul($501, $440)|0;
                   $522 = Math_imul($503, $447)|0;
                   $523 = (($497) + ($521))|0;
                   $524 = (($523) + ($522))|0;
                   $525 = Math_imul($507, $440)|0;
                   $526 = Math_imul($509, $447)|0;
                   $527 = (($525) + ($500))|0;
                   $528 = (($527) + ($526))|0;
                   $529 = Math_imul($501, $392)|0;
                   $530 = Math_imul($503, $445)|0;
                   $531 = (($530) + ($529))|0;
                   $532 = Math_imul($507, $392)|0;
                   $533 = Math_imul($509, $445)|0;
                   $534 = (($533) + ($532))|0;
                   $535 = Math_imul($503, $442)|0;
                   $536 = Math_imul($509, $442)|0;
                   $537 = ($336|0)>(1);
                   $538 = $537 ? $337 : 0;
                   $539 = ($391|0)>(1);
                   $540 = $539 ? $392 : 0;
                   $$0629$i$i = $476;$$0633$i$i = $394;$$0637$i$i = $474;$$0641$i$i = $454;$$0661$i$i = $339;$$0666$i$i = $394;$$0671$i$i = 0;$$0676$i$i = $452;$$0680$i$i = $387;$$0685$i$i = $390;$$0690$i$i = $534;$$0696$i$i = $531;$$0702$i$i = $528;$$0707$i$i = $524;$$0712$i$i = $339;$$0717$i$i = 0;$$0722$i$i = $440;$$0729$i$i = $447;$$0734$i$i = $506;$$0739$i$i = $518;$$0745$i$i = $515;$$0751$i$i = $512;$1759 = $385;$1760 = $445;$542 = $441;$549 = $381;$571 = $454;$685 = $476;$849 = $454;$917 = $476;
                   while(1) {
                    $541 = (($$0729$i$i) + ($542))|0;
                    $543 = $541 >> 1;
                    $544 = ($543|0)<($$0729$i$i|0);
                    $545 = $544 ? $543 : $$0729$i$i;
                    $546 = ($$0685$i$i|0)<($545|0);
                    $547 = ($$0717$i$i|0)<(15);
                    $548 = (($$0680$i$i) + ($549))|0;
                    $550 = $548 >> 1;
                    $551 = ($550|0)<($$0680$i$i|0);
                    $552 = $551 ? $550 : $$0680$i$i;
                    $553 = ($$0722$i$i|0)>=($552|0);
                    $554 = ($$0671$i$i|0)>(14);
                    $555 = $554 | $553;
                    $$not$i$i = $547 & $546;
                    $556 = ($$0685$i$i|0)<($$0722$i$i|0);
                    $or$cond$i$i = $556 | $555;
                    $or$cond776$i$i = $$not$i$i & $or$cond$i$i;
                    if ($or$cond776$i$i) {
                     $557 = (($$0734$i$i) + ($519))|0;
                     $558 = HEAP32[$50>>2]|0;
                     $559 = (($558) + 2)|0;
                     $560 = $557 >> $559;
                     $561 = (($$0751$i$i) + ($520))|0;
                     $562 = $561 >> $559;
                     $563 = (($$0734$i$i) - ($519))|0;
                     $564 = $563 >> $559;
                     $565 = (($$0751$i$i) - ($520))|0;
                     $566 = $565 >> $559;
                     $567 = ($$0661$i$i|0)<($$0676$i$i|0);
                     $568 = $$0676$i$i << 1;
                     $569 = $568 | 1;
                     if ($567) {
                      $$1642$i$i = $$0641$i$i;$$1677$i$i = $$0676$i$i;$1761 = $849;$1762 = $571;
                     } else {
                      $570 = $569 << 3;
                      $572 = (_realloc($571,$570)|0);
                      $$1642$i$i = $572;$$1677$i$i = $569;$1761 = $572;$1762 = $572;
                     }
                     $573 = ($560|0)<(0);
                     do {
                      if ($573) {
                       label = 64;
                      } else {
                       $574 = ($560|0)>=($5|0);
                       $575 = ($562|0)<(0);
                       $or$cond$i$i$i = $574 | $575;
                       if ($or$cond$i$i$i) {
                        label = 64;
                        break;
                       }
                       $576 = ($562|0)>=($6|0);
                       $577 = ($564|0)<(0);
                       $or$cond3$i$i$i = $576 | $577;
                       if ($or$cond3$i$i$i) {
                        label = 64;
                        break;
                       }
                       $578 = ($564|0)<($5|0);
                       $579 = ($566|0)>(-1);
                       $or$cond5$not$i$i$i = $578 & $579;
                       $580 = ($566|0)<($6|0);
                       $or$cond1$i$i$i = $580 & $or$cond5$not$i$i$i;
                       if (!($or$cond1$i$i$i)) {
                        label = 64;
                        break;
                       }
                       $581 = Math_imul($562, $5)|0;
                       $582 = (($581) + ($560))|0;
                       $583 = (($4) + ($582)|0);
                       $584 = HEAP8[$583>>0]|0;
                       $585 = ($584<<24>>24)==(0);
                       if (!($585)) {
                        $$1718$i$i = 0;$$2663$i$i = $$0661$i$i;$$2682$i$i = $$0680$i$i;$$2714$i$i = $$0712$i$i;$$2736$i$i = $$0734$i$i;$$2753$i$i = $$0751$i$i;$$3688$i$i = $$0685$i$i;$$3742$i$i = $$0739$i$i;$$3748$i$i = $$0745$i$i;$668 = $1759;
                        break;
                       }
                       $586 = Math_imul($566, $5)|0;
                       $587 = (($586) + ($564))|0;
                       $588 = (($4) + ($587)|0);
                       $589 = HEAP8[$588>>0]|0;
                       $590 = ($589<<24>>24)==(0);
                       if (!($590)) {
                        $$1718$i$i = 0;$$2663$i$i = $$0661$i$i;$$2682$i$i = $$0680$i$i;$$2714$i$i = $$0712$i$i;$$2736$i$i = $$0734$i$i;$$2753$i$i = $$0751$i$i;$$3688$i$i = $$0685$i$i;$$3742$i$i = $$0739$i$i;$$3748$i$i = $$0745$i$i;$668 = $1759;
                        break;
                       }
                       $591 = (($566) + ($562))|0;
                       $592 = $591 >> 1;
                       $593 = Math_imul($592, $5)|0;
                       $594 = (($564) + ($560))|0;
                       $595 = $594 >> 1;
                       $596 = (($593) + ($595))|0;
                       $597 = (($4) + ($596)|0);
                       $598 = HEAP8[$597>>0]|0;
                       $599 = ($598<<24>>24)==(0);
                       if ($599) {
                        label = 64;
                        break;
                       }
                       $600 = (($$1642$i$i) + ($$0661$i$i<<3)|0);
                       $601 = (_qr_finder_locate_crossing($4,$5,$560,$562,$564,$566,1,$600)|0);
                       $602 = ($601|0)>(-1);
                       if (!($602)) {
                        label = 64;
                        break;
                       }
                       $603 = ($601|0)==(0);
                       if (!($603)) {
                        $$1718$i$i = 0;$$2663$i$i = $$0661$i$i;$$2682$i$i = $$0680$i$i;$$2714$i$i = $$0712$i$i;$$2736$i$i = $$0734$i$i;$$2753$i$i = $$0751$i$i;$$3688$i$i = $$0685$i$i;$$3742$i$i = $$0739$i$i;$$3748$i$i = $$0745$i$i;$668 = $1759;
                        break;
                       }
                       $604 = HEAP32[$600>>2]|0;
                       $605 = (((($$1642$i$i) + ($$0661$i$i<<3)|0)) + 4|0);
                       $606 = HEAP32[$605>>2]|0;
                       $607 = HEAP32[$44>>2]|0;
                       $608 = HEAP32[$48>>2]|0;
                       $609 = (($604) - ($608))|0;
                       $610 = Math_imul($609, $607)|0;
                       $611 = HEAP32[$45>>2]|0;
                       $612 = HEAP32[$49>>2]|0;
                       $613 = (($606) - ($612))|0;
                       $614 = Math_imul($613, $611)|0;
                       $615 = (($614) + ($610))|0;
                       $616 = HEAP32[$51>>2]|0;
                       $617 = 1 << $616;
                       $618 = $617 >> 1;
                       $619 = (($615) + ($618))|0;
                       $620 = $619 >> $616;
                       $621 = HEAP32[$46>>2]|0;
                       $622 = Math_imul($621, $609)|0;
                       $623 = HEAP32[$47>>2]|0;
                       $624 = Math_imul($623, $613)|0;
                       $625 = (($618) + ($622))|0;
                       $626 = (($625) + ($624))|0;
                       $627 = $626 >> $616;
                       $628 = (($620) + ($$0680$i$i))|0;
                       $629 = $628 >> 1;
                       $630 = (($627) + ($337))|0;
                       $631 = ($630|0)>($$0685$i$i|0);
                       $632 = (($627) + ($$0685$i$i))|0;
                       $633 = $632 >> 1;
                       $$1686$i$i = $631 ? $633 : $$0685$i$i;
                       $634 = HEAP32[$13>>2]|0;
                       $635 = Math_imul($629, $634)|0;
                       $636 = HEAP32[$41>>2]|0;
                       $637 = Math_imul($$1686$i$i, $636)|0;
                       $638 = (($635) + ($497))|0;
                       $639 = (($638) + ($637))|0;
                       $640 = HEAP32[$42>>2]|0;
                       $641 = Math_imul($629, $640)|0;
                       $642 = HEAP32[$43>>2]|0;
                       $643 = Math_imul($$1686$i$i, $642)|0;
                       $644 = (($641) + ($500))|0;
                       $645 = (($644) + ($643))|0;
                       $646 = (($$0661$i$i) + 1)|0;
                       $647 = $$0712$i$i >> 2;
                       $648 = (($647) + ($$0712$i$i))|0;
                       $649 = ($648|0)>(1);
                       $650 = $649 ? $648 : 1;
                       $651 = ($$0661$i$i|0)<($650|0);
                       if ($651) {
                        $$1718$i$i = 0;$$2663$i$i = $646;$$2682$i$i = $629;$$2714$i$i = $$0712$i$i;$$2736$i$i = $639;$$2753$i$i = $645;$$3688$i$i = $$1686$i$i;$$3742$i$i = $$0739$i$i;$$3748$i$i = $$0745$i$i;$668 = $1759;
                        break;
                       }
                       $652 = HEAP32[$50>>2]|0;
                       _qr_line_fit_points($75,$$1642$i$i,$646,$652);
                       $$val801$i$i = HEAP32[$75>>2]|0;
                       $$idx802$val$i$i = HEAP32[$$idx$i$i$i$i>>2]|0;
                       $653 = (_qr_aff_line_step($13,$$val801$i$i,$$idx802$val$i$i,1,$337,$8)|0);
                       $654 = ($653|0)>(-1);
                       if ($654) {
                        $655 = HEAP32[$13>>2]|0;
                        $656 = HEAP32[$8>>2]|0;
                        $657 = Math_imul($656, $655)|0;
                        $658 = HEAP32[$41>>2]|0;
                        $659 = Math_imul($658, $337)|0;
                        $660 = (($659) + ($657))|0;
                        $661 = HEAP32[$42>>2]|0;
                        $662 = Math_imul($661, $656)|0;
                        $663 = HEAP32[$43>>2]|0;
                        $664 = Math_imul($663, $337)|0;
                        $665 = (($664) + ($662))|0;
                        $$1718$i$i = 0;$$2663$i$i = $646;$$2682$i$i = $629;$$2714$i$i = $646;$$2736$i$i = $639;$$2753$i$i = $645;$$3688$i$i = $$1686$i$i;$$3742$i$i = $665;$$3748$i$i = $660;$668 = $656;
                        break;
                       } else {
                        $$pre911$i$i = HEAP32[$8>>2]|0;
                        $$1718$i$i = 0;$$2663$i$i = $646;$$2682$i$i = $629;$$2714$i$i = $646;$$2736$i$i = $639;$$2753$i$i = $645;$$3688$i$i = $$1686$i$i;$$3742$i$i = $$0739$i$i;$$3748$i$i = $$0745$i$i;$668 = $$pre911$i$i;
                        break;
                       }
                      }
                     } while(0);
                     if ((label|0) == 64) {
                      label = 0;
                      $666 = (($$0717$i$i) + 1)|0;
                      $$1718$i$i = $666;$$2663$i$i = $$0661$i$i;$$2682$i$i = $$0680$i$i;$$2714$i$i = $$0712$i$i;$$2736$i$i = $$0734$i$i;$$2753$i$i = $$0751$i$i;$$3688$i$i = $$0685$i$i;$$3742$i$i = $$0739$i$i;$$3748$i$i = $$0745$i$i;$668 = $1759;
                     }
                     $667 = (($$2682$i$i) + ($668))|0;
                     $$2719$i$i = $537 ? $$1718$i$i : 2147483647;
                     $$4689$i$i = (($$3688$i$i) + ($538))|0;
                     $669 = (($$2736$i$i) + ($$3748$i$i))|0;
                     $670 = (($$3742$i$i) + ($$2753$i$i))|0;
                     $$3632$ph$i$i = $$0629$i$i;$$3640$ph$i$i = $$0637$i$i;$$3644$ph$i$i = $$1642$i$i;$$3679$ph$i$i = $$1677$i$i;$$4$ph$i$i = $$0633$i$i;$$4665$ph$i$i = $$2663$i$i;$$4670$ph$i$i = $$0666$i$i;$$4675$ph$i$i = $$0671$i$i;$$4684$ph$i$i = $667;$$4706$ph$i$i = $$0702$i$i;$$4711$ph$i$i = $$0707$i$i;$$4716$ph$i$i = $$2714$i$i;$$4721$ph$i$i = $$2719$i$i;$$4733$ph$i$i = $$0729$i$i;$$4738$ph$i$i = $669;$$4755$ph$i$i = $670;$$5695$ph$i$i = $$0690$i$i;$$5701$ph$i$i = $$0696$i$i;$$5744$ph$i$i = $$3742$i$i;$$5750$ph$i$i = $$3748$i$i;$$6$ph$i$i = $$4689$i$i;$$6728$ph$i$i = $$0722$i$i;$$ph$i$i = $1761;$$ph837$i$i = $1762;$$ph838$i$i = $917;$$ph839$i$i = $685;$1763 = $668;$1764 = $1760;
                    } else {
                     if ($555) {
                      break;
                     }
                     $671 = (($$0707$i$i) + ($535))|0;
                     $672 = HEAP32[$50>>2]|0;
                     $673 = (($672) + 2)|0;
                     $674 = $671 >> $673;
                     $675 = (($$0702$i$i) + ($536))|0;
                     $676 = $675 >> $673;
                     $677 = (($$0707$i$i) - ($535))|0;
                     $678 = $677 >> $673;
                     $679 = (($$0702$i$i) - ($536))|0;
                     $680 = $679 >> $673;
                     $681 = ($$0633$i$i|0)<($$0637$i$i|0);
                     $682 = $$0637$i$i << 1;
                     $683 = $682 | 1;
                     if ($681) {
                      $$1630$i$i = $$0629$i$i;$$1638$i$i = $$0637$i$i;$1765 = $917;$1766 = $685;
                     } else {
                      $684 = $683 << 3;
                      $686 = (_realloc($685,$684)|0);
                      $$1630$i$i = $686;$$1638$i$i = $683;$1765 = $686;$1766 = $686;
                     }
                     $687 = ($674|0)<(0);
                     do {
                      if ($687) {
                       label = 82;
                      } else {
                       $688 = ($674|0)>=($5|0);
                       $689 = ($676|0)<(0);
                       $or$cond$i819$i$i = $688 | $689;
                       if ($or$cond$i819$i$i) {
                        label = 82;
                        break;
                       }
                       $690 = ($676|0)>=($6|0);
                       $691 = ($678|0)<(0);
                       $or$cond3$i820$i$i = $690 | $691;
                       if ($or$cond3$i820$i$i) {
                        label = 82;
                        break;
                       }
                       $692 = ($678|0)<($5|0);
                       $693 = ($680|0)>(-1);
                       $or$cond5$not$i821$i$i = $692 & $693;
                       $694 = ($680|0)<($6|0);
                       $or$cond1$i822$i$i = $694 & $or$cond5$not$i821$i$i;
                       if (!($or$cond1$i822$i$i)) {
                        label = 82;
                        break;
                       }
                       $695 = Math_imul($676, $5)|0;
                       $696 = (($695) + ($674))|0;
                       $697 = (($4) + ($696)|0);
                       $698 = HEAP8[$697>>0]|0;
                       $699 = ($698<<24>>24)==(0);
                       if (!($699)) {
                        $$1672$i$i = 0;$$2635$i$i = $$0633$i$i;$$2668$i$i = $$0666$i$i;$$2704$i$i = $$0702$i$i;$$2709$i$i = $$0707$i$i;$$2731$i$i = $$0729$i$i;$$3693$i$i = $$0690$i$i;$$3699$i$i = $$0696$i$i;$$3725$i$i = $$0722$i$i;$782 = $1760;
                        break;
                       }
                       $700 = Math_imul($680, $5)|0;
                       $701 = (($700) + ($678))|0;
                       $702 = (($4) + ($701)|0);
                       $703 = HEAP8[$702>>0]|0;
                       $704 = ($703<<24>>24)==(0);
                       if (!($704)) {
                        $$1672$i$i = 0;$$2635$i$i = $$0633$i$i;$$2668$i$i = $$0666$i$i;$$2704$i$i = $$0702$i$i;$$2709$i$i = $$0707$i$i;$$2731$i$i = $$0729$i$i;$$3693$i$i = $$0690$i$i;$$3699$i$i = $$0696$i$i;$$3725$i$i = $$0722$i$i;$782 = $1760;
                        break;
                       }
                       $705 = (($680) + ($676))|0;
                       $706 = $705 >> 1;
                       $707 = Math_imul($706, $5)|0;
                       $708 = (($678) + ($674))|0;
                       $709 = $708 >> 1;
                       $710 = (($707) + ($709))|0;
                       $711 = (($4) + ($710)|0);
                       $712 = HEAP8[$711>>0]|0;
                       $713 = ($712<<24>>24)==(0);
                       if ($713) {
                        label = 82;
                        break;
                       }
                       $714 = (($$1630$i$i) + ($$0633$i$i<<3)|0);
                       $715 = (_qr_finder_locate_crossing($4,$5,$674,$676,$678,$680,1,$714)|0);
                       $716 = ($715|0)>(-1);
                       if (!($716)) {
                        label = 82;
                        break;
                       }
                       $717 = ($715|0)==(0);
                       if (!($717)) {
                        $$1672$i$i = 0;$$2635$i$i = $$0633$i$i;$$2668$i$i = $$0666$i$i;$$2704$i$i = $$0702$i$i;$$2709$i$i = $$0707$i$i;$$2731$i$i = $$0729$i$i;$$3693$i$i = $$0690$i$i;$$3699$i$i = $$0696$i$i;$$3725$i$i = $$0722$i$i;$782 = $1760;
                        break;
                       }
                       $718 = HEAP32[$714>>2]|0;
                       $719 = (((($$1630$i$i) + ($$0633$i$i<<3)|0)) + 4|0);
                       $720 = HEAP32[$719>>2]|0;
                       $721 = HEAP32[$44>>2]|0;
                       $722 = HEAP32[$48>>2]|0;
                       $723 = (($718) - ($722))|0;
                       $724 = Math_imul($723, $721)|0;
                       $725 = HEAP32[$45>>2]|0;
                       $726 = HEAP32[$49>>2]|0;
                       $727 = (($720) - ($726))|0;
                       $728 = Math_imul($727, $725)|0;
                       $729 = (($728) + ($724))|0;
                       $730 = HEAP32[$51>>2]|0;
                       $731 = 1 << $730;
                       $732 = $731 >> 1;
                       $733 = (($729) + ($732))|0;
                       $734 = $733 >> $730;
                       $735 = HEAP32[$46>>2]|0;
                       $736 = Math_imul($735, $723)|0;
                       $737 = HEAP32[$47>>2]|0;
                       $738 = Math_imul($737, $727)|0;
                       $739 = (($732) + ($736))|0;
                       $740 = (($739) + ($738))|0;
                       $741 = $740 >> $730;
                       $742 = (($734) + ($392))|0;
                       $743 = ($742|0)>($$0722$i$i|0);
                       $744 = (($734) + ($$0722$i$i))|0;
                       $745 = $744 >> 1;
                       $$1723$i$i = $743 ? $745 : $$0722$i$i;
                       $746 = (($741) + ($$0729$i$i))|0;
                       $747 = $746 >> 1;
                       $748 = HEAP32[$13>>2]|0;
                       $749 = Math_imul($$1723$i$i, $748)|0;
                       $750 = HEAP32[$41>>2]|0;
                       $751 = Math_imul($747, $750)|0;
                       $752 = (($749) + ($497))|0;
                       $753 = (($752) + ($751))|0;
                       $754 = HEAP32[$42>>2]|0;
                       $755 = Math_imul($$1723$i$i, $754)|0;
                       $756 = HEAP32[$43>>2]|0;
                       $757 = Math_imul($747, $756)|0;
                       $758 = (($755) + ($500))|0;
                       $759 = (($758) + ($757))|0;
                       $760 = (($$0633$i$i) + 1)|0;
                       $761 = $$0666$i$i >> 2;
                       $762 = (($761) + ($$0666$i$i))|0;
                       $763 = ($762|0)>(1);
                       $764 = $763 ? $762 : 1;
                       $765 = ($$0633$i$i|0)<($764|0);
                       if ($765) {
                        $$1672$i$i = 0;$$2635$i$i = $760;$$2668$i$i = $$0666$i$i;$$2704$i$i = $759;$$2709$i$i = $753;$$2731$i$i = $747;$$3693$i$i = $$0690$i$i;$$3699$i$i = $$0696$i$i;$$3725$i$i = $$1723$i$i;$782 = $1760;
                        break;
                       }
                       $766 = HEAP32[$50>>2]|0;
                       _qr_line_fit_points($77,$$1630$i$i,$760,$766);
                       $$val799$i$i = HEAP32[$77>>2]|0;
                       $$idx800$val$i$i = HEAP32[$$idx800$i$i>>2]|0;
                       $767 = (_qr_aff_line_step($13,$$val799$i$i,$$idx800$val$i$i,0,$392,$9)|0);
                       $768 = ($767|0)>(-1);
                       if ($768) {
                        $769 = HEAP32[$13>>2]|0;
                        $770 = Math_imul($769, $392)|0;
                        $771 = HEAP32[$41>>2]|0;
                        $772 = HEAP32[$9>>2]|0;
                        $773 = Math_imul($772, $771)|0;
                        $774 = (($773) + ($770))|0;
                        $775 = HEAP32[$42>>2]|0;
                        $776 = Math_imul($775, $392)|0;
                        $777 = HEAP32[$43>>2]|0;
                        $778 = Math_imul($777, $772)|0;
                        $779 = (($778) + ($776))|0;
                        $$1672$i$i = 0;$$2635$i$i = $760;$$2668$i$i = $760;$$2704$i$i = $759;$$2709$i$i = $753;$$2731$i$i = $747;$$3693$i$i = $779;$$3699$i$i = $774;$$3725$i$i = $$1723$i$i;$782 = $772;
                        break;
                       } else {
                        $$pre904$i$i = HEAP32[$9>>2]|0;
                        $$1672$i$i = 0;$$2635$i$i = $760;$$2668$i$i = $760;$$2704$i$i = $759;$$2709$i$i = $753;$$2731$i$i = $747;$$3693$i$i = $$0690$i$i;$$3699$i$i = $$0696$i$i;$$3725$i$i = $$1723$i$i;$782 = $$pre904$i$i;
                        break;
                       }
                      }
                     } while(0);
                     if ((label|0) == 82) {
                      label = 0;
                      $780 = (($$0671$i$i) + 1)|0;
                      $$1672$i$i = $780;$$2635$i$i = $$0633$i$i;$$2668$i$i = $$0666$i$i;$$2704$i$i = $$0702$i$i;$$2709$i$i = $$0707$i$i;$$2731$i$i = $$0729$i$i;$$3693$i$i = $$0690$i$i;$$3699$i$i = $$0696$i$i;$$3725$i$i = $$0722$i$i;$782 = $1760;
                     }
                     $$4726$i$i = (($$3725$i$i) + ($540))|0;
                     $$2673$i$i = $539 ? $$1672$i$i : 2147483647;
                     $781 = (($$2731$i$i) + ($782))|0;
                     $783 = (($$3699$i$i) + ($$2709$i$i))|0;
                     $784 = (($$3693$i$i) + ($$2704$i$i))|0;
                     $$3632$ph$i$i = $$1630$i$i;$$3640$ph$i$i = $$1638$i$i;$$3644$ph$i$i = $$0641$i$i;$$3679$ph$i$i = $$0676$i$i;$$4$ph$i$i = $$2635$i$i;$$4665$ph$i$i = $$0661$i$i;$$4670$ph$i$i = $$2668$i$i;$$4675$ph$i$i = $$2673$i$i;$$4684$ph$i$i = $$0680$i$i;$$4706$ph$i$i = $784;$$4711$ph$i$i = $783;$$4716$ph$i$i = $$0712$i$i;$$4721$ph$i$i = $$0717$i$i;$$4733$ph$i$i = $781;$$4738$ph$i$i = $$0734$i$i;$$4755$ph$i$i = $$0751$i$i;$$5695$ph$i$i = $$3693$i$i;$$5701$ph$i$i = $$3699$i$i;$$5744$ph$i$i = $$0739$i$i;$$5750$ph$i$i = $$0745$i$i;$$6$ph$i$i = $$0685$i$i;$$6728$ph$i$i = $$4726$i$i;$$ph$i$i = $849;$$ph837$i$i = $571;$$ph838$i$i = $1765;$$ph839$i$i = $1766;$1763 = $1759;$1764 = $782;
                    }
                    $$pre902$i$i = HEAP32[$55>>2]|0;
                    $$pre903$i$i = HEAP32[$52>>2]|0;
                    $$0629$i$i = $$3632$ph$i$i;$$0633$i$i = $$4$ph$i$i;$$0637$i$i = $$3640$ph$i$i;$$0641$i$i = $$3644$ph$i$i;$$0661$i$i = $$4665$ph$i$i;$$0666$i$i = $$4670$ph$i$i;$$0671$i$i = $$4675$ph$i$i;$$0676$i$i = $$3679$ph$i$i;$$0680$i$i = $$4684$ph$i$i;$$0685$i$i = $$6$ph$i$i;$$0690$i$i = $$5695$ph$i$i;$$0696$i$i = $$5701$ph$i$i;$$0702$i$i = $$4706$ph$i$i;$$0707$i$i = $$4711$ph$i$i;$$0712$i$i = $$4716$ph$i$i;$$0717$i$i = $$4721$ph$i$i;$$0722$i$i = $$6728$ph$i$i;$$0729$i$i = $$4733$ph$i$i;$$0734$i$i = $$4738$ph$i$i;$$0739$i$i = $$5744$ph$i$i;$$0745$i$i = $$5750$ph$i$i;$$0751$i$i = $$4755$ph$i$i;$1759 = $1763;$1760 = $1764;$542 = $$pre902$i$i;$549 = $$pre903$i$i;$571 = $$ph837$i$i;$685 = $$ph839$i$i;$849 = $$ph$i$i;$917 = $$ph838$i$i;
                   }
                   $785 = ($$0661$i$i|0)>(1);
                   if ($785) {
                    $786 = HEAP32[$50>>2]|0;
                    _qr_line_fit_points($75,$$0641$i$i,$$0661$i$i,$786);
                   } else {
                    $787 = HEAP32[$16>>2]|0;
                    $788 = ($787*3)|0;
                    $789 = (($788) + ($549))|0;
                    $790 = HEAP32[$53>>2]|0;
                    $791 = HEAP32[$13>>2]|0;
                    $792 = Math_imul($791, $789)|0;
                    $793 = HEAP32[$41>>2]|0;
                    $794 = Math_imul($793, $790)|0;
                    $795 = (($794) + ($792))|0;
                    $796 = HEAP32[$50>>2]|0;
                    $797 = (($796) + -1)|0;
                    $798 = 1 << $797;
                    $799 = (($795) + ($798))|0;
                    $800 = $799 >> $796;
                    $801 = HEAP32[$48>>2]|0;
                    $802 = (($800) + ($801))|0;
                    $803 = HEAP32[$42>>2]|0;
                    $804 = Math_imul($803, $789)|0;
                    $805 = HEAP32[$43>>2]|0;
                    $806 = Math_imul($805, $790)|0;
                    $807 = (($804) + ($798))|0;
                    $808 = (($807) + ($806))|0;
                    $809 = $808 >> $796;
                    $810 = HEAP32[$49>>2]|0;
                    $811 = (($809) + ($810))|0;
                    $ispos$i182$i = ($793|0)>(-1);
                    $neg$i183$i = (0 - ($793))|0;
                    $812 = $ispos$i182$i ? $793 : $neg$i183$i;
                    $ispos756$i$i = ($805|0)>(-1);
                    $neg757$i$i = (0 - ($805))|0;
                    $813 = $ispos756$i$i ? $805 : $neg757$i$i;
                    $814 = (($812) - ($813))|0;
                    $815 = ($812|0)<($813|0);
                    $816 = $815 ? $814 : 0;
                    $817 = (($812) - ($816))|0;
                    $818 = (_qr_ilog($817)|0);
                    $819 = HEAP32[$50>>2]|0;
                    $820 = (($819) + 1)|0;
                    $821 = $820 >> 1;
                    $822 = HEAP32[$41>>2]|0;
                    $ispos758$i$i = ($822|0)>(-1);
                    $neg759$i$i = (0 - ($822))|0;
                    $823 = $ispos758$i$i ? $822 : $neg759$i$i;
                    $824 = HEAP32[$43>>2]|0;
                    $ispos760$i$i = ($824|0)>(-1);
                    $neg761$i$i = (0 - ($824))|0;
                    $825 = $ispos760$i$i ? $824 : $neg761$i$i;
                    $826 = (($823) - ($825))|0;
                    $827 = ($823|0)<($825|0);
                    $828 = $827 ? $826 : 0;
                    $829 = (($823) - ($828))|0;
                    $830 = (_qr_ilog($829)|0);
                    $831 = HEAP32[$50>>2]|0;
                    $832 = (($831) + 1)|0;
                    $833 = $832 >> 1;
                    $834 = ($830|0)>($833|0);
                    $835 = (($818) - ($821))|0;
                    $836 = $834 ? $835 : 0;
                    $837 = 1 << $836;
                    $838 = $837 >> 1;
                    $839 = HEAP32[$43>>2]|0;
                    $840 = (($838) + ($839))|0;
                    $841 = $840 >> $836;
                    HEAP32[$75>>2] = $841;
                    $842 = HEAP32[$41>>2]|0;
                    $843 = (($838) - ($842))|0;
                    $844 = $843 >> $836;
                    HEAP32[$$idx$i$i$i$i>>2] = $844;
                    $845 = Math_imul($841, $802)|0;
                    $846 = Math_imul($844, $811)|0;
                    $847 = (($845) + ($846))|0;
                    $848 = (0 - ($847))|0;
                    HEAP32[$$idx8$i$i$i$i>>2] = $848;
                   }
                   _free($849);
                   $850 = ($$0633$i$i|0)>(1);
                   if ($850) {
                    $851 = HEAP32[$50>>2]|0;
                    _qr_line_fit_points($77,$$0629$i$i,$$0633$i$i,$851);
                   } else {
                    $852 = HEAP32[$54>>2]|0;
                    $853 = HEAP32[$55>>2]|0;
                    $854 = HEAP32[$80>>2]|0;
                    $855 = ($854*3)|0;
                    $856 = (($855) + ($853))|0;
                    $857 = HEAP32[$13>>2]|0;
                    $858 = Math_imul($857, $852)|0;
                    $859 = HEAP32[$41>>2]|0;
                    $860 = Math_imul($859, $856)|0;
                    $861 = (($860) + ($858))|0;
                    $862 = HEAP32[$50>>2]|0;
                    $863 = (($862) + -1)|0;
                    $864 = 1 << $863;
                    $865 = (($861) + ($864))|0;
                    $866 = $865 >> $862;
                    $867 = HEAP32[$48>>2]|0;
                    $868 = (($866) + ($867))|0;
                    $869 = HEAP32[$42>>2]|0;
                    $870 = Math_imul($869, $852)|0;
                    $871 = HEAP32[$43>>2]|0;
                    $872 = Math_imul($871, $856)|0;
                    $873 = (($870) + ($864))|0;
                    $874 = (($873) + ($872))|0;
                    $875 = $874 >> $862;
                    $876 = HEAP32[$49>>2]|0;
                    $877 = (($875) + ($876))|0;
                    $ispos762$i$i = ($859|0)>(-1);
                    $neg763$i$i = (0 - ($859))|0;
                    $878 = $ispos762$i$i ? $859 : $neg763$i$i;
                    $ispos764$i$i = ($871|0)>(-1);
                    $neg765$i$i = (0 - ($871))|0;
                    $879 = $ispos764$i$i ? $871 : $neg765$i$i;
                    $880 = (($878) - ($879))|0;
                    $881 = ($878|0)<($879|0);
                    $882 = $881 ? $880 : 0;
                    $883 = (($878) - ($882))|0;
                    $884 = (_qr_ilog($883)|0);
                    $885 = HEAP32[$50>>2]|0;
                    $886 = (($885) + 1)|0;
                    $887 = $886 >> 1;
                    $888 = HEAP32[$41>>2]|0;
                    $ispos766$i$i = ($888|0)>(-1);
                    $neg767$i$i = (0 - ($888))|0;
                    $889 = $ispos766$i$i ? $888 : $neg767$i$i;
                    $890 = HEAP32[$43>>2]|0;
                    $ispos768$i$i = ($890|0)>(-1);
                    $neg769$i$i = (0 - ($890))|0;
                    $891 = $ispos768$i$i ? $890 : $neg769$i$i;
                    $892 = (($889) - ($891))|0;
                    $893 = ($889|0)<($891|0);
                    $894 = $893 ? $892 : 0;
                    $895 = (($889) - ($894))|0;
                    $896 = (_qr_ilog($895)|0);
                    $897 = HEAP32[$50>>2]|0;
                    $898 = (($897) + 1)|0;
                    $899 = $898 >> 1;
                    $900 = ($896|0)>($899|0);
                    $901 = (($884) - ($887))|0;
                    $902 = $900 ? $901 : 0;
                    $903 = 1 << $902;
                    $904 = $903 >> 1;
                    $905 = HEAP32[$42>>2]|0;
                    $906 = (($904) + ($905))|0;
                    $907 = $906 >> $902;
                    HEAP32[$77>>2] = $907;
                    $908 = HEAP32[$13>>2]|0;
                    $909 = (($904) - ($908))|0;
                    $910 = $909 >> $902;
                    HEAP32[$$idx800$i$i>>2] = $910;
                    $911 = HEAP32[$75>>2]|0;
                    $912 = Math_imul($911, $868)|0;
                    $913 = HEAP32[$$idx$i$i$i$i>>2]|0;
                    $914 = Math_imul($913, $877)|0;
                    $915 = (($912) + ($914))|0;
                    $916 = (0 - ($915))|0;
                    HEAP32[$$idx8$i$i813$i$i>>2] = $916;
                   }
                   _free($917);
                   $918 = HEAP32[$7>>2]|0;
                   $919 = HEAP32[$$idx791$i$i>>2]|0;
                   $920 = Math_imul($919, $918)|0;
                   $921 = HEAP32[$$idx797$i$i>>2]|0;
                   $922 = HEAP32[$73>>2]|0;
                   $923 = Math_imul($922, $921)|0;
                   $924 = (($920) - ($923))|0;
                   $925 = ($924|0)==(0);
                   if ($925) {
                    break;
                   }
                   $932 = HEAP32[$$idx792$i$i>>2]|0;
                   $933 = Math_imul($932, $921)|0;
                   $934 = HEAP32[$$idx798$i$i>>2]|0;
                   $935 = Math_imul($934, $919)|0;
                   $936 = (($933) - ($935))|0;
                   $937 = Math_imul($934, $922)|0;
                   $938 = Math_imul($932, $918)|0;
                   $939 = (($937) - ($938))|0;
                   $940 = ($924|0)<(0);
                   $941 = (0 - ($936))|0;
                   $942 = (0 - ($939))|0;
                   $943 = (0 - ($924))|0;
                   $spec$select$i$i$i = $940 ? $943 : $924;
                   $spec$select37$i$i$i = $940 ? $941 : $936;
                   $spec$select38$i$i$i = $940 ? $942 : $939;
                   $944 = $spec$select$i$i$i >> 1;
                   $945 = $spec$select37$i$i$i >> 31;
                   $946 = (($945) + ($944))|0;
                   $947 = $946 ^ $945;
                   $948 = (($947) + ($spec$select37$i$i$i))|0;
                   $949 = (($948|0) / ($spec$select$i$i$i|0))&-1;
                   $950 = $spec$select38$i$i$i >> 31;
                   $951 = (($950) + ($944))|0;
                   $952 = $951 ^ $950;
                   $953 = (($952) + ($spec$select38$i$i$i))|0;
                   $954 = (($953|0) / ($spec$select$i$i$i|0))&-1;
                   $955 = ($949|0)>=($89|0);
                   $956 = ($949|0)<($90|0);
                   $or$cond773$i$i = $955 & $956;
                   if (!($or$cond773$i$i)) {
                    break;
                   }
                   $957 = ($954|0)>=($92|0);
                   $958 = ($954|0)<($93|0);
                   $or$cond775$i$i = $957 & $958;
                   if (!($or$cond775$i$i)) {
                    break;
                   }
                   $926 = HEAP32[$75>>2]|0;
                   $927 = Math_imul($926, $919)|0;
                   $928 = HEAP32[$$idx$i$i$i$i>>2]|0;
                   $929 = Math_imul($928, $922)|0;
                   $930 = (($927) - ($929))|0;
                   $931 = ($930|0)==(0);
                   if ($931) {
                    break;
                   }
                   $1223 = Math_imul($928, $932)|0;
                   $1224 = HEAP32[$$idx8$i$i$i$i>>2]|0;
                   $1225 = Math_imul($1224, $919)|0;
                   $1226 = (($1223) - ($1225))|0;
                   $1227 = Math_imul($1224, $922)|0;
                   $1228 = Math_imul($926, $932)|0;
                   $1229 = (($1227) - ($1228))|0;
                   $1230 = ($930|0)<(0);
                   $1231 = (0 - ($1226))|0;
                   $1232 = (0 - ($1229))|0;
                   $1233 = (0 - ($930))|0;
                   $spec$select$i$1$i$i = $1230 ? $1233 : $930;
                   $spec$select37$i$1$i$i = $1230 ? $1231 : $1226;
                   $spec$select38$i$1$i$i = $1230 ? $1232 : $1229;
                   $1234 = $spec$select$i$1$i$i >> 1;
                   $1235 = $spec$select37$i$1$i$i >> 31;
                   $1236 = (($1235) + ($1234))|0;
                   $1237 = $1236 ^ $1235;
                   $1238 = (($1237) + ($spec$select37$i$1$i$i))|0;
                   $961 = (($1238|0) / ($spec$select$i$1$i$i|0))&-1;
                   $1239 = $spec$select38$i$1$i$i >> 31;
                   $1240 = (($1239) + ($1234))|0;
                   $1241 = $1240 ^ $1239;
                   $1242 = (($1241) + ($spec$select38$i$1$i$i))|0;
                   $962 = (($1242|0) / ($spec$select$i$1$i$i|0))&-1;
                   $1243 = ($961|0)>=($89|0);
                   $1244 = ($961|0)<($90|0);
                   $or$cond773$1$i$i = $1243 & $1244;
                   if (!($or$cond773$1$i$i)) {
                    break;
                   }
                   $1245 = ($962|0)>=($92|0);
                   $1246 = ($962|0)<($93|0);
                   $or$cond775$1$i$i = $1245 & $1246;
                   if (!($or$cond775$1$i$i)) {
                    break;
                   }
                   $1247 = HEAP32[$$idx800$i$i>>2]|0;
                   $1248 = Math_imul($1247, $918)|0;
                   $1249 = HEAP32[$77>>2]|0;
                   $1250 = Math_imul($1249, $921)|0;
                   $1251 = (($1248) - ($1250))|0;
                   $1252 = ($1251|0)==(0);
                   if ($1252) {
                    break;
                   }
                   $1253 = HEAP32[$$idx8$i$i813$i$i>>2]|0;
                   $1254 = Math_imul($1253, $921)|0;
                   $1255 = Math_imul($1247, $934)|0;
                   $1256 = (($1254) - ($1255))|0;
                   $1257 = Math_imul($1249, $934)|0;
                   $1258 = Math_imul($1253, $918)|0;
                   $1259 = (($1257) - ($1258))|0;
                   $1260 = ($1251|0)<(0);
                   $1261 = (0 - ($1256))|0;
                   $1262 = (0 - ($1259))|0;
                   $1263 = (0 - ($1251))|0;
                   $spec$select$i$2$i$i = $1260 ? $1263 : $1251;
                   $spec$select37$i$2$i$i = $1260 ? $1261 : $1256;
                   $spec$select38$i$2$i$i = $1260 ? $1262 : $1259;
                   $1264 = $spec$select$i$2$i$i >> 1;
                   $1265 = $spec$select37$i$2$i$i >> 31;
                   $1266 = (($1265) + ($1264))|0;
                   $1267 = $1266 ^ $1265;
                   $1268 = (($1267) + ($spec$select37$i$2$i$i))|0;
                   $963 = (($1268|0) / ($spec$select$i$2$i$i|0))&-1;
                   $1269 = $spec$select38$i$2$i$i >> 31;
                   $1270 = (($1269) + ($1264))|0;
                   $1271 = $1270 ^ $1269;
                   $1272 = (($1271) + ($spec$select38$i$2$i$i))|0;
                   $964 = (($1272|0) / ($spec$select$i$2$i$i|0))&-1;
                   $1273 = ($963|0)>=($89|0);
                   $1274 = ($963|0)<($90|0);
                   $or$cond773$2$i$i = $1273 & $1274;
                   if (!($or$cond773$2$i$i)) {
                    break;
                   }
                   $1275 = ($964|0)>=($92|0);
                   $1276 = ($964|0)<($93|0);
                   $or$cond775$2$i$i = $1275 & $1276;
                   if (!($or$cond775$2$i$i)) {
                    break;
                   }
                   $1277 = Math_imul($1247, $926)|0;
                   $1278 = Math_imul($1249, $928)|0;
                   $1279 = (($1277) - ($1278))|0;
                   $1280 = ($1279|0)==(0);
                   if ($1280) {
                    break;
                   }
                   $1281 = Math_imul($1253, $928)|0;
                   $1282 = Math_imul($1247, $1224)|0;
                   $1283 = (($1281) - ($1282))|0;
                   $1284 = Math_imul($1249, $1224)|0;
                   $1285 = Math_imul($1253, $926)|0;
                   $1286 = (($1284) - ($1285))|0;
                   $1287 = ($1279|0)<(0);
                   $1288 = (0 - ($1283))|0;
                   $1289 = (0 - ($1286))|0;
                   $1290 = (0 - ($1279))|0;
                   $spec$select$i$3$i$i = $1287 ? $1290 : $1279;
                   $spec$select37$i$3$i$i = $1287 ? $1288 : $1283;
                   $spec$select38$i$3$i$i = $1287 ? $1289 : $1286;
                   $1291 = $spec$select$i$3$i$i >> 1;
                   $1292 = $spec$select37$i$3$i$i >> 31;
                   $1293 = (($1292) + ($1291))|0;
                   $1294 = $1293 ^ $1292;
                   $1295 = (($1294) + ($spec$select37$i$3$i$i))|0;
                   $965 = (($1295|0) / ($spec$select$i$3$i$i|0))&-1;
                   $1296 = $spec$select38$i$3$i$i >> 31;
                   $1297 = (($1296) + ($1291))|0;
                   $1298 = $1297 ^ $1296;
                   $1299 = (($1298) + ($spec$select38$i$3$i$i))|0;
                   $966 = (($1299|0) / ($spec$select$i$3$i$i|0))&-1;
                   $1300 = ($965|0)>=($89|0);
                   $1301 = ($965|0)<($90|0);
                   $or$cond773$3$i$i = $1300 & $1301;
                   if (!($or$cond773$3$i$i)) {
                    break;
                   }
                   $1302 = ($966|0)>=($92|0);
                   $1303 = ($966|0)<($93|0);
                   $or$cond775$3$i$i = $1302 & $1303;
                   if (!($or$cond775$3$i$i)) {
                    break;
                   }
                   $1304 = HEAP32[$61>>2]|0;
                   $1305 = HEAP32[$60>>2]|0;
                   $1306 = (($1305) + ($1304))|0;
                   $1307 = HEAP32[$94>>2]|0;
                   $1308 = (($1306) + ($1307))|0;
                   $1309 = HEAP32[$95>>2]|0;
                   $960 = (($1308) + ($1309))|0;
                   $1310 = ($960|0)>(4);
                   if ($1310) {
                    $959 = (($960) + 16)|0;
                    _qr_hom_cell_init($10,0,0,$959,0,0,$959,$959,$959,$949,$954,$961,$962,$963,$964,$965,$966);
                    $967 = (($960) + 10)|0;
                    $968 = (_qr_alignment_pattern_search($11,$10,$967,$967,4,$4,$5,$6)|0);
                    $969 = ($968|0)>(-1);
                    do {
                     if ($969) {
                      $970 = Math_imul($963, $962)|0;
                      $971 = Math_imul($964, $961)|0;
                      $972 = (($970) - ($971))|0;
                      $973 = (($963) - ($961))|0;
                      $974 = (($964) - ($962))|0;
                      $975 = ($967|0)<(0);
                      $976 = $975 << 31 >> 31;
                      $977 = ($972|0)<(0);
                      $978 = $977 << 31 >> 31;
                      $979 = (___muldi3(($967|0),($976|0),($972|0),($978|0))|0);
                      $980 = (getTempRet0() | 0);
                      $981 = (($960) + 4)|0;
                      $982 = ($981|0)<(0);
                      $983 = $982 << 31 >> 31;
                      $984 = Math_imul($974, $949)|0;
                      $985 = Math_imul($973, $954)|0;
                      $986 = (($984) - ($985))|0;
                      $987 = ($986|0)<(0);
                      $988 = $987 << 31 >> 31;
                      $989 = (___muldi3(($981|0),($983|0),($986|0),($988|0))|0);
                      $990 = (getTempRet0() | 0);
                      $991 = HEAP32[$11>>2]|0;
                      $992 = Math_imul($991, $974)|0;
                      $993 = HEAP32[$96>>2]|0;
                      $994 = Math_imul($993, $973)|0;
                      $995 = (($992) - ($994))|0;
                      $996 = ($995|0)<(0);
                      $997 = $996 << 31 >> 31;
                      $998 = (___muldi3(($995|0),($997|0),6,0)|0);
                      $999 = (getTempRet0() | 0);
                      $1000 = (_i64Add(($989|0),($990|0),($979|0),($980|0))|0);
                      $1001 = (getTempRet0() | 0);
                      $1002 = (_i64Add(($1000|0),($1001|0),($998|0),($999|0))|0);
                      $1003 = (getTempRet0() | 0);
                      $1004 = ($1002|0)==(0);
                      $1005 = ($1003|0)==(0);
                      $1006 = $1004 & $1005;
                      if ($1006) {
                       break L27;
                      } else {
                       $1007 = (_bitshift64Lshr(($1002|0),($1003|0),63)|0);
                       $1008 = (getTempRet0() | 0);
                       $1009 = (0 - ($1007))|0;
                       $1010 = ($1009|0)<(0);
                       $1011 = $1010 << 31 >> 31;
                       $1012 = (_i64Add(($1002|0),($1003|0),($1009|0),($1011|0))|0);
                       $1013 = (getTempRet0() | 0);
                       $1014 = $1012 ^ $1009;
                       $1015 = $1013 ^ $1011;
                       $1016 = Math_imul($967, $949)|0;
                       $1017 = ($1016|0)<(0);
                       $1018 = $1017 << 31 >> 31;
                       $1019 = ($992|0)<(0);
                       $1020 = $1019 << 31 >> 31;
                       $1021 = (___muldi3(($992|0),($1020|0),($1016|0),($1018|0))|0);
                       $1022 = (getTempRet0() | 0);
                       $1023 = Math_imul($991, $981)|0;
                       $1024 = ($1023|0)<(0);
                       $1025 = $1024 << 31 >> 31;
                       $1026 = (($972) - ($985))|0;
                       $1027 = ($1026|0)<(0);
                       $1028 = $1027 << 31 >> 31;
                       $1029 = (___muldi3(($1023|0),($1025|0),($1026|0),($1028|0))|0);
                       $1030 = (getTempRet0() | 0);
                       $1031 = ($949*6)|0;
                       $1032 = ($1031|0)<(0);
                       $1033 = $1032 << 31 >> 31;
                       $1034 = (($972) - ($994))|0;
                       $1035 = ($1034|0)<(0);
                       $1036 = $1035 << 31 >> 31;
                       $1037 = (___muldi3(($1034|0),($1036|0),($1031|0),($1033|0))|0);
                       $1038 = (getTempRet0() | 0);
                       $1039 = (_i64Add(($1021|0),($1022|0),($1029|0),($1030|0))|0);
                       $1040 = (getTempRet0() | 0);
                       $1041 = (_i64Add(($1039|0),($1040|0),($1037|0),($1038|0))|0);
                       $1042 = (getTempRet0() | 0);
                       $1043 = (_i64Add(($1041|0),($1042|0),($1009|0),($1011|0))|0);
                       $1044 = (getTempRet0() | 0);
                       $1045 = $1043 ^ $1009;
                       $1046 = $1044 ^ $1011;
                       $1047 = (_bitshift64Ashr(($1014|0),($1015|0),1)|0);
                       $1048 = (getTempRet0() | 0);
                       $1049 = (_bitshift64Lshr(($1045|0),($1046|0),63)|0);
                       $1050 = (getTempRet0() | 0);
                       $1051 = (0 - ($1049))|0;
                       $1052 = ($1051|0)<(0);
                       $1053 = $1052 << 31 >> 31;
                       $1054 = (_i64Add(($1047|0),($1048|0),($1051|0),($1053|0))|0);
                       $1055 = (getTempRet0() | 0);
                       $1056 = $1054 ^ $1051;
                       $1057 = $1055 ^ $1053;
                       $1058 = (_i64Add(($1056|0),($1057|0),($1045|0),($1046|0))|0);
                       $1059 = (getTempRet0() | 0);
                       $1060 = (___divdi3(($1058|0),($1059|0),($1014|0),($1015|0))|0);
                       $1061 = (getTempRet0() | 0);
                       $1062 = Math_imul($967, $954)|0;
                       $1063 = ($1062|0)<(0);
                       $1064 = $1063 << 31 >> 31;
                       $1065 = (0 - ($973))|0;
                       $1066 = Math_imul($993, $1065)|0;
                       $1067 = ($1066|0)<(0);
                       $1068 = $1067 << 31 >> 31;
                       $1069 = (___muldi3(($1066|0),($1068|0),($1062|0),($1064|0))|0);
                       $1070 = (getTempRet0() | 0);
                       $1071 = Math_imul($993, $981)|0;
                       $1072 = ($1071|0)<(0);
                       $1073 = $1072 << 31 >> 31;
                       $1074 = (($972) + ($984))|0;
                       $1075 = ($1074|0)<(0);
                       $1076 = $1075 << 31 >> 31;
                       $1077 = (___muldi3(($1071|0),($1073|0),($1074|0),($1076|0))|0);
                       $1078 = (getTempRet0() | 0);
                       $1079 = ($954*6)|0;
                       $1080 = ($1079|0)<(0);
                       $1081 = $1080 << 31 >> 31;
                       $1082 = (($992) + ($972))|0;
                       $1083 = ($1082|0)<(0);
                       $1084 = $1083 << 31 >> 31;
                       $1085 = (___muldi3(($1082|0),($1084|0),($1079|0),($1081|0))|0);
                       $1086 = (getTempRet0() | 0);
                       $1087 = (_i64Add(($1077|0),($1078|0),($1085|0),($1086|0))|0);
                       $1088 = (getTempRet0() | 0);
                       $1089 = (_i64Add(($1087|0),($1088|0),($1069|0),($1070|0))|0);
                       $1090 = (getTempRet0() | 0);
                       $1091 = (_i64Add(($1089|0),($1090|0),($1009|0),($1011|0))|0);
                       $1092 = (getTempRet0() | 0);
                       $1093 = $1091 ^ $1009;
                       $1094 = $1092 ^ $1011;
                       $1095 = (_bitshift64Lshr(($1093|0),($1094|0),63)|0);
                       $1096 = (getTempRet0() | 0);
                       $1097 = (0 - ($1095))|0;
                       $1098 = ($1097|0)<(0);
                       $1099 = $1098 << 31 >> 31;
                       $1100 = (_i64Add(($1047|0),($1048|0),($1097|0),($1099|0))|0);
                       $1101 = (getTempRet0() | 0);
                       $1102 = $1100 ^ $1097;
                       $1103 = $1101 ^ $1099;
                       $1104 = (_i64Add(($1102|0),($1103|0),($1093|0),($1094|0))|0);
                       $1105 = (getTempRet0() | 0);
                       $1106 = (___divdi3(($1104|0),($1105|0),($1014|0),($1015|0))|0);
                       $1107 = (getTempRet0() | 0);
                       $$2655$ph$i$i = $1106;$$2659$ph$i$i = $1060;
                       break;
                      }
                     } else {
                      $$2655$ph$i$i = $966;$$2659$ph$i$i = $965;
                     }
                    } while(0);
                    $$3656$i$i = $$2655$ph$i$i;$$3660$i$i = $$2659$ph$i$i;
                   } else {
                    $$3656$i$i = $966;$$3660$i$i = $965;
                   }
                   $1108 = (($961) - ($949))|0;
                   $1109 = (($963) - ($949))|0;
                   $1110 = (($$3660$i$i) - ($949))|0;
                   $1111 = (($$3660$i$i) - ($961))|0;
                   $1112 = (($$3660$i$i) - ($963))|0;
                   $1113 = (($962) - ($954))|0;
                   $1114 = (($964) - ($954))|0;
                   $1115 = (($$3656$i$i) - ($954))|0;
                   $1116 = (($$3656$i$i) - ($962))|0;
                   $1117 = (($$3656$i$i) - ($964))|0;
                   $1118 = Math_imul($1112, $1113)|0;
                   $1119 = Math_imul($1117, $1108)|0;
                   $1120 = (($1118) - ($1119))|0;
                   $1121 = Math_imul($1116, $1109)|0;
                   $1122 = Math_imul($1111, $1114)|0;
                   $1123 = (($1121) - ($1122))|0;
                   $1124 = Math_imul($1116, $1112)|0;
                   $1125 = Math_imul($1117, $1111)|0;
                   $1126 = (($1124) - ($1125))|0;
                   $ispos$i$i$i = ($1108|0)>(-1);
                   $neg$i$i$i = (0 - ($1108))|0;
                   $1127 = $ispos$i$i$i ? $1108 : $neg$i$i$i;
                   $ispos1$i$i$i = ($1113|0)>(-1);
                   $neg2$i$i$i = (0 - ($1113))|0;
                   $1128 = $ispos1$i$i$i ? $1113 : $neg2$i$i$i;
                   $1129 = (($1127) - ($1128))|0;
                   $1130 = ($1127|0)<($1128|0);
                   $1131 = $1130 ? $1129 : 0;
                   $1132 = (($1127) - ($1131))|0;
                   $1133 = (_qr_ilog($1132)|0);
                   $1134 = (($1120) + ($1126))|0;
                   $ispos3$i$i$i = ($1134|0)>(-1);
                   $neg4$i$i$i = (0 - ($1134))|0;
                   $1135 = $ispos3$i$i$i ? $1134 : $neg4$i$i$i;
                   $1136 = (_qr_ilog($1135)|0);
                   $1137 = (($1136) + ($1133))|0;
                   $ispos5$i$i$i = ($1109|0)>(-1);
                   $neg6$i$i$i = (0 - ($1109))|0;
                   $1138 = $ispos5$i$i$i ? $1109 : $neg6$i$i$i;
                   $ispos7$i$i$i = ($1114|0)>(-1);
                   $neg8$i$i$i = (0 - ($1114))|0;
                   $1139 = $ispos7$i$i$i ? $1114 : $neg8$i$i$i;
                   $1140 = (($1138) - ($1139))|0;
                   $1141 = ($1138|0)<($1139|0);
                   $1142 = $1141 ? $1140 : 0;
                   $1143 = (($1138) - ($1142))|0;
                   $1144 = (_qr_ilog($1143)|0);
                   $1145 = (($1123) + ($1126))|0;
                   $ispos9$i$i$i = ($1145|0)>(-1);
                   $neg10$i$i$i = (0 - ($1145))|0;
                   $1146 = $ispos9$i$i$i ? $1145 : $neg10$i$i$i;
                   $1147 = (_qr_ilog($1146)|0);
                   $1148 = (($1147) + ($1144))|0;
                   $ispos11$i$i$i = ($1120|0)>(-1);
                   $neg12$i$i$i = (0 - ($1120))|0;
                   $1149 = $ispos11$i$i$i ? $1120 : $neg12$i$i$i;
                   $ispos13$i$i$i = ($1123|0)>(-1);
                   $neg14$i$i$i = (0 - ($1123))|0;
                   $1150 = $ispos13$i$i$i ? $1123 : $neg14$i$i$i;
                   $1151 = (($1149) - ($1150))|0;
                   $1152 = ($1149|0)<($1150|0);
                   $1153 = $1152 ? $1151 : 0;
                   $1154 = (($1149) - ($1153))|0;
                   $ispos15$i$i$i = ($1126|0)>(-1);
                   $neg16$i$i$i = (0 - ($1126))|0;
                   $1155 = $ispos15$i$i$i ? $1126 : $neg16$i$i$i;
                   $1156 = (($1154) - ($1155))|0;
                   $1157 = ($1154|0)<($1155|0);
                   $1158 = $1157 ? $1156 : 0;
                   $1159 = (($1154) - ($1158))|0;
                   $1160 = (_qr_ilog($1159)|0);
                   $1161 = (($1137) - ($1148))|0;
                   $1162 = ($1137|0)<($1148|0);
                   $1163 = $1162 ? $1161 : 0;
                   $1164 = (($1137) - ($1163))|0;
                   $1165 = (($1164) - ($1160))|0;
                   $1166 = ($1164|0)<($1160|0);
                   $1167 = $1166 ? $1165 : 0;
                   $1168 = (($1164) - ($1167))|0;
                   $1169 = ($1168|0)>(16);
                   $1170 = (($1168) + -16)|0;
                   $1171 = $1169 ? $1170 : 0;
                   $1172 = 1 << $1171;
                   $1173 = $1172 >> 1;
                   $1174 = ($1108|0)<(0);
                   $1175 = $1174 << 31 >> 31;
                   $1176 = ($1134|0)<(0);
                   $1177 = $1176 << 31 >> 31;
                   $1178 = (___muldi3(($1134|0),($1177|0),($1108|0),($1175|0))|0);
                   $1179 = (getTempRet0() | 0);
                   $1180 = ($1173|0)<(0);
                   $1181 = $1180 << 31 >> 31;
                   $1182 = (_i64Add(($1178|0),($1179|0),($1173|0),($1181|0))|0);
                   $1183 = (getTempRet0() | 0);
                   $1184 = (_bitshift64Ashr(($1182|0),($1183|0),($1171|0))|0);
                   $1185 = (getTempRet0() | 0);
                   HEAP32[$14>>2] = $1184;
                   $1186 = ($1109|0)<(0);
                   $1187 = $1186 << 31 >> 31;
                   $1188 = ($1145|0)<(0);
                   $1189 = $1188 << 31 >> 31;
                   $1190 = (___muldi3(($1145|0),($1189|0),($1109|0),($1187|0))|0);
                   $1191 = (getTempRet0() | 0);
                   $1192 = (_i64Add(($1190|0),($1191|0),($1173|0),($1181|0))|0);
                   $1193 = (getTempRet0() | 0);
                   $1194 = (_bitshift64Ashr(($1192|0),($1193|0),($1171|0))|0);
                   $1195 = (getTempRet0() | 0);
                   HEAP32[$82>>2] = $1194;
                   HEAP32[$63>>2] = $949;
                   $1196 = ($1113|0)<(0);
                   $1197 = $1196 << 31 >> 31;
                   $1198 = (___muldi3(($1134|0),($1177|0),($1113|0),($1197|0))|0);
                   $1199 = (getTempRet0() | 0);
                   $1200 = (_i64Add(($1198|0),($1199|0),($1173|0),($1181|0))|0);
                   $1201 = (getTempRet0() | 0);
                   $1202 = (_bitshift64Ashr(($1200|0),($1201|0),($1171|0))|0);
                   $1203 = (getTempRet0() | 0);
                   HEAP32[$83>>2] = $1202;
                   $1204 = ($1114|0)<(0);
                   $1205 = $1204 << 31 >> 31;
                   $1206 = (___muldi3(($1145|0),($1189|0),($1114|0),($1205|0))|0);
                   $1207 = (getTempRet0() | 0);
                   $1208 = (_i64Add(($1206|0),($1207|0),($1173|0),($1181|0))|0);
                   $1209 = (getTempRet0() | 0);
                   $1210 = (_bitshift64Ashr(($1208|0),($1209|0),($1171|0))|0);
                   $1211 = (getTempRet0() | 0);
                   HEAP32[$84>>2] = $1210;
                   HEAP32[$64>>2] = $954;
                   $1212 = (($1173) + ($1120))|0;
                   $1213 = $1212 >> $1171;
                   HEAP32[$85>>2] = $1213;
                   $1214 = (($1173) + ($1123))|0;
                   $1215 = $1214 >> $1171;
                   HEAP32[$86>>2] = $1215;
                   $1216 = ($1171|0)>(14);
                   if ($1216) {
                    $1217 = $1172 >> 15;
                    $1218 = (($1217) + ($1126))|0;
                    $1219 = (($1171) + -14)|0;
                    $1220 = $1218 >> $1219;
                    $1311 = $1220;
                   } else {
                    $1221 = (14 - ($1171))|0;
                    $1222 = $1126 << $1221;
                    $1311 = $1222;
                   }
                   HEAP32[$97>>2] = $1311;
                   $1312 = (($1127) - ($1138))|0;
                   $1313 = ($1127|0)<($1138|0);
                   $1314 = $1313 ? $1312 : 0;
                   $1315 = (($1127) - ($1314))|0;
                   $ispos17$i$i$i = ($1110|0)>(-1);
                   $neg18$i$i$i = (0 - ($1110))|0;
                   $1316 = $ispos17$i$i$i ? $1110 : $neg18$i$i$i;
                   $1317 = (($1315) - ($1316))|0;
                   $1318 = ($1315|0)<($1316|0);
                   $1319 = $1318 ? $1317 : 0;
                   $1320 = (($1315) - ($1319))|0;
                   $1321 = (_qr_ilog($1320)|0);
                   $1322 = HEAP32[$14>>2]|0;
                   $ispos19$i$i$i = ($1322|0)>(-1);
                   $neg20$i$i$i = (0 - ($1322))|0;
                   $1323 = $ispos19$i$i$i ? $1322 : $neg20$i$i$i;
                   $1324 = HEAP32[$83>>2]|0;
                   $ispos21$i$i$i = ($1324|0)>(-1);
                   $neg22$i$i$i = (0 - ($1324))|0;
                   $1325 = $ispos21$i$i$i ? $1324 : $neg22$i$i$i;
                   $1326 = (($1323) - ($1325))|0;
                   $1327 = ($1323|0)<($1325|0);
                   $1328 = $1327 ? $1326 : 0;
                   $1329 = (($1323) - ($1328))|0;
                   $1330 = (_qr_ilog($1329)|0);
                   $1331 = (($1330) + ($1321))|0;
                   $1332 = (($1128) - ($1139))|0;
                   $1333 = ($1128|0)<($1139|0);
                   $1334 = $1333 ? $1332 : 0;
                   $1335 = (($1128) - ($1334))|0;
                   $ispos23$i$i$i = ($1115|0)>(-1);
                   $neg24$i$i$i = (0 - ($1115))|0;
                   $1336 = $ispos23$i$i$i ? $1115 : $neg24$i$i$i;
                   $1337 = (($1335) - ($1336))|0;
                   $1338 = ($1335|0)<($1336|0);
                   $1339 = $1338 ? $1337 : 0;
                   $1340 = (($1335) - ($1339))|0;
                   $1341 = (_qr_ilog($1340)|0);
                   $1342 = HEAP32[$82>>2]|0;
                   $ispos25$i$i$i = ($1342|0)>(-1);
                   $neg26$i$i$i = (0 - ($1342))|0;
                   $1343 = $ispos25$i$i$i ? $1342 : $neg26$i$i$i;
                   $1344 = HEAP32[$84>>2]|0;
                   $ispos27$i$i$i = ($1344|0)>(-1);
                   $neg28$i$i$i = (0 - ($1344))|0;
                   $1345 = $ispos27$i$i$i ? $1344 : $neg28$i$i$i;
                   $1346 = (($1343) - ($1345))|0;
                   $1347 = ($1343|0)<($1345|0);
                   $1348 = $1347 ? $1346 : 0;
                   $1349 = (($1343) - ($1348))|0;
                   $1350 = (_qr_ilog($1349)|0);
                   $1351 = (($1350) + ($1341))|0;
                   $1352 = (_qr_ilog($1155)|0);
                   $1353 = (($1352) - ($1171))|0;
                   $1354 = (($1331) - ($1351))|0;
                   $1355 = ($1331|0)<($1351|0);
                   $1356 = $1355 ? $1354 : 0;
                   $1357 = (($1331) - ($1356))|0;
                   $1358 = (($1357) + ($1353))|0;
                   $1359 = ($1358|0)>(29);
                   $1360 = (($1358) + -29)|0;
                   $1361 = $1359 ? $1360 : 0;
                   $1362 = 1 << $1361;
                   $1363 = $1362 >> 1;
                   $1364 = (($1361) + ($1171))|0;
                   $1365 = $1173 << $1361;
                   $1366 = HEAP32[$84>>2]|0;
                   $1367 = ($1366|0)<(0);
                   $1368 = $1367 << 31 >> 31;
                   $1369 = ($1126|0)<(0);
                   $1370 = $1369 << 31 >> 31;
                   $1371 = (___muldi3(($1366|0),($1368|0),($1126|0),($1370|0))|0);
                   $1372 = (getTempRet0() | 0);
                   $1373 = ($1365|0)<(0);
                   $1374 = $1373 << 31 >> 31;
                   $1375 = (_i64Add(($1371|0),($1372|0),($1365|0),($1374|0))|0);
                   $1376 = (getTempRet0() | 0);
                   $1377 = (_bitshift64Ashr(($1375|0),($1376|0),($1364|0))|0);
                   $1378 = (getTempRet0() | 0);
                   HEAP32[$65>>2] = $1377;
                   $1379 = HEAP32[$82>>2]|0;
                   $1380 = (0 - ($1379))|0;
                   $1381 = ($1380|0)<(0);
                   $1382 = $1381 << 31 >> 31;
                   $1383 = (___muldi3(($1380|0),($1382|0),($1126|0),($1370|0))|0);
                   $1384 = (getTempRet0() | 0);
                   $1385 = (_i64Add(($1383|0),($1384|0),($1365|0),($1374|0))|0);
                   $1386 = (getTempRet0() | 0);
                   $1387 = (_bitshift64Ashr(($1385|0),($1386|0),($1364|0))|0);
                   $1388 = (getTempRet0() | 0);
                   HEAP32[$66>>2] = $1387;
                   $1389 = HEAP32[$83>>2]|0;
                   $1390 = (0 - ($1389))|0;
                   $1391 = ($1390|0)<(0);
                   $1392 = $1391 << 31 >> 31;
                   $1393 = (___muldi3(($1390|0),($1392|0),($1126|0),($1370|0))|0);
                   $1394 = (getTempRet0() | 0);
                   $1395 = (_i64Add(($1393|0),($1394|0),($1365|0),($1374|0))|0);
                   $1396 = (getTempRet0() | 0);
                   $1397 = (_bitshift64Ashr(($1395|0),($1396|0),($1364|0))|0);
                   $1398 = (getTempRet0() | 0);
                   HEAP32[$67>>2] = $1397;
                   $1399 = HEAP32[$14>>2]|0;
                   $1400 = ($1399|0)<(0);
                   $1401 = $1400 << 31 >> 31;
                   $1402 = (___muldi3(($1399|0),($1401|0),($1126|0),($1370|0))|0);
                   $1403 = (getTempRet0() | 0);
                   $1404 = (_i64Add(($1402|0),($1403|0),($1365|0),($1374|0))|0);
                   $1405 = (getTempRet0() | 0);
                   $1406 = (_bitshift64Ashr(($1404|0),($1405|0),($1364|0))|0);
                   $1407 = (getTempRet0() | 0);
                   HEAP32[$68>>2] = $1406;
                   $1408 = ($1389|0)<(0);
                   $1409 = $1408 << 31 >> 31;
                   $1410 = HEAP32[$86>>2]|0;
                   $1411 = ($1410|0)<(0);
                   $1412 = $1411 << 31 >> 31;
                   $1413 = (___muldi3(($1410|0),($1412|0),($1389|0),($1409|0))|0);
                   $1414 = (getTempRet0() | 0);
                   $1415 = HEAP32[$85>>2]|0;
                   $1416 = ($1415|0)<(0);
                   $1417 = $1416 << 31 >> 31;
                   $1418 = (___muldi3(($1415|0),($1417|0),($1366|0),($1368|0))|0);
                   $1419 = (getTempRet0() | 0);
                   $1420 = ($1363|0)<(0);
                   $1421 = $1420 << 31 >> 31;
                   $1422 = (_i64Subtract(($1413|0),($1414|0),($1363|0),($1421|0))|0);
                   $1423 = (getTempRet0() | 0);
                   $1424 = (_i64Subtract(($1422|0),($1423|0),($1418|0),($1419|0))|0);
                   $1425 = (getTempRet0() | 0);
                   $1426 = (_bitshift64Ashr(($1424|0),($1425|0),($1361|0))|0);
                   $1427 = (getTempRet0() | 0);
                   HEAP32[$69>>2] = $1426;
                   $1428 = ($1379|0)<(0);
                   $1429 = $1428 << 31 >> 31;
                   $1430 = (___muldi3(($1415|0),($1417|0),($1379|0),($1429|0))|0);
                   $1431 = (getTempRet0() | 0);
                   $1432 = (___muldi3(($1410|0),($1412|0),($1399|0),($1401|0))|0);
                   $1433 = (getTempRet0() | 0);
                   $1434 = (_i64Add(($1432|0),($1433|0),($1363|0),($1421|0))|0);
                   $1435 = (getTempRet0() | 0);
                   $1436 = (_i64Subtract(($1430|0),($1431|0),($1434|0),($1435|0))|0);
                   $1437 = (getTempRet0() | 0);
                   $1438 = (_bitshift64Ashr(($1436|0),($1437|0),($1361|0))|0);
                   $1439 = (getTempRet0() | 0);
                   HEAP32[$70>>2] = $1438;
                   $1440 = (___muldi3(($1399|0),($1401|0),($1366|0),($1368|0))|0);
                   $1441 = (getTempRet0() | 0);
                   $1442 = (___muldi3(($1389|0),($1409|0),($1379|0),($1429|0))|0);
                   $1443 = (getTempRet0() | 0);
                   $1444 = (_i64Add(($1442|0),($1443|0),($1363|0),($1421|0))|0);
                   $1445 = (getTempRet0() | 0);
                   $1446 = (_i64Subtract(($1440|0),($1441|0),($1444|0),($1445|0))|0);
                   $1447 = (getTempRet0() | 0);
                   $1448 = (_bitshift64Ashr(($1446|0),($1447|0),($1361|0))|0);
                   $1449 = (getTempRet0() | 0);
                   HEAP32[$71>>2] = $1448;
                   HEAP32[$72>>2] = 14;
                   HEAP32[$$sroa$0$0$$sroa_idx$i>>2] = $949;
                   HEAP32[$$sroa$7$0$$sroa_idx199$i>>2] = $954;
                   HEAP32[$$sroa$10$0$$sroa_idx203$i>>2] = $961;
                   HEAP32[$$sroa$15$0$$sroa_idx208$i>>2] = $962;
                   HEAP32[$$sroa$20$0$$sroa_idx213$i>>2] = $963;
                   HEAP32[$$sroa$25$0$$sroa_idx218$i>>2] = $964;
                   HEAP32[$$sroa$30$0$$sroa_idx223$i>>2] = $965;
                   HEAP32[$$sroa$31$0$$sroa_idx227$i>>2] = $966;
                   $1450 = HEAP32[$34>>2]|0;
                   $1451 = HEAP32[$1450>>2]|0;
                   $1452 = ((($1450)) + 4|0);
                   $1453 = HEAP32[$1452>>2]|0;
                   $1454 = HEAP32[$63>>2]|0;
                   $1455 = (($1451) - ($1454))|0;
                   $1456 = HEAP32[$64>>2]|0;
                   $1457 = (($1453) - ($1456))|0;
                   $1458 = Math_imul($1455, $1377)|0;
                   $1459 = Math_imul($1457, $1387)|0;
                   $1460 = (($1459) + ($1458))|0;
                   $1461 = Math_imul($1455, $1397)|0;
                   $1462 = Math_imul($1457, $1406)|0;
                   $1463 = (($1462) + ($1461))|0;
                   $1464 = Math_imul($1455, $1426)|0;
                   $1465 = Math_imul($1457, $1438)|0;
                   $1466 = (($1448) + 8192)|0;
                   $1467 = (($1464) + ($1466))|0;
                   $1468 = (($1467) + ($1465))|0;
                   $1469 = $1468 >> 14;
                   $1470 = ($1469|0)==(0);
                   if ($1470) {
                    $1471 = $1460 >>> 31;
                    $1472 = (($1471) + 2147483647)|0;
                    HEAP32[$58>>2] = $1472;
                    $1473 = $1463 >>> 31;
                    $1474 = (($1473) + 2147483647)|0;
                    $1490 = $1474;$1567 = $1472;
                   } else {
                    $1475 = ($1468|0)<(0);
                    $1476 = (0 - ($1460))|0;
                    $1477 = (0 - ($1463))|0;
                    $1478 = (0 - ($1469))|0;
                    $spec$select$i$i = $1475 ? $1476 : $1460;
                    $spec$select48$i$i = $1475 ? $1477 : $1463;
                    $spec$select49$i$i = $1475 ? $1478 : $1469;
                    $1479 = $spec$select49$i$i >> 1;
                    $1480 = $spec$select$i$i >> 31;
                    $1481 = (($1479) + ($1480))|0;
                    $1482 = $1481 ^ $1480;
                    $1483 = (($1482) + ($spec$select$i$i))|0;
                    $1484 = (($1483|0) / ($spec$select49$i$i|0))&-1;
                    HEAP32[$58>>2] = $1484;
                    $1485 = $spec$select48$i$i >> 31;
                    $1486 = (($1479) + ($1485))|0;
                    $1487 = $1486 ^ $1485;
                    $1488 = (($1487) + ($spec$select48$i$i))|0;
                    $1489 = (($1488|0) / ($spec$select49$i$i|0))&-1;
                    $1490 = $1489;$1567 = $1484;
                   }
                   HEAP32[$59>>2] = $1490;
                   $1491 = HEAP32[$35>>2]|0;
                   $1492 = HEAP32[$1491>>2]|0;
                   $1493 = ((($1491)) + 4|0);
                   $1494 = HEAP32[$1493>>2]|0;
                   $1495 = (($1492) - ($1454))|0;
                   $1496 = (($1494) - ($1456))|0;
                   $1497 = Math_imul($1495, $1377)|0;
                   $1498 = Math_imul($1496, $1387)|0;
                   $1499 = (($1498) + ($1497))|0;
                   $1500 = Math_imul($1495, $1397)|0;
                   $1501 = Math_imul($1496, $1406)|0;
                   $1502 = (($1501) + ($1500))|0;
                   $1503 = Math_imul($1495, $1426)|0;
                   $1504 = Math_imul($1496, $1438)|0;
                   $1505 = (($1503) + ($1466))|0;
                   $1506 = (($1505) + ($1504))|0;
                   $1507 = $1506 >> 14;
                   $1508 = ($1507|0)==(0);
                   if ($1508) {
                    $1509 = $1499 >>> 31;
                    $1510 = (($1509) + 2147483647)|0;
                    HEAP32[$52>>2] = $1510;
                    $1511 = $1502 >>> 31;
                    $1512 = (($1511) + 2147483647)|0;
                    $$sink$i187$i = $1512;
                   } else {
                    $1513 = ($1506|0)<(0);
                    $1514 = (0 - ($1499))|0;
                    $1515 = (0 - ($1502))|0;
                    $1516 = (0 - ($1507))|0;
                    $spec$select$i184$i = $1513 ? $1514 : $1499;
                    $spec$select48$i185$i = $1513 ? $1515 : $1502;
                    $spec$select49$i186$i = $1513 ? $1516 : $1507;
                    $1517 = $spec$select49$i186$i >> 1;
                    $1518 = $spec$select$i184$i >> 31;
                    $1519 = (($1517) + ($1518))|0;
                    $1520 = $1519 ^ $1518;
                    $1521 = (($1520) + ($spec$select$i184$i))|0;
                    $1522 = (($1521|0) / ($spec$select49$i186$i|0))&-1;
                    HEAP32[$52>>2] = $1522;
                    $1523 = $spec$select48$i185$i >> 31;
                    $1524 = (($1517) + ($1523))|0;
                    $1525 = $1524 ^ $1523;
                    $1526 = (($1525) + ($spec$select48$i185$i))|0;
                    $1527 = (($1526|0) / ($spec$select49$i186$i|0))&-1;
                    $$sink$i187$i = $1527;
                   }
                   HEAP32[$53>>2] = $$sink$i187$i;
                   $1528 = HEAP32[$36>>2]|0;
                   $1529 = HEAP32[$1528>>2]|0;
                   $1530 = ((($1528)) + 4|0);
                   $1531 = HEAP32[$1530>>2]|0;
                   $1532 = (($1529) - ($1454))|0;
                   $1533 = (($1531) - ($1456))|0;
                   $1534 = Math_imul($1532, $1377)|0;
                   $1535 = Math_imul($1533, $1387)|0;
                   $1536 = (($1535) + ($1534))|0;
                   $1537 = Math_imul($1532, $1397)|0;
                   $1538 = Math_imul($1533, $1406)|0;
                   $1539 = (($1538) + ($1537))|0;
                   $1540 = Math_imul($1532, $1426)|0;
                   $1541 = Math_imul($1533, $1438)|0;
                   $1542 = (($1540) + ($1466))|0;
                   $1543 = (($1542) + ($1541))|0;
                   $1544 = $1543 >> 14;
                   $1545 = ($1544|0)==(0);
                   if ($1545) {
                    $1546 = $1536 >>> 31;
                    $1547 = (($1546) + 2147483647)|0;
                    HEAP32[$54>>2] = $1547;
                    $1548 = $1539 >>> 31;
                    $1549 = (($1548) + 2147483647)|0;
                    $$sink$i193$i = $1549;
                   } else {
                    $1550 = ($1543|0)<(0);
                    $1551 = (0 - ($1536))|0;
                    $1552 = (0 - ($1539))|0;
                    $1553 = (0 - ($1544))|0;
                    $spec$select$i190$i = $1550 ? $1551 : $1536;
                    $spec$select48$i191$i = $1550 ? $1552 : $1539;
                    $spec$select49$i192$i = $1550 ? $1553 : $1544;
                    $1554 = $spec$select49$i192$i >> 1;
                    $1555 = $spec$select$i190$i >> 31;
                    $1556 = (($1554) + ($1555))|0;
                    $1557 = $1556 ^ $1555;
                    $1558 = (($1557) + ($spec$select$i190$i))|0;
                    $1559 = (($1558|0) / ($spec$select49$i192$i|0))&-1;
                    HEAP32[$54>>2] = $1559;
                    $1560 = $spec$select48$i191$i >> 31;
                    $1561 = (($1554) + ($1560))|0;
                    $1562 = $1561 ^ $1560;
                    $1563 = (($1562) + ($spec$select48$i191$i))|0;
                    $1564 = (($1563|0) / ($spec$select49$i192$i|0))&-1;
                    $$sink$i193$i = $1564;
                   }
                   HEAP32[$55>>2] = $$sink$i193$i;
                   _qr_finder_edge_pts_hom_classify($16,$14);
                   $1565 = HEAP32[$52>>2]|0;
                   $1566 = (($1565) - ($1567))|0;
                   $1568 = (_qr_finder_estimate_module_size_and_version($16,$1566,$1566)|0);
                   $1569 = ($1568|0)<(0);
                   if ($1569) {
                    $$0146$i = 1;$$1$i = $$0268$i;
                    break L20;
                   }
                   _qr_finder_edge_pts_hom_classify($17,$14);
                   $1570 = HEAP32[$55>>2]|0;
                   $1571 = (($1570) - ($1490))|0;
                   $1572 = (_qr_finder_estimate_module_size_and_version($17,$1571,$1571)|0);
                   $1573 = ($1572|0)<(0);
                   if ($1573) {
                    $$0146$i = 1;$$1$i = $$0268$i;
                    break L20;
                   }
                   $1574 = HEAP32[$56>>2]|0;
                   $1575 = HEAP32[$57>>2]|0;
                   $1576 = ($1574|0)==($1575|0);
                   $1577 = ($1574|0)<(7);
                   $or$cond$i = $1577 & $1576;
                   do {
                    if ($or$cond$i) {
                     $$1148$i = $1574;
                    } else {
                     $1578 = (($1574) - ($1575))|0;
                     $ispos154$i = ($1578|0)>(-1);
                     $neg155$i = (0 - ($1578))|0;
                     $1579 = $ispos154$i ? $1578 : $neg155$i;
                     $1580 = ($1579|0)>(3);
                     if ($1580) {
                      $$0146$i = 1;$$1$i = $$0268$i;
                      break L20;
                     }
                     $1581 = ($1574|0)>(3);
                     if ($1581) {
                      $1582 = (_qr_finder_version_decode($16,$14,$4,$5,$6,0)|0);
                      $1583 = (($1582) - ($1574))|0;
                      $ispos162$i = ($1583|0)>(-1);
                      $neg163$i = (0 - ($1583))|0;
                      $1584 = $ispos162$i ? $1583 : $neg163$i;
                      $1585 = ($1584|0)>(3);
                      $spec$store$select$i = $1585 ? -1 : $1582;
                      $$0147$i = $spec$store$select$i;
                     } else {
                      $$0147$i = -1;
                     }
                     $1586 = ($1575|0)>(3);
                     if ($1586) {
                      $1587 = (_qr_finder_version_decode($17,$14,$4,$5,$6,1)|0);
                      $1588 = (($1587) - ($1575))|0;
                      $ispos160$i = ($1588|0)>(-1);
                      $neg161$i = (0 - ($1588))|0;
                      $1589 = $ispos160$i ? $1588 : $neg161$i;
                      $1590 = ($1589|0)>(3);
                      $spec$store$select1$i = $1590 ? -1 : $1587;
                      $$0149$i = $spec$store$select1$i;
                     } else {
                      $$0149$i = -1;
                     }
                     $1591 = ($$0147$i|0)>(-1);
                     $1592 = ($$0149$i|0)<(0);
                     if ($1591) {
                      $1593 = ($$0149$i|0)==($$0147$i|0);
                      $or$cond165$i = $1592 | $1593;
                      if ($or$cond165$i) {
                       $$1148$i = $$0147$i;
                       break;
                      } else {
                       $$0146$i = 1;$$1$i = $$0268$i;
                       break L20;
                      }
                     } else {
                      if ($1592) {
                       $$0146$i = 1;$$1$i = $$0268$i;
                       break L20;
                      } else {
                       $$1148$i = $$0149$i;
                       break;
                      }
                     }
                    }
                   } while(0);
                   _qr_finder_edge_pts_hom_classify($15,$14);
                   $1594 = HEAP32[$52>>2]|0;
                   $1595 = HEAP32[$54>>2]|0;
                   $1596 = (($1594) - ($1595))|0;
                   $1597 = HEAP32[$55>>2]|0;
                   $1598 = HEAP32[$59>>2]|0;
                   $1599 = (($1597) - ($1598))|0;
                   $1600 = (_qr_finder_estimate_module_size_and_version($15,$1596,$1599)|0);
                   $1601 = ($1600|0)<(0);
                   if ($1601) {
                    $$0146$i = 1;$$1$i = $$0268$i;
                    break L20;
                   }
                   $1602 = HEAP32[$60>>2]|0;
                   $1603 = (($1602) - ($1574))|0;
                   $ispos156$i = ($1603|0)>(-1);
                   $neg157$i = (0 - ($1603))|0;
                   $1604 = $ispos156$i ? $1603 : $neg157$i;
                   $1605 = ($1604|0)>(1);
                   if ($1605) {
                    $$0146$i = 1;$$1$i = $$0268$i;
                    break L20;
                   }
                   $1606 = HEAP32[$61>>2]|0;
                   $1607 = (($1606) - ($1575))|0;
                   $ispos158$i = ($1607|0)>(-1);
                   $neg159$i = (0 - ($1607))|0;
                   $1608 = $ispos158$i ? $1607 : $neg159$i;
                   $1609 = ($1608|0)>(1);
                   if ($1609) {
                    $$0146$i = 1;$$1$i = $$0268$i;
                    break L20;
                   }
                   $1610 = (_qr_finder_fmt_info_decode($15,$16,$17,$14,$4,$5,$6)|0);
                   $1611 = ($1610|0)<(0);
                   if ($1611) {
                    label = 138;
                   } else {
                    $1612 = HEAP32[$34>>2]|0;
                    $1613 = HEAP32[$35>>2]|0;
                    $1614 = HEAP32[$36>>2]|0;
                    $1615 = (_qr_code_decode($19,$0,$1612,$1613,$1614,$$1148$i,$1610,$4,$5,$6)|0);
                    $1616 = ($1615|0)<(0);
                    if ($1616) {
                     label = 138;
                    }
                   }
                   if ((label|0) == 138) {
                    label = 0;
                    $1617 = HEAP32[$65>>2]|0;
                    $1618 = HEAP32[$67>>2]|0;
                    HEAP32[$65>>2] = $1618;
                    HEAP32[$67>>2] = $1617;
                    $1619 = HEAP32[$66>>2]|0;
                    $1620 = HEAP32[$68>>2]|0;
                    HEAP32[$66>>2] = $1620;
                    HEAP32[$68>>2] = $1619;
                    $1621 = HEAP32[$14>>2]|0;
                    $1622 = HEAP32[$82>>2]|0;
                    HEAP32[$14>>2] = $1622;
                    HEAP32[$82>>2] = $1621;
                    $1623 = HEAP32[$83>>2]|0;
                    $1624 = HEAP32[$84>>2]|0;
                    HEAP32[$83>>2] = $1624;
                    HEAP32[$84>>2] = $1623;
                    $1625 = HEAP32[$85>>2]|0;
                    $1626 = HEAP32[$86>>2]|0;
                    HEAP32[$85>>2] = $1626;
                    HEAP32[$86>>2] = $1625;
                    $1627 = HEAP32[$58>>2]|0;
                    $1628 = HEAP32[$59>>2]|0;
                    HEAP32[$58>>2] = $1628;
                    HEAP32[$59>>2] = $1627;
                    $1629 = HEAP32[$15>>2]|0;
                    $1630 = HEAP32[$87>>2]|0;
                    HEAP32[$15>>2] = $1630;
                    HEAP32[$87>>2] = $1629;
                    $1631 = HEAP32[$53>>2]|0;
                    HEAP32[$52>>2] = $1631;
                    HEAP32[$53>>2] = $1594;
                    $1632 = HEAP32[$16>>2]|0;
                    $1633 = HEAP32[$74>>2]|0;
                    HEAP32[$16>>2] = $1633;
                    HEAP32[$74>>2] = $1632;
                    HEAP32[$54>>2] = $1597;
                    HEAP32[$55>>2] = $1595;
                    $1634 = HEAP32[$17>>2]|0;
                    $1635 = HEAP32[$80>>2]|0;
                    HEAP32[$17>>2] = $1635;
                    HEAP32[$80>>2] = $1634;
                    $1636 = (_qr_finder_fmt_info_decode($15,$17,$16,$14,$4,$5,$6)|0);
                    $1637 = ($1636|0)<(0);
                    if ($1637) {
                     $$0146$i = 1;$$1$i = $$0268$i;
                     break L20;
                    }
                    HEAP32[$$sroa$0$0$$sroa_idx$i>>2] = $949;
                    HEAP32[$$sroa$7$0$$sroa_idx199$i>>2] = $954;
                    HEAP32[$$sroa$10$0$$sroa_idx203$i>>2] = $963;
                    HEAP32[$$sroa$15$0$$sroa_idx208$i>>2] = $964;
                    HEAP32[$$sroa$20$0$$sroa_idx213$i>>2] = $961;
                    HEAP32[$$sroa$25$0$$sroa_idx218$i>>2] = $962;
                    HEAP32[$$sroa$30$0$$sroa_idx223$i>>2] = $965;
                    HEAP32[$$sroa$31$0$$sroa_idx227$i>>2] = $966;
                    $1638 = HEAP32[$34>>2]|0;
                    $1639 = HEAP32[$36>>2]|0;
                    $1640 = HEAP32[$35>>2]|0;
                    $1641 = (_qr_code_decode($19,$0,$1638,$1639,$1640,$$1148$i,$1636,$4,$5,$6)|0);
                    $1642 = ($1641|0)<(0);
                    if ($1642) {
                     $$0146$i = 1;$$1$i = $$0268$i;
                     break L20;
                    }
                   }
                   $$0146$i = 0;$$1$i = $$1148$i;
                   break L20;
                  }
                 } while(0);
                 $$0146$i = 1;$$1$i = $$0268$i;
                }
               }
              }
             }
            }
           }
          } while(0);
          if (!($$0146$i)) {
           break;
          }
          $147 = ($$1145267$i>>>0)<($146>>>0);
          if ($147) {
           $$0268$i = $$1$i;$$1145267$i = $152;
          } else {
           label = 142;
           break L16;
          }
         }
         $1643 = ($$1$i|0)>(-1);
         if ($1643) {
          $1644 = HEAP32[$98>>2]|0;
          $1645 = HEAP32[$99>>2]|0;
          $1646 = ($1644|0)<($1645|0);
          $1647 = $1645 << 1;
          $1648 = $1647 | 1;
          if ($1646) {
           $$pre$i = HEAP32[$1>>2]|0;
           $1653 = $1644;$1655 = $$pre$i;
          } else {
           $1649 = ($1648*48)|0;
           HEAP32[$99>>2] = $1648;
           $1650 = HEAP32[$1>>2]|0;
           $1651 = (_realloc($1650,$1649)|0);
           HEAP32[$1>>2] = $1651;
           $$pre10$i = HEAP32[$98>>2]|0;
           $1653 = $$pre10$i;$1655 = $1651;
          }
          $1652 = (($1653) + 1)|0;
          HEAP32[$98>>2] = $1652;
          $1654 = (($1655) + (($1653*48)|0)|0);
          dest=$1654; src=$19; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
          $1656 = HEAP32[$1>>2]|0;
          $1657 = HEAP32[$98>>2]|0;
          $1658 = (($1657) + -1)|0;
          $1659 = (((($1656) + (($1658*48)|0)|0)) + 16|0);
          $1660 = HEAP32[$1659>>2]|0;
          $1661 = $1660 >> 2;
          HEAP32[$1659>>2] = $1661;
          $1662 = HEAP32[$98>>2]|0;
          $1663 = (($1662) + -1)|0;
          $1664 = (((($1656) + (($1663*48)|0)|0)) + 20|0);
          $1665 = HEAP32[$1664>>2]|0;
          $1666 = $1665 >> 2;
          HEAP32[$1664>>2] = $1666;
          $1667 = HEAP32[$98>>2]|0;
          $1668 = (($1667) + -1)|0;
          $1669 = (((($1656) + (($1668*48)|0)|0)) + 24|0);
          $1670 = HEAP32[$1669>>2]|0;
          $1671 = $1670 >> 2;
          HEAP32[$1669>>2] = $1671;
          $1672 = HEAP32[$98>>2]|0;
          $1673 = (($1672) + -1)|0;
          $1674 = (((($1656) + (($1673*48)|0)|0)) + 28|0);
          $1675 = HEAP32[$1674>>2]|0;
          $1676 = $1675 >> 2;
          HEAP32[$1674>>2] = $1676;
          $1677 = HEAP32[$98>>2]|0;
          $1678 = (($1677) + -1)|0;
          $1679 = (((($1656) + (($1678*48)|0)|0)) + 32|0);
          $1680 = HEAP32[$1679>>2]|0;
          $1681 = $1680 >> 2;
          HEAP32[$1679>>2] = $1681;
          $1682 = HEAP32[$98>>2]|0;
          $1683 = (($1682) + -1)|0;
          $1684 = (((($1656) + (($1683*48)|0)|0)) + 36|0);
          $1685 = HEAP32[$1684>>2]|0;
          $1686 = $1685 >> 2;
          HEAP32[$1684>>2] = $1686;
          $1687 = HEAP32[$98>>2]|0;
          $1688 = (($1687) + -1)|0;
          $1689 = (((($1656) + (($1688*48)|0)|0)) + 40|0);
          $1690 = HEAP32[$1689>>2]|0;
          $1691 = $1690 >> 2;
          HEAP32[$1689>>2] = $1691;
          $1692 = HEAP32[$98>>2]|0;
          $1693 = (($1692) + -1)|0;
          $1694 = (((($1656) + (($1693*48)|0)|0)) + 44|0);
          $1695 = HEAP32[$1694>>2]|0;
          $1696 = $1695 >> 2;
          HEAP32[$1694>>2] = $1696;
          HEAP8[$109>>0] = 1;
          HEAP8[$1697>>0] = 1;
          $1698 = (($20) + ($$2123187)|0);
          HEAP8[$1698>>0] = 1;
          $$val152 = HEAP32[$$sroa$0$0$$sroa_idx$i>>2]|0;
          $$idx153$val = HEAP32[$$sroa$7$0$$sroa_idx199$i>>2]|0;
          $$val154 = HEAP32[$$sroa$10$0$$sroa_idx203$i>>2]|0;
          $$idx155$val = HEAP32[$$sroa$15$0$$sroa_idx208$i>>2]|0;
          $1699 = (($$val154) - ($$val152))|0;
          $1700 = (($$idx155$val) - ($$idx153$val))|0;
          $$val148 = HEAP32[$$sroa$30$0$$sroa_idx223$i>>2]|0;
          $$idx149$val = HEAP32[$$sroa$31$0$$sroa_idx227$i>>2]|0;
          $1701 = (($$val148) - ($$val154))|0;
          $1702 = (($$idx149$val) - ($$idx155$val))|0;
          $$val142 = HEAP32[$$sroa$20$0$$sroa_idx213$i>>2]|0;
          $$idx143$val = HEAP32[$$sroa$25$0$$sroa_idx218$i>>2]|0;
          $1703 = (($$val142) - ($$val148))|0;
          $1704 = (($$idx143$val) - ($$idx149$val))|0;
          $1705 = (($$val152) - ($$val142))|0;
          $1706 = (($$idx153$val) - ($$idx143$val))|0;
          $$0117169 = 0;$$1114170 = 0;
          while(1) {
           $1707 = (($20) + ($$1114170)|0);
           $1708 = HEAP8[$1707>>0]|0;
           $1709 = ($1708<<24>>24)==(0);
           do {
            if ($1709) {
             $1710 = (($2) + ($$1114170<<4)|0);
             $$val156 = HEAP32[$1710>>2]|0;
             $$idx157 = (((($2) + ($$1114170<<4)|0)) + 4|0);
             $$idx157$val = HEAP32[$$idx157>>2]|0;
             $1711 = (($$idx157$val) - ($$idx153$val))|0;
             $1712 = Math_imul($1711, $1699)|0;
             $1713 = (($$val156) - ($$val152))|0;
             $1714 = Math_imul($1713, $1700)|0;
             $1715 = ($1712|0)<($1714|0);
             if ($1715) {
              $$1118 = $$0117169;
             } else {
              $1716 = (($$idx157$val) - ($$idx155$val))|0;
              $1717 = Math_imul($1701, $1716)|0;
              $1718 = (($$val156) - ($$val154))|0;
              $1719 = Math_imul($1702, $1718)|0;
              $1720 = ($1717|0)<($1719|0);
              if ($1720) {
               $$1118 = $$0117169;
              } else {
               $1721 = (($$idx157$val) - ($$idx149$val))|0;
               $1722 = Math_imul($1703, $1721)|0;
               $1723 = (($$val156) - ($$val148))|0;
               $1724 = Math_imul($1704, $1723)|0;
               $1725 = ($1722|0)<($1724|0);
               if ($1725) {
                $$1118 = $$0117169;
               } else {
                $1726 = (($$idx157$val) - ($$idx143$val))|0;
                $1727 = Math_imul($1726, $1705)|0;
                $1728 = (($$val156) - ($$val142))|0;
                $1729 = Math_imul($1706, $1728)|0;
                $1730 = ($1727|0)<($1729|0);
                if ($1730) {
                 $$1118 = $$0117169;
                 break;
                }
                $1731 = (($$0117169) + 1)|0;
                HEAP8[$1707>>0] = 2;
                $$1118 = $1731;
               }
              }
             }
            } else {
             $$1118 = $$0117169;
            }
           } while(0);
           $1732 = (($$1114170) + 1)|0;
           $exitcond = ($1732|0)==($3|0);
           if ($exitcond) {
            break;
           } else {
            $$0117169 = $$1118;$$1114170 = $1732;
           }
          }
          $1733 = ($$1118|0)>(2);
          if ($1733) {
           $1734 = $$1118 << 4;
           $1735 = (_malloc($1734)|0);
           $$2115172 = 0;$$2119171 = 0;
           while(1) {
            $1736 = (($20) + ($$2115172)|0);
            $1737 = HEAP8[$1736>>0]|0;
            $1738 = ($1737<<24>>24)==(2);
            if ($1738) {
             $1739 = (($2) + ($$2115172<<4)|0);
             $1740 = (($1735) + ($$2119171<<4)|0);
             $1741 = (($$2119171) + 1)|0;
             ;HEAP32[$1740>>2]=HEAP32[$1739>>2]|0;HEAP32[$1740+4>>2]=HEAP32[$1739+4>>2]|0;HEAP32[$1740+8>>2]=HEAP32[$1739+8>>2]|0;HEAP32[$1740+12>>2]=HEAP32[$1739+12>>2]|0;
             $$3120 = $1741;
            } else {
             $$3120 = $$2119171;
            }
            $1742 = (($$2115172) + 1)|0;
            $exitcond214 = ($1742|0)==($3|0);
            if ($exitcond214) {
             break;
            } else {
             $$2115172 = $1742;$$2119171 = $$3120;
            }
           }
           _qr_reader_match_centers($0,$1,$1735,$$3120,$4,$5,$6);
           _free($1735);
          }
          $$3116177 = 0;
          while(1) {
           $1743 = (($20) + ($$3116177)|0);
           $1744 = HEAP8[$1743>>0]|0;
           $1745 = ($1744<<24>>24)==(2);
           if ($1745) {
            HEAP8[$1743>>0] = 1;
           }
           $1746 = (($$3116177) + 1)|0;
           $exitcond215 = ($1746|0)==($3|0);
           if ($exitcond215) {
            $$1127 = $$0126184;$$2131 = $$1130181;$$3 = 0;$$3124 = $$2123187;
            break;
           } else {
            $$3116177 = $1746;
           }
          }
         } else {
          label = 165;
         }
        }
       } while(0);
       if ((label|0) == 142) {
        label = 0;
        label = 165;
       }
       if ((label|0) == 165) {
        label = 0;
        $1747 = (($$2190) + 1)|0;
        $1748 = ($$2190|0)<($24|0);
        $spec$select = $1748 ? $$1130181 : $3;
        $spec$select134 = $1748 ? $$0126184 : $3;
        $spec$select135 = $1748 ? $$2123187 : $3;
        $$1127 = $spec$select134;$$2131 = $spec$select;$$3 = $1747;$$3124 = $spec$select135;
       }
       $$2128 = $$1127;$$3132 = $$2131;$$4 = $$3;$$4125 = $$3124;
      } else {
       $$2128 = $$0126184;$$3132 = $$1130181;$$4 = $$2190;$$4125 = $$2123187;
      }
      $1749 = (($$2128) + 1)|0;
      $1750 = (($20) + ($$3132)|0);
      $1751 = HEAP8[$1750>>0]|0;
      $1752 = ($1751<<24>>24)==(0);
      $1753 = ($1749|0)<($3|0);
      $or$cond133 = $1753 & $1752;
      if ($or$cond133) {
       $$0126184 = $1749;$$1130181 = $$3132;$$2123187 = $$4125;$$2190 = $$4;$1697 = $1750;
      } else {
       $$1130$lcssa = $$3132;$$2$lcssa = $$4;$$2123$lcssa = $$4125;
       break;
      }
     }
    } else {
     $$1130$lcssa = $$0129201;$$2$lcssa = $$1200;$$2123$lcssa = $$1122199;
    }
    $$0129 = (($$1130$lcssa) + 1)|0;
    $1754 = (($20) + ($$2123$lcssa)|0);
    $1755 = HEAP8[$1754>>0]|0;
    $1756 = ($1755<<24>>24)==(0);
    $1757 = ($$0129|0)<($3|0);
    $or$cond = $1757 & $1756;
    if ($or$cond) {
     $$0129$in198 = $$1130$lcssa;$$0129201 = $$0129;$$1122199 = $$2123$lcssa;$$1200 = $$2$lcssa;
    } else {
     break;
    }
   }
   $$pre = (($$2123$lcssa) + 1)|0;
   $$1$lcssa = $$2$lcssa;$$pre$phiZ2D = $$pre;
  } else {
   $$1$lcssa = $$0207;$$pre$phiZ2D = $$0129196;
  }
  $1758 = ($$pre$phiZ2D|0)<($3|0);
  if ($1758) {
   $$0121206 = $$pre$phiZ2D;$$0207 = $$1$lcssa;
  } else {
   break;
  }
 }
 _free($20);
 STACKTOP = sp;return;
}
function _qr_finder_edge_pts_aff_classify($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$047 = 0, $$lcssa = 0, $$lobit = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $ispos = 0, $ispos44 = 0, $neg = 0, $neg45 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ((($0)) + 72|0);
 $4 = HEAP32[$3>>2]|0;
 $scevgep = ((($0)) + 32|0);
 ;HEAP32[$scevgep>>2]=0|0;HEAP32[$scevgep+4>>2]=0|0;HEAP32[$scevgep+8>>2]=0|0;HEAP32[$scevgep+12>>2]=0|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(0);
 if (!($7)) {
  $$phi$trans$insert = ((($4)) + 8|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $$lcssa = $6;$$pre$phiZ2D = $$phi$trans$insert;$66 = $$pre;
  _qsort($66,$$lcssa,16,1);
  $67 = HEAP32[$$pre$phiZ2D>>2]|0;
  $68 = ((($0)) + 16|0);
  HEAP32[$68>>2] = $67;
  $69 = $67;
  $70 = HEAP32[$scevgep>>2]|0;
  $71 = (($69) + ($70<<4)|0);
  $72 = ((($0)) + 20|0);
  HEAP32[$72>>2] = $71;
  $73 = ((($0)) + 36|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($71) + ($74<<4)|0);
  $76 = ((($0)) + 24|0);
  HEAP32[$76>>2] = $75;
  $77 = ((($0)) + 40|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (($75) + ($78<<4)|0);
  $80 = ((($0)) + 28|0);
  HEAP32[$80>>2] = $79;
  STACKTOP = sp;return;
 }
 $8 = ((($4)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($1)) + 16|0);
 $11 = ((($1)) + 32|0);
 $12 = ((($1)) + 20|0);
 $13 = ((($1)) + 36|0);
 $14 = ((($1)) + 44|0);
 $15 = ((($1)) + 24|0);
 $16 = ((($1)) + 28|0);
 $17 = ((($2)) + 4|0);
 $18 = ((($0)) + 64|0);
 $19 = ((($0)) + 68|0);
 $$047 = 0;
 while(1) {
  $20 = (($9) + ($$047<<4)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (((($9) + ($$047<<4)|0)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP32[$10>>2]|0;
  $25 = HEAP32[$11>>2]|0;
  $26 = (($21) - ($25))|0;
  $27 = Math_imul($26, $24)|0;
  $28 = HEAP32[$12>>2]|0;
  $29 = HEAP32[$13>>2]|0;
  $30 = (($23) - ($29))|0;
  $31 = Math_imul($30, $28)|0;
  $32 = (($31) + ($27))|0;
  $33 = HEAP32[$14>>2]|0;
  $34 = 1 << $33;
  $35 = $34 >> 1;
  $36 = (($32) + ($35))|0;
  $37 = $36 >> $33;
  $38 = HEAP32[$15>>2]|0;
  $39 = Math_imul($38, $26)|0;
  $40 = HEAP32[$16>>2]|0;
  $41 = Math_imul($40, $30)|0;
  $42 = (($39) + ($35))|0;
  $43 = (($42) + ($41))|0;
  $44 = $43 >> $33;
  $45 = HEAP32[$18>>2]|0;
  $46 = HEAP32[$19>>2]|0;
  $47 = (($37) - ($45))|0;
  HEAP32[$2>>2] = $47;
  $48 = (($44) - ($46))|0;
  HEAP32[$17>>2] = $48;
  $ispos = ($48|0)>(-1);
  $neg = (0 - ($48))|0;
  $49 = $ispos ? $48 : $neg;
  $ispos44 = ($47|0)>(-1);
  $neg45 = (0 - ($47))|0;
  $50 = $ispos44 ? $47 : $neg45;
  $51 = ($49|0)>($50|0);
  $52 = $51&1;
  $53 = $52 << 1;
  $54 = (($2) + ($52<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  $$lobit = $55 >>> 31;
  $56 = $53 | $$lobit;
  $57 = $56 ^ 1;
  $58 = (((($0)) + 32|0) + ($57<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + 1)|0;
  HEAP32[$58>>2] = $60;
  $61 = (((($9) + ($$047<<4)|0)) + 8|0);
  HEAP32[$61>>2] = $57;
  $62 = (((($9) + ($$047<<4)|0)) + 12|0);
  HEAP32[$62>>2] = $55;
  $63 = (($$047) + 1)|0;
  $64 = HEAP32[$5>>2]|0;
  $65 = ($63|0)<($64|0);
  if ($65) {
   $$047 = $63;
  } else {
   $$lcssa = $64;$$pre$phiZ2D = $8;$66 = $9;
   break;
  }
 }
 _qsort($66,$$lcssa,16,1);
 $67 = HEAP32[$$pre$phiZ2D>>2]|0;
 $68 = ((($0)) + 16|0);
 HEAP32[$68>>2] = $67;
 $69 = $67;
 $70 = HEAP32[$scevgep>>2]|0;
 $71 = (($69) + ($70<<4)|0);
 $72 = ((($0)) + 20|0);
 HEAP32[$72>>2] = $71;
 $73 = ((($0)) + 36|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (($71) + ($74<<4)|0);
 $76 = ((($0)) + 24|0);
 HEAP32[$76>>2] = $75;
 $77 = ((($0)) + 40|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = (($75) + ($78<<4)|0);
 $80 = ((($0)) + 28|0);
 HEAP32[$80>>2] = $79;
 STACKTOP = sp;return;
}
function _qr_finder_estimate_module_size_and_version($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$094 = 0, $$095$lcssa = 0, $$095$lcssa$1 = 0, $$095$lcssa$2 = 0, $$095$lcssa$3 = 0, $$09598 = 0, $$09598$1 = 0, $$09598$2 = 0, $$09598$3 = 0, $$099 = 0, $$099$1 = 0, $$099$2 = 0, $$099$3 = 0, $$off = 0, $$off97 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge$demorgan = 0, $brmerge109$demorgan = 0, $exitcond = 0, $exitcond$1 = 0, $exitcond$2 = 0, $exitcond$3 = 0, $ispos = 0, $neg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(0);
 if ($5) {
  $6 = ((($0)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $4 >>> 2;
  $9 = (($4) - ($8))|0;
  $10 = ($8|0)<($9|0);
  if ($10) {
   $$09598 = 0;$$099 = $8;
   while(1) {
    $11 = (((($7) + ($$099<<4)|0)) + 12|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (($12) + ($$09598))|0;
    $14 = (($$099) + 1)|0;
    $exitcond = ($14|0)==($9|0);
    if ($exitcond) {
     $$095$lcssa = $13;
     break;
    } else {
     $$09598 = $13;$$099 = $14;
    }
   }
  } else {
   $$095$lcssa = 0;
  }
  $15 = $8 << 1;
  $16 = (($4) - ($15))|0;
  $17 = $16 >> 1;
  $18 = $$095$lcssa >> 31;
  $19 = (($18) + ($17))|0;
  $20 = $19 ^ $18;
  $21 = (($20) + ($$095$lcssa))|0;
  $22 = (($21|0) / ($16|0))&-1;
  $114 = $22;$32 = $16;$35 = $$095$lcssa;
 } else {
  $114 = 0;$32 = 0;$35 = 0;
 }
 $23 = ((($0)) + 36|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)>(0);
 if ($25) {
  $96 = ((($0)) + 20|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = $24 >>> 2;
  $99 = (($24) - ($98))|0;
  $100 = ($98|0)<($99|0);
  if ($100) {
   $$09598$1 = 0;$$099$1 = $98;
   while(1) {
    $101 = (((($97) + ($$099$1<<4)|0)) + 12|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = (($102) + ($$09598$1))|0;
    $104 = (($$099$1) + 1)|0;
    $exitcond$1 = ($104|0)==($99|0);
    if ($exitcond$1) {
     $$095$lcssa$1 = $103;
     break;
    } else {
     $$09598$1 = $103;$$099$1 = $104;
    }
   }
  } else {
   $$095$lcssa$1 = 0;
  }
  $105 = $98 << 1;
  $106 = (($24) - ($105))|0;
  $107 = $106 >> 1;
  $108 = $$095$lcssa$1 >> 31;
  $109 = (($108) + ($107))|0;
  $110 = $109 ^ $108;
  $111 = (($110) + ($$095$lcssa$1))|0;
  $112 = (($111|0) / ($106|0))&-1;
  $113 = (($114) + ($112))|0;
  $27 = $113;$37 = $106;$40 = $$095$lcssa$1;
 } else {
  $27 = $114;$37 = 0;$40 = 0;
 }
 $115 = ((($0)) + 40|0);
 $116 = HEAP32[$115>>2]|0;
 $41 = ($116|0)>(0);
 if ($41) {
  $117 = ((($0)) + 24|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = $116 >>> 2;
  $120 = (($116) - ($119))|0;
  $121 = ($119|0)<($120|0);
  if ($121) {
   $$09598$2 = 0;$$099$2 = $119;
   while(1) {
    $122 = (((($118) + ($$099$2<<4)|0)) + 12|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = (($123) + ($$09598$2))|0;
    $125 = (($$099$2) + 1)|0;
    $exitcond$2 = ($125|0)==($120|0);
    if ($exitcond$2) {
     $$095$lcssa$2 = $124;
     break;
    } else {
     $$09598$2 = $124;$$099$2 = $125;
    }
   }
  } else {
   $$095$lcssa$2 = 0;
  }
  $126 = $119 << 1;
  $127 = (($116) - ($126))|0;
  $128 = $127 >> 1;
  $129 = $$095$lcssa$2 >> 31;
  $130 = (($129) + ($128))|0;
  $131 = $130 ^ $129;
  $132 = (($131) + ($$095$lcssa$2))|0;
  $133 = (($132|0) / ($127|0))&-1;
  $154 = $133;$49 = $127;$52 = $$095$lcssa$2;
 } else {
  $154 = 0;$49 = 0;$52 = 0;
 }
 $134 = ((($0)) + 44|0);
 $135 = HEAP32[$134>>2]|0;
 $42 = ($135|0)>(0);
 if ($42) {
  $136 = ((($0)) + 28|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $135 >>> 2;
  $139 = (($135) - ($138))|0;
  $140 = ($138|0)<($139|0);
  if ($140) {
   $$09598$3 = 0;$$099$3 = $138;
   while(1) {
    $141 = (((($137) + ($$099$3<<4)|0)) + 12|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = (($142) + ($$09598$3))|0;
    $144 = (($$099$3) + 1)|0;
    $exitcond$3 = ($144|0)==($139|0);
    if ($exitcond$3) {
     $$095$lcssa$3 = $143;
     break;
    } else {
     $$09598$3 = $143;$$099$3 = $144;
    }
   }
  } else {
   $$095$lcssa$3 = 0;
  }
  $145 = $138 << 1;
  $146 = (($135) - ($145))|0;
  $147 = $146 >> 1;
  $148 = $$095$lcssa$3 >> 31;
  $149 = (($148) + ($147))|0;
  $150 = $149 ^ $148;
  $151 = (($150) + ($$095$lcssa$3))|0;
  $152 = (($151|0) / ($146|0))&-1;
  $153 = (($154) + ($152))|0;
  $44 = $153;$54 = $146;$57 = $$095$lcssa$3;
 } else {
  $44 = $154;$54 = 0;$57 = 0;
 }
 $brmerge$demorgan = $5 & $25;
 if ($brmerge$demorgan) {
  $26 = $27 >> 1;
  $28 = ((($0)) + 64|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) - ($26))|0;
  HEAP32[$28>>2] = $30;
  $31 = Math_imul($32, $27)|0;
  $33 = $31 >> 1;
  $34 = (($35) - ($33))|0;
  $36 = Math_imul($37, $27)|0;
  $38 = $36 >> 1;
  $39 = (($40) - ($38))|0;
  $62 = $34;$63 = $39;
 } else {
  $62 = $35;$63 = $40;
 }
 $brmerge109$demorgan = $41 & $42;
 if ($brmerge109$demorgan) {
  $43 = $44 >> 1;
  $45 = ((($0)) + 68|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) - ($43))|0;
  HEAP32[$45>>2] = $47;
  $48 = Math_imul($49, $44)|0;
  $50 = $48 >> 1;
  $51 = (($52) - ($50))|0;
  $53 = Math_imul($54, $44)|0;
  $55 = $53 >> 1;
  $56 = (($57) - ($55))|0;
  $78 = $51;$79 = $56;
 } else {
  $78 = $52;$79 = $57;
 }
 $58 = (($37) + ($32))|0;
 $59 = ($58|0)<(1);
 if ($59) {
  $$094 = -1;
  return ($$094|0);
 }
 $60 = ($58*3)|0;
 $61 = (($63) - ($62))|0;
 $64 = $61 << 1;
 $65 = (($64) + ($60))|0;
 $66 = ($58*6)|0;
 $67 = (($65|0) / ($66|0))&-1;
 $68 = ($67|0)<(1);
 if ($68) {
  $$094 = -1;
  return ($$094|0);
 }
 $69 = $67 << 3;
 $70 = (($1) - ($69))|0;
 $71 = $67 << 2;
 $72 = (($70|0) / ($71|0))&-1;
 $$off = (($72) + -1)|0;
 $73 = ($$off>>>0)>(42);
 if ($73) {
  $$094 = -1;
  return ($$094|0);
 }
 $74 = (($54) + ($49))|0;
 $75 = ($74|0)<(1);
 if ($75) {
  $$094 = -1;
  return ($$094|0);
 }
 $76 = ($74*3)|0;
 $77 = (($79) - ($78))|0;
 $80 = $77 << 1;
 $81 = (($80) + ($76))|0;
 $82 = ($74*6)|0;
 $83 = (($81|0) / ($82|0))&-1;
 $84 = ($83|0)<(1);
 if ($84) {
  $$094 = -1;
  return ($$094|0);
 }
 $85 = $83 << 3;
 $86 = (($2) - ($85))|0;
 $87 = $83 << 2;
 $88 = (($86|0) / ($87|0))&-1;
 $$off97 = (($88) + -1)|0;
 $89 = ($$off97>>>0)>(42);
 if ($89) {
  $$094 = -1;
  return ($$094|0);
 }
 $90 = (($72) - ($88))|0;
 $ispos = ($90|0)>(-1);
 $neg = (0 - ($90))|0;
 $91 = $ispos ? $90 : $neg;
 $92 = ($91|0)>(3);
 if ($92) {
  $$094 = -1;
  return ($$094|0);
 }
 HEAP32[$0>>2] = $67;
 $93 = ((($0)) + 4|0);
 HEAP32[$93>>2] = $83;
 $94 = ((($0)) + 8|0);
 HEAP32[$94>>2] = $72;
 $95 = ((($0)) + 12|0);
 HEAP32[$95>>2] = $88;
 $$094 = 0;
 return ($$094|0);
}
function _qr_finder_ransac($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0105135 = 0, $$0106143 = 0, $$0108142 = 0, $$0112141 = 0, $$0114132 = 0, $$0116134 = 0, $$1113133 = 0, $$1115 = 0, $$1117 = 0, $$1137 = 0, $$2 = 0, $$2110 = 0, $$3 = 0, $$idx$val = 0, $$idx123$val = 0, $$idx125 = 0, $$idx125$val = 0, $$val = 0, $$val122 = 0, $$val124 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond144 = 0, $ispos = 0, $ispos118 = 0, $ispos120 = 0;
 var $neg = 0, $neg119 = 0, $neg121 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $4 = sp + 8|0;
 $5 = sp;
 $6 = (((($0)) + 16|0) + ($3<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (((($0)) + 32|0) + ($3<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)>(1);
 if (!($10)) {
  $$3 = 0;
  $138 = (((($0)) + 48|0) + ($3<<2)|0);
  HEAP32[$138>>2] = $$3;
  STACKTOP = sp;return;
 }
 $11 = (($9) + -1)|0;
 $12 = ((($1)) + 16|0);
 $13 = ((($1)) + 32|0);
 $14 = ((($1)) + 20|0);
 $15 = ((($1)) + 36|0);
 $16 = ((($1)) + 44|0);
 $17 = ((($1)) + 24|0);
 $18 = ((($1)) + 28|0);
 $19 = ((($4)) + 4|0);
 $20 = ((($5)) + 4|0);
 $21 = ((($0)) + 64|0);
 $22 = ((($0)) + 68|0);
 $23 = $3 >> 1;
 $24 = (($4) + ($23<<2)|0);
 $25 = (($5) + ($23<<2)|0);
 $26 = (1 - ($23))|0;
 $27 = (($4) + ($26<<2)|0);
 $28 = (($5) + ($26<<2)|0);
 $29 = $9 >>> 1;
 $30 = $9 << 1;
 $31 = ($9*67)|0;
 $32 = (($31) + -1)|0;
 $$0106143 = 0;$$0108142 = 17;$$0112141 = 0;
 while(1) {
  $33 = (_isaac_next_uint($2,$9)|0);
  $34 = (_isaac_next_uint($2,$11)|0);
  $35 = ($34|0)>=($33|0);
  $36 = $35&1;
  $spec$select = (($34) + ($36))|0;
  $37 = (($7) + ($33<<4)|0);
  $38 = (($7) + ($spec$select<<4)|0);
  $39 = HEAP32[$37>>2]|0;
  $40 = (((($7) + ($33<<4)|0)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = HEAP32[$12>>2]|0;
  $43 = HEAP32[$13>>2]|0;
  $44 = (($39) - ($43))|0;
  $45 = Math_imul($44, $42)|0;
  $46 = HEAP32[$14>>2]|0;
  $47 = HEAP32[$15>>2]|0;
  $48 = (($41) - ($47))|0;
  $49 = Math_imul($48, $46)|0;
  $50 = (($49) + ($45))|0;
  $51 = HEAP32[$16>>2]|0;
  $52 = 1 << $51;
  $53 = $52 >> 1;
  $54 = (($50) + ($53))|0;
  $55 = $54 >> $51;
  $56 = HEAP32[$17>>2]|0;
  $57 = Math_imul($56, $44)|0;
  $58 = HEAP32[$18>>2]|0;
  $59 = Math_imul($58, $48)|0;
  $60 = (($57) + ($53))|0;
  $61 = (($60) + ($59))|0;
  $62 = $61 >> $51;
  $63 = HEAP32[$38>>2]|0;
  $64 = (((($7) + ($spec$select<<4)|0)) + 4|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($63) - ($43))|0;
  $67 = Math_imul($66, $42)|0;
  $68 = (($65) - ($47))|0;
  $69 = Math_imul($68, $46)|0;
  $70 = (($67) + ($53))|0;
  $71 = (($70) + ($69))|0;
  $72 = $71 >> $51;
  $73 = Math_imul($66, $56)|0;
  $74 = Math_imul($68, $58)|0;
  $75 = (($73) + ($53))|0;
  $76 = (($75) + ($74))|0;
  $77 = $76 >> $51;
  $78 = HEAP32[$21>>2]|0;
  $79 = HEAP32[$22>>2]|0;
  $80 = (($55) - ($78))|0;
  HEAP32[$4>>2] = $80;
  $81 = (($62) - ($79))|0;
  HEAP32[$19>>2] = $81;
  $82 = (($72) - ($78))|0;
  HEAP32[$5>>2] = $82;
  $83 = (($77) - ($79))|0;
  HEAP32[$20>>2] = $83;
  $84 = HEAP32[$24>>2]|0;
  $85 = HEAP32[$25>>2]|0;
  $86 = (($84) - ($85))|0;
  $ispos = ($86|0)>(-1);
  $neg = (0 - ($86))|0;
  $87 = $ispos ? $86 : $neg;
  $88 = HEAP32[$27>>2]|0;
  $89 = HEAP32[$28>>2]|0;
  $90 = (($88) - ($89))|0;
  $ispos118 = ($90|0)>(-1);
  $neg119 = (0 - ($90))|0;
  $91 = $ispos118 ? $90 : $neg119;
  $92 = ($87|0)>($91|0);
  if ($92) {
   $$2 = $$0106143;$$2110 = $$0108142;
  } else {
   $93 = (($39) - ($63))|0;
   $94 = Math_imul($93, $93)|0;
   $95 = (($41) - ($65))|0;
   $96 = Math_imul($95, $95)|0;
   $97 = (($96) + ($94))|0;
   $98 = $97 << 5;
   $99 = (_qr_isqrt($98)|0);
   $$val = HEAP32[$37>>2]|0;
   $$idx$val = HEAP32[$40>>2]|0;
   $$val122 = HEAP32[$38>>2]|0;
   $$idx123$val = HEAP32[$64>>2]|0;
   $100 = (($$val122) - ($$val))|0;
   $101 = (($$idx123$val) - ($$idx$val))|0;
   $$0105135 = 0;$$0116134 = 0;
   while(1) {
    $102 = (($7) + ($$0105135<<4)|0);
    $$val124 = HEAP32[$102>>2]|0;
    $$idx125 = (((($7) + ($$0105135<<4)|0)) + 4|0);
    $$idx125$val = HEAP32[$$idx125>>2]|0;
    $103 = (($$idx125$val) - ($$idx$val))|0;
    $104 = Math_imul($103, $100)|0;
    $105 = (($$val124) - ($$val))|0;
    $106 = Math_imul($105, $101)|0;
    $107 = (($104) - ($106))|0;
    $ispos120 = ($107|0)>(-1);
    $neg121 = (0 - ($107))|0;
    $108 = $ispos120 ? $107 : $neg121;
    $109 = ($108|0)>($99|0);
    $110 = (((($7) + ($$0105135<<4)|0)) + 12|0);
    $111 = HEAP32[$110>>2]|0;
    if ($109) {
     $114 = $111 & -2;
     HEAP32[$110>>2] = $114;
     $$1117 = $$0116134;
    } else {
     $112 = $111 | 1;
     HEAP32[$110>>2] = $112;
     $113 = (($$0116134) + 1)|0;
     $$1117 = $113;
    }
    $115 = (($$0105135) + 1)|0;
    $exitcond = ($115|0)==($9|0);
    if ($exitcond) {
     break;
    } else {
     $$0105135 = $115;$$0116134 = $$1117;
    }
   }
   $116 = ($$1117|0)>($$0106143|0);
   if ($116) {
    $$1137 = 0;
    while(1) {
     $117 = (((($7) + ($$1137<<4)|0)) + 12|0);
     $118 = HEAP32[$117>>2]|0;
     $119 = $118 << 1;
     HEAP32[$117>>2] = $119;
     $120 = (($$1137) + 1)|0;
     $exitcond144 = ($120|0)==($9|0);
     if ($exitcond144) {
      break;
     } else {
      $$1137 = $120;
     }
    }
    $121 = ($$1117|0)>($29|0);
    if ($121) {
     $122 = Math_imul($$1117, -63)|0;
     $123 = (($32) + ($122))|0;
     $124 = (($123|0) / ($30|0))&-1;
     $$2 = $$1117;$$2110 = $124;
    } else {
     $$2 = $$1117;$$2110 = $$0108142;
    }
   } else {
    $$2 = $$0106143;$$2110 = $$0108142;
   }
  }
  $125 = (($$0112141) + 1)|0;
  $126 = ($125|0)<($$2110|0);
  if ($126) {
   $$0106143 = $$2;$$0108142 = $$2110;$$0112141 = $125;
  } else {
   break;
  }
 }
 $127 = ($$2|0)>(0);
 if (!($127)) {
  $$3 = $$2;
  $138 = (((($0)) + 48|0) + ($3<<2)|0);
  HEAP32[$138>>2] = $$3;
  STACKTOP = sp;return;
 }
 $$0114132 = 0;$$1113133 = 0;
 while(1) {
  $128 = (($7) + ($$1113133<<4)|0);
  $129 = (((($7) + ($$1113133<<4)|0)) + 12|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = $130 & 2;
  $132 = ($131|0)==(0);
  if ($132) {
   $$1115 = $$0114132;
  } else {
   $133 = ($$0114132|0)<($$1113133|0);
   if ($133) {
    ;HEAP32[$4>>2]=HEAP32[$128>>2]|0;HEAP32[$4+4>>2]=HEAP32[$128+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$128+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$128+12>>2]|0;
    $134 = (($7) + ($$0114132<<4)|0);
    ;HEAP32[$134>>2]=HEAP32[$128>>2]|0;HEAP32[$134+4>>2]=HEAP32[$128+4>>2]|0;HEAP32[$134+8>>2]=HEAP32[$128+8>>2]|0;HEAP32[$134+12>>2]=HEAP32[$128+12>>2]|0;
    ;HEAP32[$128>>2]=HEAP32[$4>>2]|0;HEAP32[$128+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$128+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$128+12>>2]=HEAP32[$4+12>>2]|0;
   }
   $135 = (($$0114132) + 1)|0;
   $$1115 = $135;
  }
  $136 = (($$1113133) + 1)|0;
  $137 = ($$1115|0)<($$2|0);
  if ($137) {
   $$0114132 = $$1115;$$1113133 = $136;
  } else {
   $$3 = $$2;
   break;
  }
 }
 $138 = (((($0)) + 48|0) + ($3<<2)|0);
 HEAP32[$138>>2] = $$3;
 STACKTOP = sp;return;
}
function _qr_line_fit_finder_pair($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$076 = 0, $$079 = 0, $$178 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx8$i = 0, $$idx8$val$i = 0, $$phi$trans$insert = 0, $$pre = 0, $$val$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond81 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $5 = sp;
 $6 = (((($2)) + 48|0) + ($4<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (((($3)) + 48|0) + ($4<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + -1)|0;
 $11 = ($7|0)<(1);
 $12 = $11 ? $10 : 0;
 $13 = (($7) - ($12))|0;
 $14 = (($9) + -1)|0;
 $15 = ($9|0)<(1);
 $16 = $15 ? $14 : 0;
 $17 = (($9) - ($16))|0;
 $18 = (($17) + ($13))|0;
 $19 = $18 << 3;
 $20 = (_malloc($19)|0);
 $21 = ($7|0)>(0);
 if ($21) {
  $22 = (((($2)) + 16|0) + ($4<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $$079 = 0;
  while(1) {
   $24 = (($23) + ($$079<<4)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($20) + ($$079<<3)|0);
   HEAP32[$26>>2] = $25;
   $27 = (((($23) + ($$079<<4)|0)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (((($20) + ($$079<<3)|0)) + 4|0);
   HEAP32[$29>>2] = $28;
   $30 = (($$079) + 1)|0;
   $exitcond81 = ($30|0)==($7|0);
   if ($exitcond81) {
    $$076 = $7;
    break;
   } else {
    $$079 = $30;
   }
  }
 } else {
  $31 = ((($2)) + 64|0);
  $32 = HEAP32[$31>>2]|0;
  HEAP32[$5>>2] = $32;
  $33 = ((($2)) + 68|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($5)) + 4|0);
  HEAP32[$35>>2] = $34;
  $36 = $4 >> 1;
  $37 = (($2) + ($36<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $4 << 1;
  $40 = $39 & 2;
  $41 = (($40) + -1)|0;
  $42 = Math_imul($38, $41)|0;
  $43 = (($5) + ($36<<2)|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + ($42))|0;
  HEAP32[$43>>2] = $45;
  $46 = HEAP32[$5>>2]|0;
  $47 = HEAP32[$35>>2]|0;
  $48 = HEAP32[$1>>2]|0;
  $49 = Math_imul($48, $46)|0;
  $50 = ((($1)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = Math_imul($51, $47)|0;
  $53 = (($52) + ($49))|0;
  $54 = ((($1)) + 40|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) + -1)|0;
  $57 = 1 << $56;
  $58 = (($53) + ($57))|0;
  $59 = $58 >> $55;
  $60 = ((($1)) + 32|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($59) + ($61))|0;
  HEAP32[$20>>2] = $62;
  $63 = ((($1)) + 8|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = Math_imul($64, $46)|0;
  $66 = ((($1)) + 12|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = Math_imul($67, $47)|0;
  $69 = (($65) + ($57))|0;
  $70 = (($69) + ($68))|0;
  $71 = $70 >> $55;
  $72 = ((($1)) + 36|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($71) + ($73))|0;
  $75 = ((($20)) + 4|0);
  HEAP32[$75>>2] = $74;
  $76 = (($7) + 1)|0;
  $$076 = $76;
 }
 $77 = ($9|0)>(0);
 if ($77) {
  $78 = (((($3)) + 16|0) + ($4<<2)|0);
  $79 = HEAP32[$78>>2]|0;
  $$178 = 0;
  while(1) {
   $80 = (($79) + ($$178<<4)|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (($$178) + ($$076))|0;
   $83 = (($20) + ($82<<3)|0);
   HEAP32[$83>>2] = $81;
   $84 = (((($79) + ($$178<<4)|0)) + 4|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = (((($20) + ($82<<3)|0)) + 4|0);
   HEAP32[$86>>2] = $85;
   $87 = (($$178) + 1)|0;
   $exitcond = ($87|0)==($9|0);
   if ($exitcond) {
    break;
   } else {
    $$178 = $87;
   }
  }
  $$phi$trans$insert = ((($1)) + 40|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $134 = $$pre;
 } else {
  $88 = ((($3)) + 64|0);
  $89 = HEAP32[$88>>2]|0;
  HEAP32[$5>>2] = $89;
  $90 = ((($3)) + 68|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = ((($5)) + 4|0);
  HEAP32[$92>>2] = $91;
  $93 = $4 >> 1;
  $94 = (($3) + ($93<<2)|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $4 << 1;
  $97 = $96 & 2;
  $98 = (($97) + -1)|0;
  $99 = Math_imul($95, $98)|0;
  $100 = (($5) + ($93<<2)|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($101) + ($99))|0;
  HEAP32[$100>>2] = $102;
  $103 = (($20) + ($$076<<3)|0);
  $104 = HEAP32[$5>>2]|0;
  $105 = HEAP32[$92>>2]|0;
  $106 = HEAP32[$1>>2]|0;
  $107 = Math_imul($106, $104)|0;
  $108 = ((($1)) + 4|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = Math_imul($109, $105)|0;
  $111 = (($110) + ($107))|0;
  $112 = ((($1)) + 40|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (($113) + -1)|0;
  $115 = 1 << $114;
  $116 = (($111) + ($115))|0;
  $117 = $116 >> $113;
  $118 = ((($1)) + 32|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = (($117) + ($119))|0;
  HEAP32[$103>>2] = $120;
  $121 = ((($1)) + 8|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = Math_imul($122, $104)|0;
  $124 = ((($1)) + 12|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = Math_imul($125, $105)|0;
  $127 = (($123) + ($115))|0;
  $128 = (($127) + ($126))|0;
  $129 = $128 >> $113;
  $130 = ((($1)) + 36|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = (($129) + ($131))|0;
  $133 = (((($20) + ($$076<<3)|0)) + 4|0);
  HEAP32[$133>>2] = $132;
  $134 = $113;
 }
 _qr_line_fit_points($0,$20,$18,$134);
 $135 = ((($2)) + 72|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = HEAP32[$136>>2]|0;
 $138 = ((($136)) + 4|0);
 $139 = HEAP32[$138>>2]|0;
 $$val$i = HEAP32[$0>>2]|0;
 $$idx$i = ((($0)) + 4|0);
 $$idx$val$i = HEAP32[$$idx$i>>2]|0;
 $$idx8$i = ((($0)) + 8|0);
 $$idx8$val$i = HEAP32[$$idx8$i>>2]|0;
 $140 = Math_imul($$val$i, $137)|0;
 $141 = Math_imul($$idx$val$i, $139)|0;
 $142 = (($$idx8$val$i) + ($140))|0;
 $143 = (($142) + ($141))|0;
 $144 = ($143|0)<(0);
 if (!($144)) {
  _free($20);
  STACKTOP = sp;return;
 }
 $145 = (0 - ($$idx8$val$i))|0;
 $146 = (0 - ($$idx$val$i))|0;
 $147 = (0 - ($$val$i))|0;
 HEAP32[$0>>2] = $147;
 HEAP32[$$idx$i>>2] = $146;
 HEAP32[$$idx8$i>>2] = $145;
 _free($20);
 STACKTOP = sp;return;
}
function _qr_line_fit_points($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0205$lcssa = 0, $$0205227 = 0, $$0206$lcssa = 0, $$0206226 = 0, $$0207$lcssa = 0, $$0207218 = 0, $$0208$lcssa = 0, $$0208217 = 0, $$0209$lcssa = 0, $$0209216 = 0, $$0210$lcssa = 0, $$0210225 = 0, $$0211$lcssa = 0, $$0211224 = 0, $$0212$lcssa = 0, $$0212223 = 0, $$0213$lcssa = 0, $$0213222 = 0, $$0228 = 0, $$1219 = 0;
 var $$neg$i = 0, $$pn$i = 0, $$sink$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond246 = 0, $ispos$i = 0, $ispos51$i = 0, $neg$i = 0;
 var $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($2|0)>(0);
 if ($4) {
  $$0205227 = 0;$$0206226 = 0;$$0210225 = 2147483647;$$0211224 = -2147483648;$$0212223 = 2147483647;$$0213222 = -2147483648;$$0228 = 0;
  while(1) {
   $5 = (($1) + ($$0228<<3)|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = (($6) + ($$0205227))|0;
   $8 = ($6|0)<($$0210225|0);
   $9 = $8 ? $6 : $$0210225;
   $10 = (($$0211224) - ($6))|0;
   $11 = ($$0211224|0)<($6|0);
   $12 = $11 ? $10 : 0;
   $13 = (($$0211224) - ($12))|0;
   $14 = (((($1) + ($$0228<<3)|0)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (($15) + ($$0206226))|0;
   $17 = ($15|0)<($$0212223|0);
   $18 = $17 ? $15 : $$0212223;
   $19 = (($$0213222) - ($15))|0;
   $20 = ($$0213222|0)<($15|0);
   $21 = $20 ? $19 : 0;
   $22 = (($$0213222) - ($21))|0;
   $23 = (($$0228) + 1)|0;
   $exitcond246 = ($23|0)==($2|0);
   if ($exitcond246) {
    $$0205$lcssa = $7;$$0206$lcssa = $16;$$0210$lcssa = $9;$$0211$lcssa = $13;$$0212$lcssa = $18;$$0213$lcssa = $22;
    break;
   } else {
    $$0205227 = $7;$$0206226 = $16;$$0210225 = $9;$$0211224 = $13;$$0212223 = $18;$$0213222 = $22;$$0228 = $23;
   }
  }
 } else {
  $$0205$lcssa = 0;$$0206$lcssa = 0;$$0210$lcssa = 2147483647;$$0211$lcssa = -2147483648;$$0212$lcssa = 2147483647;$$0213$lcssa = -2147483648;
 }
 $24 = $2 >> 1;
 $25 = (($$0205$lcssa) + ($24))|0;
 $26 = (($25|0) / ($2|0))&-1;
 $27 = (($$0206$lcssa) + ($24))|0;
 $28 = (($27|0) / ($2|0))&-1;
 $29 = (($$0211$lcssa) - ($26))|0;
 $30 = (($26) - ($$0210$lcssa))|0;
 $31 = (($29) - ($30))|0;
 $32 = ($29|0)<($30|0);
 $33 = $32 ? $31 : 0;
 $34 = (($29) - ($33))|0;
 $35 = (($$0213$lcssa) - ($28))|0;
 $36 = (($28) - ($$0212$lcssa))|0;
 $37 = (($35) - ($36))|0;
 $38 = ($35|0)<($36|0);
 $39 = $38 ? $37 : 0;
 $40 = (($35) - ($39))|0;
 $41 = (($34) - ($40))|0;
 $42 = ($34|0)<($40|0);
 $43 = $42 ? $41 : 0;
 $44 = (($34) - ($43))|0;
 $45 = Math_imul($44, $2)|0;
 $46 = (_qr_ilog($45)|0);
 $47 = (_qr_ilog($45)|0);
 $48 = ($47|0)>(15);
 $49 = (($46) + -15)|0;
 $50 = $48 ? $49 : 0;
 $51 = 1 << $50;
 $52 = $51 >> 1;
 if ($4) {
  $53 = (($52) - ($26))|0;
  $54 = (($52) - ($28))|0;
  $$0207218 = 0;$$0208217 = 0;$$0209216 = 0;$$1219 = 0;
  while(1) {
   $55 = (($1) + ($$1219<<3)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($53) + ($56))|0;
   $58 = $57 >> $50;
   $59 = (((($1) + ($$1219<<3)|0)) + 4|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($54) + ($60))|0;
   $62 = $61 >> $50;
   $63 = Math_imul($58, $58)|0;
   $64 = (($63) + ($$0209216))|0;
   $65 = Math_imul($62, $58)|0;
   $66 = (($65) + ($$0208217))|0;
   $67 = Math_imul($62, $62)|0;
   $68 = (($67) + ($$0207218))|0;
   $69 = (($$1219) + 1)|0;
   $exitcond = ($69|0)==($2|0);
   if ($exitcond) {
    break;
   } else {
    $$0207218 = $68;$$0208217 = $66;$$0209216 = $64;$$1219 = $69;
   }
  }
  $phitmp = $66 << 1;
  $$0207$lcssa = $68;$$0208$lcssa = $phitmp;$$0209$lcssa = $64;
 } else {
  $$0207$lcssa = 0;$$0208$lcssa = 0;$$0209$lcssa = 0;
 }
 $70 = (($$0209$lcssa) - ($$0207$lcssa))|0;
 $ispos$i = ($70|0)>(-1);
 $neg$i = (0 - ($70))|0;
 $71 = $ispos$i ? $70 : $neg$i;
 $72 = (0 - ($$0208$lcssa))|0;
 $73 = (_qr_ihypot($71,$72)|0);
 $74 = (_qr_ilog($71)|0);
 $75 = (_qr_ilog($71)|0);
 $ispos51$i = ($72|0)>(-1);
 $76 = $ispos51$i ? $72 : $$0208$lcssa;
 $77 = (_qr_ilog($76)|0);
 $78 = (_qr_ilog($76)|0);
 $79 = (_qr_ilog($71)|0);
 $80 = ($78|0)>($79|0);
 $81 = (($77) - ($75))|0;
 $$neg$i = $80 ? $81 : 0;
 $82 = (($3) + 1)|0;
 $83 = $82 >> 1;
 $84 = (_qr_ilog($71)|0);
 $85 = (_qr_ilog($71)|0);
 $86 = (_qr_ilog($76)|0);
 $87 = (($85) - ($86))|0;
 $88 = (_qr_ilog($76)|0);
 $89 = (_qr_ilog($71)|0);
 $90 = ($88|0)>($89|0);
 $91 = $90 ? $87 : 0;
 $92 = (($84) - ($91))|0;
 $93 = ($92|0)<($83|0);
 $94 = (1 - ($83))|0;
 $95 = (($94) + ($74))|0;
 $96 = (($95) + ($$neg$i))|0;
 $97 = $93 ? 0 : $96;
 $98 = 1 << $97;
 $99 = $98 >> 1;
 $100 = ($$0209$lcssa>>>0)>($$0207$lcssa>>>0);
 if ($100) {
  $101 = (($99) - ($$0208$lcssa))|0;
  $102 = $101 >> $97;
  HEAP32[$0>>2] = $102;
  $103 = (($73) + ($71))|0;
  $104 = (($103) + ($99))|0;
  $$pn$i = $104;$111 = $102;
  $$sink$i = $$pn$i >> $97;
  $109 = ((($0)) + 4|0);
  HEAP32[$109>>2] = $$sink$i;
  $110 = Math_imul($111, $26)|0;
  $112 = Math_imul($$sink$i, $28)|0;
  $113 = (($110) + ($112))|0;
  $114 = (0 - ($113))|0;
  $115 = ((($0)) + 8|0);
  HEAP32[$115>>2] = $114;
  return;
 } else {
  $105 = (($73) + ($71))|0;
  $106 = (($105) + ($99))|0;
  $107 = $106 >> $97;
  HEAP32[$0>>2] = $107;
  $108 = (($99) - ($$0208$lcssa))|0;
  $$pn$i = $108;$111 = $107;
  $$sink$i = $$pn$i >> $97;
  $109 = ((($0)) + 4|0);
  HEAP32[$109>>2] = $$sink$i;
  $110 = Math_imul($111, $26)|0;
  $112 = Math_imul($$sink$i, $28)|0;
  $113 = (($110) + ($112))|0;
  $114 = (0 - ($113))|0;
  $115 = ((($0)) + 8|0);
  HEAP32[$115>>2] = $114;
  return;
 }
}
function _qr_aff_line_step($0,$$val,$$1$val,$1,$2,$3) {
 $0 = $0|0;
 $$val = $$val|0;
 $$1$val = $$1$val|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$048 = 0, $$049 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ispos = 0, $ispos50 = 0, $ispos52 = 0, $neg = 0, $neg51 = 0, $neg53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (($0) + ($1<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = Math_imul($5, $$val)|0;
 $7 = (((($0)) + 8|0) + ($1<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = Math_imul($8, $$1$val)|0;
 $10 = (($9) + ($6))|0;
 $11 = (1 - ($1))|0;
 $12 = (($0) + ($11<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = Math_imul($13, $$val)|0;
 $15 = (((($0)) + 8|0) + ($11<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = Math_imul($16, $$1$val)|0;
 $18 = (($17) + ($14))|0;
 $19 = ($18|0)<(0);
 $20 = (0 - ($10))|0;
 $21 = (0 - ($18))|0;
 $$048 = $19 ? $20 : $10;
 $$0 = $19 ? $21 : $18;
 $22 = (_qr_ilog($2)|0);
 $ispos = ($$048|0)>(-1);
 $neg = (0 - ($$048))|0;
 $23 = $ispos ? $$048 : $neg;
 $24 = (_qr_ilog($23)|0);
 $25 = (_qr_ilog($2)|0);
 $26 = (_qr_ilog($23)|0);
 $27 = (($26) + ($25))|0;
 $28 = ($27|0)>(29);
 $29 = (($22) + -29)|0;
 $30 = (($29) + ($24))|0;
 $31 = $28 ? $30 : 0;
 $32 = 1 << $31;
 $33 = $32 >> 1;
 $34 = (($33) + ($$048))|0;
 $35 = $34 >> $31;
 $36 = (($33) + ($$0))|0;
 $37 = $36 >> $31;
 $ispos50 = ($35|0)>(-1);
 $neg51 = (0 - ($35))|0;
 $38 = $ispos50 ? $35 : $neg51;
 $39 = ($38|0)<($37|0);
 if (!($39)) {
  $$049 = -1;
  return ($$049|0);
 }
 $40 = (0 - ($2))|0;
 $41 = Math_imul($35, $40)|0;
 $42 = $37 >> 1;
 $43 = $41 >> 31;
 $44 = (($43) + ($42))|0;
 $45 = $44 ^ $43;
 $46 = (($45) + ($41))|0;
 $47 = (($46|0) / ($37|0))&-1;
 $ispos52 = ($47|0)>(-1);
 $neg53 = (0 - ($47))|0;
 $48 = $ispos52 ? $47 : $neg53;
 $49 = ($48|0)<($2|0);
 if (!($49)) {
  $$049 = -1;
  return ($$049|0);
 }
 HEAP32[$3>>2] = $47;
 $$049 = 0;
 return ($$049|0);
}
function _qr_finder_locate_crossing($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0 = 0, $$05012 = 0, $$1 = 0, $$210 = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $ispos = 0, $ispos1 = 0, $neg = 0, $neg2 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $8 = sp + 24|0;
 $9 = sp + 16|0;
 $10 = sp + 8|0;
 $11 = sp;
 HEAP32[$8>>2] = $2;
 $12 = ((($8)) + 4|0);
 HEAP32[$12>>2] = $3;
 HEAP32[$9>>2] = $4;
 $13 = ((($9)) + 4|0);
 HEAP32[$13>>2] = $5;
 $14 = (($4) - ($2))|0;
 $ispos = ($14|0)>(-1);
 $neg = (0 - ($14))|0;
 $15 = $ispos ? $14 : $neg;
 HEAP32[$10>>2] = $15;
 $16 = (($5) - ($3))|0;
 $ispos1 = ($16|0)>(-1);
 $neg2 = (0 - ($16))|0;
 $17 = $ispos1 ? $16 : $neg2;
 $18 = ((($10)) + 4|0);
 HEAP32[$18>>2] = $17;
 $19 = ($17|0)>($15|0);
 $20 = $19&1;
 $not$ = $19 ^ 1;
 $21 = $not$&1;
 $22 = (($10) + ($21<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($4|0)>($2|0);
 $25 = $24&1;
 $26 = $25 << 1;
 $27 = (($26) + -1)|0;
 HEAP32[$11>>2] = $27;
 $28 = ($5|0)>($3|0);
 $29 = $28&1;
 $30 = $29 << 1;
 $31 = (($30) + -1)|0;
 $32 = ((($11)) + 4|0);
 HEAP32[$32>>2] = $31;
 $33 = (($8) + ($20<<2)|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($9) + ($20<<2)|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($34|0)==($36|0);
 if ($37) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $38 = (($11) + ($20<<2)|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($10) + ($20<<2)|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($8) + ($21<<2)|0);
 $43 = (($11) + ($21<<2)|0);
 $$05012 = 0;$45 = $34;
 while(1) {
  $44 = (($39) + ($45))|0;
  HEAP32[$33>>2] = $44;
  $46 = (($$05012) + ($23))|0;
  $47 = $46 << 1;
  $48 = ($47|0)>($41|0);
  if ($48) {
   $49 = (($46) - ($41))|0;
   $50 = HEAP32[$43>>2]|0;
   $51 = HEAP32[$42>>2]|0;
   $52 = (($51) + ($50))|0;
   HEAP32[$42>>2] = $52;
   $$1 = $49;
  } else {
   $$1 = $46;
  }
  $53 = HEAP32[$12>>2]|0;
  $54 = Math_imul($53, $1)|0;
  $55 = HEAP32[$8>>2]|0;
  $56 = (($54) + ($55))|0;
  $57 = (($0) + ($56)|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = ($58<<24>>24)==(0);
  $60 = $59&1;
  $61 = ($60|0)==($6|0);
  $62 = HEAP32[$33>>2]|0;
  $63 = ($62|0)==($36|0);
  if (!($61)) {
   break;
  }
  if ($63) {
   $$0 = -1;
   label = 14;
   break;
  } else {
   $$05012 = $$1;$45 = $62;
  }
 }
 if ((label|0) == 14) {
  STACKTOP = sp;return ($$0|0);
 }
 L13: do {
  if ($63) {
   $86 = $4;$91 = $5;
  } else {
   $64 = (($9) + ($21<<2)|0);
   $$210 = 0;$68 = $36;
   while(1) {
    $67 = (($68) - ($39))|0;
    HEAP32[$35>>2] = $67;
    $69 = (($$210) + ($23))|0;
    $70 = $69 << 1;
    $71 = ($70|0)>($41|0);
    if ($71) {
     $72 = (($69) - ($41))|0;
     $73 = HEAP32[$43>>2]|0;
     $74 = HEAP32[$64>>2]|0;
     $75 = (($74) - ($73))|0;
     HEAP32[$64>>2] = $75;
     $$3 = $72;
    } else {
     $$3 = $69;
    }
    $76 = HEAP32[$13>>2]|0;
    $77 = Math_imul($76, $1)|0;
    $78 = HEAP32[$9>>2]|0;
    $79 = (($77) + ($78))|0;
    $80 = (($0) + ($79)|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = ($81<<24>>24)==(0);
    $83 = $82&1;
    $84 = ($83|0)==($6|0);
    if (!($84)) {
     $86 = $78;$91 = $76;
     break L13;
    }
    $65 = HEAP32[$35>>2]|0;
    $66 = ($62|0)==($65|0);
    if ($66) {
     $86 = $78;$91 = $76;
     break;
    } else {
     $$210 = $$3;$68 = $65;
    }
   }
  }
 } while(0);
 $85 = (($86) + ($55))|0;
 $87 = $85 << 2;
 $88 = (($87) + 4)|0;
 $89 = $88 >> 1;
 HEAP32[$7>>2] = $89;
 $90 = (($91) + ($53))|0;
 $92 = $90 << 2;
 $93 = (($92) + 4)|0;
 $94 = $93 >> 1;
 $95 = ((($7)) + 4|0);
 HEAP32[$95>>2] = $94;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _qr_hom_cell_init($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 $15 = $15|0;
 $16 = $16|0;
 var $$0490 = 0, $$0491 = 0, $$0492 = 0, $$0493 = 0, $$0494 = 0, $$0495 = 0, $$neg537 = 0, $$neg540 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ispos = 0, $ispos496 = 0, $ispos498 = 0, $ispos500 = 0, $ispos502 = 0, $ispos504 = 0, $ispos506 = 0, $ispos508 = 0, $ispos510 = 0, $ispos512 = 0, $ispos514 = 0, $ispos516 = 0;
 var $ispos518 = 0, $ispos520 = 0, $ispos522 = 0, $neg = 0, $neg497 = 0, $neg499 = 0, $neg501 = 0, $neg503 = 0, $neg505 = 0, $neg507 = 0, $neg509 = 0, $neg511 = 0, $neg513 = 0, $neg515 = 0, $neg517 = 0, $neg519 = 0, $neg521 = 0, $neg523 = 0, $reass$add = 0, $reass$add558 = 0;
 var $reass$add562 = 0, $reass$add564 = 0, $reass$add566 = 0, $reass$add568 = 0, $reass$mul550 = 0, $reass$mul554 = 0, $reass$mul563 = 0, $reass$mul569 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $17 = (($3) - ($1))|0;
 $18 = (($5) - ($1))|0;
 $19 = (($7) - ($1))|0;
 $20 = (($7) - ($3))|0;
 $21 = (($7) - ($5))|0;
 $22 = (($4) - ($2))|0;
 $23 = (($6) - ($2))|0;
 $24 = (($8) - ($2))|0;
 $25 = (($8) - ($4))|0;
 $26 = (($8) - ($6))|0;
 $27 = Math_imul($21, $22)|0;
 $28 = Math_imul($26, $17)|0;
 $29 = (($27) - ($28))|0;
 $30 = Math_imul($25, $18)|0;
 $31 = Math_imul($20, $23)|0;
 $32 = (($30) - ($31))|0;
 $33 = $29 | $32;
 $34 = ($33|0)==(0);
 $35 = Math_imul($25, $21)|0;
 $36 = Math_imul($26, $20)|0;
 $37 = (($35) - ($36))|0;
 $spec$select = $34 ? 1 : $37;
 $38 = (($spec$select) + ($29))|0;
 $39 = Math_imul($38, $17)|0;
 $40 = (($spec$select) + ($32))|0;
 $41 = Math_imul($40, $18)|0;
 $42 = Math_imul($38, $22)|0;
 $43 = Math_imul($40, $23)|0;
 $44 = Math_imul($43, $spec$select)|0;
 $45 = (0 - ($spec$select))|0;
 $46 = Math_imul($41, $45)|0;
 $47 = Math_imul($42, $45)|0;
 $48 = Math_imul($39, $spec$select)|0;
 $49 = Math_imul($42, $32)|0;
 $50 = Math_imul($43, $29)|0;
 $51 = (($49) - ($50))|0;
 $52 = Math_imul($41, $29)|0;
 $53 = Math_imul($39, $32)|0;
 $54 = (($52) - ($53))|0;
 $55 = Math_imul($39, $43)|0;
 $56 = Math_imul($41, $42)|0;
 $57 = (($55) - ($56))|0;
 $58 = ($44|0)==(0);
 if ($58) {
  $$0490 = 0;
 } else {
  $ispos522 = ($44|0)>(-1);
  $neg523 = (0 - ($44))|0;
  $59 = $ispos522 ? $44 : $neg523;
  $60 = $59 >> 1;
  $61 = $57 >> 31;
  $62 = (($60) + ($61))|0;
  $63 = $62 ^ $61;
  $64 = (($63) + ($57))|0;
  $65 = (($64|0) / ($59|0))&-1;
  $66 = $44 >> 31;
  $67 = (($65) + ($66))|0;
  $68 = $67 ^ $66;
  $$0490 = $68;
 }
 $69 = ($46|0)==(0);
 if ($69) {
  $$0491 = 0;
 } else {
  $ispos520 = ($46|0)>(-1);
  $neg521 = (0 - ($46))|0;
  $70 = $ispos520 ? $46 : $neg521;
  $71 = $70 >> 1;
  $72 = $57 >> 31;
  $73 = (($71) + ($72))|0;
  $74 = $73 ^ $72;
  $75 = (($74) + ($57))|0;
  $76 = (($75|0) / ($70|0))&-1;
  $77 = $46 >> 31;
  $78 = (($76) + ($77))|0;
  $79 = $78 ^ $77;
  $$0491 = $79;
 }
 $80 = ($47|0)==(0);
 if ($80) {
  $$0495 = 0;
 } else {
  $ispos518 = ($47|0)>(-1);
  $neg519 = (0 - ($47))|0;
  $81 = $ispos518 ? $47 : $neg519;
  $82 = $81 >> 1;
  $83 = $57 >> 31;
  $84 = (($82) + ($83))|0;
  $85 = $84 ^ $83;
  $86 = (($85) + ($57))|0;
  $87 = (($86|0) / ($81|0))&-1;
  $88 = $47 >> 31;
  $89 = (($87) + ($88))|0;
  $90 = $89 ^ $88;
  $$0495 = $90;
 }
 $91 = ($48|0)==(0);
 if ($91) {
  $$0494 = 0;
 } else {
  $ispos516 = ($48|0)>(-1);
  $neg517 = (0 - ($48))|0;
  $92 = $ispos516 ? $48 : $neg517;
  $93 = $92 >> 1;
  $94 = $57 >> 31;
  $95 = (($93) + ($94))|0;
  $96 = $95 ^ $94;
  $97 = (($96) + ($57))|0;
  $98 = (($97|0) / ($92|0))&-1;
  $99 = $48 >> 31;
  $100 = (($98) + ($99))|0;
  $101 = $100 ^ $99;
  $$0494 = $101;
 }
 $102 = ($51|0)==(0);
 if ($102) {
  $$0493 = 0;
 } else {
  $ispos514 = ($51|0)>(-1);
  $neg515 = (0 - ($51))|0;
  $103 = $ispos514 ? $51 : $neg515;
  $104 = $103 >> 1;
  $105 = $57 >> 31;
  $106 = (($104) + ($105))|0;
  $107 = $106 ^ $105;
  $108 = (($107) + ($57))|0;
  $109 = (($108|0) / ($103|0))&-1;
  $110 = $51 >> 31;
  $111 = (($109) + ($110))|0;
  $112 = $111 ^ $110;
  $$0493 = $112;
 }
 $113 = ($54|0)==(0);
 if ($113) {
  $$0492 = 0;
 } else {
  $ispos512 = ($54|0)>(-1);
  $neg513 = (0 - ($54))|0;
  $114 = $ispos512 ? $54 : $neg513;
  $115 = $114 >> 1;
  $116 = $57 >> 31;
  $117 = (($115) + ($116))|0;
  $118 = $117 ^ $116;
  $119 = (($118) + ($57))|0;
  $120 = (($119|0) / ($114|0))&-1;
  $121 = $54 >> 31;
  $122 = (($120) + ($121))|0;
  $123 = $122 ^ $121;
  $$0492 = $123;
 }
 $124 = (($11) - ($9))|0;
 $125 = (($13) - ($9))|0;
 $126 = (($15) - ($9))|0;
 $127 = (($15) - ($11))|0;
 $128 = (($15) - ($13))|0;
 $129 = (($12) - ($10))|0;
 $130 = (($14) - ($10))|0;
 $131 = (($16) - ($10))|0;
 $132 = (($16) - ($12))|0;
 $133 = (($16) - ($14))|0;
 $134 = Math_imul($128, $129)|0;
 $135 = Math_imul($133, $124)|0;
 $136 = (($134) - ($135))|0;
 $137 = Math_imul($132, $125)|0;
 $138 = Math_imul($127, $130)|0;
 $139 = (($137) - ($138))|0;
 $140 = Math_imul($132, $128)|0;
 $141 = Math_imul($133, $127)|0;
 $142 = (($140) - ($141))|0;
 $ispos = ($124|0)>(-1);
 $neg = (0 - ($124))|0;
 $143 = $ispos ? $124 : $neg;
 $ispos496 = ($129|0)>(-1);
 $neg497 = (0 - ($129))|0;
 $144 = $ispos496 ? $129 : $neg497;
 $145 = (($143) - ($144))|0;
 $146 = ($143|0)<($144|0);
 $147 = $146 ? $145 : 0;
 $148 = (($143) - ($147))|0;
 $149 = (_qr_ilog($148)|0);
 $150 = (($136) + ($142))|0;
 $ispos498 = ($150|0)>(-1);
 $neg499 = (0 - ($150))|0;
 $151 = $ispos498 ? $150 : $neg499;
 $152 = (_qr_ilog($151)|0);
 $153 = (($152) + ($149))|0;
 $ispos500 = ($125|0)>(-1);
 $neg501 = (0 - ($125))|0;
 $154 = $ispos500 ? $125 : $neg501;
 $ispos502 = ($130|0)>(-1);
 $neg503 = (0 - ($130))|0;
 $155 = $ispos502 ? $130 : $neg503;
 $156 = (($154) - ($155))|0;
 $157 = ($154|0)<($155|0);
 $158 = $157 ? $156 : 0;
 $159 = (($154) - ($158))|0;
 $160 = (_qr_ilog($159)|0);
 $161 = (($139) + ($142))|0;
 $ispos504 = ($161|0)>(-1);
 $neg505 = (0 - ($161))|0;
 $162 = $ispos504 ? $161 : $neg505;
 $163 = (_qr_ilog($162)|0);
 $164 = (($163) + ($160))|0;
 $ispos506 = ($136|0)>(-1);
 $neg507 = (0 - ($136))|0;
 $165 = $ispos506 ? $136 : $neg507;
 $ispos508 = ($139|0)>(-1);
 $neg509 = (0 - ($139))|0;
 $166 = $ispos508 ? $139 : $neg509;
 $167 = (($165) - ($166))|0;
 $168 = ($165|0)<($166|0);
 $169 = $168 ? $167 : 0;
 $170 = (($165) - ($169))|0;
 $ispos510 = ($142|0)>(-1);
 $neg511 = (0 - ($142))|0;
 $171 = $ispos510 ? $142 : $neg511;
 $172 = (($170) - ($171))|0;
 $173 = ($170|0)<($171|0);
 $174 = $173 ? $172 : 0;
 $175 = (($170) - ($174))|0;
 $176 = (_qr_ilog($175)|0);
 $177 = (($153) - ($164))|0;
 $178 = ($153|0)<($164|0);
 $179 = $178 ? $177 : 0;
 $180 = (($153) - ($179))|0;
 $181 = (($180) - ($176))|0;
 $182 = ($180|0)<($176|0);
 $183 = $182 ? $181 : 0;
 $184 = (($180) - ($183))|0;
 $185 = ($184|0)>(27);
 $186 = (($184) + -27)|0;
 $187 = $185 ? $186 : 0;
 $188 = 1 << $187;
 $189 = $188 >> 1;
 $190 = ($124|0)<(0);
 $191 = $190 << 31 >> 31;
 $192 = ($150|0)<(0);
 $193 = $192 << 31 >> 31;
 $194 = (___muldi3(($150|0),($193|0),($124|0),($191|0))|0);
 $195 = (getTempRet0() | 0);
 $196 = ($189|0)<(0);
 $197 = $196 << 31 >> 31;
 $198 = (_i64Add(($194|0),($195|0),($189|0),($197|0))|0);
 $199 = (getTempRet0() | 0);
 $200 = (_bitshift64Ashr(($198|0),($199|0),($187|0))|0);
 $201 = (getTempRet0() | 0);
 $202 = ($125|0)<(0);
 $203 = $202 << 31 >> 31;
 $204 = ($161|0)<(0);
 $205 = $204 << 31 >> 31;
 $206 = (___muldi3(($161|0),($205|0),($125|0),($203|0))|0);
 $207 = (getTempRet0() | 0);
 $208 = (_i64Add(($206|0),($207|0),($189|0),($197|0))|0);
 $209 = (getTempRet0() | 0);
 $210 = (_bitshift64Ashr(($208|0),($209|0),($187|0))|0);
 $211 = (getTempRet0() | 0);
 $212 = ($129|0)<(0);
 $213 = $212 << 31 >> 31;
 $214 = (___muldi3(($150|0),($193|0),($129|0),($213|0))|0);
 $215 = (getTempRet0() | 0);
 $216 = (_i64Add(($214|0),($215|0),($189|0),($197|0))|0);
 $217 = (getTempRet0() | 0);
 $218 = (_bitshift64Ashr(($216|0),($217|0),($187|0))|0);
 $219 = (getTempRet0() | 0);
 $220 = ($130|0)<(0);
 $221 = $220 << 31 >> 31;
 $222 = (___muldi3(($161|0),($205|0),($130|0),($221|0))|0);
 $223 = (getTempRet0() | 0);
 $224 = (_i64Add(($222|0),($223|0),($189|0),($197|0))|0);
 $225 = (getTempRet0() | 0);
 $226 = (_bitshift64Ashr(($224|0),($225|0),($187|0))|0);
 $227 = (getTempRet0() | 0);
 $228 = ($$0490|0)!=(0);
 $229 = $200 >> 31;
 if ($228) {
  $230 = $$0490 >> 1;
  $231 = (($229) + ($230))|0;
  $232 = $231 ^ $229;
  $233 = (($232) + ($200))|0;
  $234 = (($233|0) / ($$0490|0))&-1;
  $243 = $234;
 } else {
  $243 = 0;
 }
 $235 = ($$0495|0)!=(0);
 $236 = $210 >> 31;
 if ($235) {
  $237 = $$0495 >> 1;
  $238 = (($236) + ($237))|0;
  $239 = $238 ^ $236;
  $240 = (($239) + ($210))|0;
  $241 = (($240|0) / ($$0495|0))&-1;
  $244 = $241;
 } else {
  $244 = 0;
 }
 $242 = (($244) + ($243))|0;
 HEAP32[$0>>2] = $242;
 $245 = ($$0491|0)!=(0);
 if ($245) {
  $246 = $$0491 >> 1;
  $247 = (($229) + ($246))|0;
  $248 = $247 ^ $229;
  $249 = (($248) + ($200))|0;
  $250 = (($249|0) / ($$0491|0))&-1;
  $258 = $250;
 } else {
  $258 = 0;
 }
 $251 = ($$0494|0)!=(0);
 if ($251) {
  $252 = $$0494 >> 1;
  $253 = (($236) + ($252))|0;
  $254 = $253 ^ $236;
  $255 = (($254) + ($210))|0;
  $256 = (($255|0) / ($$0494|0))&-1;
  $259 = $256;
 } else {
  $259 = 0;
 }
 $257 = (($259) + ($258))|0;
 $260 = ((($0)) + 4|0);
 HEAP32[$260>>2] = $257;
 $261 = $218 >> 31;
 if ($228) {
  $262 = $$0490 >> 1;
  $263 = (($261) + ($262))|0;
  $264 = $263 ^ $261;
  $265 = (($264) + ($218))|0;
  $266 = (($265|0) / ($$0490|0))&-1;
  $274 = $266;
 } else {
  $274 = 0;
 }
 $267 = $226 >> 31;
 if ($235) {
  $268 = $$0495 >> 1;
  $269 = (($267) + ($268))|0;
  $270 = $269 ^ $267;
  $271 = (($270) + ($226))|0;
  $272 = (($271|0) / ($$0495|0))&-1;
  $275 = $272;
 } else {
  $275 = 0;
 }
 $273 = (($275) + ($274))|0;
 $276 = ((($0)) + 12|0);
 HEAP32[$276>>2] = $273;
 if ($245) {
  $277 = $$0491 >> 1;
  $278 = (($261) + ($277))|0;
  $279 = $278 ^ $261;
  $280 = (($279) + ($218))|0;
  $281 = (($280|0) / ($$0491|0))&-1;
  $288 = $281;
 } else {
  $288 = 0;
 }
 if ($251) {
  $282 = $$0494 >> 1;
  $283 = (($267) + ($282))|0;
  $284 = $283 ^ $267;
  $285 = (($284) + ($226))|0;
  $286 = (($285|0) / ($$0494|0))&-1;
  $289 = $286;
 } else {
  $289 = 0;
 }
 $287 = (($289) + ($288))|0;
 $290 = ((($0)) + 16|0);
 HEAP32[$290>>2] = $287;
 $291 = $136 >> 31;
 if ($228) {
  $292 = $$0490 >> 1;
  $293 = (($292) + ($291))|0;
  $294 = $293 ^ $291;
  $295 = (($294) + ($136))|0;
  $296 = (($295|0) / ($$0490|0))&-1;
  $311 = $296;
 } else {
  $311 = 0;
 }
 $297 = $139 >> 31;
 if ($235) {
  $298 = $$0495 >> 1;
  $299 = (($298) + ($297))|0;
  $300 = $299 ^ $297;
  $301 = (($300) + ($139))|0;
  $302 = (($301|0) / ($$0495|0))&-1;
  $313 = $302;
 } else {
  $313 = 0;
 }
 $303 = ($$0493|0)==(0);
 $304 = $142 >> 31;
 if ($303) {
  $315 = 0;
 } else {
  $305 = $$0493 >> 1;
  $306 = (($305) + ($304))|0;
  $307 = $306 ^ $304;
  $308 = (($307) + ($142))|0;
  $309 = (($308|0) / ($$0493|0))&-1;
  $315 = $309;
 }
 $310 = (($311) + ($189))|0;
 $312 = (($310) + ($313))|0;
 $314 = (($312) + ($315))|0;
 $316 = $314 >> $187;
 $317 = ((($0)) + 24|0);
 HEAP32[$317>>2] = $316;
 if ($245) {
  $318 = $$0491 >> 1;
  $319 = (($318) + ($291))|0;
  $320 = $319 ^ $291;
  $321 = (($320) + ($136))|0;
  $322 = (($321|0) / ($$0491|0))&-1;
  $335 = $322;
 } else {
  $335 = 0;
 }
 if ($251) {
  $323 = $$0494 >> 1;
  $324 = (($323) + ($297))|0;
  $325 = $324 ^ $297;
  $326 = (($325) + ($139))|0;
  $327 = (($326|0) / ($$0494|0))&-1;
  $337 = $327;
 } else {
  $337 = 0;
 }
 $328 = ($$0492|0)==(0);
 if ($328) {
  $339 = 0;
  $334 = (($335) + ($189))|0;
  $336 = (($334) + ($337))|0;
  $338 = (($336) + ($339))|0;
  $340 = $338 >> $187;
  $341 = ((($0)) + 28|0);
  HEAP32[$341>>2] = $340;
  $342 = (($189) + ($142))|0;
  $343 = $342 >> $187;
  $344 = ((($0)) + 32|0);
  HEAP32[$344>>2] = $343;
  $345 = Math_imul($316, $17)|0;
  $346 = Math_imul($340, $22)|0;
  $347 = (($345) + ($343))|0;
  $348 = (($347) + ($346))|0;
  $349 = Math_imul($348, $124)|0;
  $350 = Math_imul($348, $129)|0;
  $351 = Math_imul($316, $18)|0;
  $352 = Math_imul($340, $23)|0;
  $353 = (($351) + ($343))|0;
  $354 = (($353) + ($352))|0;
  $355 = Math_imul($354, $125)|0;
  $356 = Math_imul($354, $130)|0;
  $357 = Math_imul($316, $19)|0;
  $358 = Math_imul($340, $24)|0;
  $359 = (($357) + ($343))|0;
  $360 = (($359) + ($358))|0;
  $361 = Math_imul($360, $126)|0;
  $362 = Math_imul($360, $131)|0;
  $reass$add558 = (($23) + ($22))|0;
  $reass$add562 = (($reass$add558) + ($24))|0;
  $reass$mul563 = Math_imul($257, $reass$add562)|0;
  $reass$add564 = (($18) + ($17))|0;
  $reass$add568 = (($reass$add564) + ($19))|0;
  $reass$mul569 = Math_imul($242, $reass$add568)|0;
  $reass$add566 = (($reass$mul569) + ($reass$mul563))|0;
  $$neg537 = (($361) + 2)|0;
  $363 = (($$neg537) + ($349))|0;
  $364 = (($363) + ($355))|0;
  $365 = (($364) - ($reass$add566))|0;
  $366 = $365 >> 2;
  $367 = ((($0)) + 8|0);
  HEAP32[$367>>2] = $366;
  $reass$mul550 = Math_imul($287, $reass$add562)|0;
  $reass$mul554 = Math_imul($273, $reass$add568)|0;
  $reass$add = (($reass$mul554) + ($reass$mul550))|0;
  $$neg540 = (($362) + 2)|0;
  $368 = (($$neg540) + ($350))|0;
  $369 = (($368) + ($356))|0;
  $370 = (($369) - ($reass$add))|0;
  $371 = $370 >> 2;
  $372 = ((($0)) + 20|0);
  HEAP32[$372>>2] = $371;
  $373 = ((($0)) + 36|0);
  HEAP32[$373>>2] = $9;
  $374 = ((($0)) + 40|0);
  HEAP32[$374>>2] = $10;
  $375 = ((($0)) + 44|0);
  HEAP32[$375>>2] = $1;
  $376 = ((($0)) + 48|0);
  HEAP32[$376>>2] = $2;
  return;
 }
 $329 = $$0492 >> 1;
 $330 = (($329) + ($304))|0;
 $331 = $330 ^ $304;
 $332 = (($331) + ($142))|0;
 $333 = (($332|0) / ($$0492|0))&-1;
 $339 = $333;
 $334 = (($335) + ($189))|0;
 $336 = (($334) + ($337))|0;
 $338 = (($336) + ($339))|0;
 $340 = $338 >> $187;
 $341 = ((($0)) + 28|0);
 HEAP32[$341>>2] = $340;
 $342 = (($189) + ($142))|0;
 $343 = $342 >> $187;
 $344 = ((($0)) + 32|0);
 HEAP32[$344>>2] = $343;
 $345 = Math_imul($316, $17)|0;
 $346 = Math_imul($340, $22)|0;
 $347 = (($345) + ($343))|0;
 $348 = (($347) + ($346))|0;
 $349 = Math_imul($348, $124)|0;
 $350 = Math_imul($348, $129)|0;
 $351 = Math_imul($316, $18)|0;
 $352 = Math_imul($340, $23)|0;
 $353 = (($351) + ($343))|0;
 $354 = (($353) + ($352))|0;
 $355 = Math_imul($354, $125)|0;
 $356 = Math_imul($354, $130)|0;
 $357 = Math_imul($316, $19)|0;
 $358 = Math_imul($340, $24)|0;
 $359 = (($357) + ($343))|0;
 $360 = (($359) + ($358))|0;
 $361 = Math_imul($360, $126)|0;
 $362 = Math_imul($360, $131)|0;
 $reass$add558 = (($23) + ($22))|0;
 $reass$add562 = (($reass$add558) + ($24))|0;
 $reass$mul563 = Math_imul($257, $reass$add562)|0;
 $reass$add564 = (($18) + ($17))|0;
 $reass$add568 = (($reass$add564) + ($19))|0;
 $reass$mul569 = Math_imul($242, $reass$add568)|0;
 $reass$add566 = (($reass$mul569) + ($reass$mul563))|0;
 $$neg537 = (($361) + 2)|0;
 $363 = (($$neg537) + ($349))|0;
 $364 = (($363) + ($355))|0;
 $365 = (($364) - ($reass$add566))|0;
 $366 = $365 >> 2;
 $367 = ((($0)) + 8|0);
 HEAP32[$367>>2] = $366;
 $reass$mul550 = Math_imul($287, $reass$add562)|0;
 $reass$mul554 = Math_imul($273, $reass$add568)|0;
 $reass$add = (($reass$mul554) + ($reass$mul550))|0;
 $$neg540 = (($362) + 2)|0;
 $368 = (($$neg540) + ($350))|0;
 $369 = (($368) + ($356))|0;
 $370 = (($369) - ($reass$add))|0;
 $371 = $370 >> 2;
 $372 = ((($0)) + 20|0);
 HEAP32[$372>>2] = $371;
 $373 = ((($0)) + 36|0);
 HEAP32[$373>>2] = $9;
 $374 = ((($0)) + 40|0);
 HEAP32[$374>>2] = $10;
 $375 = ((($0)) + 44|0);
 HEAP32[$375>>2] = $1;
 $376 = ((($0)) + 48|0);
 HEAP32[$376>>2] = $2;
 return;
}
function _qr_alignment_pattern_search($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i403 = 0, $$01213$i = 0, $$01213$i392 = 0, $$01213$i402 = 0, $$014$i = 0, $$014$i391 = 0, $$014$i401 = 0, $$0338461 = 0, $$0339460 = 0, $$0344 = 0, $$0345 = 0, $$0347459 = 0, $$0352458 = 0, $$0362487 = 0, $$0366486 = 0, $$0367485 = 0, $$0368484 = 0, $$1340434 = 0;
 var $$1348433 = 0, $$1353432 = 0, $$1361431 = 0, $$1363457 = 0, $$1370456 = 0, $$1375455 = 0, $$1380454 = 0, $$1436 = 0, $$2364427 = 0, $$2371430 = 0, $$2376429 = 0, $$2381428 = 0, $$3342508 = 0, $$3350507 = 0, $$3355506 = 0, $$3372 = 0, $$3377 = 0, $$3382 = 0, $$3509 = 0, $$4 = 0;
 var $$4343 = 0, $$4343408 = 0, $$4351 = 0, $$4351407 = 0, $$4356 = 0, $$4356406 = 0, $$4373505 = 0, $$4378504 = 0, $$4383503 = 0, $$4409 = 0, $$5$sink = 0, $$5357$sink = 0, $$lcssa452473 = 0, $$lcssa452474502 = 0, $$sink$i = 0, $$sink$i$1 = 0, $$sink$i$2 = 0, $$sink$i$3 = 0, $$sink$i$4 = 0, $$sink$i398 = 0;
 var $$sink$i398$lcssa453477 = 0, $$sink$i398$lcssa453478501 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond = 0, $exitcond499 = 0, $or$cond = 0, $or$cond$1 = 0, $or$cond385 = 0, $or$cond386 = 0, $or$cond387 = 0, $or$cond388 = 0, $or$cond488 = 0, $spec$select = 0, $spec$select$i = 0, $spec$select$i$1 = 0, $spec$select$i$2 = 0, $spec$select$i$3 = 0, $spec$select$i$4 = 0, $spec$select$i395 = 0, $spec$select24$i = 0, $spec$select24$i$1 = 0, $spec$select24$i$2 = 0;
 var $spec$select24$i$3 = 0, $spec$select24$i$4 = 0, $spec$select24$i396 = 0, $spec$select25$i = 0, $spec$select25$i$1 = 0, $spec$select25$i$2 = 0, $spec$select25$i$3 = 0, $spec$select25$i$4 = 0, $spec$select25$i397 = 0, $spec$select389 = 0, $spec$select410 = 0, $spec$select411 = 0, $spec$select412 = 0, $spec$select413 = 0, $storemerge$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $8 = sp + 224|0;
 $9 = sp + 208|0;
 $10 = sp;
 $11 = sp + 256|0;
 $12 = (($2) + -2)|0;
 $13 = ((($1)) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) - ($14))|0;
 $16 = (($3) + -2)|0;
 $17 = ((($1)) + 48|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) - ($18))|0;
 $20 = HEAP32[$1>>2]|0;
 $21 = Math_imul($20, $15)|0;
 $22 = ((($1)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = Math_imul($23, $19)|0;
 $25 = (($24) + ($21))|0;
 $26 = ((($1)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + ($27))|0;
 $29 = ((($1)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = Math_imul($30, $15)|0;
 $32 = ((($1)) + 16|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = Math_imul($33, $19)|0;
 $35 = (($34) + ($31))|0;
 $36 = ((($1)) + 20|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($35) + ($37))|0;
 $39 = ((($1)) + 24|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = Math_imul($40, $15)|0;
 $42 = ((($1)) + 28|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = Math_imul($43, $19)|0;
 $45 = (($44) + ($41))|0;
 $46 = ((($1)) + 32|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($45) + ($47))|0;
 $49 = ((($1)) + 36|0);
 $50 = ((($1)) + 40|0);
 $$0362487 = 0;$$0366486 = $28;$$0367485 = $38;$$0368484 = $48;
 while(1) {
  $51 = (($10) + (($$0362487*40)|0)|0);
  $52 = ($$0368484|0)==(0);
  if ($52) {
   $53 = $$0366486 >>> 31;
   $54 = (($53) + 2147483647)|0;
   HEAP32[$51>>2] = $54;
   $55 = $$0367485 >>> 31;
   $56 = (($55) + 2147483647)|0;
   $$sink$i = $56;
  } else {
   $57 = ($$0368484|0)<(0);
   $58 = (0 - ($$0366486))|0;
   $59 = (0 - ($$0367485))|0;
   $60 = (0 - ($$0368484))|0;
   $spec$select$i = $57 ? $58 : $$0366486;
   $spec$select24$i = $57 ? $59 : $$0367485;
   $spec$select25$i = $57 ? $60 : $$0368484;
   $61 = $spec$select25$i >> 1;
   $62 = $spec$select$i >> 31;
   $63 = (($62) + ($61))|0;
   $64 = $63 ^ $62;
   $65 = (($64) + ($spec$select$i))|0;
   $66 = (($65|0) / ($spec$select25$i|0))&-1;
   $67 = HEAP32[$49>>2]|0;
   $68 = (($67) + ($66))|0;
   HEAP32[$51>>2] = $68;
   $69 = $spec$select24$i >> 31;
   $70 = (($61) + ($69))|0;
   $71 = $70 ^ $69;
   $72 = (($71) + ($spec$select24$i))|0;
   $73 = (($72|0) / ($spec$select25$i|0))&-1;
   $74 = HEAP32[$50>>2]|0;
   $75 = (($74) + ($73))|0;
   $$sink$i = $75;
  }
  $76 = (((($10) + (($$0362487*40)|0)|0)) + 4|0);
  HEAP32[$76>>2] = $$sink$i;
  $77 = (($$0366486) + ($20))|0;
  $78 = (($$0367485) + ($30))|0;
  $79 = (($$0368484) + ($40))|0;
  $80 = (((($10) + (($$0362487*40)|0)|0)) + 8|0);
  $81 = ($79|0)==(0);
  if ($81) {
   $411 = $77 >>> 31;
   $412 = (($411) + 2147483647)|0;
   HEAP32[$80>>2] = $412;
   $413 = $78 >>> 31;
   $414 = (($413) + 2147483647)|0;
   $$sink$i$1 = $414;
  } else {
   $392 = ($79|0)<(0);
   $393 = (0 - ($77))|0;
   $394 = (0 - ($78))|0;
   $395 = (0 - ($79))|0;
   $spec$select$i$1 = $392 ? $393 : $77;
   $spec$select24$i$1 = $392 ? $394 : $78;
   $spec$select25$i$1 = $392 ? $395 : $79;
   $396 = $spec$select25$i$1 >> 1;
   $397 = $spec$select$i$1 >> 31;
   $398 = (($397) + ($396))|0;
   $399 = $398 ^ $397;
   $400 = (($399) + ($spec$select$i$1))|0;
   $401 = (($400|0) / ($spec$select25$i$1|0))&-1;
   $402 = HEAP32[$49>>2]|0;
   $403 = (($402) + ($401))|0;
   HEAP32[$80>>2] = $403;
   $404 = $spec$select24$i$1 >> 31;
   $405 = (($396) + ($404))|0;
   $406 = $405 ^ $404;
   $407 = (($406) + ($spec$select24$i$1))|0;
   $408 = (($407|0) / ($spec$select25$i$1|0))&-1;
   $409 = HEAP32[$50>>2]|0;
   $410 = (($409) + ($408))|0;
   $$sink$i$1 = $410;
  }
  $415 = (((($10) + (($$0362487*40)|0)|0)) + 12|0);
  HEAP32[$415>>2] = $$sink$i$1;
  $416 = (($77) + ($20))|0;
  $417 = (($78) + ($30))|0;
  $418 = (($79) + ($40))|0;
  $419 = (((($10) + (($$0362487*40)|0)|0)) + 16|0);
  $420 = ($418|0)==(0);
  if ($420) {
   $440 = $416 >>> 31;
   $441 = (($440) + 2147483647)|0;
   HEAP32[$419>>2] = $441;
   $442 = $417 >>> 31;
   $443 = (($442) + 2147483647)|0;
   $$sink$i$2 = $443;
  } else {
   $421 = ($418|0)<(0);
   $422 = (0 - ($416))|0;
   $423 = (0 - ($417))|0;
   $424 = (0 - ($418))|0;
   $spec$select$i$2 = $421 ? $422 : $416;
   $spec$select24$i$2 = $421 ? $423 : $417;
   $spec$select25$i$2 = $421 ? $424 : $418;
   $425 = $spec$select25$i$2 >> 1;
   $426 = $spec$select$i$2 >> 31;
   $427 = (($426) + ($425))|0;
   $428 = $427 ^ $426;
   $429 = (($428) + ($spec$select$i$2))|0;
   $430 = (($429|0) / ($spec$select25$i$2|0))&-1;
   $431 = HEAP32[$49>>2]|0;
   $432 = (($431) + ($430))|0;
   HEAP32[$419>>2] = $432;
   $433 = $spec$select24$i$2 >> 31;
   $434 = (($425) + ($433))|0;
   $435 = $434 ^ $433;
   $436 = (($435) + ($spec$select24$i$2))|0;
   $437 = (($436|0) / ($spec$select25$i$2|0))&-1;
   $438 = HEAP32[$50>>2]|0;
   $439 = (($438) + ($437))|0;
   $$sink$i$2 = $439;
  }
  $444 = (((($10) + (($$0362487*40)|0)|0)) + 20|0);
  HEAP32[$444>>2] = $$sink$i$2;
  $445 = (($416) + ($20))|0;
  $446 = (($417) + ($30))|0;
  $447 = (($418) + ($40))|0;
  $448 = (((($10) + (($$0362487*40)|0)|0)) + 24|0);
  $449 = ($447|0)==(0);
  if ($449) {
   $469 = $445 >>> 31;
   $470 = (($469) + 2147483647)|0;
   HEAP32[$448>>2] = $470;
   $471 = $446 >>> 31;
   $472 = (($471) + 2147483647)|0;
   $$sink$i$3 = $472;
  } else {
   $450 = ($447|0)<(0);
   $451 = (0 - ($445))|0;
   $452 = (0 - ($446))|0;
   $453 = (0 - ($447))|0;
   $spec$select$i$3 = $450 ? $451 : $445;
   $spec$select24$i$3 = $450 ? $452 : $446;
   $spec$select25$i$3 = $450 ? $453 : $447;
   $454 = $spec$select25$i$3 >> 1;
   $455 = $spec$select$i$3 >> 31;
   $456 = (($455) + ($454))|0;
   $457 = $456 ^ $455;
   $458 = (($457) + ($spec$select$i$3))|0;
   $459 = (($458|0) / ($spec$select25$i$3|0))&-1;
   $460 = HEAP32[$49>>2]|0;
   $461 = (($460) + ($459))|0;
   HEAP32[$448>>2] = $461;
   $462 = $spec$select24$i$3 >> 31;
   $463 = (($454) + ($462))|0;
   $464 = $463 ^ $462;
   $465 = (($464) + ($spec$select24$i$3))|0;
   $466 = (($465|0) / ($spec$select25$i$3|0))&-1;
   $467 = HEAP32[$50>>2]|0;
   $468 = (($467) + ($466))|0;
   $$sink$i$3 = $468;
  }
  $473 = (((($10) + (($$0362487*40)|0)|0)) + 28|0);
  HEAP32[$473>>2] = $$sink$i$3;
  $474 = (($445) + ($20))|0;
  $475 = (($446) + ($30))|0;
  $476 = (($447) + ($40))|0;
  $477 = (((($10) + (($$0362487*40)|0)|0)) + 32|0);
  $478 = ($476|0)==(0);
  if ($478) {
   $498 = $474 >>> 31;
   $499 = (($498) + 2147483647)|0;
   HEAP32[$477>>2] = $499;
   $500 = $475 >>> 31;
   $501 = (($500) + 2147483647)|0;
   $$sink$i$4 = $501;
  } else {
   $479 = ($476|0)<(0);
   $480 = (0 - ($474))|0;
   $481 = (0 - ($475))|0;
   $482 = (0 - ($476))|0;
   $spec$select$i$4 = $479 ? $480 : $474;
   $spec$select24$i$4 = $479 ? $481 : $475;
   $spec$select25$i$4 = $479 ? $482 : $476;
   $483 = $spec$select25$i$4 >> 1;
   $484 = $spec$select$i$4 >> 31;
   $485 = (($484) + ($483))|0;
   $486 = $485 ^ $484;
   $487 = (($486) + ($spec$select$i$4))|0;
   $488 = (($487|0) / ($spec$select25$i$4|0))&-1;
   $489 = HEAP32[$49>>2]|0;
   $490 = (($489) + ($488))|0;
   HEAP32[$477>>2] = $490;
   $491 = $spec$select24$i$4 >> 31;
   $492 = (($483) + ($491))|0;
   $493 = $492 ^ $491;
   $494 = (($493) + ($spec$select24$i$4))|0;
   $495 = (($494|0) / ($spec$select25$i$4|0))&-1;
   $496 = HEAP32[$50>>2]|0;
   $497 = (($496) + ($495))|0;
   $$sink$i$4 = $497;
  }
  $502 = (((($10) + (($$0362487*40)|0)|0)) + 36|0);
  HEAP32[$502>>2] = $$sink$i$4;
  $503 = (($$0366486) + ($23))|0;
  $504 = (($$0367485) + ($33))|0;
  $505 = (($$0368484) + ($43))|0;
  $506 = (($$0362487) + 1)|0;
  $exitcond499 = ($506|0)==(5);
  if ($exitcond499) {
   break;
  } else {
   $$0362487 = $506;$$0366486 = $503;$$0367485 = $504;$$0368484 = $505;
  }
 }
 $82 = ((($10)) + 96|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ((($10)) + 100|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = (_qr_alignment_pattern_fetch($10,$83,$85,$5,$6,$7)|0);
 $87 = $86 ^ 33084991;
 $88 = ($87|0)==(0);
 L24: do {
  if ($88) {
   $$4343408 = 0;$$4351407 = $83;$$4356406 = $85;$$4409 = $86;
  } else {
   $$01213$i392 = $87;$$014$i391 = 0;
   while(1) {
    $89 = (($$01213$i392) + -1)|0;
    $90 = $89 & $$01213$i392;
    $91 = (($$014$i391) + 1)|0;
    $92 = ($91>>>0)<(25);
    $93 = ($90|0)!=(0);
    $94 = $92 & $93;
    if ($94) {
     $$01213$i392 = $90;$$014$i391 = $91;
    } else {
     break;
    }
   }
   $95 = (($2) - ($14))|0;
   $96 = (($3) - ($18))|0;
   $97 = $4 << 2;
   $98 = ($97|0)>(1);
   do {
    if ($98) {
     $99 = Math_imul($43, $96)|0;
     $100 = Math_imul($40, $95)|0;
     $101 = (($99) + ($100))|0;
     $102 = (($101) + ($47))|0;
     $103 = $102 << 2;
     $104 = Math_imul($33, $96)|0;
     $105 = Math_imul($30, $95)|0;
     $106 = (($104) + ($105))|0;
     $107 = (($106) + ($37))|0;
     $108 = $107 << 2;
     $109 = Math_imul($23, $96)|0;
     $110 = Math_imul($20, $95)|0;
     $111 = (($109) + ($110))|0;
     $112 = (($111) + ($27))|0;
     $113 = $112 << 2;
     $114 = (($23) + ($20))|0;
     $115 = (($33) + ($30))|0;
     $116 = (($43) + ($40))|0;
     $117 = ((($11)) + 4|0);
     $$0338461 = $86;$$0339460 = $91;$$0347459 = $83;$$0352458 = $85;$$1363457 = 1;$$1370456 = $113;$$1375455 = $108;$$1380454 = $103;$$lcssa452473 = 0;$$sink$i398$lcssa453477 = 0;
     while(1) {
      $120 = $$1363457 << 1;
      $121 = (($120) + -1)|0;
      $122 = (($$1370456) - ($114))|0;
      $123 = (($$1375455) - ($115))|0;
      $124 = (($$1380454) - ($116))|0;
      $125 = $121 << 2;
      $126 = ($120|0)>(1);
      if ($126) {
       $127 = $121 << 1;
       $128 = ($121*3)|0;
       $$1340434 = $$0339460;$$1348433 = $$0347459;$$1353432 = $$0352458;$$1361431 = 0;$$1436 = $$0338461;$$2371430 = $122;$$2376429 = $123;$$2381428 = $124;
       while(1) {
        $129 = ($$2381428|0)==(0);
        if ($129) {
         $130 = $$2371430 >>> 31;
         $131 = (($130) + 2147483647)|0;
         $132 = $$2376429 >>> 31;
         $133 = (($132) + 2147483647)|0;
         $$sink$i398 = $133;$153 = $131;
        } else {
         $134 = ($$2381428|0)<(0);
         $135 = (0 - ($$2371430))|0;
         $136 = (0 - ($$2376429))|0;
         $137 = (0 - ($$2381428))|0;
         $spec$select$i395 = $134 ? $135 : $$2371430;
         $spec$select24$i396 = $134 ? $136 : $$2376429;
         $spec$select25$i397 = $134 ? $137 : $$2381428;
         $138 = $spec$select25$i397 >> 1;
         $139 = $spec$select$i395 >> 31;
         $140 = (($139) + ($138))|0;
         $141 = $140 ^ $139;
         $142 = (($141) + ($spec$select$i395))|0;
         $143 = (($142|0) / ($spec$select25$i397|0))&-1;
         $144 = HEAP32[$49>>2]|0;
         $145 = (($144) + ($143))|0;
         $146 = $spec$select24$i396 >> 31;
         $147 = (($138) + ($146))|0;
         $148 = $147 ^ $146;
         $149 = (($148) + ($spec$select24$i396))|0;
         $150 = (($149|0) / ($spec$select25$i397|0))&-1;
         $151 = HEAP32[$50>>2]|0;
         $152 = (($151) + ($150))|0;
         $$sink$i398 = $152;$153 = $145;
        }
        $154 = (_qr_alignment_pattern_fetch($10,$153,$$sink$i398,$5,$6,$7)|0);
        $155 = $154 ^ 33084991;
        $156 = ($$1340434|0)>(-1);
        $157 = ($155|0)!=(0);
        $158 = $156 & $157;
        if ($158) {
         $$01213$i402 = $155;$$014$i401 = 0;
         while(1) {
          $159 = (($$01213$i402) + -1)|0;
          $160 = $159 & $$01213$i402;
          $161 = (($$014$i401) + 1)|0;
          $162 = ($$014$i401|0)<($$1340434|0);
          $163 = ($160|0)!=(0);
          $164 = $162 & $163;
          if ($164) {
           $$01213$i402 = $160;$$014$i401 = $161;
          } else {
           $$0$lcssa$i403 = $161;
           break;
          }
         }
        } else {
         $$0$lcssa$i403 = 0;
        }
        $165 = ($$0$lcssa$i403|0)<($$1340434|0);
        $spec$select410 = $165 ? $$sink$i398 : $$1353432;
        $spec$select411 = $165 ? $153 : $$1348433;
        $spec$select412 = $165 ? $$0$lcssa$i403 : $$1340434;
        $spec$select413 = $165 ? $154 : $$1436;
        $166 = ($$1361431|0)<($127|0);
        if ($166) {
         $167 = ($$1361431|0)>=($121|0);
         $168 = $167&1;
         $169 = (($1) + ($168<<2)|0);
         $170 = HEAP32[$169>>2]|0;
         $171 = (($170) + ($$2371430))|0;
         $172 = (((($1)) + 12|0) + ($168<<2)|0);
         $173 = HEAP32[$172>>2]|0;
         $174 = (($173) + ($$2376429))|0;
         $175 = (((($1)) + 24|0) + ($168<<2)|0);
         $176 = HEAP32[$175>>2]|0;
         $177 = (($176) + ($$2381428))|0;
         $$3372 = $171;$$3377 = $174;$$3382 = $177;
        } else {
         $178 = ($$1361431|0)>=($128|0);
         $179 = $178&1;
         $180 = (($1) + ($179<<2)|0);
         $181 = HEAP32[$180>>2]|0;
         $182 = (($$2371430) - ($181))|0;
         $183 = (((($1)) + 12|0) + ($179<<2)|0);
         $184 = HEAP32[$183>>2]|0;
         $185 = (($$2376429) - ($184))|0;
         $186 = (((($1)) + 24|0) + ($179<<2)|0);
         $187 = HEAP32[$186>>2]|0;
         $188 = (($$2381428) - ($187))|0;
         $$3372 = $182;$$3377 = $185;$$3382 = $188;
        }
        $189 = ($spec$select412|0)!=(0);
        $190 = (($$1361431) + 1)|0;
        $191 = ($190|0)<($125|0);
        $or$cond488 = $189 & $191;
        if ($or$cond488) {
         $$1340434 = $spec$select412;$$1348433 = $spec$select411;$$1353432 = $spec$select410;$$1361431 = $190;$$1436 = $spec$select413;$$2371430 = $$3372;$$2376429 = $$3377;$$2381428 = $$3382;
        } else {
         break;
        }
       }
       $192 = ($spec$select412|0)==(0);
       if ($192) {
        label = 25;
        break;
       } else {
        $$3342508 = $spec$select412;$$3350507 = $spec$select411;$$3355506 = $spec$select410;$$3509 = $spec$select413;$$4373505 = $$3372;$$4378504 = $$3377;$$4383503 = $$3382;$$lcssa452474502 = $153;$$sink$i398$lcssa453478501 = $$sink$i398;
       }
      } else {
       $$3342508 = $$0339460;$$3350507 = $$0347459;$$3355506 = $$0352458;$$3509 = $$0338461;$$4373505 = $122;$$4378504 = $123;$$4383503 = $124;$$lcssa452474502 = $$lcssa452473;$$sink$i398$lcssa453478501 = $$sink$i398$lcssa453477;
      }
      $118 = (($$1363457) + 1)|0;
      $119 = ($118|0)<($97|0);
      if ($119) {
       $$0338461 = $$3509;$$0339460 = $$3342508;$$0347459 = $$3350507;$$0352458 = $$3355506;$$1363457 = $118;$$1370456 = $$4373505;$$1375455 = $$4378504;$$1380454 = $$4383503;$$lcssa452473 = $$lcssa452474502;$$sink$i398$lcssa453477 = $$sink$i398$lcssa453478501;
      } else {
       label = 26;
       break;
      }
     }
     if ((label|0) == 25) {
      HEAP32[$11>>2] = $153;
      HEAP32[$117>>2] = $$sink$i398;
      $$4343408 = 0;$$4351407 = $spec$select411;$$4356406 = $spec$select410;$$4409 = $spec$select413;
      break L24;
     }
     else if ((label|0) == 26) {
      HEAP32[$11>>2] = $$lcssa452474502;
      HEAP32[$117>>2] = $$sink$i398$lcssa453478501;
      $$4 = $$3509;$$4343 = $$3342508;$$4351 = $$3350507;$$4356 = $$3355506;
      break;
     }
    } else {
     $$4 = $86;$$4343 = $91;$$4351 = $83;$$4356 = $85;
    }
   } while(0);
   $193 = ($$4343|0)>(6);
   if ($193) {
    $$0 = -1;$$5$sink = $83;$$5357$sink = $85;
    HEAP32[$0>>2] = $$5$sink;
    $341 = ((($0)) + 4|0);
    HEAP32[$341>>2] = $$5357$sink;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$4343408 = $$4343;$$4351407 = $$4351;$$4356406 = $$4356;$$4409 = $$4;
   }
  }
 } while(0);
 $194 = (($$4351407) - ($83))|0;
 $195 = (($$4356406) - ($85))|0;
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;HEAP32[$9+12>>2]=0|0;
 ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;HEAP32[$8+12>>2]=0|0;HEAP32[$8+16>>2]=0|0;HEAP32[$8+20>>2]=0|0;HEAP32[$8+24>>2]=0|0;HEAP32[$8+28>>2]=0|0;
 $196 = ((($11)) + 4|0);
 $$2364427 = 0;
 while(1) {
  $197 = (576 + ($$2364427<<3)|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = $198 & $$4409;
  $200 = (((576 + ($$2364427<<3)|0)) + 4|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = ($199|0)==($201|0);
  if ($202) {
   $203 = (((640 + ($$2364427<<1)|0)) + 1|0);
   $204 = HEAP8[$203>>0]|0;
   $205 = $204&255;
   $206 = (640 + ($$2364427<<1)|0);
   $207 = HEAP8[$206>>0]|0;
   $208 = $207&255;
   $209 = ((($10) + (($205*40)|0)|0) + ($208<<3)|0);
   $210 = HEAP32[$209>>2]|0;
   $211 = (($210) + ($194))|0;
   $212 = $211 >> 2;
   $213 = ($211|0)>(-1);
   $214 = ($212|0)<($6|0);
   $or$cond385 = $213 & $214;
   if ($or$cond385) {
    $215 = ((((($10) + (($205*40)|0)|0) + ($208<<3)|0)) + 4|0);
    $216 = HEAP32[$215>>2]|0;
    $217 = (($216) + ($195))|0;
    $218 = $217 >> 2;
    $219 = ($217|0)>(-1);
    $220 = ($218|0)<($7|0);
    $or$cond386 = $219 & $220;
    if ($or$cond386) {
     $221 = (4 - ($205))|0;
     $222 = (4 - ($208))|0;
     $223 = ((($10) + (($221*40)|0)|0) + ($222<<3)|0);
     $224 = HEAP32[$223>>2]|0;
     $225 = (($224) + ($194))|0;
     $226 = $225 >> 2;
     $227 = ($225|0)>(-1);
     $228 = ($226|0)<($6|0);
     $or$cond387 = $227 & $228;
     if ($or$cond387) {
      $229 = ((((($10) + (($221*40)|0)|0) + ($222<<3)|0)) + 4|0);
      $230 = HEAP32[$229>>2]|0;
      $231 = (($230) + ($195))|0;
      $232 = $231 >> 2;
      $233 = ($231|0)>(-1);
      $234 = ($232|0)<($7|0);
      $or$cond388 = $233 & $234;
      if ($or$cond388) {
       $235 = $$2364427 & 1;
       $236 = (_qr_finder_locate_crossing($5,$6,$212,$218,$226,$232,$235,$11)|0);
       $237 = ($236|0)==(0);
       if ($237) {
        $238 = HEAP32[$11>>2]|0;
        $239 = (($238) - ($$4351407))|0;
        $240 = HEAP32[$196>>2]|0;
        $241 = (($240) - ($$4356406))|0;
        $242 = ($235|0)==(0);
        $243 = ($239*3)|0;
        $244 = ($241*3)|0;
        $245 = $235 << 1;
        $246 = $245 | 1;
        $$0345 = $242 ? $239 : $243;
        $$0344 = $242 ? $241 : $244;
        $247 = $$2364427 >>> 1;
        $248 = (($9) + ($247<<2)|0);
        $249 = HEAP32[$248>>2]|0;
        $250 = (($249) + ($246))|0;
        HEAP32[$248>>2] = $250;
        $251 = (($8) + ($247<<3)|0);
        $252 = HEAP32[$251>>2]|0;
        $253 = (($252) + ($$0345))|0;
        HEAP32[$251>>2] = $253;
        $254 = (((($8) + ($247<<3)|0)) + 4|0);
        $255 = HEAP32[$254>>2]|0;
        $256 = (($255) + ($$0344))|0;
        HEAP32[$254>>2] = $256;
       }
      }
     }
    }
   }
  }
  $257 = (($$2364427) + 1)|0;
  $exitcond = ($257|0)==(8);
  if ($exitcond) {
   break;
  } else {
   $$2364427 = $257;
  }
 }
 $258 = HEAP32[$9>>2]|0;
 $259 = ((($9)) + 4|0);
 $260 = HEAP32[$259>>2]|0;
 $261 = ($258|0)!=(0);
 $262 = ($260|0)!=(0);
 $or$cond = $261 & $262;
 if ($or$cond) {
  $263 = (($258) - ($260))|0;
  $264 = ($258|0)<($260|0);
  $265 = $264 ? $263 : 0;
  $266 = (($258) - ($265))|0;
  $267 = HEAP32[$8>>2]|0;
  $268 = Math_imul($267, $260)|0;
  $269 = ((($8)) + 8|0);
  $270 = HEAP32[$269>>2]|0;
  $271 = Math_imul($270, $258)|0;
  $272 = (($271) + ($268))|0;
  $273 = Math_imul($272, $266)|0;
  $274 = Math_imul($260, $258)|0;
  $275 = $274 >> 1;
  $276 = $273 >> 31;
  $277 = (($276) + ($275))|0;
  $278 = $277 ^ $276;
  $279 = (($278) + ($273))|0;
  $280 = (($279|0) / ($274|0))&-1;
  HEAP32[$8>>2] = $280;
  $281 = ((($8)) + 4|0);
  $282 = HEAP32[$281>>2]|0;
  $283 = Math_imul($282, $260)|0;
  $284 = ((($8)) + 12|0);
  $285 = HEAP32[$284>>2]|0;
  $286 = Math_imul($285, $258)|0;
  $287 = (($286) + ($283))|0;
  $288 = Math_imul($287, $266)|0;
  $289 = $288 >> 31;
  $290 = (($289) + ($275))|0;
  $291 = $290 ^ $289;
  $292 = (($291) + ($288))|0;
  $293 = (($292|0) / ($274|0))&-1;
  HEAP32[$281>>2] = $293;
  $294 = $266 << 1;
  $305 = $294;$387 = $280;$390 = $293;
 } else {
  $295 = ((($8)) + 8|0);
  $296 = HEAP32[$295>>2]|0;
  $297 = HEAP32[$8>>2]|0;
  $298 = (($297) + ($296))|0;
  HEAP32[$8>>2] = $298;
  $299 = ((($8)) + 12|0);
  $300 = HEAP32[$299>>2]|0;
  $301 = ((($8)) + 4|0);
  $302 = HEAP32[$301>>2]|0;
  $303 = (($302) + ($300))|0;
  HEAP32[$301>>2] = $303;
  $304 = (($260) + ($258))|0;
  $305 = $304;$387 = $298;$390 = $303;
 }
 HEAP32[$9>>2] = $305;
 $306 = ((($9)) + 8|0);
 $307 = HEAP32[$306>>2]|0;
 $308 = ((($9)) + 12|0);
 $309 = HEAP32[$308>>2]|0;
 $310 = ($307|0)!=(0);
 $311 = ($309|0)!=(0);
 $or$cond$1 = $310 & $311;
 if ($or$cond$1) {
  $353 = (($307) - ($309))|0;
  $354 = ($307|0)<($309|0);
  $355 = $354 ? $353 : 0;
  $356 = (($307) - ($355))|0;
  $357 = ((($8)) + 16|0);
  $358 = HEAP32[$357>>2]|0;
  $359 = Math_imul($358, $309)|0;
  $360 = ((($8)) + 24|0);
  $361 = HEAP32[$360>>2]|0;
  $362 = Math_imul($361, $307)|0;
  $363 = (($362) + ($359))|0;
  $364 = Math_imul($363, $356)|0;
  $365 = Math_imul($309, $307)|0;
  $366 = $365 >> 1;
  $367 = $364 >> 31;
  $368 = (($367) + ($366))|0;
  $369 = $368 ^ $367;
  $370 = (($369) + ($364))|0;
  $371 = (($370|0) / ($365|0))&-1;
  HEAP32[$357>>2] = $371;
  $372 = ((($8)) + 20|0);
  $373 = HEAP32[$372>>2]|0;
  $374 = Math_imul($373, $309)|0;
  $375 = ((($8)) + 28|0);
  $376 = HEAP32[$375>>2]|0;
  $377 = Math_imul($376, $307)|0;
  $378 = (($377) + ($374))|0;
  $379 = Math_imul($378, $356)|0;
  $380 = $379 >> 31;
  $381 = (($380) + ($366))|0;
  $382 = $381 ^ $380;
  $383 = (($382) + ($379))|0;
  $384 = (($383|0) / ($365|0))&-1;
  HEAP32[$372>>2] = $384;
  $385 = $356 << 1;
  $386 = $371;$389 = $384;$storemerge$1 = $385;
 } else {
  $342 = ((($8)) + 24|0);
  $343 = HEAP32[$342>>2]|0;
  $344 = ((($8)) + 16|0);
  $345 = HEAP32[$344>>2]|0;
  $346 = (($345) + ($343))|0;
  HEAP32[$344>>2] = $346;
  $347 = ((($8)) + 28|0);
  $348 = HEAP32[$347>>2]|0;
  $349 = ((($8)) + 20|0);
  $350 = HEAP32[$349>>2]|0;
  $351 = (($350) + ($348))|0;
  HEAP32[$349>>2] = $351;
  $352 = (($309) + ($307))|0;
  $386 = $346;$389 = $351;$storemerge$1 = $352;
 }
 HEAP32[$306>>2] = $storemerge$1;
 $315 = (($387) + ($386))|0;
 HEAP32[$8>>2] = $315;
 $388 = ((($8)) + 4|0);
 $321 = (($390) + ($389))|0;
 HEAP32[$388>>2] = $321;
 $313 = (($305) + ($storemerge$1))|0;
 HEAP32[$9>>2] = $313;
 $391 = ($313|0)==(0);
 if ($391) {
  $$0 = 0;$$5$sink = $$4351407;$$5357$sink = $$4356406;
  HEAP32[$0>>2] = $$5$sink;
  $341 = ((($0)) + 4|0);
  HEAP32[$341>>2] = $$5357$sink;
  STACKTOP = sp;return ($$0|0);
 }
 $312 = $313 >> 1;
 $314 = $315 >> 31;
 $316 = (($312) + ($314))|0;
 $317 = $316 ^ $314;
 $318 = (($317) + ($315))|0;
 $319 = (($318|0) / ($313|0))&-1;
 $320 = $321 >> 31;
 $322 = (($312) + ($320))|0;
 $323 = $322 ^ $320;
 $324 = (($323) + ($321))|0;
 $325 = (($324|0) / ($313|0))&-1;
 $326 = (($319) + ($$4351407))|0;
 $327 = (($325) + ($$4356406))|0;
 $328 = (_qr_alignment_pattern_fetch($10,$326,$327,$5,$6,$7)|0);
 $329 = (($$4343408) + 1)|0;
 $330 = $328 ^ 33084991;
 $331 = ($$4343408|0)>(-1);
 $332 = ($330|0)!=(0);
 $333 = $331 & $332;
 if ($333) {
  $$01213$i = $330;$$014$i = 0;
  while(1) {
   $334 = (($$01213$i) + -1)|0;
   $335 = $334 & $$01213$i;
   $336 = (($$014$i) + 1)|0;
   $337 = ($$014$i|0)<($$4343408|0);
   $338 = ($335|0)!=(0);
   $339 = $337 & $338;
   if ($339) {
    $$01213$i = $335;$$014$i = $336;
   } else {
    $$0$lcssa$i = $336;
    break;
   }
  }
 } else {
  $$0$lcssa$i = 0;
 }
 $340 = ($$0$lcssa$i|0)>($329|0);
 $spec$select = $340 ? $$4356406 : $327;
 $spec$select389 = $340 ? $$4351407 : $326;
 $$0 = 0;$$5$sink = $spec$select389;$$5357$sink = $spec$select;
 HEAP32[$0>>2] = $$5$sink;
 $341 = ((($0)) + 4|0);
 HEAP32[$341>>2] = $$5357$sink;
 STACKTOP = sp;return ($$0|0);
}
function _qr_finder_edge_pts_hom_classify($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$052 = 0, $$lcssa = 0, $$lobit = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink56 = 0, $$sink59 = 0, $$sink60 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ispos = 0, $ispos48 = 0, $neg = 0, $neg49 = 0;
 var $scevgep = 0, $spec$select$i = 0, $spec$select48$i = 0, $spec$select49$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ((($0)) + 72|0);
 $4 = HEAP32[$3>>2]|0;
 $scevgep = ((($0)) + 32|0);
 ;HEAP32[$scevgep>>2]=0|0;HEAP32[$scevgep+4>>2]=0|0;HEAP32[$scevgep+8>>2]=0|0;HEAP32[$scevgep+12>>2]=0|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(0);
 if (!($7)) {
  $$pre = ((($4)) + 8|0);
  $$lcssa = $6;$$pre$phiZ2D = $$pre;
  $94 = HEAP32[$$pre$phiZ2D>>2]|0;
  _qsort($94,$$lcssa,16,1);
  $95 = HEAP32[$$pre$phiZ2D>>2]|0;
  $96 = ((($0)) + 16|0);
  HEAP32[$96>>2] = $95;
  $97 = $95;
  $98 = HEAP32[$scevgep>>2]|0;
  $99 = (($97) + ($98<<4)|0);
  $100 = ((($0)) + 20|0);
  HEAP32[$100>>2] = $99;
  $101 = ((($0)) + 36|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (($99) + ($102<<4)|0);
  $104 = ((($0)) + 24|0);
  HEAP32[$104>>2] = $103;
  $105 = ((($0)) + 40|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (($103) + ($106<<4)|0);
  $108 = ((($0)) + 28|0);
  HEAP32[$108>>2] = $107;
  STACKTOP = sp;return;
 }
 $8 = ((($4)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($1)) + 56|0);
 $11 = ((($1)) + 60|0);
 $12 = ((($1)) + 24|0);
 $13 = ((($1)) + 28|0);
 $14 = ((($1)) + 32|0);
 $15 = ((($1)) + 36|0);
 $16 = ((($1)) + 40|0);
 $17 = ((($1)) + 44|0);
 $18 = ((($1)) + 52|0);
 $19 = ((($1)) + 64|0);
 $20 = ((($2)) + 4|0);
 $21 = ((($0)) + 64|0);
 $22 = ((($0)) + 68|0);
 $$052 = 0;
 while(1) {
  $23 = (($9) + ($$052<<4)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (((($9) + ($$052<<4)|0)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = HEAP32[$10>>2]|0;
  $28 = (($24) - ($27))|0;
  $29 = HEAP32[$11>>2]|0;
  $30 = (($26) - ($29))|0;
  $31 = HEAP32[$12>>2]|0;
  $32 = Math_imul($31, $28)|0;
  $33 = HEAP32[$13>>2]|0;
  $34 = Math_imul($33, $30)|0;
  $35 = (($34) + ($32))|0;
  $36 = HEAP32[$14>>2]|0;
  $37 = Math_imul($36, $28)|0;
  $38 = HEAP32[$15>>2]|0;
  $39 = Math_imul($38, $30)|0;
  $40 = (($39) + ($37))|0;
  $41 = HEAP32[$16>>2]|0;
  $42 = Math_imul($41, $28)|0;
  $43 = HEAP32[$17>>2]|0;
  $44 = Math_imul($43, $30)|0;
  $45 = (($44) + ($42))|0;
  $46 = HEAP32[$18>>2]|0;
  $47 = (($45) + ($46))|0;
  $48 = HEAP32[$19>>2]|0;
  $49 = (($48) + -1)|0;
  $50 = 1 << $49;
  $51 = (($47) + ($50))|0;
  $52 = $51 >> $48;
  $53 = ($52|0)==(0);
  if ($53) {
   $85 = $35 >>> 31;
   $86 = (($85) + 2147483647)|0;
   HEAP32[$2>>2] = $86;
   $87 = $40 >>> 31;
   $88 = (($87) + 2147483647)|0;
   $$sink = $86;$$sink56 = 4;$$sink59 = $88;$$sink60 = $20;
  } else {
   $54 = ($52|0)<(0);
   $55 = (0 - ($35))|0;
   $56 = (0 - ($40))|0;
   $57 = (0 - ($52))|0;
   $spec$select$i = $54 ? $55 : $35;
   $spec$select48$i = $54 ? $56 : $40;
   $spec$select49$i = $54 ? $57 : $52;
   $58 = $spec$select49$i >> 1;
   $59 = $spec$select$i >> 31;
   $60 = (($58) + ($59))|0;
   $61 = $60 ^ $59;
   $62 = (($61) + ($spec$select$i))|0;
   $63 = (($62|0) / ($spec$select49$i|0))&-1;
   $64 = $spec$select48$i >> 31;
   $65 = (($58) + ($64))|0;
   $66 = $65 ^ $64;
   $67 = (($66) + ($spec$select48$i))|0;
   $68 = (($67|0) / ($spec$select49$i|0))&-1;
   $69 = HEAP32[$21>>2]|0;
   $70 = HEAP32[$22>>2]|0;
   $71 = (($63) - ($69))|0;
   HEAP32[$2>>2] = $71;
   $72 = (($68) - ($70))|0;
   HEAP32[$20>>2] = $72;
   $ispos = ($72|0)>(-1);
   $neg = (0 - ($72))|0;
   $73 = $ispos ? $72 : $neg;
   $ispos48 = ($71|0)>(-1);
   $neg49 = (0 - ($71))|0;
   $74 = $ispos48 ? $71 : $neg49;
   $75 = ($73|0)>($74|0);
   $76 = $75&1;
   $77 = $76 << 1;
   $78 = (($2) + ($76<<2)|0);
   $79 = HEAP32[$78>>2]|0;
   $$lobit = $79 >>> 31;
   $80 = $77 | $$lobit;
   $81 = $80 ^ 1;
   $82 = (((($0)) + 32|0) + ($81<<2)|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (($83) + 1)|0;
   $$sink = $79;$$sink56 = $81;$$sink59 = $84;$$sink60 = $82;
  }
  HEAP32[$$sink60>>2] = $$sink59;
  $89 = (((($9) + ($$052<<4)|0)) + 8|0);
  HEAP32[$89>>2] = $$sink56;
  $90 = (((($9) + ($$052<<4)|0)) + 12|0);
  HEAP32[$90>>2] = $$sink;
  $91 = (($$052) + 1)|0;
  $92 = HEAP32[$5>>2]|0;
  $93 = ($91|0)<($92|0);
  if ($93) {
   $$052 = $91;
  } else {
   $$lcssa = $92;$$pre$phiZ2D = $8;
   break;
  }
 }
 $94 = HEAP32[$$pre$phiZ2D>>2]|0;
 _qsort($94,$$lcssa,16,1);
 $95 = HEAP32[$$pre$phiZ2D>>2]|0;
 $96 = ((($0)) + 16|0);
 HEAP32[$96>>2] = $95;
 $97 = $95;
 $98 = HEAP32[$scevgep>>2]|0;
 $99 = (($97) + ($98<<4)|0);
 $100 = ((($0)) + 20|0);
 HEAP32[$100>>2] = $99;
 $101 = ((($0)) + 36|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = (($99) + ($102<<4)|0);
 $104 = ((($0)) + 24|0);
 HEAP32[$104>>2] = $103;
 $105 = ((($0)) + 40|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = (($103) + ($106<<4)|0);
 $108 = ((($0)) + 28|0);
 HEAP32[$108>>2] = $107;
 STACKTOP = sp;return;
}
function _qr_finder_version_decode($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0103129 = 0, $$0105128 = 0, $$0106127 = 0, $$0107126 = 0, $$0108125 = 0, $$0114124 = 0, $$01213$i$i = 0, $$01213$i29$i = 0, $$014$i$i = 0, $$014$i28$i = 0, $$02636$i = 0, $$2$ph = 0, $$off$i = 0, $$sink$i = 0, $$sink$i$1 = 0, $$sink$i$2 = 0, $$sroa$0$0 = 0, $$sroa$0$0$1 = 0, $$sroa$0$0$2 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $spec$select$i = 0, $spec$select$i$1 = 0, $spec$select$i$2 = 0, $spec$select24$i = 0, $spec$select24$i$1 = 0, $spec$select24$i$2 = 0, $spec$select25$i = 0, $spec$select25$i$1 = 0;
 var $spec$select25$i$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $6 = sp;
 $7 = (((($0)) + 64|0) + ($5<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($0) + ($5<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = Math_imul($10, -7)|0;
 $12 = (($11) + ($8))|0;
 $13 = (($6) + ($5<<2)|0);
 HEAP32[$13>>2] = $12;
 $14 = (1 - ($5))|0;
 $15 = (((($0)) + 64|0) + ($14<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($0) + ($14<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = Math_imul($18, -3)|0;
 $20 = (($19) + ($16))|0;
 $21 = (($6) + ($14<<2)|0);
 HEAP32[$21>>2] = $20;
 $22 = HEAP32[$1>>2]|0;
 $23 = HEAP32[$6>>2]|0;
 $24 = Math_imul($23, $22)|0;
 $25 = ((($1)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($6)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = Math_imul($28, $26)|0;
 $30 = (($29) + ($24))|0;
 $31 = ((($1)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = Math_imul($32, $23)|0;
 $34 = ((($1)) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = Math_imul($35, $28)|0;
 $37 = (($36) + ($33))|0;
 $38 = ((($1)) + 16|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = Math_imul($39, $23)|0;
 $41 = ((($1)) + 20|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = Math_imul($42, $28)|0;
 $44 = (($43) + ($40))|0;
 $45 = ((($1)) + 48|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($44) + ($46))|0;
 $48 = (($1) + ($14<<2)|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = Math_imul($49, $18)|0;
 $51 = (((($1)) + 8|0) + ($14<<2)|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = Math_imul($52, $18)|0;
 $54 = (((($1)) + 16|0) + ($14<<2)|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = Math_imul($55, $18)|0;
 $57 = (($1) + ($5<<2)|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = Math_imul($58, $10)|0;
 $60 = (((($1)) + 8|0) + ($5<<2)|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = Math_imul($61, $10)|0;
 $63 = (((($1)) + 16|0) + ($5<<2)|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = Math_imul($64, $10)|0;
 $66 = (($4) + -1)|0;
 $67 = (($3) + -1)|0;
 $68 = ((($1)) + 56|0);
 $69 = ((($1)) + 60|0);
 $$0103129 = 0;$$0105128 = 0;$$0106127 = $30;$$0107126 = $37;$$0108125 = $47;$$0114124 = 0;
 while(1) {
  $70 = ($$0108125|0)==(0);
  if ($70) {
   $71 = $$0106127 >>> 31;
   $72 = (($71) + 2147483647)|0;
   $73 = $$0107126 >>> 31;
   $74 = (($73) + 2147483647)|0;
   $$sink$i = $74;$$sroa$0$0 = $72;
  } else {
   $75 = ($$0108125|0)<(0);
   $76 = (0 - ($$0106127))|0;
   $77 = (0 - ($$0107126))|0;
   $78 = (0 - ($$0108125))|0;
   $spec$select$i = $75 ? $76 : $$0106127;
   $spec$select24$i = $75 ? $77 : $$0107126;
   $spec$select25$i = $75 ? $78 : $$0108125;
   $79 = $spec$select25$i >> 1;
   $80 = $spec$select$i >> 31;
   $81 = (($79) + ($80))|0;
   $82 = $81 ^ $80;
   $83 = (($82) + ($spec$select$i))|0;
   $84 = (($83|0) / ($spec$select25$i|0))&-1;
   $85 = HEAP32[$68>>2]|0;
   $86 = (($85) + ($84))|0;
   $87 = $spec$select24$i >> 31;
   $88 = (($79) + ($87))|0;
   $89 = $88 ^ $87;
   $90 = (($89) + ($spec$select24$i))|0;
   $91 = (($90|0) / ($spec$select25$i|0))&-1;
   $92 = HEAP32[$69>>2]|0;
   $93 = (($92) + ($91))|0;
   $$sink$i = $93;$$sroa$0$0 = $86;
  }
  $94 = $$sroa$0$0 >> 2;
  $95 = $$sink$i >> 2;
  $96 = ($95|0)<($4|0);
  $97 = $96 ? $95 : $66;
  $98 = ($97|0)>(0);
  $99 = $98 ? $97 : 0;
  $100 = Math_imul($99, $3)|0;
  $101 = ($94|0)<($3|0);
  $102 = $101 ? $94 : $67;
  $103 = ($102|0)>(0);
  $104 = $103 ? $102 : 0;
  $105 = (($100) + ($104))|0;
  $106 = (($2) + ($105)|0);
  $107 = HEAP8[$106>>0]|0;
  $108 = ($107<<24>>24)!=(0);
  $109 = $108&1;
  $110 = $109 << $$0103129;
  $111 = $110 | $$0114124;
  $112 = (($$0106127) + ($59))|0;
  $113 = (($$0107126) + ($62))|0;
  $114 = (($$0108125) + ($65))|0;
  $115 = (($$0103129) + 1)|0;
  $116 = ($114|0)==(0);
  if ($116) {
   $166 = $112 >>> 31;
   $167 = (($166) + 2147483647)|0;
   $168 = $113 >>> 31;
   $169 = (($168) + 2147483647)|0;
   $$sink$i$1 = $169;$$sroa$0$0$1 = $167;
  } else {
   $147 = ($114|0)<(0);
   $148 = (0 - ($112))|0;
   $149 = (0 - ($113))|0;
   $150 = (0 - ($114))|0;
   $spec$select$i$1 = $147 ? $148 : $112;
   $spec$select24$i$1 = $147 ? $149 : $113;
   $spec$select25$i$1 = $147 ? $150 : $114;
   $151 = $spec$select25$i$1 >> 1;
   $152 = $spec$select$i$1 >> 31;
   $153 = (($151) + ($152))|0;
   $154 = $153 ^ $152;
   $155 = (($154) + ($spec$select$i$1))|0;
   $156 = (($155|0) / ($spec$select25$i$1|0))&-1;
   $157 = HEAP32[$68>>2]|0;
   $158 = (($157) + ($156))|0;
   $159 = $spec$select24$i$1 >> 31;
   $160 = (($151) + ($159))|0;
   $161 = $160 ^ $159;
   $162 = (($161) + ($spec$select24$i$1))|0;
   $163 = (($162|0) / ($spec$select25$i$1|0))&-1;
   $164 = HEAP32[$69>>2]|0;
   $165 = (($164) + ($163))|0;
   $$sink$i$1 = $165;$$sroa$0$0$1 = $158;
  }
  $170 = $$sroa$0$0$1 >> 2;
  $171 = $$sink$i$1 >> 2;
  $172 = ($171|0)<($4|0);
  $173 = $172 ? $171 : $66;
  $174 = ($173|0)>(0);
  $175 = $174 ? $173 : 0;
  $176 = Math_imul($175, $3)|0;
  $177 = ($170|0)<($3|0);
  $178 = $177 ? $170 : $67;
  $179 = ($178|0)>(0);
  $180 = $179 ? $178 : 0;
  $181 = (($176) + ($180))|0;
  $182 = (($2) + ($181)|0);
  $183 = HEAP8[$182>>0]|0;
  $184 = ($183<<24>>24)!=(0);
  $185 = $184&1;
  $186 = $185 << $115;
  $187 = $186 | $111;
  $188 = (($112) + ($59))|0;
  $189 = (($113) + ($62))|0;
  $190 = (($114) + ($65))|0;
  $191 = (($$0103129) + 2)|0;
  $192 = ($190|0)==(0);
  if ($192) {
   $212 = $188 >>> 31;
   $213 = (($212) + 2147483647)|0;
   $214 = $189 >>> 31;
   $215 = (($214) + 2147483647)|0;
   $$sink$i$2 = $215;$$sroa$0$0$2 = $213;
  } else {
   $193 = ($190|0)<(0);
   $194 = (0 - ($188))|0;
   $195 = (0 - ($189))|0;
   $196 = (0 - ($190))|0;
   $spec$select$i$2 = $193 ? $194 : $188;
   $spec$select24$i$2 = $193 ? $195 : $189;
   $spec$select25$i$2 = $193 ? $196 : $190;
   $197 = $spec$select25$i$2 >> 1;
   $198 = $spec$select$i$2 >> 31;
   $199 = (($197) + ($198))|0;
   $200 = $199 ^ $198;
   $201 = (($200) + ($spec$select$i$2))|0;
   $202 = (($201|0) / ($spec$select25$i$2|0))&-1;
   $203 = HEAP32[$68>>2]|0;
   $204 = (($203) + ($202))|0;
   $205 = $spec$select24$i$2 >> 31;
   $206 = (($197) + ($205))|0;
   $207 = $206 ^ $205;
   $208 = (($207) + ($spec$select24$i$2))|0;
   $209 = (($208|0) / ($spec$select25$i$2|0))&-1;
   $210 = HEAP32[$69>>2]|0;
   $211 = (($210) + ($209))|0;
   $$sink$i$2 = $211;$$sroa$0$0$2 = $204;
  }
  $216 = $$sroa$0$0$2 >> 2;
  $217 = $$sink$i$2 >> 2;
  $218 = ($217|0)<($4|0);
  $219 = $218 ? $217 : $66;
  $220 = ($219|0)>(0);
  $221 = $220 ? $219 : 0;
  $222 = Math_imul($221, $3)|0;
  $223 = ($216|0)<($3|0);
  $224 = $223 ? $216 : $67;
  $225 = ($224|0)>(0);
  $226 = $225 ? $224 : 0;
  $227 = (($222) + ($226))|0;
  $228 = (($2) + ($227)|0);
  $229 = HEAP8[$228>>0]|0;
  $230 = ($229<<24>>24)!=(0);
  $231 = $230&1;
  $232 = $231 << $191;
  $118 = $232 | $187;
  $233 = (($$0103129) + 3)|0;
  $234 = (($$0106127) + ($50))|0;
  $235 = (($$0107126) + ($53))|0;
  $236 = (($$0108125) + ($56))|0;
  $237 = (($$0105128) + 1)|0;
  $exitcond = ($237|0)==(6);
  if ($exitcond) {
   break;
  } else {
   $$0103129 = $233;$$0105128 = $237;$$0106127 = $234;$$0107126 = $235;$$0108125 = $236;$$0114124 = $118;
  }
 }
 $117 = $118 >>> 12;
 $$off$i = (($118) + -28672)|0;
 $119 = ($$off$i>>>0)<(139264);
 if ($119) {
  $120 = (($117) + -7)|0;
  $121 = (432 + ($120<<2)|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = $122 ^ $118;
  $124 = ($123|0)==(0);
  if ($124) {
   $$2$ph = $122;
  } else {
   $$01213$i$i = $123;$$014$i$i = 0;
   while(1) {
    $125 = (($$01213$i$i) + -1)|0;
    $126 = $125 & $$01213$i$i;
    $127 = (($$014$i$i) + 1)|0;
    $128 = ($127>>>0)<(4);
    $129 = ($126|0)!=(0);
    $130 = $128 & $129;
    if ($130) {
     $$01213$i$i = $126;$$014$i$i = $127;
    } else {
     break;
    }
   }
   if ($128) {
    $$2$ph = $122;
   } else {
    label = 11;
   }
  }
 } else {
  label = 11;
 }
 L22: do {
  if ((label|0) == 11) {
   $$02636$i = 0;
   while(1) {
    $131 = (($$02636$i) + 7)|0;
    $132 = ($131|0)==($117|0);
    if (!($132)) {
     $133 = (432 + ($$02636$i<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 ^ $118;
     $136 = ($135|0)==(0);
     if ($136) {
      $$2$ph = $134;
      break L22;
     }
     $$01213$i29$i = $135;$$014$i28$i = 0;
     while(1) {
      $137 = (($$01213$i29$i) + -1)|0;
      $138 = $137 & $$01213$i29$i;
      $139 = (($$014$i28$i) + 1)|0;
      $140 = ($139>>>0)<(4);
      $141 = ($138|0)!=(0);
      $142 = $140 & $141;
      if ($142) {
       $$01213$i29$i = $138;$$014$i28$i = $139;
      } else {
       break;
      }
     }
     if ($140) {
      $$2$ph = $134;
      break L22;
     }
    }
    $143 = (($$02636$i) + 1)|0;
    $144 = ($143>>>0)<(34);
    if ($144) {
     $$02636$i = $143;
    } else {
     $146 = -1;
     break;
    }
   }
   STACKTOP = sp;return ($146|0);
  }
 } while(0);
 $145 = $$2$ph >>> 12;
 $146 = $145;
 STACKTOP = sp;return ($146|0);
}
function _qr_finder_fmt_info_decode($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0$lcssa = 0, $$0204 = 0, $$0205 = 0, $$0209$lcssa = 0, $$0209255 = 0, $$0211266 = 0, $$0213 = 0, $$0217 = 0, $$0221 = 0, $$0260 = 0, $$1 = 0, $$1210 = 0, $$1212 = 0, $$1214286 = 0, $$1218285 = 0, $$1222284 = 0, $$2207268 = 0, $$2215280 = 0, $$2219279 = 0, $$2223278 = 0;
 var $$2287 = 0, $$3 = 0, $$3208256 = 0, $$3216275 = 0, $$3220274 = 0, $$3224273 = 0, $$4281 = 0, $$5276 = 0, $$in = 0, $$lcssa = 0, $$lcssa248 = 0, $$pre = 0, $$sink$i = 0, $$sink$i228 = 0, $$sink$i233 = 0, $$sink$i238 = 0, $$sroa$0$0 = 0, $$sroa$0$1 = 0, $$sroa$0$2 = 0, $$sroa$0$3 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond304 = 0, $exitcond305 = 0;
 var $spec$select = 0, $spec$select$i = 0, $spec$select$i225 = 0, $spec$select$i230 = 0, $spec$select$i235 = 0, $spec$select24$i = 0, $spec$select24$i226 = 0, $spec$select24$i231 = 0, $spec$select24$i236 = 0, $spec$select25$i = 0, $spec$select25$i227 = 0, $spec$select25$i232 = 0, $spec$select25$i237 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $7 = sp + 64|0;
 $8 = sp + 56|0;
 $9 = sp + 32|0;
 $10 = sp + 16|0;
 $11 = sp;
 $12 = sp + 48|0;
 HEAP32[$7>>2] = 0;
 $13 = ((($0)) + 64|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$0>>2]|0;
 $16 = ($15*5)|0;
 $17 = (($16) + ($14))|0;
 $18 = ((($0)) + 68|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($0)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = Math_imul($21, -3)|0;
 $23 = (($22) + ($19))|0;
 $24 = HEAP32[$3>>2]|0;
 $25 = Math_imul($24, $17)|0;
 $26 = ((($3)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = Math_imul($27, $23)|0;
 $29 = (($28) + ($25))|0;
 $30 = ((($3)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = Math_imul($31, $17)|0;
 $33 = ((($3)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = Math_imul($34, $23)|0;
 $36 = (($35) + ($32))|0;
 $37 = ((($3)) + 16|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = Math_imul($38, $17)|0;
 $40 = ((($3)) + 20|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = Math_imul($41, $23)|0;
 $43 = (($42) + ($39))|0;
 $44 = ((($3)) + 48|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($43) + ($45))|0;
 $47 = Math_imul($27, $21)|0;
 $48 = Math_imul($34, $21)|0;
 $49 = Math_imul($41, $21)|0;
 $50 = (($6) + -1)|0;
 $51 = (($5) + -1)|0;
 $52 = ((($3)) + 56|0);
 $53 = ((($3)) + 60|0);
 $$0204 = 0;$$0205 = 0;$$0213 = $46;$$0217 = $36;$$0221 = $29;$98 = 0;
 while(1) {
  $54 = ($$0205|0)==(6);
  if ($54) {
   $$1 = $$0204;$363 = $98;
  } else {
   $55 = ($$0213|0)==(0);
   if ($55) {
    $56 = $$0221 >>> 31;
    $57 = (($56) + 2147483647)|0;
    $58 = $$0217 >>> 31;
    $59 = (($58) + 2147483647)|0;
    $$sink$i = $59;$$sroa$0$0 = $57;
   } else {
    $60 = ($$0213|0)<(0);
    $61 = (0 - ($$0221))|0;
    $62 = (0 - ($$0217))|0;
    $63 = (0 - ($$0213))|0;
    $spec$select$i = $60 ? $61 : $$0221;
    $spec$select24$i = $60 ? $62 : $$0217;
    $spec$select25$i = $60 ? $63 : $$0213;
    $64 = $spec$select25$i >> 1;
    $65 = $spec$select$i >> 31;
    $66 = (($64) + ($65))|0;
    $67 = $66 ^ $65;
    $68 = (($67) + ($spec$select$i))|0;
    $69 = (($68|0) / ($spec$select25$i|0))&-1;
    $70 = HEAP32[$52>>2]|0;
    $71 = (($70) + ($69))|0;
    $72 = $spec$select24$i >> 31;
    $73 = (($64) + ($72))|0;
    $74 = $73 ^ $72;
    $75 = (($74) + ($spec$select24$i))|0;
    $76 = (($75|0) / ($spec$select25$i|0))&-1;
    $77 = HEAP32[$53>>2]|0;
    $78 = (($77) + ($76))|0;
    $$sink$i = $78;$$sroa$0$0 = $71;
   }
   $79 = $$sroa$0$0 >> 2;
   $80 = $$sink$i >> 2;
   $81 = ($80|0)<($6|0);
   $82 = $81 ? $80 : $50;
   $83 = ($82|0)>(0);
   $84 = $83 ? $82 : 0;
   $85 = Math_imul($84, $5)|0;
   $86 = ($79|0)<($5|0);
   $87 = $86 ? $79 : $51;
   $88 = ($87|0)>(0);
   $89 = $88 ? $87 : 0;
   $90 = (($85) + ($89))|0;
   $91 = (($4) + ($90)|0);
   $92 = HEAP8[$91>>0]|0;
   $93 = ($92<<24>>24)!=(0);
   $94 = $93&1;
   $95 = (($$0204) + 1)|0;
   $96 = $94 << $$0204;
   $97 = $96 | $98;
   $99 = ($$0205>>>0)>(7);
   if ($99) {
    break;
   } else {
    $$1 = $95;$363 = $97;
   }
  }
  $100 = (($$0221) + ($47))|0;
  $101 = (($$0217) + ($48))|0;
  $102 = (($$0213) + ($49))|0;
  $103 = (($$0205) + 1)|0;
  $$0204 = $$1;$$0205 = $103;$$0213 = $102;$$0217 = $101;$$0221 = $100;$98 = $363;
 }
 HEAP32[$7>>2] = $97;
 HEAP32[$8>>2] = 0;
 $104 = (0 - ($24))|0;
 $105 = Math_imul($15, $104)|0;
 $106 = (0 - ($31))|0;
 $107 = Math_imul($15, $106)|0;
 $108 = (0 - ($38))|0;
 $109 = Math_imul($15, $108)|0;
 $$1214286 = $$0213;$$1218285 = $$0217;$$1222284 = $$0221;$$2287 = $95;$$in = $$0205;$158 = 0;
 while(1) {
  $110 = (($$in) + -1)|0;
  $111 = (($$1222284) + ($105))|0;
  $112 = (($$1218285) + ($107))|0;
  $113 = (($$1214286) + ($109))|0;
  $114 = ($110|0)==(6);
  if ($114) {
   $$3 = $$2287;$160 = $158;
  } else {
   $115 = ($113|0)==(0);
   if ($115) {
    $116 = $111 >>> 31;
    $117 = (($116) + 2147483647)|0;
    $118 = $112 >>> 31;
    $119 = (($118) + 2147483647)|0;
    $$sink$i238 = $119;$$sroa$0$1 = $117;
   } else {
    $120 = ($113|0)<(0);
    $121 = (0 - ($111))|0;
    $122 = (0 - ($112))|0;
    $123 = (0 - ($113))|0;
    $spec$select$i235 = $120 ? $121 : $111;
    $spec$select24$i236 = $120 ? $122 : $112;
    $spec$select25$i237 = $120 ? $123 : $113;
    $124 = $spec$select25$i237 >> 1;
    $125 = $spec$select$i235 >> 31;
    $126 = (($124) + ($125))|0;
    $127 = $126 ^ $125;
    $128 = (($127) + ($spec$select$i235))|0;
    $129 = (($128|0) / ($spec$select25$i237|0))&-1;
    $130 = HEAP32[$52>>2]|0;
    $131 = (($130) + ($129))|0;
    $132 = $spec$select24$i236 >> 31;
    $133 = (($124) + ($132))|0;
    $134 = $133 ^ $132;
    $135 = (($134) + ($spec$select24$i236))|0;
    $136 = (($135|0) / ($spec$select25$i237|0))&-1;
    $137 = HEAP32[$53>>2]|0;
    $138 = (($137) + ($136))|0;
    $$sink$i238 = $138;$$sroa$0$1 = $131;
   }
   $139 = $$sroa$0$1 >> 2;
   $140 = $$sink$i238 >> 2;
   $141 = ($140|0)<($6|0);
   $142 = $141 ? $140 : $50;
   $143 = ($142|0)>(0);
   $144 = $143 ? $142 : 0;
   $145 = Math_imul($144, $5)|0;
   $146 = ($139|0)<($5|0);
   $147 = $146 ? $139 : $51;
   $148 = ($147|0)>(0);
   $149 = $148 ? $147 : 0;
   $150 = (($145) + ($149))|0;
   $151 = (($4) + ($150)|0);
   $152 = HEAP8[$151>>0]|0;
   $153 = ($152<<24>>24)!=(0);
   $154 = $153&1;
   $155 = (($$2287) + 1)|0;
   $156 = $154 << $$2287;
   $157 = $156 | $158;
   $$3 = $155;$160 = $157;
  }
  $159 = ($$in|0)>(1);
  if ($159) {
   $$1214286 = $113;$$1218285 = $112;$$1222284 = $111;$$2287 = $$3;$$in = $110;$158 = $160;
  } else {
   break;
  }
 }
 HEAP32[$8>>2] = $160;
 $161 = ((($7)) + 4|0);
 HEAP32[$161>>2] = 0;
 $162 = ((($1)) + 64|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = HEAP32[$1>>2]|0;
 $165 = ($164*3)|0;
 $166 = (($165) + ($163))|0;
 $167 = ((($1)) + 68|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = ((($1)) + 4|0);
 $170 = HEAP32[$169>>2]|0;
 $171 = ($170*5)|0;
 $172 = (($171) + ($168))|0;
 $173 = Math_imul($166, $24)|0;
 $174 = Math_imul($172, $27)|0;
 $175 = (($174) + ($173))|0;
 $176 = Math_imul($166, $31)|0;
 $177 = Math_imul($172, $34)|0;
 $178 = (($177) + ($176))|0;
 $179 = Math_imul($166, $38)|0;
 $180 = Math_imul($172, $41)|0;
 $181 = (($179) + ($45))|0;
 $182 = (($181) + ($180))|0;
 $183 = Math_imul($164, $104)|0;
 $184 = Math_imul($164, $106)|0;
 $185 = Math_imul($164, $108)|0;
 $$2215280 = $182;$$2219279 = $178;$$2223278 = $175;$$4281 = 0;$228 = 0;
 while(1) {
  $186 = ($$2215280|0)==(0);
  if ($186) {
   $187 = $$2223278 >>> 31;
   $188 = (($187) + 2147483647)|0;
   $189 = $$2219279 >>> 31;
   $190 = (($189) + 2147483647)|0;
   $$sink$i233 = $190;$$sroa$0$2 = $188;
  } else {
   $191 = ($$2215280|0)<(0);
   $192 = (0 - ($$2223278))|0;
   $193 = (0 - ($$2219279))|0;
   $194 = (0 - ($$2215280))|0;
   $spec$select$i230 = $191 ? $192 : $$2223278;
   $spec$select24$i231 = $191 ? $193 : $$2219279;
   $spec$select25$i232 = $191 ? $194 : $$2215280;
   $195 = $spec$select25$i232 >> 1;
   $196 = $spec$select$i230 >> 31;
   $197 = (($195) + ($196))|0;
   $198 = $197 ^ $196;
   $199 = (($198) + ($spec$select$i230))|0;
   $200 = (($199|0) / ($spec$select25$i232|0))&-1;
   $201 = HEAP32[$52>>2]|0;
   $202 = (($201) + ($200))|0;
   $203 = $spec$select24$i231 >> 31;
   $204 = (($195) + ($203))|0;
   $205 = $204 ^ $203;
   $206 = (($205) + ($spec$select24$i231))|0;
   $207 = (($206|0) / ($spec$select25$i232|0))&-1;
   $208 = HEAP32[$53>>2]|0;
   $209 = (($208) + ($207))|0;
   $$sink$i233 = $209;$$sroa$0$2 = $202;
  }
  $210 = $$sroa$0$2 >> 2;
  $211 = $$sink$i233 >> 2;
  $212 = ($211|0)<($6|0);
  $213 = $212 ? $211 : $50;
  $214 = ($213|0)>(0);
  $215 = $214 ? $213 : 0;
  $216 = Math_imul($215, $5)|0;
  $217 = ($210|0)<($5|0);
  $218 = $217 ? $210 : $51;
  $219 = ($218|0)>(0);
  $220 = $219 ? $218 : 0;
  $221 = (($216) + ($220))|0;
  $222 = (($4) + ($221)|0);
  $223 = HEAP8[$222>>0]|0;
  $224 = ($223<<24>>24)!=(0);
  $225 = $224&1;
  $226 = $225 << $$4281;
  $227 = $226 | $228;
  $229 = (($$2223278) + ($183))|0;
  $230 = (($$2219279) + ($184))|0;
  $231 = (($$2215280) + ($185))|0;
  $232 = (($$4281) + 1)|0;
  $exitcond305 = ($232|0)==(8);
  if ($exitcond305) {
   break;
  } else {
   $$2215280 = $231;$$2219279 = $230;$$2223278 = $229;$$4281 = $232;$228 = $227;
  }
 }
 HEAP32[$161>>2] = $227;
 $233 = ((($8)) + 4|0);
 HEAP32[$233>>2] = 0;
 $234 = ((($2)) + 64|0);
 $235 = HEAP32[$234>>2]|0;
 $236 = HEAP32[$2>>2]|0;
 $237 = ($236*5)|0;
 $238 = (($237) + ($235))|0;
 $239 = ((($2)) + 68|0);
 $240 = HEAP32[$239>>2]|0;
 $241 = ((($2)) + 4|0);
 $242 = HEAP32[$241>>2]|0;
 $243 = Math_imul($242, -3)|0;
 $244 = (($243) + ($240))|0;
 $245 = Math_imul($238, $24)|0;
 $246 = Math_imul($244, $27)|0;
 $247 = (($246) + ($245))|0;
 $248 = Math_imul($238, $31)|0;
 $249 = Math_imul($244, $34)|0;
 $250 = (($249) + ($248))|0;
 $251 = Math_imul($238, $38)|0;
 $252 = Math_imul($244, $41)|0;
 $253 = (($251) + ($45))|0;
 $254 = (($253) + ($252))|0;
 $255 = Math_imul($242, $27)|0;
 $256 = Math_imul($242, $34)|0;
 $257 = Math_imul($242, $41)|0;
 $$3216275 = $254;$$3220274 = $250;$$3224273 = $247;$$5276 = 8;$300 = 0;
 while(1) {
  $258 = ($$3216275|0)==(0);
  if ($258) {
   $259 = $$3224273 >>> 31;
   $260 = (($259) + 2147483647)|0;
   $261 = $$3220274 >>> 31;
   $262 = (($261) + 2147483647)|0;
   $$sink$i228 = $262;$$sroa$0$3 = $260;
  } else {
   $263 = ($$3216275|0)<(0);
   $264 = (0 - ($$3224273))|0;
   $265 = (0 - ($$3220274))|0;
   $266 = (0 - ($$3216275))|0;
   $spec$select$i225 = $263 ? $264 : $$3224273;
   $spec$select24$i226 = $263 ? $265 : $$3220274;
   $spec$select25$i227 = $263 ? $266 : $$3216275;
   $267 = $spec$select25$i227 >> 1;
   $268 = $spec$select$i225 >> 31;
   $269 = (($267) + ($268))|0;
   $270 = $269 ^ $268;
   $271 = (($270) + ($spec$select$i225))|0;
   $272 = (($271|0) / ($spec$select25$i227|0))&-1;
   $273 = HEAP32[$52>>2]|0;
   $274 = (($273) + ($272))|0;
   $275 = $spec$select24$i226 >> 31;
   $276 = (($267) + ($275))|0;
   $277 = $276 ^ $275;
   $278 = (($277) + ($spec$select24$i226))|0;
   $279 = (($278|0) / ($spec$select25$i227|0))&-1;
   $280 = HEAP32[$53>>2]|0;
   $281 = (($280) + ($279))|0;
   $$sink$i228 = $281;$$sroa$0$3 = $274;
  }
  $282 = $$sroa$0$3 >> 2;
  $283 = $$sink$i228 >> 2;
  $284 = ($283|0)<($6|0);
  $285 = $284 ? $283 : $50;
  $286 = ($285|0)>(0);
  $287 = $286 ? $285 : 0;
  $288 = Math_imul($287, $5)|0;
  $289 = ($282|0)<($5|0);
  $290 = $289 ? $282 : $51;
  $291 = ($290|0)>(0);
  $292 = $291 ? $290 : 0;
  $293 = (($288) + ($292))|0;
  $294 = (($4) + ($293)|0);
  $295 = HEAP8[$294>>0]|0;
  $296 = ($295<<24>>24)!=(0);
  $297 = $296&1;
  $298 = $297 << $$5276;
  $299 = $298 | $300;
  $301 = (($$3224273) + ($255))|0;
  $302 = (($$3220274) + ($256))|0;
  $303 = (($$3216275) + ($257))|0;
  $304 = (($$5276) + 1)|0;
  $exitcond304 = ($304|0)==(15);
  if ($exitcond304) {
   break;
  } else {
   $$3216275 = $303;$$3220274 = $302;$$3224273 = $301;$$5276 = $304;$300 = $299;
  }
 }
 HEAP32[$233>>2] = $299;
 $305 = ($160|0)!=($299|0);
 $306 = $305&1;
 $307 = 2 << $306;
 $308 = ($97|0)==($227|0);
 $309 = $308 ? 2 : 1;
 $310 = ($307|0)>(0);
 if (!($310)) {
  $362 = -1;
  STACKTOP = sp;return ($362|0);
 }
 $$0211266 = 0;$$2207268 = 0;
 while(1) {
  $311 = $$2207268 & 1;
  $312 = (($7) + ($311<<2)|0);
  $313 = HEAP32[$312>>2]|0;
  $314 = $$2207268 >>> 1;
  $315 = (($8) + ($314<<2)|0);
  $316 = HEAP32[$315>>2]|0;
  $317 = $316 | $313;
  $318 = $317 ^ 21522;
  HEAP32[$12>>2] = $318;
  $319 = (_bch15_5_correct($12)|0);
  $320 = HEAP32[$12>>2]|0;
  $321 = $320 >>> 10;
  HEAP32[$12>>2] = $321;
  $322 = ($319|0)<(0);
  $spec$select = $322 ? 4 : $319;
  $323 = ($$0211266|0)>(0);
  L40: do {
   if ($323) {
    $$0260 = 0;$328 = $9;
    while(1) {
     $327 = HEAP32[$328>>2]|0;
     $329 = ($327|0)==($321|0);
     if ($329) {
      break;
     }
     $336 = (($$0260) + 1)|0;
     $337 = ($336|0)<($$0211266|0);
     $338 = (($9) + ($336<<2)|0);
     if ($337) {
      $$0260 = $336;$328 = $338;
     } else {
      $$0$lcssa = $336;$$lcssa248 = $338;
      label = 29;
      break L40;
     }
    }
    $330 = (($10) + ($$0260<<2)|0);
    $331 = HEAP32[$330>>2]|0;
    $332 = (($331) + 1)|0;
    HEAP32[$330>>2] = $332;
    $333 = (($11) + ($$0260<<2)|0);
    $334 = HEAP32[$333>>2]|0;
    $335 = ($spec$select|0)<($334|0);
    if ($335) {
     HEAP32[$333>>2] = $spec$select;
     $$1212 = $$0211266;
    } else {
     $$1212 = $$0211266;
    }
   } else {
    $$0$lcssa = 0;$$lcssa248 = $9;
    label = 29;
   }
  } while(0);
  if ((label|0) == 29) {
   label = 0;
   HEAP32[$$lcssa248>>2] = $321;
   $324 = (($10) + ($$0$lcssa<<2)|0);
   HEAP32[$324>>2] = 1;
   $325 = (($11) + ($$0$lcssa<<2)|0);
   HEAP32[$325>>2] = $spec$select;
   $326 = (($$0211266) + 1)|0;
   $$1212 = $326;
  }
  $339 = (($$2207268) + ($309))|0;
  $340 = ($339|0)<($307|0);
  if ($340) {
   $$0211266 = $$1212;$$2207268 = $339;
  } else {
   break;
  }
 }
 $$pre = HEAP32[$11>>2]|0;
 $341 = ($$1212|0)>(1);
 if ($341) {
  $$0209255 = 0;$$3208256 = 1;$343 = $$pre;
  while(1) {
   $342 = ($343|0)>(3);
   if ($342) {
    $344 = (($11) + ($$3208256<<2)|0);
    $345 = HEAP32[$344>>2]|0;
    $346 = ($345|0)<(4);
    if ($346) {
     label = 42;
    } else {
     label = 39;
    }
   } else {
    label = 39;
   }
   if ((label|0) == 39) {
    label = 0;
    $347 = (($10) + ($$3208256<<2)|0);
    $348 = HEAP32[$347>>2]|0;
    $349 = (($10) + ($$0209255<<2)|0);
    $350 = HEAP32[$349>>2]|0;
    $351 = ($348|0)>($350|0);
    if ($351) {
     label = 42;
    } else {
     $352 = ($348|0)==($350|0);
     if ($352) {
      $353 = (($11) + ($$3208256<<2)|0);
      $354 = HEAP32[$353>>2]|0;
      $355 = ($354|0)<($343|0);
      if ($355) {
       label = 42;
      } else {
       $$1210 = $$0209255;
      }
     } else {
      $$1210 = $$0209255;
     }
    }
   }
   if ((label|0) == 42) {
    label = 0;
    $$1210 = $$3208256;
   }
   $356 = (($$3208256) + 1)|0;
   $357 = (($11) + ($$1210<<2)|0);
   $358 = HEAP32[$357>>2]|0;
   $exitcond = ($356|0)==($$1212|0);
   if ($exitcond) {
    $$0209$lcssa = $$1210;$$lcssa = $358;
    break;
   } else {
    $$0209255 = $$1210;$$3208256 = $356;$343 = $358;
   }
  }
 } else {
  $$0209$lcssa = 0;$$lcssa = $$pre;
 }
 $359 = ($$lcssa|0)<(4);
 if (!($359)) {
  $362 = -1;
  STACKTOP = sp;return ($362|0);
 }
 $360 = (($9) + ($$0209$lcssa<<2)|0);
 $361 = HEAP32[$360>>2]|0;
 $362 = $361;
 STACKTOP = sp;return ($362|0);
}
function _qr_code_decode($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i291$i = 0, $$0$i294466$i = 0, $$0$i306$i = 0, $$0$i309453$i = 0, $$0$i318438$i = 0, $$0$i321434$i = 0, $$0$i327426$i = 0, $$0$i330422$i = 0, $$0$i333418$i = 0, $$0$i336414$i = 0, $$0111132$us$i = 0, $$0112131$us$i = 0, $$0113130$us$i = 0, $$0114148$i = 0, $$0115146$i = 0, $$0116137$us$i = 0, $$0117136$us$i = 0, $$0118135$us$i = 0;
 var $$0119134$us$i = 0, $$0120142$i = 0, $$0121141$i = 0, $$0124166 = 0, $$0124166$us = 0, $$0124166$us167 = 0, $$0125$lcssa = 0, $$0125165 = 0, $$0125165$us = 0, $$0125165$us168 = 0, $$0125189$i = 0, $$0126188$i = 0, $$0127171 = 0, $$0127187$i = 0, $$0128186$i = 0, $$0129212$i = 0, $$0133$us$i = 0, $$0133211$i = 0, $$0136210$i = 0, $$0144209$i = 0;
 var $$0151208$i = 0, $$0156207$i$i = 0, $$0159196$us$i$i = 0, $$0160192$i$i = 0, $$0161188$i$i = 0, $$0162187$i$i = 0, $$0178$i = 0, $$02022$us$i387$i = 0, $$02022$us$i411$i = 0, $$021$us$i420$i = 0, $$0241506$i = 0, $$0242$i = 0, $$0243513$i = 0, $$0244$lcssa$i = 0, $$0244$lcssa$ph$i = 0, $$0244541$i = 0, $$0255511$i = 0, $$0256540$i = 0, $$0269$lcssa$i = 0, $$0269520$i = 0;
 var $$0270$lcssa$i = 0, $$0270529$i = 0, $$037$i$i = 0, $$037$i290$i = 0, $$037$i293$i = 0, $$037$i296$i = 0, $$037$i299$i = 0, $$037$i302$i = 0, $$037$i305$i = 0, $$037$i308$i = 0, $$037$i311$i = 0, $$037$i314$i = 0, $$037$i317$i = 0, $$037$i320$i = 0, $$037$i323$i = 0, $$037$i326$i = 0, $$037$i329$i = 0, $$037$i332$i = 0, $$037$i335$i = 0, $$0383457$i = 0;
 var $$0384458$i = 0, $$0385$i = 0, $$0465$i = 0, $$09$i = 0, $$10$i = 0, $$10$i140145 = 0, $$10182$us$i$i = 0, $$11$i = 0, $$1128164 = 0, $$1128164$us = 0, $$1128164$us169 = 0, $$1132200$i = 0, $$1134177$i = 0, $$1137176$i = 0, $$1145175$i = 0, $$1152174$i = 0, $$1158201$us$i$i = 0, $$1163191$i$i = 0, $$1166195$us$i$i = 0, $$1245$lcssa$i = 0;
 var $$1245530$i = 0, $$1257$i = 0, $$2135173$i = 0, $$2138172$i = 0, $$2146171$i = 0, $$2152227$us$i$i = 0, $$2153170$i = 0, $$2155215$us$i$i = 0, $$2164200$us$i$i = 0, $$2183$us$i$i = 0, $$3 = 0, $$3$i = 0, $$3139$i = 0, $$3206$i$i = 0, $$4140198$i = 0, $$4148$i = 0, $$4155$i = 0, $$4169214$us$i$i = 0, $$4199$i = 0, $$4219$us$i$i = 0;
 var $$4248$lcssa$i = 0, $$4248521$i = 0, $$5$lcssa$i = 0, $$5141$lcssa$i = 0, $$5141184$i = 0, $$5149$i = 0, $$5156196$i = 0, $$5185$i = 0, $$5231$us$i$i = 0, $$6$i = 0, $$6142$i = 0, $$6150197$i = 0, $$6157$lcssa$i = 0, $$6157182$i = 0, $$6184$us$i$i = 0, $$7$lcssa$i = 0, $$7183$i = 0, $$7226$us$i$i = 0, $$7251512$i = 0, $$8159$i = 0;
 var $$9$i = 0, $$9253505$i = 0, $$idx$val$us$i = 0, $$in$i = 0, $$in$i137 = 0, $$in216$i = 0, $$in217$i = 0, $$in549$i = 0, $$in550$i = 0, $$lcssa$i = 0, $$off$i = 0, $$off272$i = 0, $$pn$i = 0, $$pre = 0, $$pre$i134 = 0, $$pre$i142 = 0, $$pre$i424$i = 0, $$pre$phi564$iZ2D = 0, $$pre$phi570$iZ2D = 0, $$pre$phi574$iZ2D = 0;
 var $$pre$phi578$iZ2D = 0, $$pre11$i = 0, $$pre559$i = 0, $$pre560$i = 0, $$pre561$i = 0, $$pre562$i = 0, $$pre563$i = 0, $$pre567$i = 0, $$pre569$i = 0, $$pre571$i = 0, $$pre573$i = 0, $$pre575$i = 0, $$pre577$i = 0, $$sink$i$i$i = 0, $$sink$i$i434$i = 0, $$sink$i$i439$i = 0, $$sink$i$us$i = 0, $$sroa$0$0$i = 0, $$sroa$0$0$us$i = 0, $$sroa$0443$0$i = 0;
 var $$sroa$0451$0$i = 0, $$sroa$20$0538$i = 0, $$sroa$20$10436$i = 0, $$sroa$20$11440$i = 0, $$sroa$20$1412$i = 0, $$sroa$20$14451$i = 0, $$sroa$20$15509$i = 0, $$sroa$20$16$i = 0, $$sroa$20$21$i = 0, $$sroa$20$23464$i = 0, $$sroa$20$2416$i = 0, $$sroa$20$24503$i = 0, $$sroa$20$25$i = 0, $$sroa$20$27$i = 0, $$sroa$20$28$i = 0, $$sroa$20$3$lcssa$i = 0, $$sroa$20$3527$i = 0, $$sroa$20$4420$i = 0, $$sroa$20$5424$i = 0, $$sroa$20$6428$i = 0;
 var $$sroa$20$8432$i = 0, $$sroa$20$9$lcssa$i = 0, $$sroa$20$9518$i = 0, $$sroa$77$0539$i = 0, $$sroa$77$10437$i = 0, $$sroa$77$11441$i = 0, $$sroa$77$1413$i = 0, $$sroa$77$14452$i = 0, $$sroa$77$15510$i = 0, $$sroa$77$16$i = 0, $$sroa$77$23465$i = 0, $$sroa$77$2417$i = 0, $$sroa$77$24504$i = 0, $$sroa$77$25$i = 0, $$sroa$77$28$i = 0, $$sroa$77$3$lcssa$i = 0, $$sroa$77$3528$i = 0, $$sroa$77$4421$i = 0, $$sroa$77$5425$i = 0, $$sroa$77$6429$i = 0;
 var $$sroa$77$8433$i = 0, $$sroa$77$9$lcssa$i = 0, $$sroa$77$9519$i = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0;
 var $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0;
 var $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0;
 var $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0;
 var $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0;
 var $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0;
 var $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0;
 var $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0;
 var $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0;
 var $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0;
 var $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0;
 var $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0;
 var $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0;
 var $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0;
 var $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0;
 var $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0;
 var $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0;
 var $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0;
 var $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0;
 var $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0;
 var $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0;
 var $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0;
 var $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0;
 var $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0;
 var $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0;
 var $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0;
 var $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0;
 var $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0;
 var $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0;
 var $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0;
 var $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0;
 var $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0;
 var $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0;
 var $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0;
 var $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0;
 var $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0;
 var $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0;
 var $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0;
 var $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0;
 var $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0;
 var $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0;
 var $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0;
 var $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0;
 var $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0;
 var $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0;
 var $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0;
 var $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0;
 var $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0;
 var $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0;
 var $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0;
 var $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0;
 var $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0;
 var $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0;
 var $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0;
 var $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0;
 var $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0;
 var $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0;
 var $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0;
 var $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0;
 var $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0;
 var $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0;
 var $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0;
 var $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0;
 var $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0;
 var $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0;
 var $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0;
 var $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0;
 var $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0;
 var $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0;
 var $997 = 0, $998 = 0, $999 = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i$i = 0, $exitcond$i132 = 0, $exitcond158$i = 0, $exitcond197 = 0, $exitcond198 = 0, $exitcond251$i$i = 0, $exitcond252$i$i = 0, $exitcond253$i$i = 0, $exitcond255$i$i = 0, $exitcond258$i$i = 0, $exitcond261$i$i = 0, $exitcond475$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i139 = 0;
 var $or$cond174 = 0, $or$cond275$i = 0, $or$cond3$i = 0, $or$cond3$us = 0, $or$cond479$i = 0, $or$cond481$i = 0, $or$cond483$i = 0, $or$cond485$i = 0, $or$cond487$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $phitmp$i = 0, $spec$select$i = 0, $spec$select$i$i$i = 0, $spec$select$i$i431$i = 0, $spec$select$i$i436$i = 0, $spec$select$i$us$i = 0, $spec$select$i138 = 0, $spec$select160$i = 0, $spec$select161$i = 0;
 var $spec$select162$i = 0, $spec$select163$i = 0, $spec$select164$i = 0, $spec$select165$i = 0, $spec$select166$i = 0, $spec$select167$i = 0, $spec$select168$i = 0, $spec$select169$i = 0, $spec$select24$i$i$i = 0, $spec$select24$i$i432$i = 0, $spec$select24$i$i437$i = 0, $spec$select24$i$us$i = 0, $spec$select25$i$i$i = 0, $spec$select25$i$i433$i = 0, $spec$select25$i$i438$i = 0, $spec$select25$i$us$i = 0, $trunc$i = 0, $trunc$i$clear = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $10 = sp + 88|0;
 $11 = sp;
 $12 = sp + 32|0;
 $13 = $5 << 2;
 $14 = (($13) + 17)|0;
 $15 = (($5|0) / 7)&-1;
 $16 = (($15) + 2)|0;
 $17 = (($13) + 16)|0;
 $18 = ((($0)) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($0)) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($0)) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($0)) + 28|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($0)) + 32|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($0)) + 36|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($0)) + 40|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($0)) + 44|0);
 $33 = HEAP32[$32>>2]|0;
 _qr_hom_cell_init($10,0,0,$17,0,0,$17,$17,$17,$19,$21,$23,$25,$27,$29,$31,$33);
 $34 = (($15) + 1)|0;
 $35 = ((($12)) + 52|0);
 HEAP32[$35>>2] = $34;
 $36 = ($34*52)|0;
 $37 = Math_imul($36, $34)|0;
 $38 = (_malloc($37)|0);
 HEAP32[$12>>2] = $38;
 $39 = ($5|0)<(7);
 if (!($39)) {
  $$0465$i = 1;$41 = $38;
  while(1) {
   $40 = (($41) + (($34*52)|0)|0);
   $42 = (($12) + ($$0465$i<<2)|0);
   HEAP32[$42>>2] = $40;
   $43 = (($$0465$i) + 1)|0;
   $exitcond475$i = ($43|0)==($34|0);
   if ($exitcond475$i) {
    break;
   } else {
    $$0465$i = $43;$41 = $40;
   }
  }
 }
 $44 = (($13) + 48)|0;
 $45 = $44 >> 5;
 $46 = $45 << 2;
 $47 = (_calloc($14,$46)|0);
 $48 = ((($12)) + 24|0);
 HEAP32[$48>>2] = $47;
 HEAP32[$47>>2] = 511;
 $49 = (($47) + ($45<<2)|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $50 | 511;
 HEAP32[$49>>2] = $51;
 $52 = $45 << 1;
 $53 = (($47) + ($52<<2)|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $54 | 511;
 HEAP32[$53>>2] = $55;
 $56 = ($45*3)|0;
 $57 = (($47) + ($56<<2)|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $58 | 511;
 HEAP32[$57>>2] = $59;
 $60 = $45 << 2;
 $61 = (($47) + ($60<<2)|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $62 | 511;
 HEAP32[$61>>2] = $63;
 $64 = ($45*5)|0;
 $65 = (($47) + ($64<<2)|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $66 | 511;
 HEAP32[$65>>2] = $67;
 $68 = ($45*6)|0;
 $69 = (($47) + ($68<<2)|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $70 | 511;
 HEAP32[$69>>2] = $71;
 $72 = ($45*7)|0;
 $73 = (($47) + ($72<<2)|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $74 | 511;
 HEAP32[$73>>2] = $75;
 $76 = $45 << 3;
 $77 = (($47) + ($76<<2)|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = $78 | 511;
 HEAP32[$77>>2] = $79;
 $80 = (($13) + 9)|0;
 $81 = $80 & 29;
 $82 = 1 << $81;
 $83 = $80 >> 5;
 $84 = (($13) + 10)|0;
 $85 = $84 & 30;
 $86 = 1 << $85;
 $87 = $84 >> 5;
 $88 = (($13) + 11)|0;
 $89 = $88 & 31;
 $90 = 1 << $89;
 $91 = $88 >> 5;
 $92 = (($13) + 12)|0;
 $93 = $92 & 28;
 $94 = 1 << $93;
 $95 = $92 >> 5;
 $96 = (($13) + 13)|0;
 $97 = $96 & 29;
 $98 = 1 << $97;
 $99 = $96 >> 5;
 $100 = (($13) + 14)|0;
 $101 = $100 & 30;
 $102 = 1 << $101;
 $103 = $100 >> 5;
 $104 = (($13) + 15)|0;
 $105 = $104 & 31;
 $106 = 1 << $105;
 $107 = $104 >> 5;
 $108 = $17 & 28;
 $109 = 1 << $108;
 $110 = $17 >> 5;
 $$02022$us$i387$i = 0;
 while(1) {
  $111 = Math_imul($$02022$us$i387$i, $45)|0;
  $112 = (($111) + ($83))|0;
  $113 = (($47) + ($112<<2)|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = $114 | $82;
  HEAP32[$113>>2] = $115;
  $116 = (($111) + ($87))|0;
  $117 = (($47) + ($116<<2)|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = $118 | $86;
  HEAP32[$117>>2] = $119;
  $120 = (($111) + ($91))|0;
  $121 = (($47) + ($120<<2)|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = $122 | $90;
  HEAP32[$121>>2] = $123;
  $124 = (($111) + ($95))|0;
  $125 = (($47) + ($124<<2)|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = $126 | $94;
  HEAP32[$125>>2] = $127;
  $128 = (($111) + ($99))|0;
  $129 = (($47) + ($128<<2)|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = $130 | $98;
  HEAP32[$129>>2] = $131;
  $132 = (($111) + ($103))|0;
  $133 = (($47) + ($132<<2)|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = $134 | $102;
  HEAP32[$133>>2] = $135;
  $136 = (($111) + ($107))|0;
  $137 = (($47) + ($136<<2)|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = $138 | $106;
  HEAP32[$137>>2] = $139;
  $140 = (($111) + ($110))|0;
  $141 = (($47) + ($140<<2)|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = $142 | $109;
  HEAP32[$141>>2] = $143;
  $144 = (($$02022$us$i387$i) + 1)|0;
  $exitcond$i = ($144|0)==(9);
  if ($exitcond$i) {
   break;
  } else {
   $$02022$us$i387$i = $144;
  }
 }
 $145 = Math_imul($80, $45)|0;
 $146 = (($47) + ($145<<2)|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = $147 | 511;
 HEAP32[$146>>2] = $148;
 $149 = (($13) + 10)|0;
 $150 = Math_imul($149, $45)|0;
 $151 = (($47) + ($150<<2)|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = $152 | 511;
 HEAP32[$151>>2] = $153;
 $154 = (($13) + 11)|0;
 $155 = Math_imul($154, $45)|0;
 $156 = (($47) + ($155<<2)|0);
 $157 = HEAP32[$156>>2]|0;
 $158 = $157 | 511;
 HEAP32[$156>>2] = $158;
 $159 = (($13) + 12)|0;
 $160 = Math_imul($159, $45)|0;
 $161 = (($47) + ($160<<2)|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = $162 | 511;
 HEAP32[$161>>2] = $163;
 $164 = (($13) + 13)|0;
 $165 = Math_imul($164, $45)|0;
 $166 = (($47) + ($165<<2)|0);
 $167 = HEAP32[$166>>2]|0;
 $168 = $167 | 511;
 HEAP32[$166>>2] = $168;
 $169 = (($13) + 14)|0;
 $170 = Math_imul($169, $45)|0;
 $171 = (($47) + ($170<<2)|0);
 $172 = HEAP32[$171>>2]|0;
 $173 = $172 | 511;
 HEAP32[$171>>2] = $173;
 $174 = (($13) + 15)|0;
 $175 = Math_imul($174, $45)|0;
 $176 = (($47) + ($175<<2)|0);
 $177 = HEAP32[$176>>2]|0;
 $178 = $177 | 511;
 HEAP32[$176>>2] = $178;
 $179 = (($13) + 16)|0;
 $180 = Math_imul($179, $45)|0;
 $181 = (($47) + ($180<<2)|0);
 $182 = HEAP32[$181>>2]|0;
 $183 = $182 | 511;
 HEAP32[$181>>2] = $183;
 $184 = ($5|0)>(6);
 if ($184) {
  $185 = (($13) + 6)|0;
  $186 = $185 & 30;
  $187 = 1 << $186;
  $188 = $185 >> 5;
  $189 = (($47) + ($188<<2)|0);
  $190 = HEAP32[$189>>2]|0;
  $191 = $190 | $187;
  HEAP32[$189>>2] = $191;
  $192 = (($13) + 7)|0;
  $193 = $192 & 31;
  $194 = 1 << $193;
  $195 = $192 >> 5;
  $196 = (($47) + ($195<<2)|0);
  $197 = HEAP32[$196>>2]|0;
  $198 = $197 | $194;
  HEAP32[$196>>2] = $198;
  $199 = (($13) + 8)|0;
  $200 = $199 & 28;
  $201 = 1 << $200;
  $202 = $199 >> 5;
  $203 = (($47) + ($202<<2)|0);
  $204 = HEAP32[$203>>2]|0;
  $205 = $204 | $201;
  HEAP32[$203>>2] = $205;
  $206 = (($188) + ($45))|0;
  $207 = (($47) + ($206<<2)|0);
  $208 = HEAP32[$207>>2]|0;
  $209 = $208 | $187;
  HEAP32[$207>>2] = $209;
  $210 = (($195) + ($45))|0;
  $211 = (($47) + ($210<<2)|0);
  $212 = HEAP32[$211>>2]|0;
  $213 = $212 | $194;
  HEAP32[$211>>2] = $213;
  $214 = (($202) + ($45))|0;
  $215 = (($47) + ($214<<2)|0);
  $216 = HEAP32[$215>>2]|0;
  $217 = $216 | $201;
  HEAP32[$215>>2] = $217;
  $218 = $45 << 1;
  $219 = (($218) + ($188))|0;
  $220 = (($47) + ($219<<2)|0);
  $221 = HEAP32[$220>>2]|0;
  $222 = $221 | $187;
  HEAP32[$220>>2] = $222;
  $223 = (($218) + ($195))|0;
  $224 = (($47) + ($223<<2)|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = $225 | $194;
  HEAP32[$224>>2] = $226;
  $227 = (($218) + ($202))|0;
  $228 = (($47) + ($227<<2)|0);
  $229 = HEAP32[$228>>2]|0;
  $230 = $229 | $201;
  HEAP32[$228>>2] = $230;
  $231 = (($56) + ($188))|0;
  $232 = (($47) + ($231<<2)|0);
  $233 = HEAP32[$232>>2]|0;
  $234 = $233 | $187;
  HEAP32[$232>>2] = $234;
  $235 = (($56) + ($195))|0;
  $236 = (($47) + ($235<<2)|0);
  $237 = HEAP32[$236>>2]|0;
  $238 = $237 | $194;
  HEAP32[$236>>2] = $238;
  $239 = (($56) + ($202))|0;
  $240 = (($47) + ($239<<2)|0);
  $241 = HEAP32[$240>>2]|0;
  $242 = $241 | $201;
  HEAP32[$240>>2] = $242;
  $243 = (($46) + ($188))|0;
  $244 = (($47) + ($243<<2)|0);
  $245 = HEAP32[$244>>2]|0;
  $246 = $245 | $187;
  HEAP32[$244>>2] = $246;
  $247 = (($46) + ($195))|0;
  $248 = (($47) + ($247<<2)|0);
  $249 = HEAP32[$248>>2]|0;
  $250 = $249 | $194;
  HEAP32[$248>>2] = $250;
  $251 = (($46) + ($202))|0;
  $252 = (($47) + ($251<<2)|0);
  $253 = HEAP32[$252>>2]|0;
  $254 = $253 | $201;
  HEAP32[$252>>2] = $254;
  $255 = (($64) + ($188))|0;
  $256 = (($47) + ($255<<2)|0);
  $257 = HEAP32[$256>>2]|0;
  $258 = $257 | $187;
  HEAP32[$256>>2] = $258;
  $259 = (($64) + ($195))|0;
  $260 = (($47) + ($259<<2)|0);
  $261 = HEAP32[$260>>2]|0;
  $262 = $261 | $194;
  HEAP32[$260>>2] = $262;
  $263 = (($64) + ($202))|0;
  $264 = (($47) + ($263<<2)|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = $265 | $201;
  HEAP32[$264>>2] = $266;
  $267 = Math_imul($45, $185)|0;
  $268 = (($47) + ($267<<2)|0);
  $269 = HEAP32[$268>>2]|0;
  $270 = $269 | 63;
  HEAP32[$268>>2] = $270;
  $271 = Math_imul($45, $192)|0;
  $272 = (($47) + ($271<<2)|0);
  $273 = HEAP32[$272>>2]|0;
  $274 = $273 | 63;
  HEAP32[$272>>2] = $274;
  $275 = Math_imul($45, $199)|0;
  $276 = (($47) + ($275<<2)|0);
  $277 = HEAP32[$276>>2]|0;
  $278 = $277 | 63;
  HEAP32[$276>>2] = $278;
 }
 $279 = ($13|0)>(0);
 if ($279) {
  $$02022$us$i411$i = 9;
  while(1) {
   $280 = Math_imul($$02022$us$i411$i, $45)|0;
   $281 = (($47) + ($280<<2)|0);
   $282 = HEAP32[$281>>2]|0;
   $283 = $282 | 64;
   HEAP32[$281>>2] = $283;
   $284 = (($$02022$us$i411$i) + 1)|0;
   $285 = ($284|0)<($80|0);
   if ($285) {
    $$02022$us$i411$i = $284;
   } else {
    break;
   }
  }
  $$021$us$i420$i = 9;
  while(1) {
   $286 = $$021$us$i420$i & 31;
   $287 = 1 << $286;
   $288 = $$021$us$i420$i >>> 5;
   $289 = (($288) + ($68))|0;
   $290 = (($47) + ($289<<2)|0);
   $291 = HEAP32[$290>>2]|0;
   $292 = $287 | $291;
   HEAP32[$290>>2] = $292;
   $293 = (($$021$us$i420$i) + 1)|0;
   $294 = ($293|0)<($80|0);
   if ($294) {
    $$021$us$i420$i = $293;
   } else {
    break;
   }
  }
 }
 $295 = ($5|0)<(2);
 if ($295) {
  $296 = HEAP32[$12>>2]|0;
  dest=$296; src=$10; stop=dest+52|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $789 = $296;
 } else {
  $297 = $16 << 3;
  $298 = Math_imul($297, $16)|0;
  $299 = (_malloc($298)|0);
  $300 = (_malloc($298)|0);
  HEAP32[$11>>2] = 6;
  $301 = (($11) + ($34<<2)|0);
  HEAP32[$301>>2] = $84;
  if ($184) {
   $302 = (($5) + -7)|0;
   $303 = (48 + ($302)|0);
   $304 = HEAP8[$303>>0]|0;
   $305 = $304&255;
   $307 = $84;$309 = $15;
   while(1) {
    $306 = (($307) - ($305))|0;
    $308 = (($11) + ($309<<2)|0);
    HEAP32[$308>>2] = $306;
    $310 = (($309) + -1)|0;
    $311 = ($309|0)>(1);
    if ($311) {
     $307 = $306;$309 = $310;
    } else {
     break;
    }
   }
  }
  HEAP32[$299>>2] = 3;
  $312 = ((($299)) + 4|0);
  HEAP32[$312>>2] = 3;
  $313 = HEAP32[$2>>2]|0;
  HEAP32[$300>>2] = $313;
  $314 = ((($2)) + 4|0);
  $315 = HEAP32[$314>>2]|0;
  $316 = ((($300)) + 4|0);
  HEAP32[$316>>2] = $315;
  $317 = (($299) + ($34<<3)|0);
  HEAP32[$317>>2] = $96;
  $318 = (((($299) + ($34<<3)|0)) + 4|0);
  HEAP32[$318>>2] = 3;
  $319 = HEAP32[$3>>2]|0;
  $320 = (($300) + ($34<<3)|0);
  HEAP32[$320>>2] = $319;
  $321 = ((($3)) + 4|0);
  $322 = HEAP32[$321>>2]|0;
  $323 = (((($300) + ($34<<3)|0)) + 4|0);
  HEAP32[$323>>2] = $322;
  $324 = Math_imul($34, $16)|0;
  $325 = (($299) + ($324<<3)|0);
  HEAP32[$325>>2] = 3;
  $326 = (((($299) + ($324<<3)|0)) + 4|0);
  HEAP32[$326>>2] = $96;
  $327 = HEAP32[$4>>2]|0;
  $328 = (($300) + ($324<<3)|0);
  HEAP32[$328>>2] = $327;
  $329 = ((($4)) + 4|0);
  $330 = HEAP32[$329>>2]|0;
  $331 = (((($300) + ($324<<3)|0)) + 4|0);
  HEAP32[$331>>2] = $330;
  $332 = $16 << 1;
  $333 = (($332) + -1)|0;
  $334 = ($5|0)>(-7);
  if ($334) {
   $$pre$i424$i = HEAP32[$48>>2]|0;
   $$0384458$i = 1;
   while(1) {
    $335 = ($$0384458$i|0)>($34|0);
    $336 = $335 ? $34 : $$0384458$i;
    $337 = ($$0384458$i|0)==($34|0);
    $338 = $337&1;
    $339 = (($336) - ($338))|0;
    $340 = (($$0384458$i) - ($34))|0;
    $341 = ($340|0)>(0);
    $342 = $341 ? $340 : 0;
    $343 = (($342) + ($338))|0;
    $344 = ($343|0)>($339|0);
    if (!($344)) {
     $$0383457$i = $343;
     while(1) {
      $345 = (($343) - ($$0383457$i))|0;
      $346 = (($345) + ($339))|0;
      $347 = Math_imul($346, $16)|0;
      $348 = (($347) + ($$0383457$i))|0;
      $349 = (($11) + ($$0383457$i<<2)|0);
      $350 = HEAP32[$349>>2]|0;
      $351 = (($11) + ($346<<2)|0);
      $352 = HEAP32[$351>>2]|0;
      $353 = (($299) + ($348<<3)|0);
      HEAP32[$353>>2] = $350;
      $354 = (((($299) + ($348<<3)|0)) + 4|0);
      HEAP32[$354>>2] = $352;
      $355 = (($350) + -2)|0;
      $356 = (($352) + -2)|0;
      $357 = Math_imul($355, $45)|0;
      $358 = $356 & 31;
      $359 = 1 << $358;
      $360 = $356 >> 5;
      $361 = (($360) + ($357))|0;
      $362 = (($$pre$i424$i) + ($361<<2)|0);
      $363 = HEAP32[$362>>2]|0;
      $364 = $363 | $359;
      HEAP32[$362>>2] = $364;
      $365 = (($352) + -1)|0;
      $366 = $365 & 31;
      $367 = 1 << $366;
      $368 = $365 >> 5;
      $369 = (($368) + ($357))|0;
      $370 = (($$pre$i424$i) + ($369<<2)|0);
      $371 = HEAP32[$370>>2]|0;
      $372 = $371 | $367;
      HEAP32[$370>>2] = $372;
      $373 = $352 & 31;
      $374 = 1 << $373;
      $375 = $352 >> 5;
      $376 = (($375) + ($357))|0;
      $377 = (($$pre$i424$i) + ($376<<2)|0);
      $378 = HEAP32[$377>>2]|0;
      $379 = $378 | $374;
      HEAP32[$377>>2] = $379;
      $380 = (($352) + 1)|0;
      $381 = $380 & 31;
      $382 = 1 << $381;
      $383 = $380 >> 5;
      $384 = (($383) + ($357))|0;
      $385 = (($$pre$i424$i) + ($384<<2)|0);
      $386 = HEAP32[$385>>2]|0;
      $387 = $386 | $382;
      HEAP32[$385>>2] = $387;
      $388 = (($352) + 2)|0;
      $389 = $388 & 31;
      $390 = 1 << $389;
      $391 = $388 >> 5;
      $392 = (($391) + ($357))|0;
      $393 = (($$pre$i424$i) + ($392<<2)|0);
      $394 = HEAP32[$393>>2]|0;
      $395 = $394 | $390;
      HEAP32[$393>>2] = $395;
      $396 = (($350) + -1)|0;
      $397 = Math_imul($396, $45)|0;
      $398 = (($360) + ($397))|0;
      $399 = (($$pre$i424$i) + ($398<<2)|0);
      $400 = HEAP32[$399>>2]|0;
      $401 = $400 | $359;
      HEAP32[$399>>2] = $401;
      $402 = (($368) + ($397))|0;
      $403 = (($$pre$i424$i) + ($402<<2)|0);
      $404 = HEAP32[$403>>2]|0;
      $405 = $404 | $367;
      HEAP32[$403>>2] = $405;
      $406 = (($375) + ($397))|0;
      $407 = (($$pre$i424$i) + ($406<<2)|0);
      $408 = HEAP32[$407>>2]|0;
      $409 = $408 | $374;
      HEAP32[$407>>2] = $409;
      $410 = (($383) + ($397))|0;
      $411 = (($$pre$i424$i) + ($410<<2)|0);
      $412 = HEAP32[$411>>2]|0;
      $413 = $412 | $382;
      HEAP32[$411>>2] = $413;
      $414 = (($391) + ($397))|0;
      $415 = (($$pre$i424$i) + ($414<<2)|0);
      $416 = HEAP32[$415>>2]|0;
      $417 = $416 | $390;
      HEAP32[$415>>2] = $417;
      $418 = Math_imul($350, $45)|0;
      $419 = (($360) + ($418))|0;
      $420 = (($$pre$i424$i) + ($419<<2)|0);
      $421 = HEAP32[$420>>2]|0;
      $422 = $421 | $359;
      HEAP32[$420>>2] = $422;
      $423 = (($368) + ($418))|0;
      $424 = (($$pre$i424$i) + ($423<<2)|0);
      $425 = HEAP32[$424>>2]|0;
      $426 = $425 | $367;
      HEAP32[$424>>2] = $426;
      $427 = (($375) + ($418))|0;
      $428 = (($$pre$i424$i) + ($427<<2)|0);
      $429 = HEAP32[$428>>2]|0;
      $430 = $429 | $374;
      HEAP32[$428>>2] = $430;
      $431 = (($383) + ($418))|0;
      $432 = (($$pre$i424$i) + ($431<<2)|0);
      $433 = HEAP32[$432>>2]|0;
      $434 = $433 | $382;
      HEAP32[$432>>2] = $434;
      $435 = (($391) + ($418))|0;
      $436 = (($$pre$i424$i) + ($435<<2)|0);
      $437 = HEAP32[$436>>2]|0;
      $438 = $437 | $390;
      HEAP32[$436>>2] = $438;
      $439 = (($350) + 1)|0;
      $440 = Math_imul($439, $45)|0;
      $441 = (($360) + ($440))|0;
      $442 = (($$pre$i424$i) + ($441<<2)|0);
      $443 = HEAP32[$442>>2]|0;
      $444 = $443 | $359;
      HEAP32[$442>>2] = $444;
      $445 = (($368) + ($440))|0;
      $446 = (($$pre$i424$i) + ($445<<2)|0);
      $447 = HEAP32[$446>>2]|0;
      $448 = $447 | $367;
      HEAP32[$446>>2] = $448;
      $449 = (($375) + ($440))|0;
      $450 = (($$pre$i424$i) + ($449<<2)|0);
      $451 = HEAP32[$450>>2]|0;
      $452 = $451 | $374;
      HEAP32[$450>>2] = $452;
      $453 = (($383) + ($440))|0;
      $454 = (($$pre$i424$i) + ($453<<2)|0);
      $455 = HEAP32[$454>>2]|0;
      $456 = $455 | $382;
      HEAP32[$454>>2] = $456;
      $457 = (($391) + ($440))|0;
      $458 = (($$pre$i424$i) + ($457<<2)|0);
      $459 = HEAP32[$458>>2]|0;
      $460 = $459 | $390;
      HEAP32[$458>>2] = $460;
      $461 = (($350) + 2)|0;
      $462 = Math_imul($461, $45)|0;
      $463 = (($360) + ($462))|0;
      $464 = (($$pre$i424$i) + ($463<<2)|0);
      $465 = HEAP32[$464>>2]|0;
      $466 = $465 | $359;
      HEAP32[$464>>2] = $466;
      $467 = (($368) + ($462))|0;
      $468 = (($$pre$i424$i) + ($467<<2)|0);
      $469 = HEAP32[$468>>2]|0;
      $470 = $469 | $367;
      HEAP32[$468>>2] = $470;
      $471 = (($375) + ($462))|0;
      $472 = (($$pre$i424$i) + ($471<<2)|0);
      $473 = HEAP32[$472>>2]|0;
      $474 = $473 | $374;
      HEAP32[$472>>2] = $474;
      $475 = (($383) + ($462))|0;
      $476 = (($$pre$i424$i) + ($475<<2)|0);
      $477 = HEAP32[$476>>2]|0;
      $478 = $477 | $382;
      HEAP32[$476>>2] = $478;
      $479 = (($391) + ($462))|0;
      $480 = (($$pre$i424$i) + ($479<<2)|0);
      $481 = HEAP32[$480>>2]|0;
      $482 = $481 | $390;
      HEAP32[$480>>2] = $482;
      $483 = ($346|0)>(1);
      $484 = ($$0383457$i>>>0)>(1);
      $or$cond$i = $484 & $483;
      do {
       if ($or$cond$i) {
        $485 = (($346) + -2)|0;
        $486 = (($12) + ($485<<2)|0);
        $487 = HEAP32[$486>>2]|0;
        $488 = (($487) + (($$0383457$i*52)|0)|0);
        $489 = ((($488)) + -52|0);
        $490 = ((($489)) + 44|0);
        $491 = HEAP32[$490>>2]|0;
        $492 = (($350) - ($491))|0;
        $493 = ((($489)) + 48|0);
        $494 = HEAP32[$493>>2]|0;
        $495 = (($352) - ($494))|0;
        $496 = HEAP32[$489>>2]|0;
        $497 = Math_imul($496, $492)|0;
        $498 = ((($489)) + 4|0);
        $499 = HEAP32[$498>>2]|0;
        $500 = Math_imul($499, $495)|0;
        $501 = (($500) + ($497))|0;
        $502 = ((($489)) + 8|0);
        $503 = HEAP32[$502>>2]|0;
        $504 = (($501) + ($503))|0;
        $505 = ((($489)) + 12|0);
        $506 = HEAP32[$505>>2]|0;
        $507 = Math_imul($506, $492)|0;
        $508 = ((($489)) + 16|0);
        $509 = HEAP32[$508>>2]|0;
        $510 = Math_imul($509, $495)|0;
        $511 = (($510) + ($507))|0;
        $512 = ((($489)) + 20|0);
        $513 = HEAP32[$512>>2]|0;
        $514 = (($511) + ($513))|0;
        $515 = ((($489)) + 24|0);
        $516 = HEAP32[$515>>2]|0;
        $517 = Math_imul($516, $492)|0;
        $518 = ((($489)) + 28|0);
        $519 = HEAP32[$518>>2]|0;
        $520 = Math_imul($519, $495)|0;
        $521 = (($520) + ($517))|0;
        $522 = ((($489)) + 32|0);
        $523 = HEAP32[$522>>2]|0;
        $524 = (($521) + ($523))|0;
        $525 = ($524|0)==(0);
        if ($525) {
         $526 = $504 >>> 31;
         $527 = (($526) + 2147483647)|0;
         $528 = $514 >>> 31;
         $529 = (($528) + 2147483647)|0;
         $$sink$i$i439$i = $529;$$sroa$0451$0$i = $527;
        } else {
         $530 = ($524|0)<(0);
         $531 = (0 - ($504))|0;
         $532 = (0 - ($514))|0;
         $533 = (0 - ($524))|0;
         $spec$select$i$i436$i = $530 ? $531 : $504;
         $spec$select24$i$i437$i = $530 ? $532 : $514;
         $spec$select25$i$i438$i = $530 ? $533 : $524;
         $534 = $spec$select25$i$i438$i >> 1;
         $535 = $spec$select$i$i436$i >> 31;
         $536 = (($534) + ($535))|0;
         $537 = $536 ^ $535;
         $538 = (($537) + ($spec$select$i$i436$i))|0;
         $539 = (($538|0) / ($spec$select25$i$i438$i|0))&-1;
         $540 = ((($489)) + 36|0);
         $541 = HEAP32[$540>>2]|0;
         $542 = (($541) + ($539))|0;
         $543 = $spec$select24$i$i437$i >> 31;
         $544 = (($534) + ($543))|0;
         $545 = $544 ^ $543;
         $546 = (($545) + ($spec$select24$i$i437$i))|0;
         $547 = (($546|0) / ($spec$select25$i$i438$i|0))&-1;
         $548 = ((($489)) + 40|0);
         $549 = HEAP32[$548>>2]|0;
         $550 = (($549) + ($547))|0;
         $$sink$i$i439$i = $550;$$sroa$0451$0$i = $542;
        }
        $551 = ((($488)) + -104|0);
        $552 = ((($551)) + 44|0);
        $553 = HEAP32[$552>>2]|0;
        $554 = (($350) - ($553))|0;
        $555 = ((($551)) + 48|0);
        $556 = HEAP32[$555>>2]|0;
        $557 = (($352) - ($556))|0;
        $558 = HEAP32[$551>>2]|0;
        $559 = Math_imul($558, $554)|0;
        $560 = ((($551)) + 4|0);
        $561 = HEAP32[$560>>2]|0;
        $562 = Math_imul($561, $557)|0;
        $563 = (($562) + ($559))|0;
        $564 = ((($551)) + 8|0);
        $565 = HEAP32[$564>>2]|0;
        $566 = (($563) + ($565))|0;
        $567 = ((($551)) + 12|0);
        $568 = HEAP32[$567>>2]|0;
        $569 = Math_imul($568, $554)|0;
        $570 = ((($551)) + 16|0);
        $571 = HEAP32[$570>>2]|0;
        $572 = Math_imul($571, $557)|0;
        $573 = (($572) + ($569))|0;
        $574 = ((($551)) + 20|0);
        $575 = HEAP32[$574>>2]|0;
        $576 = (($573) + ($575))|0;
        $577 = ((($551)) + 24|0);
        $578 = HEAP32[$577>>2]|0;
        $579 = Math_imul($578, $554)|0;
        $580 = ((($551)) + 28|0);
        $581 = HEAP32[$580>>2]|0;
        $582 = Math_imul($581, $557)|0;
        $583 = (($582) + ($579))|0;
        $584 = ((($551)) + 32|0);
        $585 = HEAP32[$584>>2]|0;
        $586 = (($583) + ($585))|0;
        $587 = ($586|0)==(0);
        if ($587) {
         $588 = $566 >>> 31;
         $589 = (($588) + 2147483647)|0;
         $590 = $576 >>> 31;
         $591 = (($590) + 2147483647)|0;
         $$sink$i$i434$i = $591;$$sroa$0443$0$i = $589;
        } else {
         $592 = ($586|0)<(0);
         $593 = (0 - ($566))|0;
         $594 = (0 - ($576))|0;
         $595 = (0 - ($586))|0;
         $spec$select$i$i431$i = $592 ? $593 : $566;
         $spec$select24$i$i432$i = $592 ? $594 : $576;
         $spec$select25$i$i433$i = $592 ? $595 : $586;
         $596 = $spec$select25$i$i433$i >> 1;
         $597 = $spec$select$i$i431$i >> 31;
         $598 = (($596) + ($597))|0;
         $599 = $598 ^ $597;
         $600 = (($599) + ($spec$select$i$i431$i))|0;
         $601 = (($600|0) / ($spec$select25$i$i433$i|0))&-1;
         $602 = ((($551)) + 36|0);
         $603 = HEAP32[$602>>2]|0;
         $604 = (($603) + ($601))|0;
         $605 = $spec$select24$i$i432$i >> 31;
         $606 = (($596) + ($605))|0;
         $607 = $606 ^ $605;
         $608 = (($607) + ($spec$select24$i$i432$i))|0;
         $609 = (($608|0) / ($spec$select25$i$i433$i|0))&-1;
         $610 = ((($551)) + 40|0);
         $611 = HEAP32[$610>>2]|0;
         $612 = (($611) + ($609))|0;
         $$sink$i$i434$i = $612;$$sroa$0443$0$i = $604;
        }
        $613 = (($346) + -1)|0;
        $614 = (($12) + ($613<<2)|0);
        $615 = HEAP32[$614>>2]|0;
        $616 = (($615) + (($$0383457$i*52)|0)|0);
        $617 = ((($616)) + -104|0);
        $618 = ((($617)) + 44|0);
        $619 = HEAP32[$618>>2]|0;
        $620 = (($350) - ($619))|0;
        $621 = ((($617)) + 48|0);
        $622 = HEAP32[$621>>2]|0;
        $623 = (($352) - ($622))|0;
        $624 = HEAP32[$617>>2]|0;
        $625 = Math_imul($624, $620)|0;
        $626 = ((($617)) + 4|0);
        $627 = HEAP32[$626>>2]|0;
        $628 = Math_imul($627, $623)|0;
        $629 = (($628) + ($625))|0;
        $630 = ((($617)) + 8|0);
        $631 = HEAP32[$630>>2]|0;
        $632 = (($629) + ($631))|0;
        $633 = ((($617)) + 12|0);
        $634 = HEAP32[$633>>2]|0;
        $635 = Math_imul($634, $620)|0;
        $636 = ((($617)) + 16|0);
        $637 = HEAP32[$636>>2]|0;
        $638 = Math_imul($637, $623)|0;
        $639 = (($638) + ($635))|0;
        $640 = ((($617)) + 20|0);
        $641 = HEAP32[$640>>2]|0;
        $642 = (($639) + ($641))|0;
        $643 = ((($617)) + 24|0);
        $644 = HEAP32[$643>>2]|0;
        $645 = Math_imul($644, $620)|0;
        $646 = ((($617)) + 28|0);
        $647 = HEAP32[$646>>2]|0;
        $648 = Math_imul($647, $623)|0;
        $649 = (($648) + ($645))|0;
        $650 = ((($617)) + 32|0);
        $651 = HEAP32[$650>>2]|0;
        $652 = (($649) + ($651))|0;
        $653 = ($652|0)==(0);
        if ($653) {
         $654 = $632 >>> 31;
         $655 = (($654) + 2147483647)|0;
         $656 = $642 >>> 31;
         $657 = (($656) + 2147483647)|0;
         $$sink$i$i$i = $657;$$sroa$0$0$i = $655;
        } else {
         $658 = ($652|0)<(0);
         $659 = (0 - ($632))|0;
         $660 = (0 - ($642))|0;
         $661 = (0 - ($652))|0;
         $spec$select$i$i$i = $658 ? $659 : $632;
         $spec$select24$i$i$i = $658 ? $660 : $642;
         $spec$select25$i$i$i = $658 ? $661 : $652;
         $662 = $spec$select25$i$i$i >> 1;
         $663 = $spec$select$i$i$i >> 31;
         $664 = (($662) + ($663))|0;
         $665 = $664 ^ $663;
         $666 = (($665) + ($spec$select$i$i$i))|0;
         $667 = (($666|0) / ($spec$select25$i$i$i|0))&-1;
         $668 = ((($617)) + 36|0);
         $669 = HEAP32[$668>>2]|0;
         $670 = (($669) + ($667))|0;
         $671 = $spec$select24$i$i$i >> 31;
         $672 = (($662) + ($671))|0;
         $673 = $672 ^ $671;
         $674 = (($673) + ($spec$select24$i$i$i))|0;
         $675 = (($674|0) / ($spec$select25$i$i$i|0))&-1;
         $676 = ((($617)) + 40|0);
         $677 = HEAP32[$676>>2]|0;
         $678 = (($677) + ($675))|0;
         $$sink$i$i$i = $678;$$sroa$0$0$i = $670;
        }
        $679 = ($$sroa$0443$0$i|0)<($$sroa$0451$0$i|0);
        $680 = $679 ? $$sroa$0443$0$i : $$sroa$0451$0$i;
        $681 = $$sroa$0443$0$i ^ $$sroa$0451$0$i;
        $682 = $681 ^ $680;
        $683 = ($$sink$i$i434$i|0)<($$sink$i$i439$i|0);
        $684 = $683 ? $$sink$i$i434$i : $$sink$i$i439$i;
        $685 = $$sink$i$i434$i ^ $$sink$i$i439$i;
        $686 = $685 ^ $684;
        $687 = ($$sroa$0$0$i|0)<($682|0);
        $688 = $687 ? $$sroa$0$0$i : $682;
        $689 = ($$sink$i$i$i|0)<($686|0);
        $690 = $689 ? $$sink$i$i$i : $686;
        $691 = ($688|0)<($680|0);
        $692 = $691 ? $688 : $680;
        $693 = $688 ^ $680;
        $694 = $693 ^ $692;
        $695 = ($690|0)<($684|0);
        $696 = $695 ? $690 : $684;
        $697 = $690 ^ $684;
        $698 = $697 ^ $696;
        $699 = ((($616)) + -52|0);
        $700 = (($348) - ($16))|0;
        $701 = (($700) + -1)|0;
        $702 = (($299) + ($701<<3)|0);
        $703 = HEAP32[$702>>2]|0;
        $704 = (((($299) + ($701<<3)|0)) + 4|0);
        $705 = HEAP32[$704>>2]|0;
        $706 = (($299) + ($700<<3)|0);
        $707 = HEAP32[$706>>2]|0;
        $708 = (((($299) + ($700<<3)|0)) + 4|0);
        $709 = HEAP32[$708>>2]|0;
        $710 = (($348) + -1)|0;
        $711 = (($299) + ($710<<3)|0);
        $712 = HEAP32[$711>>2]|0;
        $713 = (((($299) + ($710<<3)|0)) + 4|0);
        $714 = HEAP32[$713>>2]|0;
        $715 = (($300) + ($701<<3)|0);
        $716 = HEAP32[$715>>2]|0;
        $717 = (((($300) + ($701<<3)|0)) + 4|0);
        $718 = HEAP32[$717>>2]|0;
        $719 = (($300) + ($700<<3)|0);
        $720 = HEAP32[$719>>2]|0;
        $721 = (((($300) + ($700<<3)|0)) + 4|0);
        $722 = HEAP32[$721>>2]|0;
        $723 = (($300) + ($710<<3)|0);
        $724 = HEAP32[$723>>2]|0;
        $725 = (((($300) + ($710<<3)|0)) + 4|0);
        $726 = HEAP32[$725>>2]|0;
        _qr_hom_cell_init($699,$703,$705,$707,$709,$712,$714,$350,$352,$716,$718,$720,$722,$724,$726,$694,$698);
        $$0385$i = $699;
       } else {
        $727 = ($$0383457$i|0)!=(0);
        $or$cond3$i = $727 & $483;
        if ($or$cond3$i) {
         $728 = (($346) + -2)|0;
         $729 = (($12) + ($728<<2)|0);
         $730 = HEAP32[$729>>2]|0;
         $731 = (($730) + (($$0383457$i*52)|0)|0);
         $732 = ((($731)) + -52|0);
         $$0385$i = $732;
         break;
        }
        $733 = ($346|0)>(0);
        $or$cond5$i = $484 & $733;
        if ($or$cond5$i) {
         $734 = (($346) + -1)|0;
         $735 = (($12) + ($734<<2)|0);
         $736 = HEAP32[$735>>2]|0;
         $737 = (($736) + (($$0383457$i*52)|0)|0);
         $738 = ((($737)) + -104|0);
         $$0385$i = $738;
        } else {
         $$0385$i = $10;
        }
       }
      } while(0);
      $739 = (($300) + ($348<<3)|0);
      (_qr_alignment_pattern_search($739,$$0385$i,$350,$352,2,$7,$8,$9)|0);
      $740 = ($346|0)>(0);
      $741 = ($$0383457$i|0)!=(0);
      $or$cond7$i = $741 & $740;
      if ($or$cond7$i) {
       $742 = (($346) + -1)|0;
       $743 = (($12) + ($742<<2)|0);
       $744 = HEAP32[$743>>2]|0;
       $745 = (($744) + (($$0383457$i*52)|0)|0);
       $746 = ((($745)) + -52|0);
       $747 = (($348) - ($16))|0;
       $748 = (($747) + -1)|0;
       $749 = (($299) + ($748<<3)|0);
       $750 = HEAP32[$749>>2]|0;
       $751 = (((($299) + ($748<<3)|0)) + 4|0);
       $752 = HEAP32[$751>>2]|0;
       $753 = (($299) + ($747<<3)|0);
       $754 = HEAP32[$753>>2]|0;
       $755 = (((($299) + ($747<<3)|0)) + 4|0);
       $756 = HEAP32[$755>>2]|0;
       $757 = (($348) + -1)|0;
       $758 = (($299) + ($757<<3)|0);
       $759 = HEAP32[$758>>2]|0;
       $760 = (((($299) + ($757<<3)|0)) + 4|0);
       $761 = HEAP32[$760>>2]|0;
       $762 = (($300) + ($748<<3)|0);
       $763 = HEAP32[$762>>2]|0;
       $764 = (((($300) + ($748<<3)|0)) + 4|0);
       $765 = HEAP32[$764>>2]|0;
       $766 = (($300) + ($747<<3)|0);
       $767 = HEAP32[$766>>2]|0;
       $768 = (((($300) + ($747<<3)|0)) + 4|0);
       $769 = HEAP32[$768>>2]|0;
       $770 = (($300) + ($757<<3)|0);
       $771 = HEAP32[$770>>2]|0;
       $772 = (((($300) + ($757<<3)|0)) + 4|0);
       $773 = HEAP32[$772>>2]|0;
       $774 = HEAP32[$739>>2]|0;
       $775 = (((($300) + ($348<<3)|0)) + 4|0);
       $776 = HEAP32[$775>>2]|0;
       _qr_hom_cell_init($746,$750,$752,$754,$756,$759,$761,$350,$352,$763,$765,$767,$769,$771,$773,$774,$776);
      }
      $777 = (($$0383457$i) + 1)|0;
      $778 = ($$0383457$i|0)<($339|0);
      if ($778) {
       $$0383457$i = $777;
      } else {
       break;
      }
     }
    }
    $779 = (($$0384458$i) + 1)|0;
    $780 = ($779|0)<($333|0);
    if ($780) {
     $$0384458$i = $779;
    } else {
     break;
    }
   }
  }
  _free($299);
  _free($300);
  $$pre = HEAP32[$12>>2]|0;
  $789 = $$pre;
 }
 $781 = ((($12)) + 28|0);
 $782 = ((($11)) + 4|0);
 $783 = HEAP32[$35>>2]|0;
 $784 = $783 << 2;
 $785 = (($784) + -4)|0;
 _memcpy(($781|0),($782|0),($785|0))|0;
 $786 = HEAP32[$35>>2]|0;
 $787 = (($786) + -1)|0;
 $788 = (((($12)) + 28|0) + ($787<<2)|0);
 HEAP32[$788>>2] = $14;
 _qr_hom_cell_project($18,$789,-1,-1,1);
 $790 = HEAP32[$35>>2]|0;
 $791 = (($789) + (($790*52)|0)|0);
 $792 = ((($791)) + -52|0);
 $793 = $14 << 1;
 $794 = (($793) + -1)|0;
 _qr_hom_cell_project($22,$792,$794,-1,1);
 $795 = (($790) + -1)|0;
 $796 = (($12) + ($795<<2)|0);
 $797 = HEAP32[$796>>2]|0;
 _qr_hom_cell_project($26,$797,-1,$794,1);
 $798 = (($797) + (($790*52)|0)|0);
 $799 = ((($798)) + -52|0);
 _qr_hom_cell_project($30,$799,$794,$794,1);
 $800 = $8 << 2;
 $801 = (0 - ($800))|0;
 $802 = $8 << 3;
 $803 = $9 << 2;
 $804 = (0 - ($803))|0;
 $805 = $9 << 3;
 $806 = HEAP32[$18>>2]|0;
 $807 = ($802|0)<($806|0);
 $808 = $807 ? $802 : $806;
 $809 = (($801) - ($808))|0;
 $810 = ($808|0)>($801|0);
 $811 = $810 ? $809 : 0;
 $812 = (($801) - ($811))|0;
 HEAP32[$18>>2] = $812;
 $813 = HEAP32[$20>>2]|0;
 $814 = ($805|0)<($813|0);
 $815 = $814 ? $805 : $813;
 $816 = (($804) - ($815))|0;
 $817 = ($815|0)>($804|0);
 $818 = $817 ? $816 : 0;
 $819 = (($804) - ($818))|0;
 HEAP32[$20>>2] = $819;
 $820 = HEAP32[$22>>2]|0;
 $821 = ($802|0)<($820|0);
 $822 = $821 ? $802 : $820;
 $823 = (($801) - ($822))|0;
 $824 = ($822|0)>($801|0);
 $825 = $824 ? $823 : 0;
 $826 = (($801) - ($825))|0;
 HEAP32[$22>>2] = $826;
 $827 = HEAP32[$24>>2]|0;
 $828 = ($805|0)<($827|0);
 $829 = $828 ? $805 : $827;
 $830 = (($804) - ($829))|0;
 $831 = ($829|0)>($804|0);
 $832 = $831 ? $830 : 0;
 $833 = (($804) - ($832))|0;
 HEAP32[$24>>2] = $833;
 $834 = HEAP32[$26>>2]|0;
 $835 = ($802|0)<($834|0);
 $836 = $835 ? $802 : $834;
 $837 = (($801) - ($836))|0;
 $838 = ($836|0)>($801|0);
 $839 = $838 ? $837 : 0;
 $840 = (($801) - ($839))|0;
 HEAP32[$26>>2] = $840;
 $841 = HEAP32[$28>>2]|0;
 $842 = ($805|0)<($841|0);
 $843 = $842 ? $805 : $841;
 $844 = (($804) - ($843))|0;
 $845 = ($843|0)>($804|0);
 $846 = $845 ? $844 : 0;
 $847 = (($804) - ($846))|0;
 HEAP32[$28>>2] = $847;
 $848 = HEAP32[$30>>2]|0;
 $849 = ($802|0)<($848|0);
 $850 = $849 ? $802 : $848;
 $851 = (($801) - ($850))|0;
 $852 = ($850|0)>($801|0);
 $853 = $852 ? $851 : 0;
 $854 = (($801) - ($853))|0;
 HEAP32[$30>>2] = $854;
 $855 = HEAP32[$32>>2]|0;
 $856 = ($805|0)<($855|0);
 $857 = $856 ? $805 : $855;
 $858 = (($804) - ($857))|0;
 $859 = ($857|0)>($804|0);
 $860 = $859 ? $858 : 0;
 $861 = (($804) - ($860))|0;
 HEAP32[$32>>2] = $861;
 $862 = $14 << 2;
 $863 = Math_imul($862, $45)|0;
 $864 = (_malloc($863)|0);
 $trunc$i = $6&255;
 $trunc$i$clear = $trunc$i & 7;
 switch ($trunc$i$clear<<24>>24) {
 case 0:  {
  $865 = ($13|0)>(-17);
  if ($865) {
   $$0161188$i$i = 85;$$0162187$i$i = 0;
   while(1) {
    $866 = Math_imul($$0162187$i$i, $45)|0;
    $867 = (($864) + ($866<<2)|0);
    $868 = $$0161188$i$i&255;
    _memset(($867|0),($868|0),($46|0))|0;
    $869 = $$0161188$i$i ^ 255;
    $870 = (($$0162187$i$i) + 1)|0;
    $exitcond251$i$i = ($870|0)==($14|0);
    if ($exitcond251$i$i) {
     break;
    } else {
     $$0161188$i$i = $869;$$0162187$i$i = $870;
    }
   }
  }
  break;
 }
 case 1:  {
  _memset(($864|0),85,($863|0))|0;
  break;
 }
 case 2:  {
  $871 = ($13|0)>(-17);
  if ($871) {
   $$0160192$i$i = 255;$$1163191$i$i = 0;
   while(1) {
    $872 = Math_imul($$1163191$i$i, $45)|0;
    $873 = (($864) + ($872<<2)|0);
    $874 = $$0160192$i$i&255;
    _memset(($873|0),($874|0),($46|0))|0;
    $875 = $$0160192$i$i << 8;
    $876 = $$0160192$i$i >>> 16;
    $877 = $875 | $876;
    $878 = (($$1163191$i$i) + 1)|0;
    $exitcond252$i$i = ($878|0)==($14|0);
    if ($exitcond252$i$i) {
     break;
    } else {
     $$0160192$i$i = $877;$$1163191$i$i = $878;
    }
   }
  }
  break;
 }
 case 3:  {
  $879 = ($13|0)>(-17);
  if ($879) {
   $$1158201$us$i$i = 1227133513;$$2164200$us$i$i = 0;
   while(1) {
    $880 = Math_imul($$2164200$us$i$i, $45)|0;
    $$0159196$us$i$i = $$1158201$us$i$i;$$1166195$us$i$i = 0;
    while(1) {
     $881 = (($$1166195$us$i$i) + ($880))|0;
     $882 = (($864) + ($881<<2)|0);
     HEAP32[$882>>2] = $$0159196$us$i$i;
     $883 = $$0159196$us$i$i >>> 2;
     $884 = $$0159196$us$i$i << 1;
     $885 = $883 | $884;
     $886 = (($$1166195$us$i$i) + 1)|0;
     $887 = ($886|0)<($45|0);
     if ($887) {
      $$0159196$us$i$i = $885;$$1166195$us$i$i = $886;
     } else {
      break;
     }
    }
    $888 = $$1158201$us$i$i >>> 1;
    $889 = $$1158201$us$i$i << 2;
    $890 = $888 | $889;
    $891 = (($$2164200$us$i$i) + 1)|0;
    $exitcond253$i$i = ($891|0)==($14|0);
    if ($exitcond253$i$i) {
     break;
    } else {
     $$1158201$us$i$i = $890;$$2164200$us$i$i = $891;
    }
   }
  }
  break;
 }
 case 4:  {
  $892 = ($13|0)>(-17);
  if ($892) {
   $$0156207$i$i = 7;$$3206$i$i = 0;
   while(1) {
    $893 = Math_imul($$3206$i$i, $45)|0;
    $894 = (($864) + ($893<<2)|0);
    $895 = $$0156207$i$i & 1;
    $896 = (0 - ($895))|0;
    $897 = $896 ^ 204;
    $898 = $897&255;
    _memset(($894|0),($898|0),($46|0))|0;
    $899 = $$0156207$i$i >>> 1;
    $900 = $$0156207$i$i << 5;
    $901 = $899 | $900;
    $902 = (($$3206$i$i) + 1)|0;
    $exitcond255$i$i = ($902|0)==($14|0);
    if ($exitcond255$i$i) {
     break;
    } else {
     $$0156207$i$i = $901;$$3206$i$i = $902;
    }
   }
  }
  break;
 }
 case 5:  {
  $903 = ($13|0)>(-17);
  if ($903) {
   $$4219$us$i$i = 0;
   while(1) {
    $904 = (($$4219$us$i$i>>>0) % 6)&-1;
    $905 = ($904|0)==(0);
    $906 = $905&1;
    $907 = $906 << 1;
    $908 = $$4219$us$i$i << 1;
    $909 = (($908>>>0) % 6)&-1;
    $910 = ($909|0)==(0);
    $911 = $910&1;
    $912 = $911 << 2;
    $913 = ($$4219$us$i$i*3)|0;
    $914 = (($913>>>0) % 6)&-1;
    $915 = ($914|0)==(0);
    $916 = $915&1;
    $917 = $916 << 3;
    $918 = $$4219$us$i$i << 2;
    $919 = (($918>>>0) % 6)&-1;
    $920 = ($919|0)==(0);
    $921 = $920&1;
    $922 = $921 << 4;
    $923 = ($$4219$us$i$i*5)|0;
    $924 = (($923>>>0) % 6)&-1;
    $925 = ($924|0)==(0);
    $926 = $925&1;
    $927 = $926 << 5;
    $928 = $907 | $912;
    $929 = $928 | $917;
    $930 = $929 | $922;
    $931 = $930 | $927;
    $932 = $931 | 1;
    $933 = $932 << 6;
    $934 = $933 | $932;
    $935 = $934 << 12;
    $936 = $935 | $934;
    $937 = $934 << 24;
    $938 = $936 | $937;
    $939 = Math_imul($$4219$us$i$i, $45)|0;
    $$2155215$us$i$i = $938;$$4169214$us$i$i = 0;
    while(1) {
     $940 = (($$4169214$us$i$i) + ($939))|0;
     $941 = (($864) + ($940<<2)|0);
     HEAP32[$941>>2] = $$2155215$us$i$i;
     $942 = $$2155215$us$i$i >>> 2;
     $943 = $$2155215$us$i$i << 4;
     $944 = $942 | $943;
     $945 = (($$4169214$us$i$i) + 1)|0;
     $946 = ($945|0)<($45|0);
     if ($946) {
      $$2155215$us$i$i = $944;$$4169214$us$i$i = $945;
     } else {
      break;
     }
    }
    $947 = (($$4219$us$i$i) + 1)|0;
    $exitcond258$i$i = ($947|0)==($14|0);
    if ($exitcond258$i$i) {
     break;
    } else {
     $$4219$us$i$i = $947;
    }
   }
  }
  break;
 }
 case 6:  {
  $948 = ($13|0)>(-17);
  if ($948) {
   $$5231$us$i$i = 0;
   while(1) {
    $949 = (($$5231$us$i$i>>>0) % 3)&-1;
    $950 = (($949) + ($$5231$us$i$i))|0;
    $951 = $950 << 1;
    $952 = $951 & 2;
    $953 = $$5231$us$i$i << 1;
    $954 = (($953>>>0) % 3)&-1;
    $955 = $954 << 2;
    $956 = $955 & 4;
    $957 = $952 | $956;
    $958 = ($$5231$us$i$i*3)|0;
    $959 = (($958>>>0) % 3)&-1;
    $960 = (($959) + ($958))|0;
    $961 = $960 << 3;
    $962 = $961 & 8;
    $963 = $$5231$us$i$i << 2;
    $964 = (($963>>>0) % 3)&-1;
    $965 = $964 << 4;
    $966 = $965 & 16;
    $967 = ($$5231$us$i$i*5)|0;
    $968 = (($967>>>0) % 3)&-1;
    $969 = (($968) + ($967))|0;
    $970 = $969 << 5;
    $971 = $970 & 32;
    $972 = $957 | $966;
    $973 = $972 | $962;
    $974 = $973 | $971;
    $975 = $974 ^ 63;
    $976 = $975 << 6;
    $977 = $976 | $975;
    $978 = $977 << 12;
    $979 = $978 | $977;
    $980 = $977 << 24;
    $981 = $979 | $980;
    $982 = Math_imul($$5231$us$i$i, $45)|0;
    $$2152227$us$i$i = $981;$$7226$us$i$i = 0;
    while(1) {
     $983 = (($$7226$us$i$i) + ($982))|0;
     $984 = (($864) + ($983<<2)|0);
     HEAP32[$984>>2] = $$2152227$us$i$i;
     $985 = $$2152227$us$i$i >>> 2;
     $986 = $$2152227$us$i$i << 4;
     $987 = $985 | $986;
     $988 = (($$7226$us$i$i) + 1)|0;
     $989 = ($988|0)<($45|0);
     if ($989) {
      $$2152227$us$i$i = $987;$$7226$us$i$i = $988;
     } else {
      break;
     }
    }
    $990 = (($$5231$us$i$i) + 1)|0;
    $exitcond261$i$i = ($990|0)==($14|0);
    if ($exitcond261$i$i) {
     break;
    } else {
     $$5231$us$i$i = $990;
    }
   }
  }
  break;
 }
 default: {
  $991 = ($13|0)>(-17);
  if ($991) {
   $$6184$us$i$i = 0;
   while(1) {
    $992 = $$6184$us$i$i & 1;
    $993 = (($$6184$us$i$i>>>0) % 3)&-1;
    $994 = (($$6184$us$i$i) + 1)|0;
    $995 = (($994) + ($993))|0;
    $996 = $995 << 1;
    $997 = $996 & 2;
    $998 = $997 | $992;
    $999 = $$6184$us$i$i << 1;
    $1000 = (($999>>>0) % 3)&-1;
    $1001 = (($1000) + ($$6184$us$i$i))|0;
    $1002 = $1001 << 2;
    $1003 = $1002 & 4;
    $1004 = $998 | $1003;
    $1005 = ($$6184$us$i$i*3)|0;
    $1006 = (($1005>>>0) % 3)&-1;
    $1007 = (($1006) + ($994))|0;
    $1008 = $1007 << 3;
    $1009 = $1008 & 8;
    $1010 = $1004 | $1009;
    $1011 = $$6184$us$i$i << 2;
    $1012 = (($1011>>>0) % 3)&-1;
    $1013 = (($1012) + ($$6184$us$i$i))|0;
    $1014 = $1013 << 4;
    $1015 = $1014 & 16;
    $1016 = $1010 | $1015;
    $1017 = ($$6184$us$i$i*5)|0;
    $1018 = (($1017>>>0) % 3)&-1;
    $1019 = (($1018) + ($994))|0;
    $1020 = $1019 << 5;
    $1021 = $1020 & 32;
    $1022 = $1016 | $1021;
    $1023 = $1022 ^ 63;
    $1024 = $1023 << 6;
    $1025 = $1024 | $1023;
    $1026 = $1025 << 12;
    $1027 = $1026 | $1025;
    $1028 = $1025 << 24;
    $1029 = $1027 | $1028;
    $1030 = Math_imul($$6184$us$i$i, $45)|0;
    $$10182$us$i$i = 0;$$2183$us$i$i = $1029;
    while(1) {
     $1031 = (($$10182$us$i$i) + ($1030))|0;
     $1032 = (($864) + ($1031<<2)|0);
     HEAP32[$1032>>2] = $$2183$us$i$i;
     $1033 = $$2183$us$i$i >>> 2;
     $1034 = $$2183$us$i$i << 4;
     $1035 = $1033 | $1034;
     $1036 = (($$10182$us$i$i) + 1)|0;
     $1037 = ($1036|0)<($45|0);
     if ($1037) {
      $$10182$us$i$i = $1036;$$2183$us$i$i = $1035;
     } else {
      break;
     }
    }
    $exitcond$i$i = ($994|0)==($14|0);
    if ($exitcond$i$i) {
     break;
    } else {
     $$6184$us$i$i = $994;
    }
   }
  }
 }
 }
 $1038 = ($790|0)>(0);
 if ($1038) {
  $1039 = (($9) + -1)|0;
  $1040 = (($8) + -1)|0;
  $$idx$val$us$i = HEAP32[$48>>2]|0;
  $$0114148$i = 0;$$0115146$i = 0;
  while(1) {
   $1041 = (((($12)) + 28|0) + ($$0115146$i<<2)|0);
   $1042 = HEAP32[$1041>>2]|0;
   $1043 = ($$0114148$i|0)<($1042|0);
   $$0120142$i = 0;$$0121141$i = 0;
   while(1) {
    $1044 = (((($12)) + 28|0) + ($$0120142$i<<2)|0);
    $1045 = HEAP32[$1044>>2]|0;
    $1046 = (($12) + ($$0120142$i<<2)|0);
    $1047 = HEAP32[$1046>>2]|0;
    $1048 = (((($1047) + (($$0115146$i*52)|0)|0)) + 44|0);
    $1049 = HEAP32[$1048>>2]|0;
    $1050 = (($$0114148$i) - ($1049))|0;
    $1051 = (((($1047) + (($$0115146$i*52)|0)|0)) + 48|0);
    $1052 = HEAP32[$1051>>2]|0;
    $1053 = (($$0121141$i) - ($1052))|0;
    $1054 = (($1047) + (($$0115146$i*52)|0)|0);
    $1055 = HEAP32[$1054>>2]|0;
    $1056 = (((($1047) + (($$0115146$i*52)|0)|0)) + 4|0);
    $1057 = HEAP32[$1056>>2]|0;
    $1058 = (((($1047) + (($$0115146$i*52)|0)|0)) + 12|0);
    $1059 = HEAP32[$1058>>2]|0;
    $1060 = (((($1047) + (($$0115146$i*52)|0)|0)) + 16|0);
    $1061 = HEAP32[$1060>>2]|0;
    $1062 = (((($1047) + (($$0115146$i*52)|0)|0)) + 24|0);
    $1063 = HEAP32[$1062>>2]|0;
    $1064 = (((($1047) + (($$0115146$i*52)|0)|0)) + 28|0);
    $1065 = HEAP32[$1064>>2]|0;
    if ($1043) {
     $1066 = ($$0121141$i|0)<($1045|0);
     $1067 = (((($1047) + (($$0115146$i*52)|0)|0)) + 36|0);
     $1068 = (((($1047) + (($$0115146$i*52)|0)|0)) + 40|0);
     if ($1066) {
      $1069 = Math_imul($1057, $1053)|0;
      $1070 = Math_imul($1055, $1050)|0;
      $1071 = (($1069) + ($1070))|0;
      $1072 = (((($1047) + (($$0115146$i*52)|0)|0)) + 8|0);
      $1073 = HEAP32[$1072>>2]|0;
      $1074 = (($1071) + ($1073))|0;
      $1075 = Math_imul($1061, $1053)|0;
      $1076 = Math_imul($1059, $1050)|0;
      $1077 = (($1075) + ($1076))|0;
      $1078 = (((($1047) + (($$0115146$i*52)|0)|0)) + 20|0);
      $1079 = HEAP32[$1078>>2]|0;
      $1080 = (($1077) + ($1079))|0;
      $1081 = Math_imul($1065, $1053)|0;
      $1082 = Math_imul($1063, $1050)|0;
      $1083 = (($1081) + ($1082))|0;
      $1084 = (((($1047) + (($$0115146$i*52)|0)|0)) + 32|0);
      $1085 = HEAP32[$1084>>2]|0;
      $1086 = (($1083) + ($1085))|0;
      $$0116137$us$i = $$0114148$i;$$0117136$us$i = $1086;$$0118135$us$i = $1080;$$0119134$us$i = $1074;
      while(1) {
       $1087 = Math_imul($$0116137$us$i, $45)|0;
       $$0111132$us$i = $$0117136$us$i;$$0112131$us$i = $$0118135$us$i;$$0113130$us$i = $$0119134$us$i;$$0133$us$i = $$0121141$i;
       while(1) {
        $1088 = $$0133$us$i >> 5;
        $1089 = (($1088) + ($1087))|0;
        $1090 = (($$idx$val$us$i) + ($1089<<2)|0);
        $1091 = HEAP32[$1090>>2]|0;
        $1092 = $$0133$us$i & 31;
        $1093 = 1 << $1092;
        $1094 = $1091 & $1093;
        $1095 = ($1094|0)==(0);
        if ($1095) {
         $1096 = ($$0111132$us$i|0)==(0);
         if ($1096) {
          $1116 = $$0113130$us$i >>> 31;
          $1117 = (($1116) + 2147483647)|0;
          $1118 = $$0112131$us$i >>> 31;
          $1119 = (($1118) + 2147483647)|0;
          $$sink$i$us$i = $1119;$$sroa$0$0$us$i = $1117;
         } else {
          $1097 = ($$0111132$us$i|0)<(0);
          $1098 = (0 - ($$0113130$us$i))|0;
          $1099 = (0 - ($$0112131$us$i))|0;
          $1100 = (0 - ($$0111132$us$i))|0;
          $spec$select$i$us$i = $1097 ? $1098 : $$0113130$us$i;
          $spec$select24$i$us$i = $1097 ? $1099 : $$0112131$us$i;
          $spec$select25$i$us$i = $1097 ? $1100 : $$0111132$us$i;
          $1101 = $spec$select25$i$us$i >> 1;
          $1102 = $spec$select$i$us$i >> 31;
          $1103 = (($1102) + ($1101))|0;
          $1104 = $1103 ^ $1102;
          $1105 = (($1104) + ($spec$select$i$us$i))|0;
          $1106 = (($1105|0) / ($spec$select25$i$us$i|0))&-1;
          $1107 = HEAP32[$1067>>2]|0;
          $1108 = (($1107) + ($1106))|0;
          $1109 = $spec$select24$i$us$i >> 31;
          $1110 = (($1101) + ($1109))|0;
          $1111 = $1110 ^ $1109;
          $1112 = (($1111) + ($spec$select24$i$us$i))|0;
          $1113 = (($1112|0) / ($spec$select25$i$us$i|0))&-1;
          $1114 = HEAP32[$1068>>2]|0;
          $1115 = (($1114) + ($1113))|0;
          $$sink$i$us$i = $1115;$$sroa$0$0$us$i = $1108;
         }
         $1120 = $$sroa$0$0$us$i >> 2;
         $1121 = $$sink$i$us$i >> 2;
         $1122 = ($1121|0)<($9|0);
         $1123 = $1122 ? $1121 : $1039;
         $1124 = ($1123|0)>(0);
         $1125 = $1124 ? $1123 : 0;
         $1126 = Math_imul($1125, $8)|0;
         $1127 = ($1120|0)<($8|0);
         $1128 = $1127 ? $1120 : $1040;
         $1129 = ($1128|0)>(0);
         $1130 = $1129 ? $1128 : 0;
         $1131 = (($1126) + ($1130))|0;
         $1132 = (($7) + ($1131)|0);
         $1133 = HEAP8[$1132>>0]|0;
         $1134 = ($1133<<24>>24)!=(0);
         $1135 = $1134&1;
         $1136 = $1135 << $1092;
         $1137 = (($864) + ($1089<<2)|0);
         $1138 = HEAP32[$1137>>2]|0;
         $1139 = $1136 ^ $1138;
         HEAP32[$1137>>2] = $1139;
        }
        $1140 = (($$0113130$us$i) + ($1057))|0;
        $1141 = (($$0112131$us$i) + ($1061))|0;
        $1142 = (($$0111132$us$i) + ($1065))|0;
        $1143 = (($$0133$us$i) + 1)|0;
        $exitcond$i132 = ($1143|0)==($1045|0);
        if ($exitcond$i132) {
         break;
        } else {
         $$0111132$us$i = $1142;$$0112131$us$i = $1141;$$0113130$us$i = $1140;$$0133$us$i = $1143;
        }
       }
       $1144 = (($$0119134$us$i) + ($1055))|0;
       $1145 = (($$0118135$us$i) + ($1059))|0;
       $1146 = (($$0117136$us$i) + ($1063))|0;
       $1147 = (($$0116137$us$i) + 1)|0;
       $exitcond158$i = ($1147|0)==($1042|0);
       if ($exitcond158$i) {
        break;
       } else {
        $$0116137$us$i = $1147;$$0117136$us$i = $1146;$$0118135$us$i = $1145;$$0119134$us$i = $1144;
       }
      }
     }
    }
    $1148 = (($$0120142$i) + 1)|0;
    $exitcond197 = ($1148|0)==($790|0);
    if ($exitcond197) {
     break;
    } else {
     $$0120142$i = $1148;$$0121141$i = $1045;
    }
   }
   $1149 = (($$0115146$i) + 1)|0;
   $exitcond198 = ($1149|0)==($790|0);
   if ($exitcond198) {
    break;
   } else {
    $$0114148$i = $1042;$$0115146$i = $1149;
   }
  }
 }
 $1150 = $6 >> 3;
 $1151 = $1150 ^ 1;
 $1152 = (($5) + -1)|0;
 $1153 = ((96 + ($1152<<2)|0) + ($1151)|0);
 $1154 = HEAP8[$1153>>0]|0;
 $1155 = $1154&255;
 $1156 = (256 + ($1152)|0);
 $1157 = HEAP8[$1156>>0]|0;
 $1158 = $1157&255;
 $1159 = (304 + ($1158)|0);
 $1160 = (($1159) + ($1151)|0);
 $1161 = HEAP8[$1160>>0]|0;
 $1162 = $1161&255;
 $1163 = ($5|0)==(1);
 if ($1163) {
  $$0$i = 26;
 } else {
  $1164 = (($5>>>0) / 7)&-1;
  $1165 = $5 << 4;
  $1166 = (($5) + 8)|0;
  $1167 = Math_imul($1165, $1166)|0;
  $1168 = ($1164*5)|0;
  $1169 = (($1168) + 10)|0;
  $1170 = (($1168) + 8)|0;
  $1171 = Math_imul($1169, $1170)|0;
  $1172 = ($5>>>0)<(7);
  $1173 = $1172 ? 36 : 0;
  $1174 = (($1167) + 83)|0;
  $1175 = (($1174) + ($1173))|0;
  $1176 = (($1175) - ($1171))|0;
  $1177 = $1176 >>> 3;
  $$0$i = $1177;
 }
 $1178 = (($$0$i>>>0) / ($1155>>>0))&-1;
 $1179 = Math_imul($1178, $1155)|0;
 $1180 = (($$0$i) - ($1179))|0;
 $1181 = (($1155) - ($1180))|0;
 $1182 = $1155 << 2;
 $1183 = (_malloc($1182)|0);
 $1184 = (_malloc($$0$i)|0);
 HEAP32[$1183>>2] = $1184;
 $1185 = ($1154&255)>(1);
 if ($1185) {
  $$0127171 = 1;$1187 = $1184;
  while(1) {
   $1186 = (($1187) + ($1178)|0);
   $1188 = ($$0127171|0)>($1181|0);
   $1189 = $1188&1;
   $1190 = (($1186) + ($1189)|0);
   $1191 = (($1183) + ($$0127171<<2)|0);
   HEAP32[$1191>>2] = $1190;
   $1192 = (($$0127171) + 1)|0;
   $exitcond = ($1192|0)==($1155|0);
   if ($exitcond) {
    break;
   } else {
    $$0127171 = $1192;$1187 = $1190;
   }
  }
 }
 $1193 = (($1178) - ($1162))|0;
 $1194 = HEAP32[$48>>2]|0;
 $1195 = ($1180|0)==(0);
 $spec$select$i = $1195 ? 0 : $1181;
 $1196 = ($13|0)>(-16);
 if ($1196) {
  $1197 = $108 | 1;
  $$0129212$i = $17;$$0133211$i = 0;$$0136210$i = 0;$$0144209$i = 0;$$0151208$i = 0;
  while(1) {
   $1198 = Math_imul($$0129212$i, $45)|0;
   $$0178$i = $1197;$$1134177$i = $$0133211$i;$$1137176$i = $$0136210$i;$$1145175$i = $$0144209$i;$$1152174$i = $$0151208$i;$$in216$i = $45;
   while(1) {
    $1199 = (($$in216$i) + -1)|0;
    $1200 = (($1199) + ($1198))|0;
    $1201 = (($864) + ($1200<<2)|0);
    $1202 = HEAP32[$1201>>2]|0;
    $1203 = (($1194) + ($1200<<2)|0);
    $1204 = HEAP32[$1203>>2]|0;
    $1205 = (($1200) - ($45))|0;
    $1206 = (($864) + ($1205<<2)|0);
    $1207 = HEAP32[$1206>>2]|0;
    $1208 = (($1194) + ($1205<<2)|0);
    $1209 = HEAP32[$1208>>2]|0;
    $$2135173$i = $$1134177$i;$$2138172$i = $$1137176$i;$$2146171$i = $$1145175$i;$$2153170$i = $$1152174$i;$$in217$i = $$0178$i;
    while(1) {
     $1210 = (($$in217$i) + -1)|0;
     $1211 = 1 << $1210;
     $1212 = $1211 & $1204;
     $1213 = ($1212|0)==(0);
     $1214 = $$2153170$i << 1;
     $1215 = $1202 >>> $1210;
     $1216 = $1215 & 1;
     $1217 = $1214 | $1216;
     $spec$select161$i = $1213 ? $1217 : $$2153170$i;
     $1218 = $1213&1;
     $spec$select162$i = (($$2146171$i) + ($1218))|0;
     $1219 = $1211 & $1209;
     $1220 = ($1219|0)==(0);
     $1221 = $spec$select161$i << 1;
     $1222 = $1207 >>> $1210;
     $1223 = $1222 & 1;
     $1224 = $1221 | $1223;
     $$4155$i = $1220 ? $1224 : $spec$select161$i;
     $1225 = $1220&1;
     $$4148$i = (($spec$select162$i) + ($1225))|0;
     $1226 = ($$4148$i|0)>(7);
     if ($1226) {
      $1227 = (($$4148$i) + -8)|0;
      $1228 = $$4155$i >>> $1227;
      $1229 = $1228&255;
      $1230 = (($$2138172$i) + 1)|0;
      $1231 = (($1183) + ($$2138172$i<<2)|0);
      $1232 = HEAP32[$1231>>2]|0;
      $1233 = ((($1232)) + 1|0);
      HEAP32[$1231>>2] = $1233;
      HEAP8[$1232>>0] = $1229;
      $1234 = ($1230|0)<($1155|0);
      $1235 = (($$2135173$i) + 1)|0;
      $1236 = ($1235|0)==($1193|0);
      $1237 = $1236 ? $spec$select$i : 0;
      $spec$select163$i = $1234 ? $1230 : $1237;
      $spec$select164$i = $1234 ? $$2135173$i : $1235;
      $$3$i = $spec$select164$i;$$3139$i = $spec$select163$i;$$5149$i = $1227;
     } else {
      $$3$i = $$2135173$i;$$3139$i = $$2138172$i;$$5149$i = $$4148$i;
     }
     $1238 = ($$in217$i|0)>(1);
     if ($1238) {
      $$2135173$i = $$3$i;$$2138172$i = $$3139$i;$$2146171$i = $$5149$i;$$2153170$i = $$4155$i;$$in217$i = $1210;
     } else {
      break;
     }
    }
    $1239 = ($$in216$i|0)>(1);
    if ($1239) {
     $$0178$i = 32;$$1134177$i = $$3$i;$$1137176$i = $$3139$i;$$1145175$i = $$5149$i;$$1152174$i = $$4155$i;$$in216$i = $1199;
    } else {
     break;
    }
   }
   $1240 = (($$0129212$i) + -2)|0;
   $1241 = ($1240|0)==(6);
   $1242 = (($$0129212$i) + -3)|0;
   $spec$select160$i = $1241 ? $1242 : $1240;
   $1243 = Math_imul($spec$select160$i, $45)|0;
   $$1132200$i = 0;$$4140198$i = $$3139$i;$$4199$i = $$3$i;$$5156196$i = $$4155$i;$$6150197$i = $$5149$i;
   while(1) {
    $1244 = (($$1132200$i) + ($1243))|0;
    $1245 = (($1244) - ($45))|0;
    $1246 = $$1132200$i << 5;
    $1247 = (($14) - ($1246))|0;
    $1248 = ($1247|0)>(0);
    if ($1248) {
     $1249 = ($1247|0)<(32);
     $spec$select165$i = $1249 ? $1247 : 32;
     $1250 = (($1194) + ($1245<<2)|0);
     $1251 = HEAP32[$1250>>2]|0;
     $1252 = (($864) + ($1245<<2)|0);
     $1253 = HEAP32[$1252>>2]|0;
     $1254 = (($1194) + ($1244<<2)|0);
     $1255 = HEAP32[$1254>>2]|0;
     $1256 = (($864) + ($1244<<2)|0);
     $1257 = HEAP32[$1256>>2]|0;
     $$0125189$i = $1251;$$0126188$i = $1255;$$0127187$i = $1253;$$0128186$i = $1257;$$5141184$i = $$4140198$i;$$5185$i = $$4199$i;$$6157182$i = $$5156196$i;$$7183$i = $$6150197$i;$$in$i = $spec$select165$i;
     while(1) {
      $1258 = (($$in$i) + -1)|0;
      $1259 = $$0126188$i & 1;
      $1260 = ($1259|0)==(0);
      $1261 = $$6157182$i << 1;
      $1262 = $$0128186$i & 1;
      $1263 = $1261 | $1262;
      $spec$select166$i = $1260 ? $1263 : $$6157182$i;
      $1264 = $1259 ^ 1;
      $1265 = $$0128186$i >>> 1;
      $1266 = $$0126188$i >>> 1;
      $1267 = $$0125189$i & 1;
      $1268 = ($1267|0)==(0);
      $1269 = $spec$select166$i << 1;
      $1270 = $$0127187$i & 1;
      $1271 = $1269 | $1270;
      $$8159$i = $1268 ? $1271 : $spec$select166$i;
      $1272 = $1267 ^ 1;
      $spec$select167$i = (($1264) + ($1272))|0;
      $$9$i = (($spec$select167$i) + ($$7183$i))|0;
      $1273 = $$0127187$i >>> 1;
      $1274 = $$0125189$i >>> 1;
      $1275 = ($$9$i|0)>(7);
      if ($1275) {
       $1276 = (($$9$i) + -8)|0;
       $1277 = $$8159$i >>> $1276;
       $1278 = $1277&255;
       $1279 = (($$5141184$i) + 1)|0;
       $1280 = (($1183) + ($$5141184$i<<2)|0);
       $1281 = HEAP32[$1280>>2]|0;
       $1282 = ((($1281)) + 1|0);
       HEAP32[$1280>>2] = $1282;
       HEAP8[$1281>>0] = $1278;
       $1283 = ($1279|0)<($1155|0);
       $1284 = (($$5185$i) + 1)|0;
       $1285 = ($1284|0)==($1193|0);
       $1286 = $1285 ? $spec$select$i : 0;
       $spec$select168$i = $1283 ? $1279 : $1286;
       $spec$select169$i = $1283 ? $$5185$i : $1284;
       $$10$i = $1276;$$6$i = $spec$select169$i;$$6142$i = $spec$select168$i;
      } else {
       $$10$i = $$9$i;$$6$i = $$5185$i;$$6142$i = $$5141184$i;
      }
      $1287 = ($$in$i|0)>(1);
      if ($1287) {
       $$0125189$i = $1274;$$0126188$i = $1266;$$0127187$i = $1273;$$0128186$i = $1265;$$5141184$i = $$6142$i;$$5185$i = $$6$i;$$6157182$i = $$8159$i;$$7183$i = $$10$i;$$in$i = $1258;
      } else {
       $$5$lcssa$i = $$6$i;$$5141$lcssa$i = $$6142$i;$$6157$lcssa$i = $$8159$i;$$7$lcssa$i = $$10$i;
       break;
      }
     }
    } else {
     $$5$lcssa$i = $$4199$i;$$5141$lcssa$i = $$4140198$i;$$6157$lcssa$i = $$5156196$i;$$7$lcssa$i = $$6150197$i;
    }
    $1288 = (($$1132200$i) + 1)|0;
    $1289 = ($1288|0)<($45|0);
    if ($1289) {
     $$1132200$i = $1288;$$4140198$i = $$5141$lcssa$i;$$4199$i = $$5$lcssa$i;$$5156196$i = $$6157$lcssa$i;$$6150197$i = $$7$lcssa$i;
    } else {
     break;
    }
   }
   $1290 = (($spec$select160$i) + -2)|0;
   $1291 = ($spec$select160$i|0)>(2);
   if ($1291) {
    $$0129212$i = $1290;$$0133211$i = $$5$lcssa$i;$$0136210$i = $$5141$lcssa$i;$$0144209$i = $$7$lcssa$i;$$0151208$i = $$6157$lcssa$i;
   } else {
    break;
   }
  }
 }
 _free($1194);
 $1292 = HEAP32[$12>>2]|0;
 _free($1292);
 _free($1183);
 _free($864);
 $1293 = ($1154<<24>>24)==(0);
 L162: do {
  if ($1293) {
   $$0125$lcssa = 0;
  } else {
   $1294 = $1151 << 1;
   $1295 = (($1294) + 2)|0;
   $1296 = ($5|0)==(2);
   $1297 = ($1151|0)==(0);
   $or$cond = $1296 & $1297;
   if ($1163) {
    $$0124166$us = 0;$$0125165$us = 0;$$1128164$us = 0;
    while(1) {
     $1298 = ($$1128164$us|0)>=($1181|0);
     $1299 = $1298&1;
     $1300 = (($1178) + ($1299))|0;
     $1301 = (($1184) + ($$0124166$us)|0);
     $1302 = (_rs_correct($1,0,$1301,$1300,$1162,0,0)|0);
     $1303 = ($1302|0)<(0);
     $1304 = ($1302|0)>($1295|0);
     $or$cond174 = $1303 | $1304;
     if ($or$cond174) {
      $$3 = -1;
      label = 274;
      break;
     }
     $1305 = ($1302|0)>(4);
     $or$cond3$us = $or$cond & $1305;
     $1306 = (($1300) - ($1162))|0;
     if ($or$cond3$us) {
      $$3 = -1;
      label = 274;
      break;
     }
     $1307 = (($1306) + ($$0125165$us))|0;
     $1308 = (($1300) + ($$0124166$us))|0;
     $1309 = (($1184) + ($$0125165$us)|0);
     _memmove(($1309|0),($1301|0),($1306|0))|0;
     $1310 = (($$1128164$us) + 1)|0;
     $1311 = ($1310>>>0)<($1155>>>0);
     if ($1311) {
      $$0124166$us = $1308;$$0125165$us = $1307;$$1128164$us = $1310;
     } else {
      $$0125$lcssa = $1307;
      break L162;
     }
    }
    if ((label|0) == 274) {
     _free($1184);
     STACKTOP = sp;return ($$3|0);
    }
   }
   if (!($or$cond)) {
    $$0124166 = 0;$$0125165 = 0;$$1128164 = 0;
    while(1) {
     $1325 = ($$1128164|0)>=($1181|0);
     $1326 = $1325&1;
     $1327 = (($1178) + ($1326))|0;
     $1328 = (($1184) + ($$0124166)|0);
     $1329 = (_rs_correct($1,0,$1328,$1327,$1162,0,0)|0);
     $1330 = ($1329|0)<(0);
     if ($1330) {
      $$3 = -1;
      break;
     }
     $1331 = (($1327) - ($1162))|0;
     $1332 = (($1331) + ($$0125165))|0;
     $1333 = (($1327) + ($$0124166))|0;
     $1334 = (($1184) + ($$0125165)|0);
     _memmove(($1334|0),($1328|0),($1331|0))|0;
     $1335 = (($$1128164) + 1)|0;
     $1336 = ($1335>>>0)<($1155>>>0);
     if ($1336) {
      $$0124166 = $1333;$$0125165 = $1332;$$1128164 = $1335;
     } else {
      $$0125$lcssa = $1332;
      break L162;
     }
    }
    _free($1184);
    STACKTOP = sp;return ($$3|0);
   }
   $$0124166$us167 = 0;$$0125165$us168 = 0;$$1128164$us169 = 0;
   while(1) {
    $1312 = ($$1128164$us169|0)>=($1181|0);
    $1313 = $1312&1;
    $1314 = (($1178) + ($1313))|0;
    $1315 = (($1184) + ($$0124166$us167)|0);
    $1316 = (_rs_correct($1,0,$1315,$1314,$1162,0,0)|0);
    $1317 = ($1316|0)<(0);
    if ($1317) {
     $$3 = -1;
     label = 274;
     break;
    }
    $1318 = ($1316|0)>(4);
    $1319 = (($1314) - ($1162))|0;
    if ($1318) {
     $$3 = -1;
     label = 274;
     break;
    }
    $1320 = (($1319) + ($$0125165$us168))|0;
    $1321 = (($1314) + ($$0124166$us167))|0;
    $1322 = (($1184) + ($$0125165$us168)|0);
    _memmove(($1322|0),($1315|0),($1319|0))|0;
    $1323 = (($$1128164$us169) + 1)|0;
    $1324 = ($1323>>>0)<($1155>>>0);
    if ($1324) {
     $$0124166$us167 = $1321;$$0125165$us168 = $1320;$$1128164$us169 = $1323;
    } else {
     $$0125$lcssa = $1320;
     break L162;
    }
   }
   if ((label|0) == 274) {
    _free($1184);
    STACKTOP = sp;return ($$3|0);
   }
  }
 } while(0);
 HEAP32[$0>>2] = 0;
 $1337 = ((($0)) + 4|0);
 HEAP32[$1337>>2] = 0;
 $1338 = ((($0)) + 11|0);
 HEAP8[$1338>>0] = 0;
 $1339 = ($5|0)>(9);
 $1340 = $1339&1;
 $1341 = ($5|0)>(26);
 $1342 = $1341&1;
 $1343 = (($1340) + ($1342))|0;
 $1344 = $$0125$lcssa << 3;
 $1345 = ($1344|0)>(3);
 do {
  if ($1345) {
   $1346 = (132769 + ($1343<<2)|0);
   $1347 = (((132769 + ($1343<<2)|0)) + 1|0);
   $1348 = (((132769 + ($1343<<2)|0)) + 2|0);
   $1349 = (((132769 + ($1343<<2)|0)) + 3|0);
   $1350 = ((($0)) + 10|0);
   $1351 = ((($0)) + 12|0);
   $$0244541$i = 0;$$0256540$i = 0;$$sroa$20$0538$i = 0;$$sroa$77$0539$i = 0;$1354 = $$0125$lcssa;$1356 = $1344;
   L191: while(1) {
    $1352 = (($$sroa$77$0539$i) + 4)|0;
    $1353 = ($1354|0)<(3);
    if ($1353) {
     $1355 = ($1356|0)<($1352|0);
     if ($1355) {
      $$0$i336414$i = -1;
     } else {
      $1357 = ($1352|0)==(0);
      if ($1357) {
       $$0244$lcssa$ph$i = $$0244541$i;
       label = 265;
       break;
      } else {
       label = 129;
      }
     }
    } else {
     label = 129;
    }
    if ((label|0) == 129) {
     label = 0;
     $1358 = (($1184) + ($$sroa$20$0538$i)|0);
     $1359 = HEAP8[$1358>>0]|0;
     $1360 = $1359&255;
     $1361 = (($$sroa$77$0539$i) + 8)|0;
     $1362 = $1360 << $1361;
     $1363 = ($$sroa$77$0539$i|0)>(4);
     if ($1363) {
      $1364 = ((($1358)) + 1|0);
      $1365 = HEAP8[$1364>>0]|0;
      $1366 = $1365&255;
      $1367 = $1366 << $$sroa$77$0539$i;
      $1368 = $1367 | $1362;
      $$037$i335$i = $1368;
     } else {
      $$037$i335$i = $1362;
     }
     $1369 = $$037$i335$i >>> 12;
     $1370 = $1369 & 15;
     $1371 = ($1370|0)==(0);
     if ($1371) {
      $$0244$lcssa$ph$i = $$0244541$i;
      label = 265;
      break;
     } else {
      $$0$i336414$i = $1370;
     }
    }
    $$pn$i = $1352 >> 3;
    $$sroa$20$1412$i = (($$pn$i) + ($$sroa$20$0538$i))|0;
    $$sroa$77$1413$i = $1352 & 7;
    $1372 = HEAP32[$1337>>2]|0;
    $1373 = ($1372|0)<($$0256540$i|0);
    $1374 = $$0256540$i << 1;
    $1375 = $1374 | 1;
    if ($1373) {
     $$pre$i134 = HEAP32[$0>>2]|0;
     $$1257$i = $$0256540$i;$1380 = $1372;$1382 = $$pre$i134;
    } else {
     $1376 = ($1375*12)|0;
     $1377 = HEAP32[$0>>2]|0;
     $1378 = (_realloc($1377,$1376)|0);
     HEAP32[$0>>2] = $1378;
     $$pre559$i = HEAP32[$1337>>2]|0;
     $$1257$i = $1375;$1380 = $$pre559$i;$1382 = $1378;
    }
    $1379 = (($1380) + 1)|0;
    HEAP32[$1337>>2] = $1379;
    $1381 = (($1382) + (($1380*12)|0)|0);
    HEAP32[$1381>>2] = $$0$i336414$i;
    $1383 = (((($1382) + (($1380*12)|0)|0)) + 4|0);
    HEAP32[$1383>>2] = 0;
    L206: do {
     switch ($$0$i336414$i|0) {
     case 1:  {
      $1384 = HEAP8[$1346>>0]|0;
      $1385 = $1384&255;
      $1386 = (16 - ($1385))|0;
      $1387 = (($$sroa$77$1413$i) + ($1385))|0;
      $1388 = (($$0125$lcssa) - ($$sroa$20$1412$i))|0;
      $1389 = ($1388|0)<(3);
      if ($1389) {
       $1390 = $1388 << 3;
       $1391 = ($1390|0)<($1387|0);
       if ($1391) {
        break L191;
       }
       $1392 = ($1387|0)==(0);
       if ($1392) {
        $$0$i333418$i = 0;$$pre$phi564$iZ2D = $1390;$$sroa$20$2416$i = $$sroa$20$1412$i;$$sroa$77$2417$i = $$sroa$77$1413$i;
       } else {
        label = 139;
       }
      } else {
       label = 139;
      }
      if ((label|0) == 139) {
       label = 0;
       $1393 = (($1184) + ($$sroa$20$1412$i)|0);
       $1394 = HEAP8[$1393>>0]|0;
       $1395 = $1394&255;
       $1396 = $$sroa$77$1413$i | 8;
       $1397 = $1395 << $1396;
       $1398 = ($1387>>>0)>(8);
       if ($1398) {
        $1399 = ((($1393)) + 1|0);
        $1400 = HEAP8[$1399>>0]|0;
        $1401 = $1400&255;
        $1402 = $1401 << $$sroa$77$1413$i;
        $1403 = $1402 | $1397;
        $1404 = ($1387>>>0)>(16);
        if ($1404) {
         $1405 = (8 - ($$sroa$77$1413$i))|0;
         $1406 = ((($1393)) + 2|0);
         $1407 = HEAP8[$1406>>0]|0;
         $1408 = $1407&255;
         $1409 = $1408 >>> $1405;
         $1410 = $1409 | $1403;
         $$037$i332$i = $1410;
        } else {
         $$037$i332$i = $1403;
        }
       } else {
        $$037$i332$i = $1397;
       }
       $1411 = $1387 >>> 3;
       $1412 = (($1411) + ($$sroa$20$1412$i))|0;
       $1413 = $$037$i332$i & 65535;
       $1414 = $1413 >>> $1386;
       $1415 = ($1414|0)<(0);
       if ($1415) {
        break L191;
       }
       $1416 = $1387 & 7;
       $$pre562$i = (($$0125$lcssa) - ($1412))|0;
       $$pre563$i = $$pre562$i << 3;
       $$0$i333418$i = $1414;$$pre$phi564$iZ2D = $$pre563$i;$$sroa$20$2416$i = $1412;$$sroa$77$2417$i = $1416;
      }
      $1417 = (($$0$i333418$i>>>0) / 3)&-1;
      $1418 = ($1417*3)|0;
      $1419 = (($$0$i333418$i) - ($1418))|0;
      $1420 = (($$pre$phi564$iZ2D) - ($$sroa$77$2417$i))|0;
      $1421 = ($1417*10)|0;
      $1422 = $1419 >>> 1;
      $1423 = (0 - ($1422))|0;
      $1424 = $1423 & 7;
      $1425 = (($1424) + ($1421))|0;
      $1426 = $1419 << 2;
      $1427 = $1426 & 4;
      $1428 = (($1425) + ($1427))|0;
      $1429 = ($1420|0)<($1428|0);
      if ($1429) {
       break L191;
      }
      $1430 = (_malloc($$0$i333418$i)|0);
      HEAP32[$1383>>2] = $1430;
      $1431 = (((($1382) + (($1380*12)|0)|0)) + 8|0);
      HEAP32[$1431>>2] = $$0$i333418$i;
      $1432 = ($$0$i333418$i>>>0)>(2);
      if ($1432) {
       $$0270529$i = $1430;$$1245530$i = $$0244541$i;$$in550$i = $1417;$$sroa$20$3527$i = $$sroa$20$2416$i;$$sroa$77$3528$i = $$sroa$77$2417$i;
       while(1) {
        $1433 = (($$in550$i) + -1)|0;
        $1434 = (($$sroa$77$3528$i) + 10)|0;
        $1435 = (($$0125$lcssa) - ($$sroa$20$3527$i))|0;
        $1436 = ($1435|0)<(3);
        if ($1436) {
         $1437 = $1435 << 3;
         $1438 = ($1437|0)<($1434|0);
         if ($1438) {
          break L191;
         }
         $1439 = ($1434|0)==(0);
         if ($1439) {
          $$0$i330422$i = 0;$$sroa$20$4420$i = $$sroa$20$3527$i;$$sroa$77$4421$i = -10;
         } else {
          label = 150;
         }
        } else {
         label = 150;
        }
        if ((label|0) == 150) {
         label = 0;
         $1440 = (($1184) + ($$sroa$20$3527$i)|0);
         $1441 = HEAP8[$1440>>0]|0;
         $1442 = $1441&255;
         $1443 = (($$sroa$77$3528$i) + 8)|0;
         $1444 = $1442 << $1443;
         $1445 = ($$sroa$77$3528$i|0)>(-2);
         do {
          if ($1445) {
           $1446 = ((($1440)) + 1|0);
           $1447 = HEAP8[$1446>>0]|0;
           $1448 = $1447&255;
           $1449 = $1448 << $$sroa$77$3528$i;
           $1450 = $1449 | $1444;
           $1451 = ($$sroa$77$3528$i|0)>(6);
           if (!($1451)) {
            $$037$i329$i = $1450;
            break;
           }
           $1452 = (8 - ($$sroa$77$3528$i))|0;
           $1453 = ((($1440)) + 2|0);
           $1454 = HEAP8[$1453>>0]|0;
           $1455 = $1454&255;
           $1456 = $1455 >>> $1452;
           $1457 = $1456 | $1450;
           $$037$i329$i = $1457;
          } else {
           $$037$i329$i = $1444;
          }
         } while(0);
         $1458 = $1434 >> 3;
         $1459 = (($1458) + ($$sroa$20$3527$i))|0;
         $1460 = $1434 & 7;
         $1461 = $$037$i329$i >>> 6;
         $1462 = $1461 & 1023;
         $1463 = ($1462>>>0)>(999);
         if ($1463) {
          break L191;
         } else {
          $$0$i330422$i = $1462;$$sroa$20$4420$i = $1459;$$sroa$77$4421$i = $1460;
         }
        }
        $1464 = (($$0$i330422$i>>>0) / 100)&-1;
        $1465 = $1464 | 48;
        $1466 = $1465 ^ $$1245530$i;
        $1467 = $1465&255;
        $1468 = ((($$0270529$i)) + 1|0);
        HEAP8[$$0270529$i>>0] = $1467;
        $1469 = ($1464*100)|0;
        $1470 = (($$0$i330422$i) - ($1469))|0;
        $1471 = (($1470>>>0) / 10)&-1;
        $1472 = $1471 | 48;
        $1473 = $1466 ^ $1472;
        $1474 = $1472&255;
        $1475 = ((($$0270529$i)) + 2|0);
        HEAP8[$1468>>0] = $1474;
        $1476 = ($1471*10)|0;
        $1477 = (($1470) - ($1476))|0;
        $1478 = $1477 | 48;
        $1479 = $1473 ^ $1478;
        $1480 = $1478&255;
        $1481 = ((($$0270529$i)) + 3|0);
        HEAP8[$1475>>0] = $1480;
        $1482 = ($$in550$i|0)>(1);
        if ($1482) {
         $$0270529$i = $1481;$$1245530$i = $1479;$$in550$i = $1433;$$sroa$20$3527$i = $$sroa$20$4420$i;$$sroa$77$3528$i = $$sroa$77$4421$i;
        } else {
         $$0270$lcssa$i = $1481;$$1245$lcssa$i = $1479;$$sroa$20$3$lcssa$i = $$sroa$20$4420$i;$$sroa$77$3$lcssa$i = $$sroa$77$4421$i;
         break;
        }
       }
      } else {
       $$0270$lcssa$i = $1430;$$1245$lcssa$i = $$0244541$i;$$sroa$20$3$lcssa$i = $$sroa$20$2416$i;$$sroa$77$3$lcssa$i = $$sroa$77$2417$i;
      }
      $1483 = ($1419>>>0)>(1);
      if ($1483) {
       $1484 = (($$sroa$77$3$lcssa$i) + 7)|0;
       $1485 = (($$0125$lcssa) - ($$sroa$20$3$lcssa$i))|0;
       $1486 = ($1485|0)<(3);
       if ($1486) {
        $1487 = $1485 << 3;
        $1488 = ($1487|0)<($1484|0);
        if ($1488) {
         break L191;
        }
        $1489 = ($1484|0)==(0);
        if ($1489) {
         $$0$i327426$i = 0;$$sroa$20$5424$i = $$sroa$20$3$lcssa$i;$$sroa$77$5425$i = -7;
        } else {
         label = 159;
        }
       } else {
        label = 159;
       }
       if ((label|0) == 159) {
        label = 0;
        $1490 = (($1184) + ($$sroa$20$3$lcssa$i)|0);
        $1491 = HEAP8[$1490>>0]|0;
        $1492 = $1491&255;
        $1493 = (($$sroa$77$3$lcssa$i) + 8)|0;
        $1494 = $1492 << $1493;
        $1495 = ($$sroa$77$3$lcssa$i|0)>(1);
        if ($1495) {
         $1496 = ((($1490)) + 1|0);
         $1497 = HEAP8[$1496>>0]|0;
         $1498 = $1497&255;
         $1499 = $1498 << $$sroa$77$3$lcssa$i;
         $1500 = $1499 | $1494;
         $$037$i326$i = $1500;
        } else {
         $$037$i326$i = $1494;
        }
        $1501 = $1484 >> 3;
        $1502 = (($1501) + ($$sroa$20$3$lcssa$i))|0;
        $1503 = $1484 & 7;
        $1504 = $$037$i326$i >>> 9;
        $1505 = $1504 & 127;
        $1506 = ($1505>>>0)>(99);
        if ($1506) {
         break L191;
        } else {
         $$0$i327426$i = $1505;$$sroa$20$5424$i = $1502;$$sroa$77$5425$i = $1503;
        }
       }
       $1507 = (($$0$i327426$i>>>0) / 10)&-1;
       $1508 = $1507 | 48;
       $1509 = $1508 ^ $$1245$lcssa$i;
       $1510 = $1508&255;
       $1511 = ((($$0270$lcssa$i)) + 1|0);
       HEAP8[$$0270$lcssa$i>>0] = $1510;
       $1512 = ($1507*10)|0;
       $1513 = (($$0$i327426$i) - ($1512))|0;
       $1514 = $1513 | 48;
       $1515 = $1509 ^ $1514;
       $1516 = $1514&255;
       HEAP8[$1511>>0] = $1516;
       $$11$i = $1515;$$sroa$20$28$i = $$sroa$20$5424$i;$$sroa$77$28$i = $$sroa$77$5425$i;
       break L206;
      }
      $1517 = ($1419|0)==(0);
      if ($1517) {
       $$11$i = $$1245$lcssa$i;$$sroa$20$28$i = $$sroa$20$3$lcssa$i;$$sroa$77$28$i = $$sroa$77$3$lcssa$i;
      } else {
       $1518 = (($$sroa$77$3$lcssa$i) + 4)|0;
       $1519 = (($$0125$lcssa) - ($$sroa$20$3$lcssa$i))|0;
       $1520 = ($1519|0)<(3);
       do {
        if ($1520) {
         $1521 = $1519 << 3;
         $1522 = ($1521|0)<($1518|0);
         if ($1522) {
          break L191;
         }
         $1523 = ($1518|0)==(0);
         if (!($1523)) {
          label = 168;
          break;
         }
         $1524 = $$1245$lcssa$i ^ 48;
         $$sroa$20$6428$i = $$sroa$20$3$lcssa$i;$$sroa$77$6429$i = -4;$1545 = 48;$1967 = $1524;
        } else {
         label = 168;
        }
       } while(0);
       if ((label|0) == 168) {
        label = 0;
        $1525 = (($1184) + ($$sroa$20$3$lcssa$i)|0);
        $1526 = HEAP8[$1525>>0]|0;
        $1527 = $1526&255;
        $1528 = (($$sroa$77$3$lcssa$i) + 8)|0;
        $1529 = $1527 << $1528;
        $1530 = ($$sroa$77$3$lcssa$i|0)>(4);
        if ($1530) {
         $1531 = ((($1525)) + 1|0);
         $1532 = HEAP8[$1531>>0]|0;
         $1533 = $1532&255;
         $1534 = $1533 << $$sroa$77$3$lcssa$i;
         $1535 = $1534 | $1529;
         $$037$i323$i = $1535;
        } else {
         $$037$i323$i = $1529;
        }
        $1536 = $1518 >> 3;
        $1537 = (($1536) + ($$sroa$20$3$lcssa$i))|0;
        $1538 = $1518 & 7;
        $1539 = $$037$i323$i >>> 12;
        $1540 = $1539 & 15;
        $1541 = ($1540>>>0)>(9);
        $1542 = $1540 | 48;
        $1543 = $1542 ^ $$1245$lcssa$i;
        if ($1541) {
         break L191;
        } else {
         $$sroa$20$6428$i = $1537;$$sroa$77$6429$i = $1538;$1545 = $1542;$1967 = $1543;
        }
       }
       $1544 = $1545&255;
       HEAP8[$$0270$lcssa$i>>0] = $1544;
       $$11$i = $1967;$$sroa$20$28$i = $$sroa$20$6428$i;$$sroa$77$28$i = $$sroa$77$6429$i;
      }
      break;
     }
     case 2:  {
      $1546 = HEAP8[$1347>>0]|0;
      $1547 = $1546&255;
      $1548 = (16 - ($1547))|0;
      $1549 = (($$sroa$77$1413$i) + ($1547))|0;
      $1550 = (($$0125$lcssa) - ($$sroa$20$1412$i))|0;
      $1551 = ($1550|0)<(3);
      if ($1551) {
       $1552 = $1550 << 3;
       $1553 = ($1552|0)<($1549|0);
       if ($1553) {
        break L191;
       }
       $1554 = ($1549|0)==(0);
       if ($1554) {
        $$0$i321434$i = 0;$$pre$phi570$iZ2D = $1552;$$sroa$20$8432$i = $$sroa$20$1412$i;$$sroa$77$8433$i = $$sroa$77$1413$i;
       } else {
        label = 175;
       }
      } else {
       label = 175;
      }
      if ((label|0) == 175) {
       label = 0;
       $1555 = (($1184) + ($$sroa$20$1412$i)|0);
       $1556 = HEAP8[$1555>>0]|0;
       $1557 = $1556&255;
       $1558 = $$sroa$77$1413$i | 8;
       $1559 = $1557 << $1558;
       $1560 = ($1549>>>0)>(8);
       if ($1560) {
        $1561 = ((($1555)) + 1|0);
        $1562 = HEAP8[$1561>>0]|0;
        $1563 = $1562&255;
        $1564 = $1563 << $$sroa$77$1413$i;
        $1565 = $1564 | $1559;
        $1566 = ($1549>>>0)>(16);
        if ($1566) {
         $1567 = (8 - ($$sroa$77$1413$i))|0;
         $1568 = ((($1555)) + 2|0);
         $1569 = HEAP8[$1568>>0]|0;
         $1570 = $1569&255;
         $1571 = $1570 >>> $1567;
         $1572 = $1571 | $1565;
         $$037$i320$i = $1572;
        } else {
         $$037$i320$i = $1565;
        }
       } else {
        $$037$i320$i = $1559;
       }
       $1573 = $1549 >>> 3;
       $1574 = (($1573) + ($$sroa$20$1412$i))|0;
       $1575 = $$037$i320$i & 65535;
       $1576 = $1575 >>> $1548;
       $1577 = ($1576|0)<(0);
       if ($1577) {
        break L191;
       }
       $1578 = $1549 & 7;
       $$pre567$i = (($$0125$lcssa) - ($1574))|0;
       $$pre569$i = $$pre567$i << 3;
       $$0$i321434$i = $1576;$$pre$phi570$iZ2D = $$pre569$i;$$sroa$20$8432$i = $1574;$$sroa$77$8433$i = $1578;
      }
      $1579 = $$0$i321434$i >>> 1;
      $1580 = $$0$i321434$i & 1;
      $1581 = (($$pre$phi570$iZ2D) - ($$sroa$77$8433$i))|0;
      $1582 = ($1579*11)|0;
      $1583 = (0 - ($1580))|0;
      $1584 = $1583 & 6;
      $1585 = (($1582) + ($1584))|0;
      $1586 = ($1581|0)<($1585|0);
      if ($1586) {
       break L191;
      }
      $1587 = (_malloc($$0$i321434$i)|0);
      HEAP32[$1383>>2] = $1587;
      $1588 = (((($1382) + (($1380*12)|0)|0)) + 8|0);
      HEAP32[$1588>>2] = $$0$i321434$i;
      $1589 = ($1579|0)==(0);
      if ($1589) {
       $$0269$lcssa$i = $1587;$$4248$lcssa$i = $$0244541$i;$$sroa$20$9$lcssa$i = $$sroa$20$8432$i;$$sroa$77$9$lcssa$i = $$sroa$77$8433$i;
      } else {
       $$0269520$i = $1587;$$4248521$i = $$0244541$i;$$in549$i = $1579;$$sroa$20$9518$i = $$sroa$20$8432$i;$$sroa$77$9519$i = $$sroa$77$8433$i;
       while(1) {
        $1590 = (($$in549$i) + -1)|0;
        $1591 = (($$sroa$77$9519$i) + 11)|0;
        $1592 = (($$0125$lcssa) - ($$sroa$20$9518$i))|0;
        $1593 = ($1592|0)<(3);
        if ($1593) {
         $1594 = $1592 << 3;
         $1595 = ($1594|0)<($1591|0);
         if ($1595) {
          break L191;
         }
         $1596 = ($1591|0)==(0);
         if ($1596) {
          $$0$i318438$i = 0;$$sroa$20$10436$i = $$sroa$20$9518$i;$$sroa$77$10437$i = -11;
         } else {
          label = 186;
         }
        } else {
         label = 186;
        }
        if ((label|0) == 186) {
         label = 0;
         $1597 = (($1184) + ($$sroa$20$9518$i)|0);
         $1598 = HEAP8[$1597>>0]|0;
         $1599 = $1598&255;
         $1600 = (($$sroa$77$9519$i) + 8)|0;
         $1601 = $1599 << $1600;
         $1602 = ($$sroa$77$9519$i|0)>(-3);
         do {
          if ($1602) {
           $1603 = ((($1597)) + 1|0);
           $1604 = HEAP8[$1603>>0]|0;
           $1605 = $1604&255;
           $1606 = $1605 << $$sroa$77$9519$i;
           $1607 = $1606 | $1601;
           $1608 = ($$sroa$77$9519$i|0)>(5);
           if (!($1608)) {
            $$037$i317$i = $1607;
            break;
           }
           $1609 = (8 - ($$sroa$77$9519$i))|0;
           $1610 = ((($1597)) + 2|0);
           $1611 = HEAP8[$1610>>0]|0;
           $1612 = $1611&255;
           $1613 = $1612 >>> $1609;
           $1614 = $1613 | $1607;
           $$037$i317$i = $1614;
          } else {
           $$037$i317$i = $1601;
          }
         } while(0);
         $1615 = $1591 >> 3;
         $1616 = (($1615) + ($$sroa$20$9518$i))|0;
         $1617 = $1591 & 7;
         $1618 = $$037$i317$i >>> 5;
         $1619 = $1618 & 2047;
         $1620 = ($1619>>>0)>(2024);
         if ($1620) {
          break L191;
         } else {
          $$0$i318438$i = $1619;$$sroa$20$10436$i = $1616;$$sroa$77$10437$i = $1617;
         }
        }
        $1621 = (($$0$i318438$i>>>0) / 45)&-1;
        $1622 = (384 + ($1621)|0);
        $1623 = HEAP8[$1622>>0]|0;
        $1624 = $1623&255;
        $1625 = $$4248521$i ^ $1624;
        $1626 = ((($$0269520$i)) + 1|0);
        HEAP8[$$0269520$i>>0] = $1623;
        $1627 = ($1621*45)|0;
        $1628 = (($$0$i318438$i) - ($1627))|0;
        $1629 = (384 + ($1628)|0);
        $1630 = HEAP8[$1629>>0]|0;
        $1631 = $1630&255;
        $1632 = $1625 ^ $1631;
        $1633 = ((($$0269520$i)) + 2|0);
        HEAP8[$1626>>0] = $1630;
        $1634 = ($$in549$i|0)>(1);
        if ($1634) {
         $$0269520$i = $1633;$$4248521$i = $1632;$$in549$i = $1590;$$sroa$20$9518$i = $$sroa$20$10436$i;$$sroa$77$9519$i = $$sroa$77$10437$i;
        } else {
         $$0269$lcssa$i = $1633;$$4248$lcssa$i = $1632;$$sroa$20$9$lcssa$i = $$sroa$20$10436$i;$$sroa$77$9$lcssa$i = $$sroa$77$10437$i;
         break;
        }
       }
      }
      $1635 = ($1580|0)==(0);
      if ($1635) {
       $$11$i = $$4248$lcssa$i;$$sroa$20$28$i = $$sroa$20$9$lcssa$i;$$sroa$77$28$i = $$sroa$77$9$lcssa$i;
      } else {
       $1636 = (($$sroa$77$9$lcssa$i) + 6)|0;
       $1637 = (($$0125$lcssa) - ($$sroa$20$9$lcssa$i))|0;
       $1638 = ($1637|0)<(3);
       if ($1638) {
        $1639 = $1637 << 3;
        $1640 = ($1639|0)<($1636|0);
        if ($1640) {
         break L191;
        }
        $1641 = ($1636|0)==(0);
        if ($1641) {
         $$sroa$20$11440$i = $$sroa$20$9$lcssa$i;$$sroa$77$11441$i = -6;$1661 = 384;
        } else {
         label = 195;
        }
       } else {
        label = 195;
       }
       if ((label|0) == 195) {
        label = 0;
        $1642 = (($1184) + ($$sroa$20$9$lcssa$i)|0);
        $1643 = HEAP8[$1642>>0]|0;
        $1644 = $1643&255;
        $1645 = (($$sroa$77$9$lcssa$i) + 8)|0;
        $1646 = $1644 << $1645;
        $1647 = ($$sroa$77$9$lcssa$i|0)>(2);
        if ($1647) {
         $1648 = ((($1642)) + 1|0);
         $1649 = HEAP8[$1648>>0]|0;
         $1650 = $1649&255;
         $1651 = $1650 << $$sroa$77$9$lcssa$i;
         $1652 = $1651 | $1646;
         $$037$i314$i = $1652;
        } else {
         $$037$i314$i = $1646;
        }
        $1653 = $1636 >> 3;
        $1654 = (($1653) + ($$sroa$20$9$lcssa$i))|0;
        $1655 = $1636 & 7;
        $1656 = $$037$i314$i >>> 10;
        $1657 = $1656 & 63;
        $1658 = ($1657>>>0)>(44);
        $1659 = (384 + ($1657)|0);
        if ($1658) {
         break L191;
        } else {
         $$sroa$20$11440$i = $1654;$$sroa$77$11441$i = $1655;$1661 = $1659;
        }
       }
       $1660 = HEAP8[$1661>>0]|0;
       $1662 = $1660&255;
       $1663 = $$4248$lcssa$i ^ $1662;
       HEAP8[$$0269$lcssa$i>>0] = $1660;
       $$11$i = $1663;$$sroa$20$28$i = $$sroa$20$11440$i;$$sroa$77$28$i = $$sroa$77$11441$i;
      }
      break;
     }
     case 3:  {
      $1664 = $$sroa$77$1413$i | 16;
      $1665 = (($$0125$lcssa) - ($$sroa$20$1412$i))|0;
      $1666 = ($1665|0)<(3);
      $1667 = $1665 << 3;
      $1668 = ($1667|0)<($1664|0);
      $or$cond479$i = $1666 & $1668;
      if ($or$cond479$i) {
       break L191;
      }
      $1669 = (($1184) + ($$sroa$20$1412$i)|0);
      $1670 = HEAP8[$1669>>0]|0;
      $1671 = $1670&255;
      $1672 = $$sroa$77$1413$i | 8;
      $1673 = $1671 << $1672;
      $1674 = ((($1669)) + 1|0);
      $1675 = HEAP8[$1674>>0]|0;
      $1676 = $1675&255;
      $1677 = $1676 << $$sroa$77$1413$i;
      $1678 = $1677 | $1673;
      $1679 = ($1664|0)==(16);
      if ($1679) {
       $$037$i311$i = $1678;
      } else {
       $1680 = (8 - ($$sroa$77$1413$i))|0;
       $1681 = ((($1669)) + 2|0);
       $1682 = HEAP8[$1681>>0]|0;
       $1683 = $1682&255;
       $1684 = $1683 >>> $1680;
       $1685 = $1684 | $1678;
       $$037$i311$i = $1685;
      }
      $1686 = (($$sroa$20$1412$i) + 2)|0;
      $1687 = HEAP8[$1338>>0]|0;
      $1688 = ($1687<<24>>24)==(0);
      if ($1688) {
       $1689 = $$037$i311$i >>> 12;
       $1690 = $1689 & 15;
       $1691 = $1690&255;
       HEAP8[$1383>>0] = $1691;
       HEAP8[$1350>>0] = $1691;
       $1692 = $$037$i311$i >>> 8;
       $1693 = $1692 & 15;
       $1694 = (($1693) + 1)|0;
       $1695 = $1694&255;
       $1696 = ((($1383)) + 1|0);
       HEAP8[$1696>>0] = $1695;
       HEAP8[$1338>>0] = $1695;
       $1697 = $$037$i311$i&255;
       $1698 = ((($1383)) + 2|0);
       HEAP8[$1698>>0] = $1697;
       HEAP8[$1351>>0] = $1697;
       $$11$i = $$0244541$i;$$sroa$20$28$i = $1686;$$sroa$77$28$i = $$sroa$77$1413$i;
      } else {
       $$11$i = $$0244541$i;$$sroa$20$28$i = $1686;$$sroa$77$28$i = $$sroa$77$1413$i;
      }
      break;
     }
     case 4:  {
      $1699 = HEAP8[$1348>>0]|0;
      $1700 = $1699&255;
      $1701 = (16 - ($1700))|0;
      $1702 = (($$sroa$77$1413$i) + ($1700))|0;
      $1703 = (($$0125$lcssa) - ($$sroa$20$1412$i))|0;
      $1704 = ($1703|0)<(3);
      if ($1704) {
       $1705 = $1703 << 3;
       $1706 = ($1705|0)<($1702|0);
       if ($1706) {
        break L191;
       }
       $1707 = ($1702|0)==(0);
       if ($1707) {
        $$0$i309453$i = 0;$$pre$phi574$iZ2D = $1705;$$sroa$20$14451$i = $$sroa$20$1412$i;$$sroa$77$14452$i = $$sroa$77$1413$i;
       } else {
        label = 207;
       }
      } else {
       label = 207;
      }
      if ((label|0) == 207) {
       label = 0;
       $1708 = (($1184) + ($$sroa$20$1412$i)|0);
       $1709 = HEAP8[$1708>>0]|0;
       $1710 = $1709&255;
       $1711 = $$sroa$77$1413$i | 8;
       $1712 = $1710 << $1711;
       $1713 = ($1702>>>0)>(8);
       if ($1713) {
        $1714 = ((($1708)) + 1|0);
        $1715 = HEAP8[$1714>>0]|0;
        $1716 = $1715&255;
        $1717 = $1716 << $$sroa$77$1413$i;
        $1718 = $1717 | $1712;
        $1719 = ($1702>>>0)>(16);
        if ($1719) {
         $1720 = (8 - ($$sroa$77$1413$i))|0;
         $1721 = ((($1708)) + 2|0);
         $1722 = HEAP8[$1721>>0]|0;
         $1723 = $1722&255;
         $1724 = $1723 >>> $1720;
         $1725 = $1724 | $1718;
         $$037$i308$i = $1725;
        } else {
         $$037$i308$i = $1718;
        }
       } else {
        $$037$i308$i = $1712;
       }
       $1726 = $1702 >>> 3;
       $1727 = (($1726) + ($$sroa$20$1412$i))|0;
       $1728 = $$037$i308$i & 65535;
       $1729 = $1728 >>> $1701;
       $1730 = ($1729|0)<(0);
       if ($1730) {
        break L191;
       }
       $1731 = $1702 & 7;
       $$pre571$i = (($$0125$lcssa) - ($1727))|0;
       $$pre573$i = $$pre571$i << 3;
       $$0$i309453$i = $1729;$$pre$phi574$iZ2D = $$pre573$i;$$sroa$20$14451$i = $1727;$$sroa$77$14452$i = $1731;
      }
      $1732 = (($$pre$phi574$iZ2D) - ($$sroa$77$14452$i))|0;
      $1733 = $$0$i309453$i << 3;
      $1734 = ($1732|0)<($1733|0);
      if ($1734) {
       break L191;
      }
      $1735 = (_malloc($$0$i309453$i)|0);
      HEAP32[$1383>>2] = $1735;
      $1736 = (((($1382) + (($1380*12)|0)|0)) + 8|0);
      HEAP32[$1736>>2] = $$0$i309453$i;
      $1737 = ($$0$i309453$i|0)>(0);
      if ($1737) {
       $$0243513$i = $$0$i309453$i;$$0255511$i = $1735;$$7251512$i = $$0244541$i;$$sroa$20$15509$i = $$sroa$20$14451$i;$$sroa$77$15510$i = $$sroa$77$14452$i;
       while(1) {
        $1738 = (($$0243513$i) + -1)|0;
        $1739 = (($$sroa$77$15510$i) + 8)|0;
        $1740 = (($$0125$lcssa) - ($$sroa$20$15509$i))|0;
        $1741 = ($1740|0)<(3);
        do {
         if ($1741) {
          $1742 = $1740 << 3;
          $1743 = ($1742|0)<($1739|0);
          if ($1743) {
           $1744 = $1739 >> 3;
           $1745 = (($1744) + ($$sroa$20$15509$i))|0;
           $1746 = $1739 & 7;
           $$0$i306$i = -1;$$sroa$20$16$i = $1745;$$sroa$77$16$i = $1746;
           break;
          } else {
           $1747 = ($1739|0)==(0);
           if ($1747) {
            $$0$i306$i = 0;$$sroa$20$16$i = $$sroa$20$15509$i;$$sroa$77$16$i = -8;
            break;
           } else {
            label = 219;
            break;
           }
          }
         } else {
          label = 219;
         }
        } while(0);
        if ((label|0) == 219) {
         label = 0;
         $1748 = (($1184) + ($$sroa$20$15509$i)|0);
         $1749 = HEAP8[$1748>>0]|0;
         $1750 = $1749&255;
         $1751 = $1750 << $1739;
         $1752 = ($$sroa$77$15510$i|0)>(0);
         if ($1752) {
          $1753 = ((($1748)) + 1|0);
          $1754 = HEAP8[$1753>>0]|0;
          $1755 = $1754&255;
          $1756 = $1755 << $$sroa$77$15510$i;
          $1757 = $1756 | $1751;
          $$037$i305$i = $1757;
         } else {
          $$037$i305$i = $1751;
         }
         $1758 = $1739 >> 3;
         $1759 = (($1758) + ($$sroa$20$15509$i))|0;
         $1760 = $1739 & 7;
         $1761 = $$037$i305$i >>> 8;
         $1762 = $1761 & 255;
         $$0$i306$i = $1762;$$sroa$20$16$i = $1759;$$sroa$77$16$i = $1760;
        }
        $1763 = $$0$i306$i ^ $$7251512$i;
        $1764 = $$0$i306$i&255;
        $1765 = ((($$0255511$i)) + 1|0);
        HEAP8[$$0255511$i>>0] = $1764;
        $1766 = ($$0243513$i|0)>(1);
        if ($1766) {
         $$0243513$i = $1738;$$0255511$i = $1765;$$7251512$i = $1763;$$sroa$20$15509$i = $$sroa$20$16$i;$$sroa$77$15510$i = $$sroa$77$16$i;
        } else {
         $$11$i = $1763;$$sroa$20$28$i = $$sroa$20$16$i;$$sroa$77$28$i = $$sroa$77$16$i;
         break;
        }
       }
      } else {
       $$11$i = $$0244541$i;$$sroa$20$28$i = $$sroa$20$14451$i;$$sroa$77$28$i = $$sroa$77$14452$i;
      }
      break;
     }
     case 5:  {
      $$11$i = $$0244541$i;$$sroa$20$28$i = $$sroa$20$1412$i;$$sroa$77$28$i = $$sroa$77$1413$i;
      break;
     }
     case 7:  {
      $1767 = $$sroa$77$1413$i | 8;
      $1768 = (($$0125$lcssa) - ($$sroa$20$1412$i))|0;
      $1769 = ($1768|0)<(3);
      $1770 = $1768 << 3;
      $1771 = ($1770|0)<($1767|0);
      $or$cond481$i = $1769 & $1771;
      if ($or$cond481$i) {
       break L191;
      }
      $1772 = (($1184) + ($$sroa$20$1412$i)|0);
      $1773 = HEAP8[$1772>>0]|0;
      $1774 = $1773&255;
      $1775 = $1774 << $1767;
      $1776 = ($1767|0)==(8);
      if ($1776) {
       $$037$i302$i = $1775;
      } else {
       $1777 = ((($1772)) + 1|0);
       $1778 = HEAP8[$1777>>0]|0;
       $1779 = $1778&255;
       $1780 = $1779 << $$sroa$77$1413$i;
       $1781 = $1780 | $1775;
       $$037$i302$i = $1781;
      }
      $1782 = (($$sroa$20$1412$i) + 1)|0;
      $1783 = $$037$i302$i >>> 8;
      $1784 = $1783 & 255;
      $1785 = $$037$i302$i & 32768;
      $1786 = ($1785|0)==(0);
      do {
       if ($1786) {
        $$0242$i = $1784;$$sroa$20$21$i = $1782;
       } else {
        $1787 = $$037$i302$i & 16384;
        $1788 = ($1787|0)==(0);
        if ($1788) {
         $1789 = (($$0125$lcssa) - ($1782))|0;
         $1790 = ($1789|0)<(3);
         $1791 = $1789 << 3;
         $1792 = ($1791|0)<($1767|0);
         $or$cond487$i = $1790 & $1792;
         if ($or$cond487$i) {
          break L191;
         }
         $1793 = (($1184) + ($1782)|0);
         $1794 = HEAP8[$1793>>0]|0;
         $1795 = $1794&255;
         $1796 = $1795 << $1767;
         if ($1776) {
          $$037$i299$i = $1796;
         } else {
          $1797 = ((($1793)) + 1|0);
          $1798 = HEAP8[$1797>>0]|0;
          $1799 = $1798&255;
          $1800 = $1799 << $$sroa$77$1413$i;
          $1801 = $1800 | $1796;
          $$037$i299$i = $1801;
         }
         $1802 = (($$sroa$20$1412$i) + 2)|0;
         $1803 = $$037$i299$i >>> 8;
         $1804 = $1803 & 255;
         $$0242$i = $1804;$$sroa$20$21$i = $1802;
         break;
        }
        $1805 = $$037$i302$i & 8192;
        $1806 = ($1805|0)==(0);
        if (!($1806)) {
         break L191;
        }
        $1807 = $$sroa$77$1413$i | 16;
        $1808 = (($$0125$lcssa) - ($1782))|0;
        $1809 = ($1808|0)<(3);
        $1810 = $1808 << 3;
        $1811 = ($1810|0)<($1807|0);
        $or$cond483$i = $1809 & $1811;
        if ($or$cond483$i) {
         break L191;
        }
        $1812 = (($1184) + ($1782)|0);
        $1813 = HEAP8[$1812>>0]|0;
        $1814 = $1813&255;
        $1815 = $1814 << $1767;
        $1816 = ((($1812)) + 1|0);
        $1817 = HEAP8[$1816>>0]|0;
        $1818 = $1817&255;
        $1819 = $1818 << $$sroa$77$1413$i;
        $1820 = $1819 | $1815;
        $1821 = ($1807|0)==(16);
        if ($1821) {
         $$037$i296$i = $1820;
        } else {
         $1822 = (8 - ($$sroa$77$1413$i))|0;
         $1823 = ((($1812)) + 2|0);
         $1824 = HEAP8[$1823>>0]|0;
         $1825 = $1824&255;
         $1826 = $1825 >>> $1822;
         $1827 = $1826 | $1820;
         $$037$i296$i = $1827;
        }
        $1828 = $$037$i296$i & 65535;
        $1829 = (($$sroa$20$1412$i) + 3)|0;
        $$0242$i = $1828;$$sroa$20$21$i = $1829;
       }
      } while(0);
      HEAP32[$1383>>2] = $$0242$i;
      $$11$i = $$0244541$i;$$sroa$20$28$i = $$sroa$20$21$i;$$sroa$77$28$i = $$sroa$77$1413$i;
      break;
     }
     case 8:  {
      $1830 = HEAP8[$1349>>0]|0;
      $1831 = $1830&255;
      $1832 = (16 - ($1831))|0;
      $1833 = (($$sroa$77$1413$i) + ($1831))|0;
      $1834 = (($$0125$lcssa) - ($$sroa$20$1412$i))|0;
      $1835 = ($1834|0)<(3);
      if ($1835) {
       $1836 = $1834 << 3;
       $1837 = ($1836|0)<($1833|0);
       if ($1837) {
        break L191;
       }
       $1838 = ($1833|0)==(0);
       if ($1838) {
        $$0$i294466$i = 0;$$pre$phi578$iZ2D = $1836;$$sroa$20$23464$i = $$sroa$20$1412$i;$$sroa$77$23465$i = $$sroa$77$1413$i;
       } else {
        label = 241;
       }
      } else {
       label = 241;
      }
      if ((label|0) == 241) {
       label = 0;
       $1839 = (($1184) + ($$sroa$20$1412$i)|0);
       $1840 = HEAP8[$1839>>0]|0;
       $1841 = $1840&255;
       $1842 = $$sroa$77$1413$i | 8;
       $1843 = $1841 << $1842;
       $1844 = ($1833>>>0)>(8);
       if ($1844) {
        $1845 = ((($1839)) + 1|0);
        $1846 = HEAP8[$1845>>0]|0;
        $1847 = $1846&255;
        $1848 = $1847 << $$sroa$77$1413$i;
        $1849 = $1848 | $1843;
        $1850 = ($1833>>>0)>(16);
        if ($1850) {
         $1851 = (8 - ($$sroa$77$1413$i))|0;
         $1852 = ((($1839)) + 2|0);
         $1853 = HEAP8[$1852>>0]|0;
         $1854 = $1853&255;
         $1855 = $1854 >>> $1851;
         $1856 = $1855 | $1849;
         $$037$i293$i = $1856;
        } else {
         $$037$i293$i = $1849;
        }
       } else {
        $$037$i293$i = $1843;
       }
       $1857 = $1833 >>> 3;
       $1858 = (($1857) + ($$sroa$20$1412$i))|0;
       $1859 = $$037$i293$i & 65535;
       $1860 = $1859 >>> $1832;
       $1861 = ($1860|0)<(0);
       if ($1861) {
        break L191;
       }
       $1862 = $1833 & 7;
       $$pre575$i = (($$0125$lcssa) - ($1858))|0;
       $$pre577$i = $$pre575$i << 3;
       $$0$i294466$i = $1860;$$pre$phi578$iZ2D = $$pre577$i;$$sroa$20$23464$i = $1858;$$sroa$77$23465$i = $1862;
      }
      $1863 = (($$pre$phi578$iZ2D) - ($$sroa$77$23465$i))|0;
      $1864 = ($$0$i294466$i*13)|0;
      $1865 = ($1863|0)<($1864|0);
      if ($1865) {
       break L191;
      }
      $1866 = $$0$i294466$i << 1;
      $1867 = (_malloc($1866)|0);
      HEAP32[$1383>>2] = $1867;
      $1868 = (((($1382) + (($1380*12)|0)|0)) + 8|0);
      HEAP32[$1868>>2] = $1866;
      $1869 = ($$0$i294466$i|0)>(0);
      if ($1869) {
       $$0241506$i = $1867;$$9253505$i = $$0244541$i;$$in$i137 = $$0$i294466$i;$$sroa$20$24503$i = $$sroa$20$23464$i;$$sroa$77$24504$i = $$sroa$77$23465$i;
       while(1) {
        $1870 = (($$in$i137) + -1)|0;
        $1871 = (($$sroa$77$24504$i) + 13)|0;
        $1872 = (($$0125$lcssa) - ($$sroa$20$24503$i))|0;
        $1873 = ($1872|0)<(3);
        do {
         if ($1873) {
          $1874 = $1872 << 3;
          $1875 = ($1874|0)<($1871|0);
          if ($1875) {
           $1876 = $1871 >> 3;
           $1877 = (($1876) + ($$sroa$20$24503$i))|0;
           $1878 = $1871 & 7;
           $$0$i291$i = -1;$$sroa$20$25$i = $1877;$$sroa$77$25$i = $1878;
           break;
          } else {
           $1879 = ($1871|0)==(0);
           if ($1879) {
            $$0$i291$i = 0;$$sroa$20$25$i = $$sroa$20$24503$i;$$sroa$77$25$i = -13;
            break;
           } else {
            label = 253;
            break;
           }
          }
         } else {
          label = 253;
         }
        } while(0);
        if ((label|0) == 253) {
         label = 0;
         $1880 = (($1184) + ($$sroa$20$24503$i)|0);
         $1881 = HEAP8[$1880>>0]|0;
         $1882 = $1881&255;
         $1883 = (($$sroa$77$24504$i) + 8)|0;
         $1884 = $1882 << $1883;
         $1885 = ($$sroa$77$24504$i|0)>(-5);
         do {
          if ($1885) {
           $1886 = ((($1880)) + 1|0);
           $1887 = HEAP8[$1886>>0]|0;
           $1888 = $1887&255;
           $1889 = $1888 << $$sroa$77$24504$i;
           $1890 = $1889 | $1884;
           $1891 = ($$sroa$77$24504$i|0)>(3);
           if (!($1891)) {
            $$037$i290$i = $1890;
            break;
           }
           $1892 = (8 - ($$sroa$77$24504$i))|0;
           $1893 = ((($1880)) + 2|0);
           $1894 = HEAP8[$1893>>0]|0;
           $1895 = $1894&255;
           $1896 = $1895 >>> $1892;
           $1897 = $1896 | $1890;
           $$037$i290$i = $1897;
          } else {
           $$037$i290$i = $1884;
          }
         } while(0);
         $1898 = $1871 >> 3;
         $1899 = (($1898) + ($$sroa$20$24503$i))|0;
         $1900 = $1871 & 7;
         $1901 = $$037$i290$i >>> 3;
         $1902 = $1901 & 8191;
         $$0$i291$i = $1902;$$sroa$20$25$i = $1899;$$sroa$77$25$i = $1900;
        }
        $1903 = (($$0$i291$i>>>0) / 192)&-1;
        $1904 = $1903 << 8;
        $1905 = ($1903*192)|0;
        $1906 = (($$0$i291$i) - ($1905))|0;
        $1907 = $1904 | $1906;
        $1908 = (($1907) + 33088)|0;
        $1909 = ($1908>>>0)>(40959);
        $1910 = (($1907) + 49472)|0;
        $spec$select$i138 = $1909 ? $1910 : $1908;
        $1911 = $spec$select$i138 ^ $$9253505$i;
        $1912 = $spec$select$i138 >>> 8;
        $1913 = $1912&255;
        $1914 = ((($$0241506$i)) + 1|0);
        HEAP8[$$0241506$i>>0] = $1913;
        $1915 = $spec$select$i138&255;
        $1916 = ((($$0241506$i)) + 2|0);
        HEAP8[$1914>>0] = $1915;
        $1917 = ($$in$i137|0)>(1);
        if ($1917) {
         $$0241506$i = $1916;$$9253505$i = $1911;$$in$i137 = $1870;$$sroa$20$24503$i = $$sroa$20$25$i;$$sroa$77$24504$i = $$sroa$77$25$i;
        } else {
         $$11$i = $1911;$$sroa$20$28$i = $$sroa$20$25$i;$$sroa$77$28$i = $$sroa$77$25$i;
         break;
        }
       }
      } else {
       $$11$i = $$0244541$i;$$sroa$20$28$i = $$sroa$20$23464$i;$$sroa$77$28$i = $$sroa$77$23465$i;
      }
      break;
     }
     case 9:  {
      $1918 = $$sroa$77$1413$i | 8;
      $1919 = (($$0125$lcssa) - ($$sroa$20$1412$i))|0;
      $1920 = ($1919|0)<(3);
      $1921 = $1919 << 3;
      $1922 = ($1921|0)<($1918|0);
      $or$cond485$i = $1920 & $1922;
      if ($or$cond485$i) {
       $$0$i$i = -1;
      } else {
       $1923 = (($1184) + ($$sroa$20$1412$i)|0);
       $1924 = HEAP8[$1923>>0]|0;
       $1925 = $1924&255;
       $1926 = $1925 << $1918;
       $1927 = ($1918|0)==(8);
       if ($1927) {
        $$037$i$i = $1926;
       } else {
        $1928 = ((($1923)) + 1|0);
        $1929 = HEAP8[$1928>>0]|0;
        $1930 = $1929&255;
        $1931 = $1930 << $$sroa$77$1413$i;
        $1932 = $1931 | $1926;
        $$037$i$i = $1932;
       }
       $1933 = $$037$i$i >>> 8;
       $1934 = $1933 & 255;
       $$0$i$i = $1934;
      }
      $1935 = ($$0$i$i>>>0)<(100);
      $$off$i = (($$0$i$i) + -165)|0;
      $1936 = ($$off$i>>>0)<(26);
      $or$cond$i139 = $1935 | $1936;
      $$off272$i = (($$0$i$i) + -197)|0;
      $1937 = ($$off272$i>>>0)<(26);
      $or$cond275$i = $1937 | $or$cond$i139;
      if (!($or$cond275$i)) {
       break L191;
      }
      $$sroa$20$27$i = (($$sroa$20$1412$i) + 1)|0;
      HEAP32[$1383>>2] = $$0$i$i;
      $$11$i = $$0244541$i;$$sroa$20$28$i = $$sroa$20$27$i;$$sroa$77$28$i = $$sroa$77$1413$i;
      break;
     }
     default: {
      break L191;
     }
     }
    } while(0);
    $1938 = (($$0125$lcssa) - ($$sroa$20$28$i))|0;
    $1939 = $1938 << 3;
    $1940 = (($1939) - ($$sroa$77$28$i))|0;
    $1941 = ($1940|0)>(3);
    if ($1941) {
     $$0244541$i = $$11$i;$$0256540$i = $$1257$i;$$sroa$20$0538$i = $$sroa$20$28$i;$$sroa$77$0539$i = $$sroa$77$28$i;$1354 = $1938;$1356 = $1939;
    } else {
     $$0244$lcssa$ph$i = $$11$i;
     label = 265;
     break;
    }
   }
   if ((label|0) == 265) {
    $$pre560$i = HEAP32[$0>>2]|0;
    $$pre561$i = HEAP32[$1337>>2]|0;
    $phitmp$i = ($$pre561$i*12)|0;
    $$0244$lcssa$i = $$0244$lcssa$ph$i;$1946 = $$pre560$i;$1947 = $phitmp$i;
    label = 266;
    break;
   }
   $1949 = HEAP32[$1337>>2]|0;
   $1950 = ($1949|0)>(0);
   $1951 = HEAP32[$0>>2]|0;
   if ($1950) {
    $$09$i = 0;$1953 = $1951;$1968 = $1949;
    while(1) {
     $1952 = (($1953) + (($$09$i*12)|0)|0);
     $1954 = HEAP32[$1952>>2]|0;
     $1955 = (($1954) + -1)|0;
     $1956 = $1955 & $1954;
     $1957 = ($1956|0)==(0);
     if ($1957) {
      $1958 = (((($1953) + (($$09$i*12)|0)|0)) + 4|0);
      $1959 = HEAP32[$1958>>2]|0;
      _free($1959);
      $$pre$i142 = HEAP32[$1337>>2]|0;
      $$pre11$i = HEAP32[$0>>2]|0;
      $1962 = $$pre$i142;$1969 = $$pre11$i;
     } else {
      $1962 = $1968;$1969 = $1953;
     }
     $1960 = (($$09$i) + 1)|0;
     $1961 = ($1960|0)<($1962|0);
     if ($1961) {
      $$09$i = $1960;$1953 = $1969;$1968 = $1962;
     } else {
      $$lcssa$i = $1969;
      break;
     }
    }
   } else {
    $$lcssa$i = $1951;
   }
   _free($$lcssa$i);
   $$10$i140145 = -1;
  } else {
   $$0244$lcssa$i = 0;$1946 = 0;$1947 = 0;
   label = 266;
  }
 } while(0);
 if ((label|0) == 266) {
  $1942 = $$0244$lcssa$i >>> 8;
  $1943 = $1942 ^ $$0244$lcssa$i;
  $1944 = $1943&255;
  $1945 = ((($0)) + 13|0);
  HEAP8[$1945>>0] = $1944;
  $1948 = (_realloc($1946,$1947)|0);
  HEAP32[$0>>2] = $1948;
  $$10$i140145 = 0;
 }
 $1963 = $5&255;
 $1964 = ((($0)) + 8|0);
 HEAP8[$1964>>0] = $1963;
 $1965 = $1151&255;
 $1966 = ((($0)) + 9|0);
 HEAP8[$1966>>0] = $1965;
 $$3 = $$10$i140145;
 _free($1184);
 STACKTOP = sp;return ($$3|0);
}
function _qr_hom_cell_project($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $spec$select$i = 0, $spec$select24$i = 0, $spec$select25$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 << $4;
 $8 = (($2) - ($7))|0;
 $9 = ((($1)) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 << $4;
 $12 = (($3) - ($11))|0;
 $13 = HEAP32[$1>>2]|0;
 $14 = Math_imul($13, $8)|0;
 $15 = ((($1)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = Math_imul($16, $12)|0;
 $18 = (($17) + ($14))|0;
 $19 = ((($1)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20 << $4;
 $22 = (($18) + ($21))|0;
 $23 = ((($1)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = Math_imul($24, $8)|0;
 $26 = ((($1)) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = Math_imul($27, $12)|0;
 $29 = (($28) + ($25))|0;
 $30 = ((($1)) + 20|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 << $4;
 $33 = (($29) + ($32))|0;
 $34 = ((($1)) + 24|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = Math_imul($35, $8)|0;
 $37 = ((($1)) + 28|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = Math_imul($38, $12)|0;
 $40 = (($39) + ($36))|0;
 $41 = ((($1)) + 32|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $42 << $4;
 $44 = (($40) + ($43))|0;
 $45 = ($44|0)==(0);
 if ($45) {
  $46 = $22 >>> 31;
  $47 = (($46) + 2147483647)|0;
  HEAP32[$0>>2] = $47;
  $48 = $33 >>> 31;
  $49 = (($48) + 2147483647)|0;
  $$sink$i = $49;
  $71 = ((($0)) + 4|0);
  HEAP32[$71>>2] = $$sink$i;
  return;
 } else {
  $50 = ($44|0)<(0);
  $51 = (0 - ($22))|0;
  $52 = (0 - ($33))|0;
  $53 = (0 - ($44))|0;
  $spec$select$i = $50 ? $51 : $22;
  $spec$select24$i = $50 ? $52 : $33;
  $spec$select25$i = $50 ? $53 : $44;
  $54 = $spec$select25$i >> 1;
  $55 = $spec$select$i >> 31;
  $56 = (($54) + ($55))|0;
  $57 = $56 ^ $55;
  $58 = (($57) + ($spec$select$i))|0;
  $59 = (($58|0) / ($spec$select25$i|0))&-1;
  $60 = ((($1)) + 36|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) + ($59))|0;
  HEAP32[$0>>2] = $62;
  $63 = $spec$select24$i >> 31;
  $64 = (($54) + ($63))|0;
  $65 = $64 ^ $63;
  $66 = (($65) + ($spec$select24$i))|0;
  $67 = (($66|0) / ($spec$select25$i|0))&-1;
  $68 = ((($1)) + 40|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (($69) + ($67))|0;
  $$sink$i = $70;
  $71 = ((($0)) + 4|0);
  HEAP32[$71>>2] = $$sink$i;
  return;
 }
}
function _qr_cmp_edge_pt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)>($5|0);
 $7 = $6&1;
 $8 = ($3|0)<($5|0);
 $9 = $8&1;
 $10 = (($7) - ($9))|0;
 $11 = $10 << 1;
 $12 = ((($0)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($1)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($13|0)>($15|0);
 $17 = $16&1;
 $18 = $11 | $17;
 $19 = ($13|0)<($15|0);
 $20 = $19&1;
 $21 = (($18) - ($20))|0;
 return ($21|0);
}
function _qr_alignment_pattern_fetch($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$03342 = 0, $$03441 = 0, $$043 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 96|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($1) - ($7))|0;
 $9 = ((($0)) + 100|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($2) - ($10))|0;
 $12 = (($5) + -1)|0;
 $13 = (($4) + -1)|0;
 $$03342 = 0;$$03441 = 0;$$043 = 0;
 while(1) {
  $14 = (($0) + (($$03342*40)|0)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($8) + ($15))|0;
  $17 = (((($0) + (($$03342*40)|0)|0)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($11) + ($18))|0;
  $20 = $16 >> 2;
  $21 = $19 >> 2;
  $22 = ($21|0)<($5|0);
  $23 = $22 ? $21 : $12;
  $24 = ($23|0)>(0);
  $25 = $24 ? $23 : 0;
  $26 = Math_imul($25, $4)|0;
  $27 = ($20|0)<($4|0);
  $28 = $27 ? $20 : $13;
  $29 = ($28|0)>(0);
  $30 = $29 ? $28 : 0;
  $31 = (($26) + ($30))|0;
  $32 = (($3) + ($31)|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = ($33<<24>>24)!=(0);
  $35 = $34&1;
  $36 = $35 << $$03441;
  $37 = $36 | $$043;
  $38 = (($$03441) + 1)|0;
  $39 = (((($0) + (($$03342*40)|0)|0)) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($8) + ($40))|0;
  $42 = (((($0) + (($$03342*40)|0)|0)) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($11) + ($43))|0;
  $45 = $41 >> 2;
  $46 = $44 >> 2;
  $47 = ($46|0)<($5|0);
  $48 = $47 ? $46 : $12;
  $49 = ($48|0)>(0);
  $50 = $49 ? $48 : 0;
  $51 = Math_imul($50, $4)|0;
  $52 = ($45|0)<($4|0);
  $53 = $52 ? $45 : $13;
  $54 = ($53|0)>(0);
  $55 = $54 ? $53 : 0;
  $56 = (($51) + ($55))|0;
  $57 = (($3) + ($56)|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = ($58<<24>>24)!=(0);
  $60 = $59&1;
  $61 = $60 << $38;
  $62 = $61 | $37;
  $63 = (($$03441) + 2)|0;
  $64 = (((($0) + (($$03342*40)|0)|0)) + 16|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($8) + ($65))|0;
  $67 = (((($0) + (($$03342*40)|0)|0)) + 20|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($11) + ($68))|0;
  $70 = $66 >> 2;
  $71 = $69 >> 2;
  $72 = ($71|0)<($5|0);
  $73 = $72 ? $71 : $12;
  $74 = ($73|0)>(0);
  $75 = $74 ? $73 : 0;
  $76 = Math_imul($75, $4)|0;
  $77 = ($70|0)<($4|0);
  $78 = $77 ? $70 : $13;
  $79 = ($78|0)>(0);
  $80 = $79 ? $78 : 0;
  $81 = (($76) + ($80))|0;
  $82 = (($3) + ($81)|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = ($83<<24>>24)!=(0);
  $85 = $84&1;
  $86 = $85 << $63;
  $87 = $86 | $62;
  $88 = (($$03441) + 3)|0;
  $89 = (((($0) + (($$03342*40)|0)|0)) + 24|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($8) + ($90))|0;
  $92 = (((($0) + (($$03342*40)|0)|0)) + 28|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = (($11) + ($93))|0;
  $95 = $91 >> 2;
  $96 = $94 >> 2;
  $97 = ($96|0)<($5|0);
  $98 = $97 ? $96 : $12;
  $99 = ($98|0)>(0);
  $100 = $99 ? $98 : 0;
  $101 = Math_imul($100, $4)|0;
  $102 = ($95|0)<($4|0);
  $103 = $102 ? $95 : $13;
  $104 = ($103|0)>(0);
  $105 = $104 ? $103 : 0;
  $106 = (($101) + ($105))|0;
  $107 = (($3) + ($106)|0);
  $108 = HEAP8[$107>>0]|0;
  $109 = ($108<<24>>24)!=(0);
  $110 = $109&1;
  $111 = $110 << $88;
  $112 = $111 | $87;
  $113 = (($$03441) + 4)|0;
  $114 = (((($0) + (($$03342*40)|0)|0)) + 32|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = (($8) + ($115))|0;
  $117 = (((($0) + (($$03342*40)|0)|0)) + 36|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (($11) + ($118))|0;
  $120 = $116 >> 2;
  $121 = $119 >> 2;
  $122 = ($121|0)<($5|0);
  $123 = $122 ? $121 : $12;
  $124 = ($123|0)>(0);
  $125 = $124 ? $123 : 0;
  $126 = Math_imul($125, $4)|0;
  $127 = ($120|0)<($4|0);
  $128 = $127 ? $120 : $13;
  $129 = ($128|0)>(0);
  $130 = $129 ? $128 : 0;
  $131 = (($126) + ($130))|0;
  $132 = (($3) + ($131)|0);
  $133 = HEAP8[$132>>0]|0;
  $134 = ($133<<24>>24)!=(0);
  $135 = $134&1;
  $136 = $135 << $113;
  $137 = $136 | $112;
  $138 = (($$03441) + 5)|0;
  $139 = (($$03342) + 1)|0;
  $exitcond = ($139|0)==(5);
  if ($exitcond) {
   break;
  } else {
   $$03342 = $139;$$03441 = $138;$$043 = $137;
  }
 }
 return ($137|0);
}
function __zbar_qr_found_line($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $$pre11 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (((($0)) + 2832|0) + (($1*12)|0)|0);
 $4 = (((((($0)) + 2832|0) + (($1*12)|0)|0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (((((($0)) + 2832|0) + (($1*12)|0)|0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)<($7|0);
 if ($8) {
  $$pre = HEAP32[$3>>2]|0;
  $15 = $5;$17 = $$pre;
 } else {
  $9 = $7 << 1;
  $10 = HEAP32[$3>>2]|0;
  $11 = $9 | 1;
  HEAP32[$6>>2] = $11;
  $12 = ($11*20)|0;
  $13 = (_realloc($10,$12)|0);
  HEAP32[$3>>2] = $13;
  $$pre11 = HEAP32[$4>>2]|0;
  $15 = $$pre11;$17 = $13;
 }
 $14 = (($15) + 1)|0;
 HEAP32[$4>>2] = $14;
 $16 = (($17) + (($15*20)|0)|0);
 ;HEAP32[$16>>2]=HEAP32[$2>>2]|0;HEAP32[$16+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$16+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$16+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$16+16>>2]=HEAP32[$2+16>>2]|0;
 return 0;
}
function __zbar_qr_decode($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i$i = 0, $$0138$lcssa$i$i = 0, $$0138176$i$i = 0, $$0140187$i$i = 0, $$0143173$i$i = 0, $$0146186$i$i = 0, $$0149172$i$i = 0, $$0151171$i$i = 0, $$0153184$i$i = 0, $$02537 = 0, $$035 = 0, $$036 = 0, $$04$i = 0, $$04244$i$i$i = 0, $$04244$i159$i$i = 0, $$04346$i$i$i = 0, $$04346$i156$i$i = 0, $$047$i$i$i = 0, $$047$i$i$i$ph = 0;
 var $$047$i155$i$i = 0, $$0833$i = 0, $$085$i = 0, $$09$i = 0, $$09$i$i = 0, $$1 = 0, $$1$lcssa$i$i = 0, $$1$lcssa$i$i$i = 0, $$1$lcssa$i162$i$i = 0, $$1139$i$i = 0, $$1144$i$i = 0, $$1150$i$i = 0, $$1152$i$i = 0, $$1152175$i$i = 0, $$1152178$i$i = 0, $$1177$i$i = 0, $$12$i = 0, $$145$i$i$i = 0, $$145$i158$i$i = 0, $$184$lcssa$i = 0;
 var $$1841$i = 0, $$2$i$i = 0, $$2$i$i$i = 0, $$2$i160$i$i = 0, $$2142$i$i = 0, $$2145$i$i = 0, $$2148$i$i = 0, $$3$i$i = 0, $$3$i$i$i = 0, $$3$i161$i$i = 0, $$lcssa$i$i = 0, $$lcssa6$i = 0, $$phi$trans$insert$i$i = 0, $$pr = 0, $$pre$i$i = 0, $$pre$i$i28 = 0, $$pre11$i$i = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i = 0, $exitcond$i$i = 0, $exitcond$i$i$i = 0, $exitcond$i163$i$i = 0, $exitcond10$i = 0, $exitcond193$i$i = 0, $exitcond194$i$i = 0, $or$cond$i = 0, $spec$select$i$i = 0;
 var $spec$select169$i$i = 0, $spec$select170$i$i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 2836|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<(9);
 if ($6) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = ((($0)) + 2848|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(9);
 if ($9) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ((($0)) + 2832|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 2844|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $5 << 2;
 $15 = (_malloc($14)|0);
 $16 = $5 >>> 1;
 $17 = $16 << 3;
 $18 = (_malloc($17)|0);
 $19 = (_qr_finder_cluster_lines($18,$15,$11,$5,0)|0);
 _qsort($13,$8,20,2);
 $20 = $8 << 2;
 $21 = (_malloc($20)|0);
 $22 = $8 >>> 1;
 $23 = $22 << 3;
 $24 = (_malloc($23)|0);
 $25 = (_qr_finder_cluster_lines($24,$21,$13,$8,1)|0);
 $26 = ($19|0)>(2);
 $27 = ($25|0)>(2);
 $or$cond$i = $26 & $27;
 if ($or$cond$i) {
  $$04$i = 0;$$0833$i = 0;
  while(1) {
   $28 = (((($18) + ($$04$i<<3)|0)) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + ($$0833$i))|0;
   $31 = (($$04$i) + 1)|0;
   $exitcond10$i = ($31|0)==($19|0);
   if ($exitcond10$i) {
    break;
   } else {
    $$04$i = $31;$$0833$i = $30;
   }
  }
  $32 = ($25|0)>(0);
  if ($32) {
   $$12$i = 0;$$1841$i = $30;
   while(1) {
    $33 = (((($24) + ($$12$i<<3)|0)) + 4|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (($34) + ($$1841$i))|0;
    $36 = (($$12$i) + 1)|0;
    $exitcond$i = ($36|0)==($25|0);
    if ($exitcond$i) {
     $$184$lcssa$i = $35;
     break;
    } else {
     $$12$i = $36;$$1841$i = $35;
    }
   }
  } else {
   $$184$lcssa$i = $30;
  }
  $37 = $$184$lcssa$i << 5;
  $38 = (_malloc($37)|0);
  $39 = ($25|0)<($19|0);
  $40 = $39 ? $25 : $19;
  $41 = $40 << 4;
  $42 = (_malloc($41)|0);
  $43 = $19 << 2;
  $44 = (_malloc($43)|0);
  $45 = $25 << 2;
  $46 = (_malloc($45)|0);
  $47 = (_calloc($19,1)|0);
  $48 = (_calloc($25,1)|0);
  $$0140187$i$i = $38;$$0146186$i$i = 0;$$0153184$i$i = 0;$50 = 0;
  while(1) {
   $49 = ($50<<24>>24)==(0);
   if ($49) {
    $51 = (($18) + ($$0153184$i$i<<3)|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (((($18) + ($$0153184$i$i<<3)|0)) + 4|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = $54 >> 1;
    $56 = (($52) + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    if ($32) {
     $58 = ((($57)) + 8|0);
     $59 = ((($57)) + 4|0);
     $$0143173$i$i = 0;$$0149172$i$i = 0;$$0151171$i$i = 0;
     while(1) {
      $60 = (($48) + ($$0151171$i$i)|0);
      $61 = HEAP8[$60>>0]|0;
      $62 = ($61<<24>>24)==(0);
      if ($62) {
       $63 = (($24) + ($$0151171$i$i<<3)|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = (((($24) + ($$0151171$i$i<<3)|0)) + 4|0);
       $66 = HEAP32[$65>>2]|0;
       $67 = $66 >> 1;
       $68 = (($64) + ($67<<2)|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = HEAP32[$57>>2]|0;
       $71 = HEAP32[$69>>2]|0;
       $72 = ($70|0)>($71|0);
       if ($72) {
        $$1150$i$i = $$0149172$i$i;$$2145$i$i = $$0143173$i$i;
       } else {
        $73 = HEAP32[$58>>2]|0;
        $74 = (($73) + ($70))|0;
        $75 = ($71|0)<($74|0);
        if ($75) {
         $76 = ((($69)) + 4|0);
         $77 = HEAP32[$76>>2]|0;
         $78 = HEAP32[$59>>2]|0;
         $79 = ($77|0)>($78|0);
         if ($79) {
          $$1150$i$i = $$0149172$i$i;$$2145$i$i = $$0143173$i$i;
         } else {
          $80 = ((($69)) + 8|0);
          $81 = HEAP32[$80>>2]|0;
          $82 = (($81) + ($77))|0;
          $83 = ($78|0)<($82|0);
          if ($83) {
           HEAP8[$60>>0] = 1;
           $84 = $77 << 1;
           $85 = (($84) + ($$0143173$i$i))|0;
           $86 = (($85) + ($81))|0;
           $87 = ((($69)) + 12|0);
           $88 = HEAP32[$87>>2]|0;
           $89 = ($88|0)>(0);
           if ($89) {
            $90 = ((($69)) + 16|0);
            $91 = HEAP32[$90>>2]|0;
            $92 = ($91|0)>(0);
            $93 = (($91) - ($88))|0;
            $94 = $92 ? $93 : 0;
            $spec$select$i$i = (($94) + ($86))|0;
            $$1144$i$i = $spec$select$i$i;
           } else {
            $$1144$i$i = $86;
           }
           $95 = (($$0149172$i$i) + 1)|0;
           $96 = (($46) + ($$0149172$i$i<<2)|0);
           HEAP32[$96>>2] = $63;
           $$1150$i$i = $95;$$2145$i$i = $$1144$i$i;
          } else {
           $$1150$i$i = $$0149172$i$i;$$2145$i$i = $$0143173$i$i;
          }
         }
        } else {
         $$1150$i$i = $$0149172$i$i;$$2145$i$i = $$0143173$i$i;
        }
       }
      } else {
       $$1150$i$i = $$0149172$i$i;$$2145$i$i = $$0143173$i$i;
      }
      $97 = (($$0151171$i$i) + 1)|0;
      $exitcond$i$i = ($97|0)==($25|0);
      if ($exitcond$i$i) {
       break;
      } else {
       $$0143173$i$i = $$2145$i$i;$$0149172$i$i = $$1150$i$i;$$0151171$i$i = $97;
      }
     }
     $98 = ($$1150$i$i|0)>(0);
     if ($98) {
      $99 = HEAP32[$57>>2]|0;
      $100 = $99 << 1;
      $101 = HEAP32[$58>>2]|0;
      $102 = (($100) + ($101))|0;
      $103 = ((($57)) + 12|0);
      $104 = HEAP32[$103>>2]|0;
      $105 = ($104|0)>(0);
      if ($105) {
       $106 = ((($57)) + 16|0);
       $107 = HEAP32[$106>>2]|0;
       $108 = ($107|0)>(0);
       $109 = (($107) - ($104))|0;
       $110 = $108 ? $109 : 0;
       $spec$select169$i$i = (($110) + ($102))|0;
       $$0$i$i = $spec$select169$i$i;
      } else {
       $$0$i$i = $102;
      }
      HEAP32[$44>>2] = $51;
      $111 = $$1150$i$i >>> 1;
      $112 = (($46) + ($111<<2)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = HEAP32[$113>>2]|0;
      $115 = ((($113)) + 4|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = $116 >> 1;
      $118 = (($114) + ($117<<2)|0);
      $119 = HEAP32[$118>>2]|0;
      $$1152175$i$i = (($$0153184$i$i) + 1)|0;
      $120 = ($$1152175$i$i|0)<($19|0);
      if ($120) {
       $121 = ((($119)) + 4|0);
       $122 = ((($119)) + 8|0);
       $$0138176$i$i = 1;$$1152178$i$i = $$1152175$i$i;$$1177$i$i = $$0$i$i;
       while(1) {
        $123 = (($47) + ($$1152178$i$i)|0);
        $124 = HEAP8[$123>>0]|0;
        $125 = ($124<<24>>24)==(0);
        if ($125) {
         $126 = (($18) + ($$1152178$i$i<<3)|0);
         $127 = HEAP32[$126>>2]|0;
         $128 = (((($18) + ($$1152178$i$i<<3)|0)) + 4|0);
         $129 = HEAP32[$128>>2]|0;
         $130 = $129 >> 1;
         $131 = (($127) + ($130<<2)|0);
         $132 = HEAP32[$131>>2]|0;
         $133 = HEAP32[$132>>2]|0;
         $134 = HEAP32[$119>>2]|0;
         $135 = ($133|0)>($134|0);
         if ($135) {
          $$1139$i$i = $$0138176$i$i;$$3$i$i = $$1177$i$i;
         } else {
          $136 = ((($132)) + 8|0);
          $137 = HEAP32[$136>>2]|0;
          $138 = (($137) + ($133))|0;
          $139 = ($134|0)<($138|0);
          if ($139) {
           $140 = HEAP32[$121>>2]|0;
           $141 = ((($132)) + 4|0);
           $142 = HEAP32[$141>>2]|0;
           $143 = ($140|0)>($142|0);
           if ($143) {
            $$1139$i$i = $$0138176$i$i;$$3$i$i = $$1177$i$i;
           } else {
            $144 = HEAP32[$122>>2]|0;
            $145 = (($144) + ($140))|0;
            $146 = ($142|0)<($145|0);
            if ($146) {
             HEAP8[$123>>0] = 1;
             $147 = $133 << 1;
             $148 = (($147) + ($$1177$i$i))|0;
             $149 = (($148) + ($137))|0;
             $150 = ((($132)) + 12|0);
             $151 = HEAP32[$150>>2]|0;
             $152 = ($151|0)>(0);
             if ($152) {
              $153 = ((($132)) + 16|0);
              $154 = HEAP32[$153>>2]|0;
              $155 = ($154|0)>(0);
              $156 = (($154) - ($151))|0;
              $157 = $155 ? $156 : 0;
              $spec$select170$i$i = (($157) + ($149))|0;
              $$2$i$i = $spec$select170$i$i;
             } else {
              $$2$i$i = $149;
             }
             $158 = (($$0138176$i$i) + 1)|0;
             $159 = (($44) + ($$0138176$i$i<<2)|0);
             HEAP32[$159>>2] = $126;
             $$1139$i$i = $158;$$3$i$i = $$2$i$i;
            } else {
             $$1139$i$i = $$0138176$i$i;$$3$i$i = $$1177$i$i;
            }
           }
          } else {
           $$1139$i$i = $$0138176$i$i;$$3$i$i = $$1177$i$i;
          }
         }
        } else {
         $$1139$i$i = $$0138176$i$i;$$3$i$i = $$1177$i$i;
        }
        $$1152$i$i = (($$1152178$i$i) + 1)|0;
        $exitcond193$i$i = ($$1152$i$i|0)==($19|0);
        if ($exitcond193$i$i) {
         $$0138$lcssa$i$i = $$1139$i$i;$$1$lcssa$i$i = $$3$i$i;
         break;
        } else {
         $$0138176$i$i = $$1139$i$i;$$1152178$i$i = $$1152$i$i;$$1177$i$i = $$3$i$i;
        }
       }
      } else {
       $$0138$lcssa$i$i = 1;$$1$lcssa$i$i = $$0$i$i;
      }
      $160 = (($$0146186$i$i) + 1)|0;
      $161 = (($$1$lcssa$i$i) + ($$0138$lcssa$i$i))|0;
      $162 = $$0138$lcssa$i$i << 1;
      $163 = (($161|0) / ($162|0))&-1;
      $164 = (($42) + ($$0146186$i$i<<4)|0);
      HEAP32[$164>>2] = $163;
      $165 = (($$2145$i$i) + ($$1150$i$i))|0;
      $166 = $$1150$i$i << 1;
      $167 = (($165|0) / ($166|0))&-1;
      $168 = (((($42) + ($$0146186$i$i<<4)|0)) + 4|0);
      HEAP32[$168>>2] = $167;
      $169 = (((($42) + ($$0146186$i$i<<4)|0)) + 8|0);
      HEAP32[$169>>2] = $$0140187$i$i;
      $170 = ($$0138$lcssa$i$i|0)>(0);
      if ($170) {
       $$04346$i156$i$i = 0;$$047$i155$i$i = 0;
       while(1) {
        $171 = (($44) + ($$04346$i156$i$i<<2)|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ((($172)) + 4|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)>(0);
        if ($175) {
         $176 = HEAP32[$172>>2]|0;
         $$04244$i159$i$i = 0;$$145$i158$i$i = $$047$i155$i$i;
         while(1) {
          $177 = (($176) + ($$04244$i159$i$i<<2)|0);
          $178 = HEAP32[$177>>2]|0;
          $179 = ((($178)) + 12|0);
          $180 = HEAP32[$179>>2]|0;
          $181 = ($180|0)>(0);
          if ($181) {
           $182 = HEAP32[$178>>2]|0;
           $183 = (($$0140187$i$i) + ($$145$i158$i$i<<4)|0);
           HEAP32[$183>>2] = $182;
           $184 = ((($178)) + 4|0);
           $185 = HEAP32[$184>>2]|0;
           $186 = (((($$0140187$i$i) + ($$145$i158$i$i<<4)|0)) + 4|0);
           HEAP32[$186>>2] = $185;
           $187 = HEAP32[$179>>2]|0;
           $188 = (($182) - ($187))|0;
           HEAP32[$183>>2] = $188;
           $189 = (($$145$i158$i$i) + 1)|0;
           $$2$i160$i$i = $189;
          } else {
           $$2$i160$i$i = $$145$i158$i$i;
          }
          $190 = ((($178)) + 16|0);
          $191 = HEAP32[$190>>2]|0;
          $192 = ($191|0)>(0);
          if ($192) {
           $193 = HEAP32[$178>>2]|0;
           $194 = (($$0140187$i$i) + ($$2$i160$i$i<<4)|0);
           HEAP32[$194>>2] = $193;
           $195 = ((($178)) + 4|0);
           $196 = HEAP32[$195>>2]|0;
           $197 = (((($$0140187$i$i) + ($$2$i160$i$i<<4)|0)) + 4|0);
           HEAP32[$197>>2] = $196;
           $198 = ((($178)) + 8|0);
           $199 = HEAP32[$198>>2]|0;
           $200 = HEAP32[$190>>2]|0;
           $201 = (($199) + ($193))|0;
           $202 = (($201) + ($200))|0;
           HEAP32[$194>>2] = $202;
           $203 = (($$2$i160$i$i) + 1)|0;
           $$3$i161$i$i = $203;
          } else {
           $$3$i161$i$i = $$2$i160$i$i;
          }
          $204 = (($$04244$i159$i$i) + 1)|0;
          $205 = HEAP32[$173>>2]|0;
          $206 = ($204|0)<($205|0);
          if ($206) {
           $$04244$i159$i$i = $204;$$145$i158$i$i = $$3$i161$i$i;
          } else {
           $$1$lcssa$i162$i$i = $$3$i161$i$i;
           break;
          }
         }
        } else {
         $$1$lcssa$i162$i$i = $$047$i155$i$i;
        }
        $207 = (($$04346$i156$i$i) + 1)|0;
        $exitcond$i163$i$i = ($207|0)==($$0138$lcssa$i$i|0);
        if ($exitcond$i163$i$i) {
         $$047$i$i$i$ph = $$1$lcssa$i162$i$i;
         break;
        } else {
         $$04346$i156$i$i = $207;$$047$i155$i$i = $$1$lcssa$i162$i$i;
        }
       }
      } else {
       $$047$i$i$i$ph = 0;
      }
      $$04346$i$i$i = 0;$$047$i$i$i = $$047$i$i$i$ph;
      while(1) {
       $208 = (($46) + ($$04346$i$i$i<<2)|0);
       $209 = HEAP32[$208>>2]|0;
       $210 = ((($209)) + 4|0);
       $211 = HEAP32[$210>>2]|0;
       $212 = ($211|0)>(0);
       if ($212) {
        $213 = HEAP32[$209>>2]|0;
        $$04244$i$i$i = 0;$$145$i$i$i = $$047$i$i$i;
        while(1) {
         $214 = (($213) + ($$04244$i$i$i<<2)|0);
         $215 = HEAP32[$214>>2]|0;
         $216 = ((($215)) + 12|0);
         $217 = HEAP32[$216>>2]|0;
         $218 = ($217|0)>(0);
         if ($218) {
          $219 = HEAP32[$215>>2]|0;
          $220 = (($$0140187$i$i) + ($$145$i$i$i<<4)|0);
          HEAP32[$220>>2] = $219;
          $221 = ((($215)) + 4|0);
          $222 = HEAP32[$221>>2]|0;
          $223 = (((($$0140187$i$i) + ($$145$i$i$i<<4)|0)) + 4|0);
          HEAP32[$223>>2] = $222;
          $224 = HEAP32[$216>>2]|0;
          $225 = (($222) - ($224))|0;
          HEAP32[$223>>2] = $225;
          $226 = (($$145$i$i$i) + 1)|0;
          $$2$i$i$i = $226;
         } else {
          $$2$i$i$i = $$145$i$i$i;
         }
         $227 = ((($215)) + 16|0);
         $228 = HEAP32[$227>>2]|0;
         $229 = ($228|0)>(0);
         if ($229) {
          $230 = HEAP32[$215>>2]|0;
          $231 = (($$0140187$i$i) + ($$2$i$i$i<<4)|0);
          HEAP32[$231>>2] = $230;
          $232 = ((($215)) + 4|0);
          $233 = HEAP32[$232>>2]|0;
          $234 = (((($$0140187$i$i) + ($$2$i$i$i<<4)|0)) + 4|0);
          HEAP32[$234>>2] = $233;
          $235 = ((($215)) + 8|0);
          $236 = HEAP32[$235>>2]|0;
          $237 = HEAP32[$227>>2]|0;
          $238 = (($236) + ($233))|0;
          $239 = (($238) + ($237))|0;
          HEAP32[$234>>2] = $239;
          $240 = (($$2$i$i$i) + 1)|0;
          $$3$i$i$i = $240;
         } else {
          $$3$i$i$i = $$2$i$i$i;
         }
         $241 = (($$04244$i$i$i) + 1)|0;
         $242 = HEAP32[$210>>2]|0;
         $243 = ($241|0)<($242|0);
         if ($243) {
          $$04244$i$i$i = $241;$$145$i$i$i = $$3$i$i$i;
         } else {
          $$1$lcssa$i$i$i = $$3$i$i$i;
          break;
         }
        }
       } else {
        $$1$lcssa$i$i$i = $$047$i$i$i;
       }
       $244 = (($$04346$i$i$i) + 1)|0;
       $exitcond$i$i$i = ($244|0)==($$1150$i$i|0);
       if ($exitcond$i$i$i) {
        break;
       } else {
        $$04346$i$i$i = $244;$$047$i$i$i = $$1$lcssa$i$i$i;
       }
      }
      $245 = (((($42) + ($$0146186$i$i<<4)|0)) + 12|0);
      HEAP32[$245>>2] = $$1$lcssa$i$i$i;
      $246 = (($$0140187$i$i) + ($$1$lcssa$i$i$i<<4)|0);
      $$2142$i$i = $246;$$2148$i$i = $160;
     } else {
      $$2142$i$i = $$0140187$i$i;$$2148$i$i = $$0146186$i$i;
     }
    } else {
     $$2142$i$i = $$0140187$i$i;$$2148$i$i = $$0146186$i$i;
    }
   } else {
    $$2142$i$i = $$0140187$i$i;$$2148$i$i = $$0146186$i$i;
   }
   $247 = (($$0153184$i$i) + 1)|0;
   $exitcond194$i$i = ($247|0)==($19|0);
   if ($exitcond194$i$i) {
    break;
   }
   $$phi$trans$insert$i$i = (($47) + ($247)|0);
   $$pre$i$i = HEAP8[$$phi$trans$insert$i$i>>0]|0;
   $$0140187$i$i = $$2142$i$i;$$0146186$i$i = $$2148$i$i;$$0153184$i$i = $247;$50 = $$pre$i$i;
  }
  _free($48);
  _free($47);
  _free($46);
  _free($44);
  _qsort($42,$$2148$i$i,16,3);
  $$035 = $42;$$036 = $38;$$085$i = $$2148$i$i;$292 = $42;$294 = $38;
 } else {
  $$035 = 0;$$036 = 0;$$085$i = 0;$292 = 0;$294 = 0;
 }
 _free($24);
 _free($21);
 _free($18);
 _free($15);
 $248 = (0)>(13);
 if ($248) {
  $249 = HEAP32[32495]|0;
  $250 = HEAP32[$4>>2]|0;
  $251 = HEAP32[$7>>2]|0;
  HEAP32[$vararg_buffer>>2] = 132813;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $250;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $251;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $$085$i;
  (_fprintf($249,132781,$vararg_buffer)|0);
 }
 $252 = ($$085$i|0)>(2);
 if ($252) {
  $253 = ((($2)) + 12|0);
  $254 = HEAP32[$253>>2]|0;
  $255 = ((($2)) + 4|0);
  $256 = HEAP32[$255>>2]|0;
  $257 = ((($2)) + 8|0);
  $258 = HEAP32[$257>>2]|0;
  $259 = (_qr_binarize($254,$256,$258)|0);
  HEAP32[$3>>2] = 0;
  $260 = ((($3)) + 8|0);
  HEAP32[$260>>2] = 0;
  $261 = ((($3)) + 4|0);
  HEAP32[$261>>2] = 0;
  $262 = HEAP32[$255>>2]|0;
  $263 = HEAP32[$257>>2]|0;
  _qr_reader_match_centers($0,$3,$$035,$$085$i,$259,$262,$263);
  $264 = HEAP32[$261>>2]|0;
  $265 = ($264|0)>(0);
  if ($265) {
   $267 = (_qr_code_data_list_extract_text($3,$1,$2)|0);
   $$pr = HEAP32[$261>>2]|0;
   $268 = ($$pr|0)>(0);
   $269 = HEAP32[$3>>2]|0;
   if ($268) {
    $$09$i = 0;$271 = $269;
    while(1) {
     $270 = (((($271) + (($$09$i*48)|0)|0)) + 4|0);
     $272 = HEAP32[$270>>2]|0;
     $273 = ($272|0)>(0);
     $274 = (($271) + (($$09$i*48)|0)|0);
     $275 = HEAP32[$274>>2]|0;
     if ($273) {
      $$09$i$i = 0;$277 = $275;$295 = $272;
      while(1) {
       $276 = (($277) + (($$09$i$i*12)|0)|0);
       $278 = HEAP32[$276>>2]|0;
       $279 = (($278) + -1)|0;
       $280 = $279 & $278;
       $281 = ($280|0)==(0);
       if ($281) {
        $282 = (((($277) + (($$09$i$i*12)|0)|0)) + 4|0);
        $283 = HEAP32[$282>>2]|0;
        _free($283);
        $$pre$i$i28 = HEAP32[$270>>2]|0;
        $$pre11$i$i = HEAP32[$274>>2]|0;
        $286 = $$pre$i$i28;$296 = $$pre11$i$i;
       } else {
        $286 = $295;$296 = $277;
       }
       $284 = (($$09$i$i) + 1)|0;
       $285 = ($284|0)<($286|0);
       if ($285) {
        $$09$i$i = $284;$277 = $296;$295 = $286;
       } else {
        $$lcssa$i$i = $296;
        break;
       }
      }
     } else {
      $$lcssa$i$i = $275;
     }
     _free($$lcssa$i$i);
     $287 = (($$09$i) + 1)|0;
     $288 = HEAP32[$261>>2]|0;
     $289 = ($287|0)<($288|0);
     $290 = HEAP32[$3>>2]|0;
     if ($289) {
      $$09$i = $287;$271 = $290;
     } else {
      $$02537 = $267;$$lcssa6$i = $290;
      break;
     }
    }
   } else {
    $$02537 = $267;$$lcssa6$i = $269;
   }
  } else {
   $266 = HEAP32[$3>>2]|0;
   $$02537 = 0;$$lcssa6$i = $266;
  }
  _free($$lcssa6$i);
  HEAP32[$3>>2] = 0;
  HEAP32[$260>>2] = 0;
  HEAP32[$261>>2] = 0;
  _free($259);
  $$1 = $$02537;
 } else {
  $$1 = 0;
 }
 $291 = ($$035|0)==(0|0);
 if (!($291)) {
  _free($292);
 }
 $293 = ($$036|0)==(0|0);
 if ($293) {
  $$0 = $$1;
  STACKTOP = sp;return ($$0|0);
 }
 _free($294);
 $$0 = $$1;
 STACKTOP = sp;return ($$0|0);
}
function _qr_finder_cluster_lines($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0109150 = 0, $$0110$lcssa = 0, $$0110138 = 0, $$0114$lcssa = 0, $$0114149 = 0, $$0118 = 0, $$0118136 = 0, $$0118139 = 0, $$0120$lcssa = 0, $$0120137 = 0, $$0124148 = 0, $$1119144 = 0, $$2112 = 0, $$2122 = 0, $$3 = 0, $$3117 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre158 = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $9 = 0, $exitcond = 0, $exitcond155 = 0, $ispos = 0, $ispos125 = 0, $ispos127 = 0, $ispos129 = 0, $ispos131 = 0, $neg = 0, $neg126 = 0, $neg128 = 0, $neg130 = 0, $neg132 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (_calloc($3,1)|0);
 $6 = (($3) + -1)|0;
 $7 = ($3|0)>(1);
 if (!($7)) {
  $$0114$lcssa = 0;
  _free($5);
  return ($$0114$lcssa|0);
 }
 $8 = (1 - ($4))|0;
 $9 = $2;
 $$0109150 = $1;$$0114149 = 0;$$0124148 = 0;$11 = 0;
 while(1) {
  $10 = ($11<<24>>24)==(0);
  if ($10) {
   $12 = (($2) + (($$0124148*20)|0)|0);
   HEAP32[$$0109150>>2] = $12;
   $$0118136 = (($$0124148) + 1)|0;
   $13 = ($$0118136|0)<($3|0);
   if ($13) {
    $14 = (((($2) + (($$0124148*20)|0)|0)) + 8|0);
    $15 = HEAP32[$14>>2]|0;
    $$0110138 = 1;$$0118139 = $$0118136;$$0120137 = $15;
    L9: while(1) {
     $16 = (($5) + ($$0118139)|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = ($17<<24>>24)==(0);
     do {
      if ($18) {
       $19 = (($$0110138) + -1)|0;
       $20 = (($$0109150) + ($19<<2)|0);
       $21 = HEAP32[$20>>2]|0;
       $22 = (($2) + (($$0118139*20)|0)|0);
       $23 = ((($21)) + 8|0);
       $24 = HEAP32[$23>>2]|0;
       $25 = (($24) + 7)|0;
       $26 = $25 >> 2;
       $27 = (($21) + ($8<<2)|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = ((($2) + (($$0118139*20)|0)|0) + ($8<<2)|0);
       $30 = HEAP32[$29>>2]|0;
       $31 = (($28) - ($30))|0;
       $ispos = ($31|0)>(-1);
       $neg = (0 - ($31))|0;
       $32 = $ispos ? $31 : $neg;
       $33 = ($32|0)>($26|0);
       if ($33) {
        $$0110$lcssa = $$0110138;$$0120$lcssa = $$0120137;
        break L9;
       }
       $34 = (($21) + ($4<<2)|0);
       $35 = HEAP32[$34>>2]|0;
       $36 = ((($2) + (($$0118139*20)|0)|0) + ($4<<2)|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = (($35) - ($37))|0;
       $ispos125 = ($38|0)>(-1);
       $neg126 = (0 - ($38))|0;
       $39 = $ispos125 ? $38 : $neg126;
       $40 = ($39|0)>($26|0);
       if ($40) {
        $$2112 = $$0110138;$$2122 = $$0120137;
       } else {
        $41 = (($35) + ($24))|0;
        $42 = (($41) - ($37))|0;
        $43 = (((($2) + (($$0118139*20)|0)|0)) + 8|0);
        $44 = HEAP32[$43>>2]|0;
        $45 = (($42) - ($44))|0;
        $ispos127 = ($45|0)>(-1);
        $neg128 = (0 - ($45))|0;
        $46 = $ispos127 ? $45 : $neg128;
        $47 = ($46|0)>($26|0);
        if ($47) {
         $$2112 = $$0110138;$$2122 = $$0120137;
        } else {
         $48 = ((($21)) + 12|0);
         $49 = HEAP32[$48>>2]|0;
         $50 = ($49|0)>(0);
         if ($50) {
          $51 = (((($2) + (($$0118139*20)|0)|0)) + 12|0);
          $52 = HEAP32[$51>>2]|0;
          $53 = ($52|0)>(0);
          if ($53) {
           $54 = (($38) - ($49))|0;
           $55 = (($54) + ($52))|0;
           $ispos131 = ($55|0)>(-1);
           $neg132 = (0 - ($55))|0;
           $56 = $ispos131 ? $55 : $neg132;
           $57 = ($56|0)>($26|0);
           if ($57) {
            $$2112 = $$0110138;$$2122 = $$0120137;
            break;
           }
          }
         }
         $58 = ((($21)) + 16|0);
         $59 = HEAP32[$58>>2]|0;
         $60 = ($59|0)>(0);
         if ($60) {
          $61 = (((($2) + (($$0118139*20)|0)|0)) + 16|0);
          $62 = HEAP32[$61>>2]|0;
          $63 = ($62|0)>(0);
          if ($63) {
           $64 = (($45) + ($59))|0;
           $65 = (($64) - ($62))|0;
           $ispos129 = ($65|0)>(-1);
           $neg130 = (0 - ($65))|0;
           $66 = $ispos129 ? $65 : $neg130;
           $67 = ($66|0)>($26|0);
           if ($67) {
            $$2112 = $$0110138;$$2122 = $$0120137;
            break;
           }
          }
         }
         $68 = (($$0110138) + 1)|0;
         $69 = (($$0109150) + ($$0110138<<2)|0);
         HEAP32[$69>>2] = $22;
         $70 = (($44) + ($$0120137))|0;
         $$2112 = $68;$$2122 = $70;
        }
       }
      } else {
       $$2112 = $$0110138;$$2122 = $$0120137;
      }
     } while(0);
     $$0118 = (($$0118139) + 1)|0;
     $71 = ($$0118|0)<($3|0);
     if ($71) {
      $$0110138 = $$2112;$$0118139 = $$0118;$$0120137 = $$2122;
     } else {
      $$0110$lcssa = $$2112;$$0120$lcssa = $$2122;
      break;
     }
    }
    $72 = ($$0110$lcssa|0)<(3);
    if ($72) {
     $$3 = $$0109150;$$3117 = $$0114149;$$pre$phiZ2D = $$0118136;
    } else {
     $73 = $$0120$lcssa << 1;
     $74 = (($$0110$lcssa) + ($73))|0;
     $75 = $$0110$lcssa << 1;
     $76 = (($74|0) / ($75|0))&-1;
     $77 = ($$0110$lcssa*20)|0;
     $78 = ($77|0)<($76|0);
     if ($78) {
      $$3 = $$0109150;$$3117 = $$0114149;$$pre$phiZ2D = $$0118136;
     } else {
      $79 = (($0) + ($$0114149<<3)|0);
      HEAP32[$79>>2] = $$0109150;
      $80 = (((($0) + ($$0114149<<3)|0)) + 4|0);
      HEAP32[$80>>2] = $$0110$lcssa;
      $$1119144 = 0;
      while(1) {
       $81 = (($$0109150) + ($$1119144<<2)|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = (($82) - ($9))|0;
       $84 = (($83|0) / 20)&-1;
       $85 = (($5) + ($84)|0);
       HEAP8[$85>>0] = 1;
       $86 = (($$1119144) + 1)|0;
       $exitcond = ($86|0)==($$0110$lcssa|0);
       if ($exitcond) {
        break;
       } else {
        $$1119144 = $86;
       }
      }
      $87 = (($$0109150) + ($$0110$lcssa<<2)|0);
      $88 = (($$0114149) + 1)|0;
      $$3 = $87;$$3117 = $88;$$pre$phiZ2D = $$0118136;
     }
    }
   } else {
    $$3 = $$0109150;$$3117 = $$0114149;$$pre$phiZ2D = $$0118136;
   }
  } else {
   $$pre158 = (($$0124148) + 1)|0;
   $$3 = $$0109150;$$3117 = $$0114149;$$pre$phiZ2D = $$pre158;
  }
  $exitcond155 = ($$pre$phiZ2D|0)==($6|0);
  if ($exitcond155) {
   $$0114$lcssa = $$3117;
   break;
  }
  $$phi$trans$insert = (($5) + ($$pre$phiZ2D)|0);
  $$pre = HEAP8[$$phi$trans$insert>>0]|0;
  $$0109150 = $$3;$$0114149 = $$3117;$$0124148 = $$pre$phiZ2D;$11 = $$pre;
 }
 _free($5);
 return ($$0114$lcssa|0);
}
function _qr_finder_vline_cmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($2|0)>($3|0);
 $5 = $4&1;
 $6 = ($2|0)<($3|0);
 $7 = $6&1;
 $8 = (($5) - ($7))|0;
 $9 = $8 << 1;
 $10 = ((($0)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($1)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11|0)>($13|0);
 $15 = $14&1;
 $16 = $9 | $15;
 $17 = ($11|0)<($13|0);
 $18 = $17&1;
 $19 = (($16) - ($18))|0;
 return ($19|0);
}
function _qr_finder_center_cmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)>($5|0);
 $7 = $6&1;
 $8 = ($3|0)<($5|0);
 $9 = $8&1;
 $10 = (($7) - ($9))|0;
 $11 = $10 << 2;
 $12 = ((($0)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($1)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($13|0)>($15|0);
 $17 = $16&1;
 $18 = ($13|0)<($15|0);
 $19 = $18&1;
 $20 = (($17) - ($19))|0;
 $21 = $20 << 1;
 $22 = (($21) + ($11))|0;
 $23 = HEAP32[$0>>2]|0;
 $24 = HEAP32[$1>>2]|0;
 $25 = ($23|0)>($24|0);
 $26 = $25&1;
 $27 = $22 | $26;
 $28 = ($23|0)<($24|0);
 $29 = $28&1;
 $30 = (($27) - ($29))|0;
 return ($30|0);
}
function _qr_code_data_list_extract_text($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0384671 = 0, $$0385670 = 0, $$0389669 = 0, $$0393668 = 0, $$0397 = 0, $$0398 = 0, $$0405 = 0, $$0406 = 0, $$0407 = 0, $$0410 = 0, $$0411564 = 0, $$0411650 = 0, $$0415649 = 0, $$0417583 = 0, $$0431646 = 0, $$0437593 = 0, $$0443592 = 0, $$0447$lcssa789791802808 = 0, $$0447$lcssa789793 = 0, $$0447591 = 0;
 var $$0451590 = 0, $$0455797 = 0, $$0465 = 0, $$0466783 = 0, $$0466785803807 = 0, $$0680 = 0, $$07$i = 0, $$09$i = 0, $$09$i$1 = 0, $$11 = 0, $$1386659 = 0, $$1390658 = 0, $$1394657 = 0, $$1412$lcssa = 0, $$1412636 = 0, $$1416 = 0, $$1418634 = 0, $$1420576 = 0, $$1425$lcssa = 0, $$1432$lcssa = 0;
 var $$1432629 = 0, $$1438582 = 0, $$1444581 = 0, $$1448580 = 0, $$1452579 = 0, $$1456566 = 0, $$1456566804806 = 0, $$1456645 = 0, $$1660 = 0, $$2 = 0, $$2391 = 0, $$2413 = 0, $$2421594 = 0, $$2433 = 0, $$2439 = 0, $$2445 = 0, $$2449 = 0, $$2453 = 0, $$2457 = 0, $$3 = 0;
 var $$3388 = 0, $$3392 = 0, $$3396 = 0, $$3422648 = 0, $$3427 = 0, $$3427$ph = 0, $$3440 = 0, $$3446 = 0, $$3450 = 0, $$3454 = 0, $$3458$lcssa = 0, $$3458628 = 0, $$4 = 0, $$4423 = 0, $$4423602 = 0, $$4423603 = 0, $$4435 = 0, $$4441 = 0, $$4459623 = 0, $$5 = 0;
 var $$5429 = 0, $$5429$1 = 0, $$5436 = 0, $$5442 = 0, $$6461539 = 0, $$6656 = 0, $$9 = 0, $$in$i = 0, $$in$i$ph = 0, $$in$i507 = 0, $$in$i507$ph = 0, $$in$i520 = 0, $$in$i520$ph = 0, $$in$i530 = 0, $$in$i530$ph = 0, $$lobit = 0, $$neg549 = 0, $$neg550 = 0, $$op = 0, $$ph798 = 0;
 var $$ph799 = 0, $$phi$trans$insert = 0, $$phi$trans$insert715 = 0, $$phi$trans$insert718 = 0, $$phi$trans$insert720 = 0, $$phi$trans$insert723 = 0, $$phi$trans$insert725 = 0, $$phi$trans$insert728 = 0, $$phi$trans$insert730 = 0, $$pr = 0, $$pre = 0, $$pre$i = 0, $$pre$i492 = 0, $$pre$i495 = 0, $$pre$i498 = 0, $$pre$i502 = 0, $$pre$i502747 = 0, $$pre$i502748 = 0, $$pre$i523 = 0, $$pre$phi753Z2D = 0;
 var $$pre$phi755Z2D = 0, $$pre$phi757Z2D = 0, $$pre$phi758Z2D = 0, $$pre$phi760Z2D = 0, $$pre$phi762Z2D = 0, $$pre$phi764Z2D = 0, $$pre$phi765Z2D = 0, $$pre$phi766Z2D = 0, $$pre$phi768Z2D = 0, $$pre$phi770Z2D = 0, $$pre$phi772Z2D = 0, $$pre$phi773Z2D = 0, $$pre$phi774Z2D = 0, $$pre$phi776Z2D = 0, $$pre$phi778Z2D = 0, $$pre$phi780Z2D = 0, $$pre$phi782Z2D = 0, $$pre$phiZ2D = 0, $$pre716 = 0, $$pre717 = 0;
 var $$pre719 = 0, $$pre721 = 0, $$pre722 = 0, $$pre724 = 0, $$pre726 = 0, $$pre727 = 0, $$pre729 = 0, $$pre731 = 0, $$pre732 = 0, $$pre733 = 0, $$pre734 = 0, $$pre735$pre = 0, $$pre736$pre$cast = 0, $$pre737 = 0, $$pre738 = 0, $$pre740 = 0, $$pre741 = 0, $$pre744 = 0, $$pre745 = 0, $$pre751 = 0;
 var $$pre752 = 0, $$pre754 = 0, $$pre759 = 0, $$pre763 = 0, $$pre767 = 0, $$pre771 = 0, $$pre775 = 0, $$pre779 = 0, $$pre781 = 0, $$sroa$0 = 0, $$sroa$0$0$$sroa$0$0$$0$467542 = 0, $$sroa$0$0$$sroa$0$0$$0$480543672 = 0, $$sroa$0$0$$sroa$0$0$$0$480543672$in = 0, $$sroa$0$0$$sroa$0$0$$0$481484 = 0, $$sroa$0$0$$sroa$0$0$$0$482544 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0;
 var $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond701 = 0, $ispos = 0, $ispos485 = 0, $neg = 0, $neg486 = 0, $not$ = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$1 = 0, $or$cond487 = 0, $or$cond488 = 0, $spec$select = 0, $spec$select490 = 0, $spec$select491 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $vararg_buffer = sp + 80|0;
 $3 = sp + 116|0;
 $4 = sp + 16|0;
 $$sroa$0 = sp + 112|0;
 $5 = sp + 104|0;
 $6 = sp + 96|0;
 $7 = sp + 92|0;
 $8 = sp + 88|0;
 $9 = sp + 84|0;
 $10 = sp;
 $11 = HEAP32[$0>>2]|0;
 $12 = ((($0)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_calloc($13,1)|0);
 $15 = (_iconv_open(132829,132835)|0);
 $16 = (_iconv_open(132829,132845)|0);
 $17 = (_iconv_open(132829,132829)|0);
 $18 = ($13|0)>(0);
 L1: do {
  if ($18) {
   $19 = ((($3)) + 4|0);
   $20 = ((($3)) + 8|0);
   $21 = ((($5)) + 4|0);
   $22 = ($17|0)==((-1)|0);
   $23 = ((($2)) + 4|0);
   $24 = ((($2)) + 8|0);
   $25 = ((($3)) + 8|0);
   $26 = ((($3)) + 4|0);
   $27 = ((($3)) + 4|0);
   $28 = ((($3)) + 8|0);
   $29 = ((($3)) + 4|0);
   $$0680 = 0;$31 = 0;
   L3: while(1) {
    $30 = ($31<<24>>24)==(0);
    if ($30) {
     HEAP32[$$sroa$0>>2] = 0;
     $32 = (((($11) + (($$0680*48)|0)|0)) + 11|0);
     $33 = HEAP8[$32>>0]|0;
     $34 = ($33<<24>>24)==(0);
     if ($34) {
      HEAP32[$4>>2] = $$0680;
      $$0466783 = 1;
      label = 16;
     } else {
      $35 = $33&255;
      $36 = (((($11) + (($$0680*48)|0)|0)) + 12|0);
      $37 = HEAP8[$36>>0]|0;
      $38 = $35 << 2;
      _memset(($4|0),-1,($38|0))|0;
      $$1420576 = $$0680;$41 = 0;
      while(1) {
       $39 = (($14) + ($$1420576)|0);
       $40 = ($41<<24>>24)==(0);
       if ($40) {
        $42 = (((($11) + (($$1420576*48)|0)|0)) + 11|0);
        $43 = HEAP8[$42>>0]|0;
        $44 = ($43<<24>>24)==($33<<24>>24);
        if ($44) {
         $45 = (((($11) + (($$1420576*48)|0)|0)) + 12|0);
         $46 = HEAP8[$45>>0]|0;
         $47 = ($46<<24>>24)==($37<<24>>24);
         if ($47) {
          $48 = (((($11) + (($$1420576*48)|0)|0)) + 10|0);
          $49 = HEAP8[$48>>0]|0;
          $50 = $49&255;
          $51 = (($4) + ($50<<2)|0);
          $52 = HEAP32[$51>>2]|0;
          $53 = ($52|0)<(0);
          if ($53) {
           HEAP32[$51>>2] = $$1420576;
           HEAP8[$39>>0] = 1;
          }
         }
        }
       }
       $54 = (($$1420576) + 1)|0;
       $exitcond = ($54|0)==($13|0);
       if ($exitcond) {
        break;
       }
       $$phi$trans$insert715 = (($14) + ($54)|0);
       $$pre716 = HEAP8[$$phi$trans$insert715>>0]|0;
       $$1420576 = $54;$41 = $$pre716;
      }
      $55 = ($33<<24>>24)==(0);
      if ($55) {
       $56 = (_malloc(1)|0);
       HEAP32[$3>>2] = $16;
       HEAP32[$19>>2] = $15;
       HEAP32[$20>>2] = $17;
       $$0447$lcssa789791802808 = 0;$$0466785803807 = 0;$$1456566804806 = 0;$382 = $56;$384 = 1;
       label = 135;
      } else {
       $$0466783 = $35;
       label = 16;
      }
     }
     do {
      if ((label|0) == 16) {
       label = 0;
       $$0437593 = 0;$$0443592 = 0;$$0447591 = 0;$$0451590 = 0;$$2421594 = 0;
       while(1) {
        $57 = (($4) + ($$2421594<<2)|0);
        $58 = HEAP32[$57>>2]|0;
        $59 = ($58|0)>(-1);
        L25: do {
         if ($59) {
          $60 = (((($11) + (($58*48)|0)|0)) + 4|0);
          $61 = HEAP32[$60>>2]|0;
          $62 = ($61|0)>(0);
          if ($62) {
           $63 = (($11) + (($58*48)|0)|0);
           $64 = HEAP32[$63>>2]|0;
           $$0417583 = 0;$$1438582 = $$0437593;$$1444581 = $$0443592;$$1448580 = $$0447591;$$1452579 = $$0451590;
           while(1) {
            $65 = (($64) + (($$0417583*12)|0)|0);
            $66 = HEAP32[$65>>2]|0;
            switch ($66|0) {
            case 5:  {
             $67 = ($$1448580|0)==(0);
             $spec$select = $67 ? 1 : $$1448580;
             $$2445 = $$1444581;$$2449 = $spec$select;$$2453 = $$1452579;$$4441 = $$1438582;
             break;
            }
            case 9:  {
             $68 = ($$1448580|0)==(0);
             if ($68) {
              $69 = (($$1452579) + 2)|0;
              $70 = (((($64) + (($$0417583*12)|0)|0)) + 4|0);
              $71 = HEAP32[$70>>2]|0;
              $$2445 = $71;$$2449 = 2;$$2453 = $69;$$4441 = $$1438582;
             } else {
              $$2445 = $$1444581;$$2449 = $$1448580;$$2453 = $$1452579;$$4441 = $$1438582;
             }
             break;
            }
            case 8:  {
             $$2439 = 1;
             label = 25;
             break;
            }
            case 4:  {
             $$2439 = $$1438582;
             label = 25;
             break;
            }
            default: {
             $$0410 = 0;$$3440 = $$1438582;
             label = 26;
            }
            }
            if ((label|0) == 25) {
             label = 0;
             $$0410 = 2;$$3440 = $$2439;
             label = 26;
            }
            if ((label|0) == 26) {
             label = 0;
             $72 = (($66) + -1)|0;
             $73 = $72 & $66;
             $74 = ($73|0)==(0);
             if ($74) {
              $75 = (((($64) + (($$0417583*12)|0)|0)) + 8|0);
              $76 = HEAP32[$75>>2]|0;
              $77 = $76 << $$0410;
              $78 = (($77) + ($$1452579))|0;
              $$2445 = $$1444581;$$2449 = $$1448580;$$2453 = $78;$$4441 = $$3440;
             } else {
              $$2445 = $$1444581;$$2449 = $$1448580;$$2453 = $$1452579;$$4441 = $$3440;
             }
            }
            $79 = (($$0417583) + 1)|0;
            $80 = ($79|0)<($61|0);
            if ($80) {
             $$0417583 = $79;$$1438582 = $$4441;$$1444581 = $$2445;$$1448580 = $$2449;$$1452579 = $$2453;
            } else {
             $$3446 = $$2445;$$3450 = $$2449;$$3454 = $$2453;$$5442 = $$4441;
             break L25;
            }
           }
          } else {
           $$3446 = $$0443592;$$3450 = $$0447591;$$3454 = $$0451590;$$5442 = $$0437593;
          }
         } else {
          $$3446 = $$0443592;$$3450 = $$0447591;$$3454 = $$0451590;$$5442 = $$0437593;
         }
        } while(0);
        $81 = (($$2421594) + 1)|0;
        $exitcond701 = ($81|0)==($$0466783|0);
        if ($exitcond701) {
         break;
        } else {
         $$0437593 = $$5442;$$0443592 = $$3446;$$0447591 = $$3450;$$0451590 = $$3454;$$2421594 = $81;
        }
       }
       $82 = (($$3454) + 1)|0;
       $83 = (_malloc($82)|0);
       $84 = ($$3450|0)==(2);
       do {
        if ($84) {
         $85 = ($$3446|0)<(100);
         if ($85) {
          $86 = (($$3446|0) / 10)&-1;
          $87 = (($86) + 48)|0;
          $88 = $87&255;
          HEAP8[$83>>0] = $88;
          $89 = ($86*10)|0;
          $90 = (($$3446) - ($89))|0;
          $91 = (($90) + 48)|0;
          $92 = $91&255;
          $93 = ((($83)) + 1|0);
          HEAP8[$93>>0] = $92;
          $$0447$lcssa789793 = 2;$$0455797 = 2;
          break;
         } else {
          $94 = (($$3446) + 156)|0;
          $95 = $94&255;
          HEAP8[$83>>0] = $95;
          $$0447$lcssa789793 = 2;$$0455797 = 1;
          break;
         }
        } else {
         $$0447$lcssa789793 = $$3450;$$0455797 = 0;
        }
       } while(0);
       HEAP32[$3>>2] = $16;
       HEAP32[$19>>2] = $15;
       HEAP32[$20>>2] = $17;
       $96 = ($$0447$lcssa789793|0)==(0);
       $97 = ($$5442|0)==(0);
       $98 = $83;
       $$0411650 = (-1);$$0415649 = $$sroa$0;$$0431646 = -1;$$1456645 = $$0455797;$$3422648 = 0;
       L49: while(1) {
        $99 = (__zbar_image_scanner_alloc_sym($1,64,0)|0);
        HEAP32[$$0415649>>2] = $99;
        $100 = ((($99)) + 16|0);
        HEAP32[$100>>2] = $$1456645;
        $101 = (($4) + ($$3422648<<2)|0);
        $102 = HEAP32[$101>>2]|0;
        $103 = ($102|0)<(0);
        if ($103) {
         HEAP32[$99>>2] = 1;
         $$4423602 = (($$3422648) + 1)|0;
         $104 = ($$4423602|0)<($$0466783|0);
         if (!($104)) {
          $$0411564 = $$0411650;$$1456566 = $$1456645;$507 = 1;
          break;
         }
         $$4423603 = $$4423602;
         while(1) {
          $106 = (($4) + ($$4423603<<2)|0);
          $107 = HEAP32[$106>>2]|0;
          $108 = ($107|0)<(0);
          if (!($108)) {
           break;
          }
          $$4423 = (($$4423603) + 1)|0;
          $105 = ($$4423|0)<($$0466783|0);
          if ($105) {
           $$4423603 = $$4423;
          } else {
           $$0411564 = $$0411650;$$1456566 = $$1456645;$507 = 1;
           break L49;
          }
         }
         $109 = (($$1456645) + 1)|0;
         $110 = (($83) + ($$1456645)|0);
         HEAP8[$110>>0] = 0;
         $111 = HEAP32[$$0415649>>2]|0;
         $112 = ((($111)) + 16|0);
         HEAP32[$112>>2] = $109;
         $113 = ((($111)) + 44|0);
         $114 = (__zbar_image_scanner_alloc_sym($1,64,0)|0);
         HEAP32[$113>>2] = $114;
         $$1416 = $113;$$2457 = $109;$$5 = $$4423603;$116 = $107;$121 = $114;
        } else {
         $$1416 = $$0415649;$$2457 = $$1456645;$$5 = $$3422648;$116 = $102;$121 = $99;
        }
        $115 = (((($11) + (($116*48)|0)|0)) + 16|0);
        $117 = HEAP32[$115>>2]|0;
        $118 = (((($11) + (($116*48)|0)|0)) + 20|0);
        $119 = HEAP32[$118>>2]|0;
        $120 = ((($121)) + 28|0);
        $122 = HEAP32[$120>>2]|0;
        $123 = (($122) + 1)|0;
        HEAP32[$120>>2] = $123;
        $124 = ((($121)) + 24|0);
        $125 = HEAP32[$124>>2]|0;
        $126 = ($123>>>0)<($125>>>0);
        $127 = ((($121)) + 32|0);
        $128 = (($125) + 1)|0;
        if ($126) {
         $$pre$i = HEAP32[$127>>2]|0;
         $$pre$phi757Z2D = $120;$$pre$phi758Z2D = $124;$$pre$phi760Z2D = $127;$$pre$phi762Z2D = $127;$$pre$phi764Z2D = $128;$133 = $$pre$i;$140 = $123;$142 = $125;$508 = $121;
        } else {
         $129 = $128 << 3;
         $130 = HEAP32[$127>>2]|0;
         HEAP32[$124>>2] = $128;
         $131 = (_realloc($130,$129)|0);
         HEAP32[$127>>2] = $131;
         $$pre717 = HEAP32[$$1416>>2]|0;
         $$phi$trans$insert718 = ((($$pre717)) + 28|0);
         $$pre719 = HEAP32[$$phi$trans$insert718>>2]|0;
         $$phi$trans$insert720 = ((($$pre717)) + 24|0);
         $$pre721 = HEAP32[$$phi$trans$insert720>>2]|0;
         $$pre759 = ((($$pre717)) + 32|0);
         $$pre763 = (($$pre721) + 1)|0;
         $$pre$phi757Z2D = $$phi$trans$insert718;$$pre$phi758Z2D = $$phi$trans$insert720;$$pre$phi760Z2D = $$pre759;$$pre$phi762Z2D = $$pre759;$$pre$phi764Z2D = $$pre763;$133 = $131;$140 = $$pre719;$142 = $$pre721;$508 = $$pre717;
        }
        $132 = (($133) + ($122<<3)|0);
        HEAP32[$132>>2] = $117;
        $134 = (((($133) + ($122<<3)|0)) + 4|0);
        HEAP32[$134>>2] = $119;
        $135 = (((($11) + (($116*48)|0)|0)) + 32|0);
        $136 = HEAP32[$135>>2]|0;
        $137 = (((($11) + (($116*48)|0)|0)) + 36|0);
        $138 = HEAP32[$137>>2]|0;
        $139 = (($140) + 1)|0;
        HEAP32[$$pre$phi757Z2D>>2] = $139;
        $141 = ($139>>>0)<($142>>>0);
        if ($141) {
         $$pre$i492 = HEAP32[$$pre$phi760Z2D>>2]|0;
         $$pre$phi765Z2D = $$pre$phi757Z2D;$$pre$phi766Z2D = $$pre$phi758Z2D;$$pre$phi768Z2D = $$pre$phi760Z2D;$$pre$phi770Z2D = $$pre$phi762Z2D;$$pre$phi772Z2D = $$pre$phi764Z2D;$147 = $$pre$i492;$154 = $139;$156 = $142;$509 = $508;
        } else {
         $143 = $$pre$phi764Z2D << 3;
         $144 = HEAP32[$$pre$phi762Z2D>>2]|0;
         HEAP32[$$pre$phi758Z2D>>2] = $$pre$phi764Z2D;
         $145 = (_realloc($144,$143)|0);
         HEAP32[$$pre$phi762Z2D>>2] = $145;
         $$pre722 = HEAP32[$$1416>>2]|0;
         $$phi$trans$insert723 = ((($$pre722)) + 28|0);
         $$pre724 = HEAP32[$$phi$trans$insert723>>2]|0;
         $$phi$trans$insert725 = ((($$pre722)) + 24|0);
         $$pre726 = HEAP32[$$phi$trans$insert725>>2]|0;
         $$pre767 = ((($$pre722)) + 32|0);
         $$pre771 = (($$pre726) + 1)|0;
         $$pre$phi765Z2D = $$phi$trans$insert723;$$pre$phi766Z2D = $$phi$trans$insert725;$$pre$phi768Z2D = $$pre767;$$pre$phi770Z2D = $$pre767;$$pre$phi772Z2D = $$pre771;$147 = $145;$154 = $$pre724;$156 = $$pre726;$509 = $$pre722;
        }
        $146 = (($147) + ($140<<3)|0);
        HEAP32[$146>>2] = $136;
        $148 = (((($147) + ($140<<3)|0)) + 4|0);
        HEAP32[$148>>2] = $138;
        $149 = (((($11) + (($116*48)|0)|0)) + 40|0);
        $150 = HEAP32[$149>>2]|0;
        $151 = (((($11) + (($116*48)|0)|0)) + 44|0);
        $152 = HEAP32[$151>>2]|0;
        $153 = (($154) + 1)|0;
        HEAP32[$$pre$phi765Z2D>>2] = $153;
        $155 = ($153>>>0)<($156>>>0);
        if ($155) {
         $$pre$i495 = HEAP32[$$pre$phi768Z2D>>2]|0;
         $$pre$phi773Z2D = $$pre$phi765Z2D;$$pre$phi774Z2D = $$pre$phi766Z2D;$$pre$phi776Z2D = $$pre$phi768Z2D;$$pre$phi778Z2D = $$pre$phi770Z2D;$$pre$phi780Z2D = $$pre$phi772Z2D;$161 = $$pre$i495;$168 = $153;$170 = $156;$510 = $509;
        } else {
         $157 = $$pre$phi772Z2D << 3;
         $158 = HEAP32[$$pre$phi770Z2D>>2]|0;
         HEAP32[$$pre$phi766Z2D>>2] = $$pre$phi772Z2D;
         $159 = (_realloc($158,$157)|0);
         HEAP32[$$pre$phi770Z2D>>2] = $159;
         $$pre727 = HEAP32[$$1416>>2]|0;
         $$phi$trans$insert728 = ((($$pre727)) + 28|0);
         $$pre729 = HEAP32[$$phi$trans$insert728>>2]|0;
         $$phi$trans$insert730 = ((($$pre727)) + 24|0);
         $$pre731 = HEAP32[$$phi$trans$insert730>>2]|0;
         $$pre775 = ((($$pre727)) + 32|0);
         $$pre779 = (($$pre731) + 1)|0;
         $$pre$phi773Z2D = $$phi$trans$insert728;$$pre$phi774Z2D = $$phi$trans$insert730;$$pre$phi776Z2D = $$pre775;$$pre$phi778Z2D = $$pre775;$$pre$phi780Z2D = $$pre779;$161 = $159;$168 = $$pre729;$170 = $$pre731;$510 = $$pre727;
        }
        $160 = (($161) + ($154<<3)|0);
        HEAP32[$160>>2] = $150;
        $162 = (((($161) + ($154<<3)|0)) + 4|0);
        HEAP32[$162>>2] = $152;
        $163 = (((($11) + (($116*48)|0)|0)) + 24|0);
        $164 = HEAP32[$163>>2]|0;
        $165 = (((($11) + (($116*48)|0)|0)) + 28|0);
        $166 = HEAP32[$165>>2]|0;
        $167 = (($168) + 1)|0;
        HEAP32[$$pre$phi773Z2D>>2] = $167;
        $169 = ($167>>>0)<($170>>>0);
        if ($169) {
         $$pre$i498 = HEAP32[$$pre$phi776Z2D>>2]|0;
         $175 = $$pre$i498;$201 = $510;
        } else {
         $171 = $$pre$phi780Z2D << 3;
         $172 = HEAP32[$$pre$phi778Z2D>>2]|0;
         HEAP32[$$pre$phi774Z2D>>2] = $$pre$phi780Z2D;
         $173 = (_realloc($172,$171)|0);
         HEAP32[$$pre$phi778Z2D>>2] = $173;
         $$pre732 = HEAP32[$$1416>>2]|0;
         $175 = $173;$201 = $$pre732;
        }
        $174 = (($175) + ($168<<3)|0);
        HEAP32[$174>>2] = $164;
        $176 = (((($175) + ($168<<3)|0)) + 4|0);
        HEAP32[$176>>2] = $166;
        $177 = HEAP32[$115>>2]|0;
        $178 = HEAP32[$135>>2]|0;
        $179 = (($177) - ($178))|0;
        $180 = HEAP32[$163>>2]|0;
        $181 = (($179) + ($180))|0;
        $182 = HEAP32[$149>>2]|0;
        $183 = (($181) - ($182))|0;
        HEAP32[$5>>2] = $183;
        $184 = HEAP32[$137>>2]|0;
        $185 = HEAP32[$118>>2]|0;
        $186 = (($184) - ($185))|0;
        $187 = HEAP32[$151>>2]|0;
        $188 = (($186) + ($187))|0;
        $189 = HEAP32[$165>>2]|0;
        $190 = (($188) - ($189))|0;
        HEAP32[$21>>2] = $190;
        $ispos = ($183|0)>(-1);
        $neg = (0 - ($183))|0;
        $191 = $ispos ? $183 : $neg;
        $ispos485 = ($190|0)>(-1);
        $neg486 = (0 - ($190))|0;
        $192 = $ispos485 ? $190 : $neg486;
        $193 = ($191|0)>($192|0);
        $194 = $193&1;
        $not$ = $193 ^ 1;
        $195 = $not$&1;
        $196 = (($5) + ($195<<2)|0);
        $197 = HEAP32[$196>>2]|0;
        $$lobit = $197 >>> 31;
        $198 = $$lobit << 1;
        $199 = $198 | $194;
        $200 = ((($201)) + 36|0);
        HEAP32[$200>>2] = $199;
        $202 = (((($11) + (($116*48)|0)|0)) + 4|0);
        $203 = HEAP32[$202>>2]|0;
        $204 = ($203|0)>(0);
        L75: do {
         if ($204) {
          $205 = (($11) + (($116*48)|0)|0);
          $$1412636 = $$0411650;$$1418634 = 0;$$1432629 = $$0431646;$$3458628 = $$2457;
          while(1) {
           $206 = HEAP32[$205>>2]|0;
           $207 = (($206) + (($$1418634*12)|0)|0);
           $208 = HEAP32[$207>>2]|0;
           L79: do {
            switch ($208|0) {
            case 1:  {
             $209 = (($$3454) - ($$3458628))|0;
             $210 = (((($206) + (($$1418634*12)|0)|0)) + 8|0);
             $211 = HEAP32[$210>>2]|0;
             $212 = ($209>>>0)<($211>>>0);
             if ($212) {
              $$11 = $$3458628;$$4 = $$1412636;$$4435 = $$1432629;$$9 = 1;
             } else {
              $213 = (((($206) + (($$1418634*12)|0)|0)) + 4|0);
              $214 = (($83) + ($$3458628)|0);
              $215 = HEAP32[$213>>2]|0;
              _memcpy(($214|0),($215|0),($211|0))|0;
              $216 = HEAP32[$210>>2]|0;
              $217 = (($216) + ($$3458628))|0;
              $$11 = $217;$$4 = $$1412636;$$4435 = $$1432629;$$9 = 0;
             }
             break;
            }
            case 2:  {
             $218 = (((($206) + (($$1418634*12)|0)|0)) + 4|0);
             $219 = HEAP32[$218>>2]|0;
             HEAP32[$8>>2] = $219;
             $220 = (((($206) + (($$1418634*12)|0)|0)) + 8|0);
             $221 = HEAP32[$220>>2]|0;
             HEAP32[$6>>2] = $221;
             $222 = $219;
             do {
              if ($96) {
               $$6461539 = $$3458628;$248 = $221;$251 = $222;
              } else {
               $223 = (_memchr($222,37,$221)|0);
               $224 = ($223|0)==(0|0);
               if ($224) {
                $$6461539 = $$3458628;$248 = $221;$251 = $222;
                break;
               }
               $$4459623 = $$3458628;$226 = $223;$228 = $222;$236 = $221;
               while(1) {
                $225 = $226;
                $227 = $228;
                $229 = (($225) - ($227))|0;
                $230 = (($$3454) - ($$4459623))|0;
                $231 = (($229) + 1)|0;
                $232 = ($230>>>0)<($231>>>0);
                if ($232) {
                 $$11 = $$4459623;$$4 = $$1412636;$$4435 = $$1432629;$$9 = 1;
                 break L79;
                }
                $233 = (($83) + ($$4459623)|0);
                _memcpy(($233|0),($228|0),($229|0))|0;
                $234 = (($229) + ($$4459623))|0;
                $235 = ($231>>>0)<($236>>>0);
                if ($235) {
                 $237 = ((($226)) + 1|0);
                 $238 = HEAP8[$237>>0]|0;
                 $239 = ($238<<24>>24)==(37);
                 if ($239) {
                  $$0405 = 37;$$0406 = $231;$$0407 = $237;
                 } else {
                  label = 64;
                 }
                } else {
                 label = 64;
                }
                if ((label|0) == 64) {
                 label = 0;
                 $$0405 = 29;$$0406 = $229;$$0407 = $226;
                }
                $240 = (($234) + 1)|0;
                $241 = (($83) + ($234)|0);
                HEAP8[$241>>0] = $$0405;
                $$neg550 = (($236) + -1)|0;
                $242 = (($$neg550) - ($$0406))|0;
                HEAP32[$6>>2] = $242;
                $243 = ((($$0407)) + 1|0);
                HEAP32[$8>>2] = $243;
                $244 = (_memchr($243,37,$242)|0);
                $245 = ($244|0)==(0|0);
                if ($245) {
                 $$6461539 = $240;$248 = $242;$251 = $243;
                 break;
                } else {
                 $$4459623 = $240;$226 = $244;$228 = $243;$236 = $242;
                }
               }
              }
             } while(0);
             $246 = (($$3454) - ($$6461539))|0;
             $247 = ($246>>>0)<($248>>>0);
             if ($247) {
              $$11 = $$6461539;$$4 = $$1412636;$$4435 = $$1432629;$$9 = 1;
             } else {
              $249 = (($248) + ($$6461539))|0;
              $250 = (($83) + ($$6461539)|0);
              _memcpy(($250|0),($251|0),($248|0))|0;
              $$11 = $249;$$4 = $$1412636;$$4435 = $$1432629;$$9 = 0;
             }
             break;
            }
            case 8: case 4:  {
             $252 = (((($206) + (($$1418634*12)|0)|0)) + 4|0);
             $253 = HEAP32[$252>>2]|0;
             HEAP32[$8>>2] = $253;
             $254 = (((($206) + (($$1418634*12)|0)|0)) + 8|0);
             $255 = HEAP32[$254>>2]|0;
             HEAP32[$6>>2] = $255;
             $256 = (($83) + ($$3458628)|0);
             HEAP32[$9>>2] = $256;
             $257 = (($$3454) - ($$3458628))|0;
             HEAP32[$7>>2] = $257;
             $258 = ($$1432629|0)<(0);
             $259 = $253;
             if (!($258)) {
              $353 = ($$1412636|0)==((-1)|0);
              if ($353) {
               $$11 = $$3458628;$$4 = (-1);$$4435 = $$1432629;$$9 = 1;
               break L79;
              }
              $354 = (_iconv($$1412636,$8,$6,$9,$7)|0);
              $355 = ($354|0)==(-1);
              if ($355) {
               $$11 = $$3458628;$$4 = $$1412636;$$4435 = $$1432629;$$9 = 1;
               break L79;
              }
              $356 = HEAP32[$9>>2]|0;
              $357 = (($356) - ($98))|0;
              $$11 = $357;$$4 = $$1412636;$$4435 = $$1432629;$$9 = 0;
              break L79;
             }
             L102: do {
              if ($97) {
               $271 = ($255>>>0)>(2);
               do {
                if ($271) {
                 $272 = HEAP8[$259>>0]|0;
                 $273 = ($272<<24>>24)==(-17);
                 if (!($273)) {
                  break;
                 }
                 $274 = ((($259)) + 1|0);
                 $275 = HEAP8[$274>>0]|0;
                 $276 = ($275<<24>>24)==(-69);
                 if (!($276)) {
                  break;
                 }
                 $277 = ((($259)) + 2|0);
                 $278 = HEAP8[$277>>0]|0;
                 $279 = ($278<<24>>24)==(-65);
                 if (!($279)) {
                  break;
                 }
                 $280 = ((($259)) + 3|0);
                 HEAP32[$8>>2] = $280;
                 $281 = (($255) + -3)|0;
                 HEAP32[$6>>2] = $281;
                 do {
                  if ($22) {
                   $$pre$phi782Z2D = $259;$298 = $253;$299 = $255;
                  } else {
                   $282 = (_iconv($17,$8,$6,$9,$7)|0);
                   $283 = ($282|0)==(-1);
                   $284 = $283&1;
                   if ($283) {
                    $$pre733 = HEAP32[$252>>2]|0;
                    $$pre734 = HEAP32[$254>>2]|0;
                    $$pre781 = $$pre733;
                    $$pre$phi782Z2D = $$pre781;$298 = $$pre733;$299 = $$pre734;
                    break;
                   }
                   $285 = HEAP32[$9>>2]|0;
                   $286 = (($285) - ($98))|0;
                   $287 = HEAP32[$3>>2]|0;
                   $288 = ($287|0)==($17|0);
                   if (!($288)) {
                    $294 = HEAP32[$19>>2]|0;
                    $295 = ($294|0)==($17|0);
                    if ($295) {
                     $$in$i507$ph = 1;
                    } else {
                     $296 = HEAP32[$20>>2]|0;
                     $297 = ($296|0)==($17|0);
                     if ($297) {
                      $$in$i507$ph = 2;
                     } else {
                      $$11 = $286;$$4 = $$1412636;$$4435 = $$1432629;$$9 = 0;
                      break L79;
                     }
                    }
                    $$in$i507 = $$in$i507$ph;
                    while(1) {
                     $289 = (($$in$i507) + -1)|0;
                     $290 = (($3) + ($289<<2)|0);
                     $291 = HEAP32[$290>>2]|0;
                     $292 = (($3) + ($$in$i507<<2)|0);
                     HEAP32[$292>>2] = $291;
                     $293 = ($$in$i507|0)>(1);
                     if ($293) {
                      $$in$i507 = $289;
                     } else {
                      break;
                     }
                    }
                   }
                   HEAP32[$3>>2] = $17;
                   $$11 = $286;$$4 = $$1412636;$$4435 = $$1432629;$$9 = $284;
                   break L79;
                  }
                 } while(0);
                 HEAP32[$8>>2] = $298;
                 HEAP32[$6>>2] = $299;
                 HEAP32[$9>>2] = $256;
                 HEAP32[$7>>2] = $257;
                 $$3427$ph = 1;$$ph798 = $$pre$phi782Z2D;$$ph799 = $299;
                 label = 100;
                 break L102;
                }
               } while(0);
               $300 = ($255|0)>(0);
               if ($300) {
                $$07$i = 0;
                while(1) {
                 $303 = (($259) + ($$07$i)|0);
                 $304 = HEAP8[$303>>0]|0;
                 $305 = ($304<<24>>24)<(0);
                 $302 = (($$07$i) + 1)|0;
                 if ($305) {
                  $$3427$ph = 0;$$ph798 = $259;$$ph799 = $255;
                  label = 100;
                  break L102;
                 }
                 $301 = ($302|0)<($255|0);
                 if ($301) {
                  $$07$i = $302;
                 } else {
                  break;
                 }
                }
               }
               $306 = HEAP32[$3>>2]|0;
               $307 = ($306|0)==($17|0);
               if (!($307)) {
                $313 = HEAP32[$19>>2]|0;
                $314 = ($313|0)==($17|0);
                if ($314) {
                 $$in$i520$ph = 1;
                } else {
                 $315 = HEAP32[$20>>2]|0;
                 $316 = ($315|0)==($17|0);
                 if ($316) {
                  $$in$i520$ph = 2;
                 } else {
                  $$3427$ph = 0;$$ph798 = $259;$$ph799 = $255;
                  label = 100;
                  break;
                 }
                }
                $$in$i520 = $$in$i520$ph;
                while(1) {
                 $308 = (($$in$i520) + -1)|0;
                 $309 = (($3) + ($308<<2)|0);
                 $310 = HEAP32[$309>>2]|0;
                 $311 = (($3) + ($$in$i520<<2)|0);
                 HEAP32[$311>>2] = $310;
                 $312 = ($$in$i520|0)>(1);
                 if ($312) {
                  $$in$i520 = $308;
                 } else {
                  break;
                 }
                }
               }
               HEAP32[$3>>2] = $17;
               $$3427 = 0;$318 = $17;$321 = $255;$325 = $259;
              } else {
               $260 = HEAP32[$3>>2]|0;
               $261 = ($260|0)==($16|0);
               if (!($261)) {
                $267 = HEAP32[$19>>2]|0;
                $268 = ($267|0)==($16|0);
                if ($268) {
                 $$in$i$ph = 1;
                } else {
                 $269 = HEAP32[$20>>2]|0;
                 $270 = ($269|0)==($16|0);
                 if ($270) {
                  $$in$i$ph = 2;
                 } else {
                  $$3427$ph = 0;$$ph798 = $259;$$ph799 = $255;
                  label = 100;
                  break;
                 }
                }
                $$in$i = $$in$i$ph;
                while(1) {
                 $262 = (($$in$i) + -1)|0;
                 $263 = (($3) + ($262<<2)|0);
                 $264 = HEAP32[$263>>2]|0;
                 $265 = (($3) + ($$in$i<<2)|0);
                 HEAP32[$265>>2] = $264;
                 $266 = ($$in$i|0)>(1);
                 if ($266) {
                  $$in$i = $262;
                 } else {
                  break;
                 }
                }
               }
               HEAP32[$3>>2] = $16;
               $$3427 = 0;$318 = $16;$321 = $255;$325 = $259;
              }
             } while(0);
             if ((label|0) == 100) {
              label = 0;
              $$pr = HEAP32[$3>>2]|0;
              $$3427 = $$3427$ph;$318 = $$pr;$321 = $$ph799;$325 = $$ph798;
             }
             $317 = ($318|0)==((-1)|0);
             do {
              if ($317) {
               $$5429 = $$3427;$487 = $321;$489 = $325;
               label = 116;
              } else {
               $319 = ($318|0)==($15|0);
               L152: do {
                if ($319) {
                 $320 = ($321|0)>(0);
                 if (!($320)) {
                  $331 = $15;
                  break;
                 }
                 $$09$i = 0;
                 while(1) {
                  $324 = (($325) + ($$09$i)|0);
                  $326 = HEAP8[$324>>0]|0;
                  $327 = ($326<<24>>24)<(0);
                  $328 = ($326&255)<(160);
                  $or$cond$i = $327 & $328;
                  $323 = (($$09$i) + 1)|0;
                  if ($or$cond$i) {
                   break;
                  }
                  $322 = ($323|0)<($321|0);
                  if ($322) {
                   $$09$i = $323;
                  } else {
                   $331 = $15;
                   break L152;
                  }
                 }
                 $329 = HEAP32[$27>>2]|0;
                 HEAP32[$3>>2] = $329;
                 $330 = HEAP32[$28>>2]|0;
                 HEAP32[$29>>2] = $330;
                 $$pre735$pre = HEAP32[$3>>2]|0;
                 HEAP32[$20>>2] = $15;
                 $331 = $$pre735$pre;
                } else {
                 $331 = $318;
                }
               } while(0);
               $332 = (_iconv($331,$8,$6,$9,$7)|0);
               $333 = ($332|0)==(-1);
               if (!($333)) {
                $338 = $331;
                break;
               }
               $348 = HEAP32[$252>>2]|0;
               HEAP32[$8>>2] = $348;
               $349 = HEAP32[$254>>2]|0;
               HEAP32[$6>>2] = $349;
               HEAP32[$9>>2] = $256;
               HEAP32[$7>>2] = $257;
               $350 = $348;
               $$5429 = 1;$487 = $349;$489 = $350;
               label = 116;
              }
             } while(0);
             do {
              if ((label|0) == 116) {
               label = 0;
               $351 = HEAP32[$19>>2]|0;
               $352 = ($351|0)==((-1)|0);
               if ($352) {
                $$5429$1 = $$5429;
               } else {
                $485 = ($351|0)==($15|0);
                L165: do {
                 if ($485) {
                  $486 = ($487|0)>(0);
                  if (!($486)) {
                   $496 = $15;
                   break;
                  }
                  $$09$i$1 = 0;
                  while(1) {
                   $488 = (($489) + ($$09$i$1)|0);
                   $490 = HEAP8[$488>>0]|0;
                   $491 = ($490<<24>>24)<(0);
                   $492 = ($490&255)<(160);
                   $or$cond$i$1 = $491 & $492;
                   $493 = (($$09$i$1) + 1)|0;
                   if ($or$cond$i$1) {
                    break;
                   }
                   $494 = ($493|0)<($487|0);
                   if ($494) {
                    $$09$i$1 = $493;
                   } else {
                    $496 = $15;
                    break L165;
                   }
                  }
                  $495 = HEAP32[$25>>2]|0;
                  HEAP32[$26>>2] = $495;
                  $$pre736$pre$cast = $495;
                  HEAP32[$20>>2] = $15;
                  $496 = $$pre736$pre$cast;
                 } else {
                  $496 = $351;
                 }
                } while(0);
                $497 = (_iconv($496,$8,$6,$9,$7)|0);
                $498 = ($497|0)==(-1);
                if (!($498)) {
                 $338 = $496;
                 break;
                }
                $499 = HEAP32[$252>>2]|0;
                HEAP32[$8>>2] = $499;
                $500 = HEAP32[$254>>2]|0;
                HEAP32[$6>>2] = $500;
                HEAP32[$9>>2] = $256;
                HEAP32[$7>>2] = $257;
                $$5429$1 = 1;
               }
               $501 = HEAP32[$20>>2]|0;
               $502 = ($501|0)==((-1)|0);
               if ($502) {
                $$11 = $$3458628;$$4 = $$1412636;$$4435 = $$1432629;$$9 = $$5429$1;
                break L79;
               }
               $503 = (_iconv($501,$8,$6,$9,$7)|0);
               $504 = ($503|0)==(-1);
               if (!($504)) {
                $338 = $501;
                break;
               }
               $505 = HEAP32[$252>>2]|0;
               HEAP32[$8>>2] = $505;
               $506 = HEAP32[$254>>2]|0;
               HEAP32[$6>>2] = $506;
               HEAP32[$9>>2] = $256;
               HEAP32[$7>>2] = $257;
               $$11 = $$3458628;$$4 = $$1412636;$$4435 = $$1432629;$$9 = 1;
               break L79;
              }
             } while(0);
             $334 = HEAP32[$9>>2]|0;
             $335 = (($334) - ($98))|0;
             $336 = HEAP32[$3>>2]|0;
             $337 = ($336|0)==($338|0);
             if (!($337)) {
              $344 = HEAP32[$19>>2]|0;
              $345 = ($344|0)==($338|0);
              if ($345) {
               $$in$i530$ph = 1;
              } else {
               $346 = HEAP32[$20>>2]|0;
               $347 = ($346|0)==($338|0);
               if ($347) {
                $$in$i530$ph = 2;
               } else {
                $$11 = $335;$$4 = $$1412636;$$4435 = $$1432629;$$9 = 0;
                break L79;
               }
              }
              $$in$i530 = $$in$i530$ph;
              while(1) {
               $339 = (($$in$i530) + -1)|0;
               $340 = (($3) + ($339<<2)|0);
               $341 = HEAP32[$340>>2]|0;
               $342 = (($3) + ($$in$i530<<2)|0);
               HEAP32[$342>>2] = $341;
               $343 = ($$in$i530|0)>(1);
               if ($343) {
                $$in$i530 = $339;
               } else {
                break;
               }
              }
             }
             HEAP32[$3>>2] = $338;
             $$11 = $335;$$4 = $$1412636;$$4435 = $$1432629;$$9 = 0;
             break;
            }
            case 7:  {
             $358 = (((($206) + (($$1418634*12)|0)|0)) + 4|0);
             $359 = HEAP32[$358>>2]|0;
             $360 = ($359>>>0)<(19);
             $361 = ($359|0)!=(14);
             $or$cond = $360 & $361;
             L187: do {
              if ($or$cond) {
               $362 = $359 | 2;
               $363 = ($362|0)==(2);
               if ($363) {
                $$0398 = 132861;
                label = 125;
                break;
               }
               $364 = ($359>>>0)<(3);
               $$op = (3 - ($359))|0;
               $$neg549 = $364 ? $$op : 0;
               $365 = (($359) + -2)|0;
               $366 = (($365) + ($$neg549))|0;
               HEAP32[$vararg_buffer>>2] = $366;
               (_sprintf($10,132850,$vararg_buffer)|0);
               $$0398 = $10;
               label = 125;
              } else {
               switch ($359|0) {
               case 20:  {
                $$0398 = 132845;
                label = 125;
                break L187;
                break;
               }
               case 26:  {
                break;
               }
               default: {
                $$2413 = $$1412636;$$2433 = $$1432629;
                break L187;
               }
               }
               $$0398 = 132829;
               label = 125;
              }
             } while(0);
             if ((label|0) == 125) {
              label = 0;
              $367 = (_iconv_open(132829,$$0398)|0);
              $$2413 = $367;$$2433 = $359;
             }
             $$11 = $$3458628;$$4 = $$2413;$$4435 = $$2433;$$9 = 0;
             break;
            }
            default: {
             $$11 = $$3458628;$$4 = $$1412636;$$4435 = $$1432629;$$9 = 0;
            }
            }
           } while(0);
           $368 = (($$1418634) + 1)|0;
           $369 = HEAP32[$202>>2]|0;
           $370 = ($368|0)<($369|0);
           $371 = ($$9|0)==(0);
           $or$cond488 = $371 & $370;
           if ($or$cond488) {
            $$1412636 = $$4;$$1418634 = $368;$$1432629 = $$4435;$$3458628 = $$11;
           } else {
            $$1412$lcssa = $$4;$$1425$lcssa = $$9;$$1432$lcssa = $$4435;$$3458$lcssa = $$11;
            break L75;
           }
          }
         } else {
          $$1412$lcssa = $$0411650;$$1425$lcssa = 0;$$1432$lcssa = $$0431646;$$3458$lcssa = $$2457;
         }
        } while(0);
        $372 = ($$1432$lcssa|0)<(2);
        if ($372) {
         $373 = ($$1412$lcssa|0)==((-1)|0);
         if ($373) {
          $$5436 = -1;
         } else {
          $$5436 = -1;
         }
        } else {
         $$5436 = $$1432$lcssa;
        }
        $374 = (($$5) + 1)|0;
        $375 = HEAP32[$$1416>>2]|0;
        $376 = ((($375)) + 44|0);
        $377 = ($374|0)<($$0466783|0);
        $378 = ($$1425$lcssa|0)==(0);
        $or$cond487 = $378 & $377;
        if ($or$cond487) {
         $$0411650 = $$1412$lcssa;$$0415649 = $376;$$0431646 = $$5436;$$1456645 = $$3458$lcssa;$$3422648 = $374;
        } else {
         $$0411564 = $$1412$lcssa;$$1456566 = $$3458$lcssa;$507 = $378;
         break;
        }
       }
       $379 = ($$0411564|0)==((-1)|0);
       if ($379) {
        if ($507) {
         $$0447$lcssa789791802808 = $$0447$lcssa789793;$$0466785803807 = $$0466783;$$1456566804806 = $$1456566;$382 = $83;$384 = $82;
         label = 135;
         break;
        }
       } else {
        if ($507) {
         $$0447$lcssa789791802808 = $$0447$lcssa789793;$$0466785803807 = $$0466783;$$1456566804806 = $$1456566;$382 = $83;$384 = $82;
         label = 135;
         break;
        }
       }
       $$sroa$0$0$$sroa$0$0$$0$467542 = HEAP32[$$sroa$0>>2]|0;
       __zbar_image_scanner_recycle_syms($1,$$sroa$0$0$$sroa$0$0$$0$467542);
       _free($83);
      }
     } while(0);
     if ((label|0) == 135) {
      label = 0;
      $380 = (($$1456566804806) + 1)|0;
      $381 = (($382) + ($$1456566804806)|0);
      HEAP8[$381>>0] = 0;
      $383 = ($384>>>0)>($380>>>0);
      if ($383) {
       $385 = (_realloc($382,$380)|0);
       $$0465 = $385;
      } else {
       $$0465 = $382;
      }
      $386 = ($$0466785803807|0)==(1);
      if ($386) {
       $$sroa$0$0$$sroa$0$0$$0$482544 = HEAP32[$$sroa$0>>2]|0;
       $$0397 = $$sroa$0$0$$sroa$0$0$$0$482544;
      } else {
       $387 = HEAP32[$23>>2]|0;
       $388 = HEAP32[$24>>2]|0;
       $389 = (__zbar_image_scanner_alloc_sym($1,64,0)|0);
       $390 = (__zbar_symbol_set_create()|0);
       $391 = ((($389)) + 48|0);
       HEAP32[$391>>2] = $390;
       $$sroa$0$0$$sroa$0$0$$0$481484 = HEAP32[$$sroa$0>>2]|0;
       $392 = ((($390)) + 8|0);
       HEAP32[$392>>2] = $$sroa$0$0$$sroa$0$0$$0$481484;
       $393 = ($$sroa$0$0$$sroa$0$0$$0$481484|0)==(0);
       if ($393) {
        $$0397 = $389;
       } else {
        $$0384671 = -2;$$0385670 = $388;$$0389669 = -2;$$0393668 = $387;$$sroa$0$0$$sroa$0$0$$0$480543672$in = $$sroa$0$0$$sroa$0$0$$0$481484;
        while(1) {
         $$sroa$0$0$$sroa$0$0$$0$480543672 = $$sroa$0$0$$sroa$0$0$$0$480543672$in;
         $394 = ((($$sroa$0$0$$sroa$0$0$$0$480543672)) + 40|0);
         $395 = HEAP32[$394>>2]|0;
         $396 = (($395) + 1)|0;
         HEAP32[$394>>2] = $396;
         $397 = ($395|0)>(-2);
         if (!($397)) {
          label = 142;
          break L3;
         }
         $398 = HEAP32[$$sroa$0$0$$sroa$0$0$$0$480543672>>2]|0;
         $399 = ($398|0)==(1);
         if ($399) {
          HEAP32[$389>>2] = 1;
          $$3 = $$0384671;$$3388 = $$0385670;$$3392 = $$0389669;$$3396 = $$0393668;
         } else {
          $400 = ((($$sroa$0$0$$sroa$0$0$$0$480543672)) + 28|0);
          $401 = HEAP32[$400>>2]|0;
          $402 = ($401|0)==(0);
          if ($402) {
           $$3 = $$0384671;$$3388 = $$0385670;$$3392 = $$0389669;$$3396 = $$0393668;
          } else {
           $403 = ((($$sroa$0$0$$sroa$0$0$$0$480543672)) + 32|0);
           $404 = HEAP32[$403>>2]|0;
           $$1386659 = $$0385670;$$1390658 = $$0389669;$$1394657 = $$0393668;$$1660 = $$0384671;$$6656 = 0;
           while(1) {
            $405 = (($404) + ($$6656<<3)|0);
            $406 = HEAP32[$405>>2]|0;
            $407 = ($$1394657|0)<($406|0);
            $408 = (($406) + -1)|0;
            $spec$select490 = $407 ? $$1394657 : $408;
            $409 = ($$1390658|0)>($406|0);
            $410 = (($406) + 1)|0;
            $$2391 = $409 ? $$1390658 : $410;
            $411 = (((($404) + ($$6656<<3)|0)) + 4|0);
            $412 = HEAP32[$411>>2]|0;
            $413 = ($$1386659|0)<($412|0);
            $414 = (($412) + -1)|0;
            $spec$select491 = $413 ? $$1386659 : $414;
            $415 = ($$1660|0)>($412|0);
            $416 = (($412) + 1)|0;
            $$2 = $415 ? $$1660 : $416;
            $417 = (($$6656) + 1)|0;
            $418 = ($417>>>0)<($401>>>0);
            if ($418) {
             $$1386659 = $spec$select491;$$1390658 = $$2391;$$1394657 = $spec$select490;$$1660 = $$2;$$6656 = $417;
            } else {
             $$3 = $$2;$$3388 = $spec$select491;$$3392 = $$2391;$$3396 = $spec$select490;
             break;
            }
           }
          }
         }
         $419 = ((($$sroa$0$0$$sroa$0$0$$0$480543672)) + 16|0);
         $420 = HEAP32[$419>>2]|0;
         $421 = (($$0465) + ($420)|0);
         $422 = ((($$sroa$0$0$$sroa$0$0$$0$480543672)) + 20|0);
         HEAP32[$422>>2] = $421;
         $423 = ((($$sroa$0$0$$sroa$0$0$$0$480543672)) + 44|0);
         $424 = HEAP32[$423>>2]|0;
         $425 = ($424|0)==(0|0);
         $426 = $424;
         if ($425) {
          $430 = $380;
         } else {
          $427 = ((($424)) + 16|0);
          $428 = HEAP32[$427>>2]|0;
          $430 = $428;
         }
         $429 = ($430>>>0)>($420>>>0);
         if (!($429)) {
          label = 151;
          break L3;
         }
         $431 = $420 ^ -1;
         $432 = (($430) + ($431))|0;
         HEAP32[$419>>2] = $432;
         HEAP32[$$sroa$0>>2] = $426;
         $433 = ($424|0)==(0|0);
         if ($433) {
          break;
         } else {
          $$0384671 = $$3;$$0385670 = $$3388;$$0389669 = $$3392;$$0393668 = $$3396;$$sroa$0$0$$sroa$0$0$$0$480543672$in = $426;
         }
        }
        $434 = ($$3392|0)>(-2);
        if ($434) {
         $435 = ((($389)) + 28|0);
         $436 = HEAP32[$435>>2]|0;
         $437 = (($436) + 1)|0;
         HEAP32[$435>>2] = $437;
         $438 = ((($389)) + 24|0);
         $439 = HEAP32[$438>>2]|0;
         $440 = ($437>>>0)<($439>>>0);
         $441 = ((($389)) + 32|0);
         $442 = (($439) + 1)|0;
         if ($440) {
          $$pre$i523 = HEAP32[$441>>2]|0;
          $$pre$i502748 = $$pre$i523;$$pre$phiZ2D = $442;$449 = $437;$451 = $439;$453 = $$pre$i523;
         } else {
          $443 = $442 << 3;
          $444 = HEAP32[$441>>2]|0;
          HEAP32[$438>>2] = $442;
          $445 = (_realloc($444,$443)|0);
          HEAP32[$441>>2] = $445;
          $$pre737 = HEAP32[$435>>2]|0;
          $$pre738 = HEAP32[$438>>2]|0;
          $$pre751 = (($$pre738) + 1)|0;
          $$pre$i502748 = $445;$$pre$phiZ2D = $$pre751;$449 = $$pre737;$451 = $$pre738;$453 = $445;
         }
         $446 = (($$pre$i502748) + ($436<<3)|0);
         HEAP32[$446>>2] = $$3396;
         $447 = (((($$pre$i502748) + ($436<<3)|0)) + 4|0);
         HEAP32[$447>>2] = $$3388;
         $448 = (($449) + 1)|0;
         HEAP32[$435>>2] = $448;
         $450 = ($448>>>0)<($451>>>0);
         if ($450) {
          $$pre$i502747 = $$pre$i502748;$$pre$phi753Z2D = $$pre$phiZ2D;$458 = $448;$460 = $451;$462 = $453;
         } else {
          $452 = $$pre$phiZ2D << 3;
          HEAP32[$438>>2] = $$pre$phiZ2D;
          $454 = (_realloc($453,$452)|0);
          HEAP32[$441>>2] = $454;
          $$pre740 = HEAP32[$435>>2]|0;
          $$pre741 = HEAP32[$438>>2]|0;
          $$pre752 = (($$pre741) + 1)|0;
          $$pre$i502747 = $454;$$pre$phi753Z2D = $$pre752;$458 = $$pre740;$460 = $$pre741;$462 = $454;
         }
         $455 = (($$pre$i502747) + ($449<<3)|0);
         HEAP32[$455>>2] = $$3396;
         $456 = (((($$pre$i502747) + ($449<<3)|0)) + 4|0);
         HEAP32[$456>>2] = $$3;
         $457 = (($458) + 1)|0;
         HEAP32[$435>>2] = $457;
         $459 = ($457>>>0)<($460>>>0);
         if ($459) {
          $$pre$i502 = $$pre$i502747;$$pre$phi755Z2D = $$pre$phi753Z2D;$467 = $457;$469 = $460;$471 = $462;
         } else {
          $461 = $$pre$phi753Z2D << 3;
          HEAP32[$438>>2] = $$pre$phi753Z2D;
          $463 = (_realloc($462,$461)|0);
          HEAP32[$441>>2] = $463;
          $$pre744 = HEAP32[$435>>2]|0;
          $$pre745 = HEAP32[$438>>2]|0;
          $$pre754 = (($$pre745) + 1)|0;
          $$pre$i502 = $463;$$pre$phi755Z2D = $$pre754;$467 = $$pre744;$469 = $$pre745;$471 = $463;
         }
         $464 = (($$pre$i502) + ($458<<3)|0);
         HEAP32[$464>>2] = $$3392;
         $465 = (((($$pre$i502) + ($458<<3)|0)) + 4|0);
         HEAP32[$465>>2] = $$3;
         $466 = (($467) + 1)|0;
         HEAP32[$435>>2] = $466;
         $468 = ($466>>>0)<($469>>>0);
         if ($468) {
          $474 = $$pre$i502;
         } else {
          $470 = $$pre$phi755Z2D << 3;
          HEAP32[$438>>2] = $$pre$phi755Z2D;
          $472 = (_realloc($471,$470)|0);
          HEAP32[$441>>2] = $472;
          $474 = $472;
         }
         $473 = (($474) + ($467<<3)|0);
         HEAP32[$473>>2] = $$3392;
         $475 = (((($474) + ($467<<3)|0)) + 4|0);
         HEAP32[$475>>2] = $$3388;
         $$0397 = $389;
        } else {
         $$0397 = $389;
        }
       }
      }
      $476 = ((($$0397)) + 20|0);
      HEAP32[$476>>2] = $$0465;
      $477 = ((($$0397)) + 12|0);
      HEAP32[$477>>2] = $380;
      $478 = ((($$0397)) + 16|0);
      HEAP32[$478>>2] = $$1456566804806;
      $479 = ((($$0397)) + 8|0);
      HEAP32[$479>>2] = $$0447$lcssa789791802808;
      __zbar_image_scanner_add_sym($1,$$0397);
     }
    }
    $480 = (($$0680) + 1)|0;
    $481 = ($480|0)<($13|0);
    if (!($481)) {
     break L1;
    }
    $$phi$trans$insert = (($14) + ($480)|0);
    $$pre = HEAP8[$$phi$trans$insert>>0]|0;
    $$0680 = $480;$31 = $$pre;
   }
   if ((label|0) == 142) {
    ___assert_fail((134216|0),(134224|0),87,(134240|0));
    // unreachable;
   }
   else if ((label|0) == 151) {
    ___assert_fail((132867|0),(132888|0),405,(132911|0));
    // unreachable;
   }
  }
 } while(0);
 $482 = ($17|0)==((-1)|0);
 if (!($482)) {
 }
 $483 = ($16|0)==((-1)|0);
 if (!($483)) {
 }
 $484 = ($15|0)==((-1)|0);
 if ($484) {
  _free($14);
  STACKTOP = sp;return 0;
 }
 _free($14);
 STACKTOP = sp;return 0;
}
function _rs_gf256_init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01921 = 0, $$022 = 0, $$120 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, $exitcond23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$01921 = 1;$$022 = 0;
 while(1) {
  $2 = $$01921&255;
  $3 = (($$022) + 255)|0;
  $4 = (((($0)) + 256|0) + ($3)|0);
  HEAP8[$4>>0] = $2;
  $5 = (((($0)) + 256|0) + ($$022)|0);
  HEAP8[$5>>0] = $2;
  $6 = $$01921 << 1;
  $7 = $$01921 >>> 7;
  $8 = (0 - ($7))|0;
  $9 = $8 & $1;
  $10 = $9 ^ $6;
  $11 = $10 & 255;
  $12 = (($$022) + 1)|0;
  $exitcond23 = ($12|0)==(256);
  if ($exitcond23) {
   break;
  } else {
   $$01921 = $11;$$022 = $12;
  }
 }
 $$120 = 0;
 while(1) {
  $13 = $$120&255;
  $14 = (((($0)) + 256|0) + ($$120)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = (($0) + ($16)|0);
  HEAP8[$17>>0] = $13;
  $18 = (($$120) + 1)|0;
  $exitcond = ($18|0)==(255);
  if ($exitcond) {
   break;
  } else {
   $$120 = $18;
  }
 }
 HEAP8[$0>>0] = 0;
 return;
}
function _rs_correct($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$$i$i = 0, $$0103$us = 0, $$0110$i = 0, $$0110$in$i = 0, $$02022$i$i = 0, $$021$i$i = 0, $$02426$us$i = 0, $$02528$us$i = 0, $$027$us$i = 0, $$03840$i$i = 0, $$039$i$i = 0, $$05161$i = 0, $$05259$i = 0, $$05358$i = 0, $$05565$i = 0, $$056$i = 0, $$062$i = 0, $$083114 = 0, $$085$lcssa$i = 0, $$085$lcssa$us = 0;
 var $$085105$us = 0, $$085108$i = 0, $$086102$us = 0, $$086107$i = 0, $$087101$us = 0, $$08998$i = 0, $$09097$i = 0, $$1106$us = 0, $$154$i = 0, $$160$i = 0, $$182 = 0, $$184111$us = 0, $$188104$us = 0, $$191102$i = 0, $$2$i = 0, $$267$i = 0, $$288$i = 0, $$29299$i = 0, $$3$i = 0, $$phi$trans$insert$i = 0;
 var $$phi$trans$insert117$i = 0, $$pre$i = 0, $$pre118$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i$i = 0, $exitcond$i90 = 0, $exitcond$i92 = 0, $exitcond114$i = 0, $exitcond115$i = 0, $exitcond116$i = 0, $exitcond123 = 0, $exitcond33$i = 0, $exitcond74$i = 0, $exitcond75$i = 0, $indvars$iv$i = 0;
 var $indvars$iv$next$i = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1280|0;
 $7 = sp + 1024|0;
 $8 = sp + 768|0;
 $9 = sp + 512|0;
 $10 = sp + 256|0;
 $11 = sp;
 $12 = ($4|0)<($6|0);
 if ($12) {
  $$182 = -1;
  STACKTOP = sp;return ($$182|0);
 }
 $13 = ($4|0)>(0);
 if (!($13)) {
  $$182 = 0;
  STACKTOP = sp;return ($$182|0);
 }
 $14 = ($3|0)>(0);
 if ($14) {
  $$02528$us$i = 0;
  while(1) {
   $15 = (($$02528$us$i) + ($1))|0;
   $16 = (((($0)) + 256|0) + ($15)|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17&255;
   $19 = (($0) + ($18)|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&255;
   $$02426$us$i = 0;$$027$us$i = 0;
   while(1) {
    $22 = (($2) + ($$02426$us$i)|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($$027$us$i|0)==(0);
    if ($25) {
     $34 = 0;
    } else {
     $26 = (($0) + ($$027$us$i)|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = $27&255;
     $29 = (($28) + ($21))|0;
     $30 = (((($0)) + 256|0) + ($29)|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = $31&255;
     $34 = $32;
    }
    $33 = $34 ^ $24;
    $35 = (($$02426$us$i) + 1)|0;
    $exitcond$i = ($35|0)==($3|0);
    if ($exitcond$i) {
     break;
    } else {
     $$02426$us$i = $35;$$027$us$i = $33;
    }
   }
   $36 = $33&255;
   $37 = (($11) + ($$02528$us$i)|0);
   HEAP8[$37>>0] = $36;
   $38 = (($$02528$us$i) + 1)|0;
   $exitcond33$i = ($38|0)==($4|0);
   if ($exitcond33$i) {
    break;
   } else {
    $$02528$us$i = $38;
   }
  }
  if (!($13)) {
   $$182 = 0;
   STACKTOP = sp;return ($$182|0);
  }
 } else {
  _memset(($11|0),0,($4|0))|0;
 }
 $$083114 = 0;
 while(1) {
  $41 = (($11) + ($$083114)|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = ($42<<24>>24)==(0);
  $40 = (($$083114) + 1)|0;
  if (!($43)) {
   break;
  }
  $39 = ($40|0)<($4|0);
  if ($39) {
   $$083114 = $40;
  } else {
   $$182 = 0;
   label = 88;
   break;
  }
 }
 if ((label|0) == 88) {
  STACKTOP = sp;return ($$182|0);
 }
 $44 = ($4|0)>(4);
 $45 = $44 ? $4 : 4;
 $46 = (($45) + 1)|0;
 _memset(($8|0),0,($46|0))|0;
 HEAP8[$8>>0] = 1;
 $47 = ($6|0)>(0);
 if ($47) {
  $48 = (($3) + -1)|0;
  $$02022$i$i = 0;
  while(1) {
   $49 = (($$02022$i$i) + 1)|0;
   $50 = (($5) + ($$02022$i$i)|0);
   $$021$i$i = $49;
   while(1) {
    $51 = (($$021$i$i) + -1)|0;
    $52 = (($8) + ($51)|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = ($53<<24>>24)==(0);
    if ($54) {
     $70 = 0;
    } else {
     $55 = $53&255;
     $56 = HEAP8[$50>>0]|0;
     $57 = $56&255;
     $58 = (($48) - ($57))|0;
     $59 = (($0) + ($55)|0);
     $60 = HEAP8[$59>>0]|0;
     $61 = $60&255;
     $62 = (($58) + ($61))|0;
     $63 = (((($0)) + 256|0) + ($62)|0);
     $64 = HEAP8[$63>>0]|0;
     $65 = $64&255;
     $70 = $65;
    }
    $66 = (($8) + ($$021$i$i)|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67&255;
    $69 = $70 ^ $68;
    $71 = $69&255;
    HEAP8[$66>>0] = $71;
    $72 = ($$021$i$i|0)>(1);
    if ($72) {
     $$021$i$i = $51;
    } else {
     break;
    }
   }
   $exitcond$i$i = ($49|0)==($6|0);
   if ($exitcond$i$i) {
    break;
   } else {
    $$02022$i$i = $49;
   }
  }
 }
 $73 = (($4) + 1)|0;
 _memcpy(($7|0),($8|0),($73|0))|0;
 $74 = ($4|0)>($6|0);
 if ($74) {
  $75 = ((($7)) + 1|0);
  $76 = (($6) + 2)|0;
  $$0110$in$i = $6;$$085108$i = $6;$$086107$i = 0;$indvars$iv$i = $76;
  while(1) {
   $$0110$i = (($$0110$in$i) + 1)|0;
   $77 = (($$0110$i) - ($$086107$i))|0;
   _memmove(($75|0),($7|0),($77|0))|0;
   HEAP8[$7>>0] = 0;
   $78 = ($$085108$i|0)<(0);
   L42: do {
    if ($78) {
     $$2$i = $$085108$i;$$288$i = $$086107$i;
    } else {
     $$08998$i = 0;$$09097$i = 0;
     while(1) {
      $79 = (($8) + ($$09097$i)|0);
      $80 = HEAP8[$79>>0]|0;
      $81 = (($$0110$in$i) - ($$09097$i))|0;
      $82 = (($11) + ($81)|0);
      $83 = HEAP8[$82>>0]|0;
      $84 = ($80<<24>>24)==(0);
      $85 = ($83<<24>>24)==(0);
      $or$cond$i$i = $84 | $85;
      if ($or$cond$i$i) {
       $99 = 0;
      } else {
       $86 = $83&255;
       $87 = $80&255;
       $88 = (($0) + ($87)|0);
       $89 = HEAP8[$88>>0]|0;
       $90 = $89&255;
       $91 = (($0) + ($86)|0);
       $92 = HEAP8[$91>>0]|0;
       $93 = $92&255;
       $94 = (($93) + ($90))|0;
       $95 = (((($0)) + 256|0) + ($94)|0);
       $96 = HEAP8[$95>>0]|0;
       $97 = $96&255;
       $99 = $97;
      }
      $98 = $99 ^ $$08998$i;
      $100 = (($$09097$i) + 1)|0;
      $exitcond$i92 = ($$09097$i|0)==($$085108$i|0);
      if ($exitcond$i92) {
       break;
      } else {
       $$08998$i = $98;$$09097$i = $100;
      }
     }
     $101 = ($98|0)==(0);
     if ($101) {
      $$2$i = $$085108$i;$$288$i = $$086107$i;
     } else {
      $102 = (($0) + ($98)|0);
      $103 = HEAP8[$102>>0]|0;
      $104 = $103&255;
      $105 = ($$085108$i|0)<($77|0);
      if (!($105)) {
       $$29299$i = 0;$142 = 0;
       while(1) {
        $138 = (($8) + ($$29299$i)|0);
        $139 = HEAP8[$138>>0]|0;
        $140 = $139&255;
        $141 = ($142<<24>>24)==(0);
        if ($141) {
         $152 = 0;
        } else {
         $143 = $142&255;
         $144 = (($0) + ($143)|0);
         $145 = HEAP8[$144>>0]|0;
         $146 = $145&255;
         $147 = (($146) + ($104))|0;
         $148 = (((($0)) + 256|0) + ($147)|0);
         $149 = HEAP8[$148>>0]|0;
         $150 = $149&255;
         $152 = $150;
        }
        $151 = $152 ^ $140;
        $153 = $151&255;
        HEAP8[$138>>0] = $153;
        $154 = (($$29299$i) + 1)|0;
        $exitcond114$i = ($$29299$i|0)==($$085108$i|0);
        if ($exitcond114$i) {
         $$2$i = $$085108$i;$$288$i = $$086107$i;
         break L42;
        }
        $$phi$trans$insert$i = (($7) + ($154)|0);
        $$pre$i = HEAP8[$$phi$trans$insert$i>>0]|0;
        $$29299$i = $154;$142 = $$pre$i;
       }
      }
      $106 = ($77|0)<(0);
      L60: do {
       if (!($106)) {
        $107 = $104 ^ 255;
        $108 = (($indvars$iv$i) - ($$086107$i))|0;
        $$191102$i = 0;$111 = 0;
        while(1) {
         $109 = (($7) + ($$191102$i)|0);
         $110 = $111&255;
         $112 = (($8) + ($$191102$i)|0);
         $113 = HEAP8[$112>>0]|0;
         $114 = $113&255;
         $115 = ($113<<24>>24)==(0);
         if ($115) {
          $124 = 0;
         } else {
          $116 = (($0) + ($114)|0);
          $117 = HEAP8[$116>>0]|0;
          $118 = $117&255;
          $119 = (($107) + ($118))|0;
          $120 = (((($0)) + 256|0) + ($119)|0);
          $121 = HEAP8[$120>>0]|0;
          $122 = $121&255;
          $124 = $122;
         }
         $123 = $124&255;
         HEAP8[$109>>0] = $123;
         $125 = ($111<<24>>24)==(0);
         if ($125) {
          $134 = 0;
         } else {
          $126 = (($0) + ($110)|0);
          $127 = HEAP8[$126>>0]|0;
          $128 = $127&255;
          $129 = (($128) + ($104))|0;
          $130 = (((($0)) + 256|0) + ($129)|0);
          $131 = HEAP8[$130>>0]|0;
          $132 = $131&255;
          $134 = $132;
         }
         $133 = $134 ^ $114;
         $135 = $133&255;
         HEAP8[$112>>0] = $135;
         $136 = (($$191102$i) + 1)|0;
         $exitcond115$i = ($136|0)==($108|0);
         if ($exitcond115$i) {
          break L60;
         }
         $$phi$trans$insert117$i = (($7) + ($136)|0);
         $$pre118$i = HEAP8[$$phi$trans$insert117$i>>0]|0;
         $$191102$i = $136;$111 = $$pre118$i;
        }
       }
      } while(0);
      $137 = (($$0110$i) - ($$085108$i))|0;
      $$2$i = $77;$$288$i = $137;
     }
    }
   } while(0);
   $indvars$iv$next$i = (($indvars$iv$i) + 1)|0;
   $exitcond116$i = ($$0110$i|0)==($4|0);
   if ($exitcond116$i) {
    $$085$lcssa$i = $$2$i;
    break;
   } else {
    $$0110$in$i = $$0110$i;$$085108$i = $$2$i;$$086107$i = $$288$i;$indvars$iv$i = $indvars$iv$next$i;
   }
  }
 } else {
  $$085$lcssa$i = $6;
 }
 $155 = (($$085$lcssa$i) + 1)|0;
 _memset(($9|0),0,($4|0))|0;
 $156 = ($155|0)<($4|0);
 $157 = $156 ? $155 : $4;
 $158 = ($157|0)>(0);
 if ($158) {
  $$03840$i$i = 0;
  while(1) {
   $159 = (($8) + ($$03840$i$i)|0);
   $160 = HEAP8[$159>>0]|0;
   $161 = ($160<<24>>24)==(0);
   if (!($161)) {
    $162 = (($4) - ($$03840$i$i))|0;
    $163 = ($162|0)<($4|0);
    $$$i$i = $163 ? $162 : $4;
    $164 = $160&255;
    $165 = (($0) + ($164)|0);
    $166 = HEAP8[$165>>0]|0;
    $167 = $166&255;
    $168 = ($$$i$i|0)>(0);
    if ($168) {
     $$039$i$i = 0;
     while(1) {
      $169 = (($11) + ($$039$i$i)|0);
      $170 = HEAP8[$169>>0]|0;
      $171 = ($170<<24>>24)==(0);
      if ($171) {
       $185 = 0;
      } else {
       $172 = $170&255;
       $173 = (($0) + ($172)|0);
       $174 = HEAP8[$173>>0]|0;
       $175 = $174&255;
       $176 = (($175) + ($167))|0;
       $177 = (((($0)) + 256|0) + ($176)|0);
       $178 = HEAP8[$177>>0]|0;
       $179 = $178&255;
       $185 = $179;
      }
      $180 = (($$039$i$i) + ($$03840$i$i))|0;
      $181 = (($9) + ($180)|0);
      $182 = HEAP8[$181>>0]|0;
      $183 = $182&255;
      $184 = $185 ^ $183;
      $186 = $184&255;
      HEAP8[$181>>0] = $186;
      $187 = (($$039$i$i) + 1)|0;
      $188 = ($187|0)<($$$i$i|0);
      if ($188) {
       $$039$i$i = $187;
      } else {
       break;
      }
     }
    }
   }
   $189 = (($$03840$i$i) + 1)|0;
   $190 = ($189|0)<($157|0);
   if ($190) {
    $$03840$i$i = $189;
   } else {
    break;
   }
  }
 }
 $191 = ($$085$lcssa$i|0)<(1);
 if ($191) {
  $$182 = -1;
  STACKTOP = sp;return ($$182|0);
 }
 $192 = (($$085$lcssa$i) - ($6))|0;
 $193 = (($4) - ($6))|0;
 $194 = $193 >> 1;
 $195 = ($192|0)>($194|0);
 if ($195) {
  $$182 = -1;
  STACKTOP = sp;return ($$182|0);
 }
 $196 = ($$085$lcssa$i|0)<(5);
 if ($196) {
  $197 = ((($8)) + 1|0);
  $198 = HEAP8[$197>>0]|0;
  $199 = $198&255;
  $200 = ((($8)) + 2|0);
  $201 = HEAP8[$200>>0]|0;
  $202 = $201&255;
  $203 = ((($8)) + 3|0);
  $204 = HEAP8[$203>>0]|0;
  $205 = $204&255;
  $206 = ((($8)) + 4|0);
  $207 = HEAP8[$206>>0]|0;
  $208 = $207&255;
  $209 = (_rs_quartic_solve($0,$199,$202,$205,$208,$10)|0);
  $210 = ($209|0)>(0);
  if ($210) {
   $$05259$i = 0;$$05358$i = 0;
   while(1) {
    $211 = (($10) + ($$05259$i)|0);
    $212 = HEAP8[$211>>0]|0;
    $213 = ($212<<24>>24)==(0);
    if ($213) {
     $$154$i = $$05358$i;
    } else {
     $214 = $212&255;
     $215 = (($0) + ($214)|0);
     $216 = HEAP8[$215>>0]|0;
     $217 = $216&255;
     $218 = ($217|0)<($3|0);
     if ($218) {
      $219 = (($$05358$i) + 1)|0;
      $220 = (($10) + ($$05358$i)|0);
      HEAP8[$220>>0] = $216;
      $$154$i = $219;
     } else {
      $$154$i = $$05358$i;
     }
    }
    $221 = (($$05259$i) + 1)|0;
    $exitcond$i90 = ($221|0)==($209|0);
    if ($exitcond$i90) {
     $$056$i = $$154$i;
     break;
    } else {
     $$05259$i = $221;$$05358$i = $$154$i;
    }
   }
  } else {
   $$056$i = 0;
  }
 } else {
  $222 = ($3|0)>(0);
  if ($222) {
   $$05565$i = 0;$$267$i = 0;
   while(1) {
    $$05161$i = 0;$$062$i = 0;$$160$i = 0;
    while(1) {
     $223 = (($$085$lcssa$i) - ($$160$i))|0;
     $224 = (($8) + ($223)|0);
     $225 = HEAP8[$224>>0]|0;
     $226 = ($225<<24>>24)==(0);
     if ($226) {
      $236 = 0;
     } else {
      $227 = $225&255;
      $228 = (($0) + ($227)|0);
      $229 = HEAP8[$228>>0]|0;
      $230 = $229&255;
      $231 = (($$05161$i) + ($230))|0;
      $232 = (((($0)) + 256|0) + ($231)|0);
      $233 = HEAP8[$232>>0]|0;
      $234 = $233&255;
      $236 = $234;
     }
     $235 = $236 ^ $$062$i;
     $237 = (($$05161$i) + ($$05565$i))|0;
     $238 = (((($0)) + 256|0) + ($237)|0);
     $239 = HEAP8[$238>>0]|0;
     $240 = $239&255;
     $241 = (($0) + ($240)|0);
     $242 = HEAP8[$241>>0]|0;
     $243 = $242&255;
     $244 = (($$160$i) + 1)|0;
     $exitcond74$i = ($$085$lcssa$i|0)==($$160$i|0);
     if ($exitcond74$i) {
      break;
     } else {
      $$05161$i = $243;$$062$i = $235;$$160$i = $244;
     }
    }
    $245 = ($235|0)==(0);
    if ($245) {
     $246 = (($$267$i) + 1)|0;
     $247 = (($10) + ($$267$i)|0);
     $248 = $$05565$i&255;
     HEAP8[$247>>0] = $248;
     $$3$i = $246;
    } else {
     $$3$i = $$267$i;
    }
    $249 = (($$05565$i) + 1)|0;
    $exitcond75$i = ($249|0)==($3|0);
    if ($exitcond75$i) {
     $$056$i = $$3$i;
     break;
    } else {
     $$05565$i = $249;$$267$i = $$3$i;
    }
   }
  } else {
   $$056$i = 0;
  }
 }
 $250 = ($$056$i|0)<($$085$lcssa$i|0);
 if ($250) {
  $$182 = -1;
  STACKTOP = sp;return ($$182|0);
 }
 $251 = ($$085$lcssa$i|0)>(0);
 if (!($251)) {
  $$182 = $$085$lcssa$i;
  STACKTOP = sp;return ($$182|0);
 }
 $252 = ($4|0)<(1);
 $253 = (($3) + -1)|0;
 $$184111$us = 0;
 while(1) {
  $254 = (($10) + ($$184111$us)|0);
  $255 = HEAP8[$254>>0]|0;
  $256 = $255&255;
  $257 = $256 ^ 255;
  $$0103$us = 0;$$086102$us = 0;$$087101$us = 0;
  while(1) {
   $302 = (($9) + ($$087101$us)|0);
   $303 = HEAP8[$302>>0]|0;
   $304 = ($303<<24>>24)==(0);
   if ($304) {
    $313 = 0;
   } else {
    $305 = $303&255;
    $306 = (($0) + ($305)|0);
    $307 = HEAP8[$306>>0]|0;
    $308 = $307&255;
    $309 = (($$0103$us) + ($308))|0;
    $310 = (((($0)) + 256|0) + ($309)|0);
    $311 = HEAP8[$310>>0]|0;
    $312 = $311&255;
    $313 = $312;
   }
   $282 = $313 ^ $$086102$us;
   $314 = (($$0103$us) + ($257))|0;
   $315 = (((($0)) + 256|0) + ($314)|0);
   $316 = HEAP8[$315>>0]|0;
   $317 = $316&255;
   $318 = (($0) + ($317)|0);
   $319 = HEAP8[$318>>0]|0;
   $320 = $319&255;
   $321 = (($$087101$us) + 1)|0;
   $exitcond = ($321|0)==($4|0);
   if ($exitcond) {
    break;
   } else {
    $$0103$us = $320;$$086102$us = $282;$$087101$us = $321;
   }
  }
  $322 = $257 << 1;
  $323 = (((($0)) + 256|0) + ($322)|0);
  $324 = HEAP8[$323>>0]|0;
  $325 = $324&255;
  $326 = (($0) + ($325)|0);
  $327 = HEAP8[$326>>0]|0;
  $272 = $327&255;
  if ($252) {
   $$085$lcssa$us = 0;
  } else {
   $328 = Math_imul($256, $1)|0;
   $329 = (($328>>>0) % 255)&-1;
   $330 = (($329) + ($257))|0;
   $$085105$us = 0;$$1106$us = $330;$$188104$us = 1;
   while(1) {
    $258 = (($8) + ($$188104$us)|0);
    $259 = HEAP8[$258>>0]|0;
    $260 = ($259<<24>>24)==(0);
    if ($260) {
     $270 = 0;
    } else {
     $261 = $259&255;
     $262 = (($0) + ($261)|0);
     $263 = HEAP8[$262>>0]|0;
     $264 = $263&255;
     $265 = (($$1106$us) + ($264))|0;
     $266 = (((($0)) + 256|0) + ($265)|0);
     $267 = HEAP8[$266>>0]|0;
     $268 = $267&255;
     $270 = $268;
    }
    $269 = $270 ^ $$085105$us;
    $271 = (($$1106$us) + ($272))|0;
    $273 = (((($0)) + 256|0) + ($271)|0);
    $274 = HEAP8[$273>>0]|0;
    $275 = $274&255;
    $276 = (($0) + ($275)|0);
    $277 = HEAP8[$276>>0]|0;
    $278 = $277&255;
    $279 = (($$188104$us) + 2)|0;
    $280 = ($279|0)>($4|0);
    if ($280) {
     $$085$lcssa$us = $269;
     break;
    } else {
     $$085105$us = $269;$$1106$us = $278;$$188104$us = $279;
    }
   }
  }
  $281 = ($282|0)==(0);
  if ($281) {
   $299 = 0;
  } else {
   $283 = (($0) + ($282)|0);
   $284 = HEAP8[$283>>0]|0;
   $285 = $284&255;
   $286 = (($285) + 255)|0;
   $287 = (($0) + ($$085$lcssa$us)|0);
   $288 = HEAP8[$287>>0]|0;
   $289 = $288&255;
   $290 = (($286) - ($289))|0;
   $291 = (((($0)) + 256|0) + ($290)|0);
   $292 = HEAP8[$291>>0]|0;
   $293 = $292&255;
   $299 = $293;
  }
  $294 = (($253) - ($256))|0;
  $295 = (($2) + ($294)|0);
  $296 = HEAP8[$295>>0]|0;
  $297 = $296&255;
  $298 = $299 ^ $297;
  $300 = $298&255;
  HEAP8[$295>>0] = $300;
  $301 = (($$184111$us) + 1)|0;
  $exitcond123 = ($301|0)==($$085$lcssa$i|0);
  if ($exitcond123) {
   $$182 = $$085$lcssa$i;
   break;
  } else {
   $$184111$us = $301;
  }
 }
 STACKTOP = sp;return ($$182|0);
}
function _rs_quartic_solve($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i119 = 0, $$0$i123126 = 0, $$0112127 = 0, $$ph124 = 0, $$ph124$pn = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ($4|0)==(0);
 if ($6) {
  $7 = (_rs_cubic_solve($0,$1,$2,$3,$5)|0);
  $8 = ($3|0)==(0);
  if ($8) {
   $$0 = $7;
   return ($$0|0);
  }
  $9 = (($5) + ($7)|0);
  $10 = (($7) + 1)|0;
  HEAP8[$9>>0] = 0;
  $$0 = $10;
  return ($$0|0);
 }
 $11 = ($1|0)==(0);
 if ($11) {
  $111 = ($3|0)==(0);
  if ($111) {
   $112 = ($2|0)==(0);
   if ($112) {
    $$0$i119 = 0;
   } else {
    $113 = (($0) + ($2)|0);
    $114 = HEAP8[$113>>0]|0;
    $115 = $114&255;
    $116 = $115 & 1;
    $117 = (0 - ($116))|0;
    $118 = $117 & 255;
    $119 = (($118) + ($115))|0;
    $120 = $119 >>> 1;
    $121 = (((($0)) + 256|0) + ($120)|0);
    $122 = HEAP8[$121>>0]|0;
    $123 = $122&255;
    $$0$i119 = $123;
   }
   $124 = (($0) + ($4)|0);
   $125 = HEAP8[$124>>0]|0;
   $126 = $125&255;
   $127 = $126 & 1;
   $128 = (0 - ($127))|0;
   $129 = $128 & 255;
   $130 = (($129) + ($126))|0;
   $131 = $130 >>> 1;
   $132 = (((($0)) + 256|0) + ($131)|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $133&255;
   $135 = (_rs_quadratic_solve($0,$$0$i119,$134,$5)|0);
   $$0 = $135;
   return ($$0|0);
  }
  $136 = (_rs_cubic_solve($0,0,$2,$3,$5)|0);
  $137 = ($136|0)<(1);
  if ($137) {
   $$0 = 0;
   return ($$0|0);
  }
  $138 = HEAP8[$5>>0]|0;
  $139 = $138&255;
  $140 = (($0) + ($3)|0);
  $141 = HEAP8[$140>>0]|0;
  $142 = $141&255;
  $143 = (($142) + 255)|0;
  $144 = (($0) + ($139)|0);
  $145 = HEAP8[$144>>0]|0;
  $146 = $145&255;
  $147 = (($143) - ($146))|0;
  $148 = (((($0)) + 256|0) + ($147)|0);
  $149 = HEAP8[$148>>0]|0;
  $150 = $149&255;
  $151 = (_rs_quadratic_solve($0,$150,$4,$5)|0);
  $152 = ($151|0)<(2);
  if ($152) {
   $$0 = 0;
   return ($$0|0);
  }
  $153 = HEAP8[$5>>0]|0;
  $154 = $153&255;
  $155 = ((($5)) + 1|0);
  $156 = HEAP8[$155>>0]|0;
  $157 = $156&255;
  $158 = (_rs_quadratic_solve($0,$139,$154,$5)|0);
  $159 = (($5) + ($158)|0);
  $160 = (_rs_quadratic_solve($0,$139,$157,$159)|0);
  $161 = (($160) + ($158))|0;
  $$0 = $161;
  return ($$0|0);
 }
 $12 = (($0) + ($1)|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = ($3|0)==(0);
 if ($15) {
  $$0$i123126 = 0;$$ph124$pn = 0;$50 = 0;$98 = 0;
 } else {
  $16 = $14 ^ 255;
  $17 = (($0) + ($3)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = (($16) + ($19))|0;
  $21 = (((($0)) + 256|0) + ($20)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = ($22<<24>>24)==(0);
  if ($24) {
   $$0$i123126 = 0;$$ph124$pn = 0;$50 = 0;$98 = 0;
  } else {
   $25 = (($0) + ($23)|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $26&255;
   $28 = $27 & 1;
   $29 = (0 - ($28))|0;
   $30 = $29 & 255;
   $31 = (($30) + ($27))|0;
   $32 = $31 >>> 1;
   $33 = (((($0)) + 256|0) + ($32)|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = ($2|0)==(0);
   if ($36) {
    $$ph124 = 0;
   } else {
    $37 = (($0) + ($2)|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = $38&255;
    $40 = (($27) + ($39))|0;
    $41 = (((($0)) + 256|0) + ($40)|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = $42&255;
    $$ph124 = $43;
   }
   $44 = $27 << 1;
   $45 = (((($0)) + 256|0) + ($44)|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $46&255;
   $$0$i123126 = $35;$$ph124$pn = $$ph124;$50 = $47;$98 = $23;
  }
 }
 $48 = $$ph124$pn ^ $4;
 $49 = $48 ^ $50;
 $51 = ($49|0)==(0);
 if ($51) {
  $97 = $98 ^ $2;
  $99 = (_rs_quadratic_solve($0,$1,$97,$5)|0);
  $100 = ($99|0)==(2);
  if ($100) {
   $101 = HEAP8[$5>>0]|0;
   $102 = $101&255;
   $103 = ($$0$i123126|0)==($102|0);
   if ($103) {
    $$0 = 2;
    return ($$0|0);
   }
   $104 = ((($5)) + 1|0);
   $105 = HEAP8[$104>>0]|0;
   $106 = $105&255;
   $107 = ($$0$i123126|0)==($106|0);
   if ($107) {
    $$0 = 2;
    return ($$0|0);
   }
  }
  $108 = $$0$i123126&255;
  $109 = (($99) + 1)|0;
  $110 = (($5) + ($99)|0);
  HEAP8[$110>>0] = $108;
  $$0 = $109;
  return ($$0|0);
 }
 $52 = (($0) + ($49)|0);
 $53 = HEAP8[$52>>0]|0;
 $54 = $53 ^ -1;
 $55 = $54&255;
 $56 = ($$0$i123126|0)==(0);
 if ($56) {
  $65 = 0;
 } else {
  $57 = (($0) + ($$0$i123126)|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = $58&255;
  $60 = (($59) + ($14))|0;
  $61 = (((($0)) + 256|0) + ($60)|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62&255;
  $65 = $63;
 }
 $64 = $65 ^ $2;
 $66 = ($64|0)==(0);
 if ($66) {
  $81 = 0;
 } else {
  $67 = (($0) + ($64)|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  $70 = (($69) + ($55))|0;
  $71 = (((($0)) + 256|0) + ($70)|0);
  $72 = HEAP8[$71>>0]|0;
  $73 = $72&255;
  $81 = $73;
 }
 $74 = (($55) + ($14))|0;
 $75 = (((($0)) + 256|0) + ($74)|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = $76&255;
 $78 = (((($0)) + 256|0) + ($55)|0);
 $79 = HEAP8[$78>>0]|0;
 $80 = $79&255;
 $82 = (_rs_quartic_solve($0,0,$81,$77,$80,$5)|0);
 $83 = ($82|0)>(0);
 if (!($83)) {
  $$0 = $82;
  return ($$0|0);
 }
 $$0112127 = 0;
 while(1) {
  $84 = (($5) + ($$0112127)|0);
  $85 = HEAP8[$84>>0]|0;
  $86 = $85&255;
  $87 = (($0) + ($86)|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = $88 ^ -1;
  $90 = $89&255;
  $91 = (((($0)) + 256|0) + ($90)|0);
  $92 = HEAP8[$91>>0]|0;
  $93 = $92&255;
  $94 = $$0$i123126 ^ $93;
  $95 = $94&255;
  HEAP8[$84>>0] = $95;
  $96 = (($$0112127) + 1)|0;
  $exitcond = ($96|0)==($82|0);
  if ($exitcond) {
   $$0 = $82;
   break;
  } else {
   $$0112127 = $96;
  }
 }
 return ($$0|0);
}
function _rs_cubic_solve($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($3|0)==(0);
 if ($5) {
  $6 = (_rs_quadratic_solve($0,$1,$2,$4)|0);
  $7 = ($2|0)==(0);
  if ($7) {
   $$1 = $6;
   return ($$1|0);
  }
  $8 = (($4) + ($6)|0);
  $9 = (($6) + 1)|0;
  HEAP8[$8>>0] = 0;
  $$1 = $9;
  return ($$1|0);
 }
 $10 = ($1|0)==(0);
 $11 = ($2|0)==(0);
 $or$cond$i = $10 | $11;
 if ($or$cond$i) {
  $23 = 0;
 } else {
  $12 = (($0) + ($1)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = (($0) + ($2)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = (($17) + ($14))|0;
  $19 = (((($0)) + 256|0) + ($18)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $23 = $21;
 }
 $22 = $23 ^ $3;
 if ($10) {
  $32 = 0;
 } else {
  $24 = (($0) + ($1)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = $26 << 1;
  $28 = (((($0)) + 256|0) + ($27)|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $32 = $30;
 }
 $31 = $32 ^ $2;
 $33 = ($31|0)==(0);
 if ($33) {
  $34 = ($22|0)==(0);
  if ($34) {
   $35 = $1&255;
   HEAP8[$4>>0] = $35;
   $$1 = 1;
   return ($$1|0);
  }
  $36 = (($0) + ($22)|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = (($38>>>0) / 3)&-1;
  $40 = ($39*3)|0;
  $41 = (($38) - ($40))|0;
  $42 = ($41|0)==(0);
  if (!($42)) {
   $$1 = 0;
   return ($$1|0);
  }
  $43 = (((($0)) + 256|0) + ($39)|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = $45 ^ $1;
  $47 = $46&255;
  HEAP8[$4>>0] = $47;
  $48 = (($39) + 85)|0;
  $49 = (((($0)) + 256|0) + ($48)|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $52 = $51 ^ $1;
  $53 = $52&255;
  $54 = ((($4)) + 1|0);
  HEAP8[$54>>0] = $53;
  $55 = $50 ^ $47;
  $56 = ((($4)) + 2|0);
  HEAP8[$56>>0] = $55;
  $$1 = 3;
  return ($$1|0);
 }
 $57 = (($0) + ($31)|0);
 $58 = HEAP8[$57>>0]|0;
 $59 = $58&255;
 $60 = $59 & 1;
 $61 = (0 - ($60))|0;
 $62 = $61 & 255;
 $63 = (($62) + ($59))|0;
 $64 = $63 >>> 1;
 $65 = ($22|0)==(0);
 if ($65) {
  $81 = 0;
 } else {
  $66 = (($64) + ($59))|0;
  $67 = (((($0)) + 256|0) + ($66)|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  $70 = (($0) + ($22)|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = $71&255;
  $73 = (($72) + 255)|0;
  $74 = (($0) + ($69)|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = $75&255;
  $77 = (($73) - ($76))|0;
  $78 = (((($0)) + 256|0) + ($77)|0);
  $79 = HEAP8[$78>>0]|0;
  $80 = $79&255;
  $81 = $80;
 }
 $82 = (_rs_quadratic_solve($0,$81,1,$4)|0);
 $83 = ($82|0)<(1);
 if ($83) {
  $$1 = 0;
  return ($$1|0);
 }
 $84 = HEAP8[$4>>0]|0;
 $85 = $84&255;
 $86 = (($0) + ($85)|0);
 $87 = HEAP8[$86>>0]|0;
 $88 = $87&255;
 $89 = ($87<<24>>24)==(0);
 if ($89) {
  $130 = $1&255;
  HEAP8[$4>>0] = $130;
  $$1 = 1;
  return ($$1|0);
 }
 $90 = (($88>>>0) / 3)&-1;
 $91 = ($90*3)|0;
 $92 = (($88) - ($91))|0;
 $93 = ($92|0)==(0);
 if (!($93)) {
  $$1 = 0;
  return ($$1|0);
 }
 $94 = (((($0)) + 256|0) + ($90)|0);
 $95 = HEAP8[$94>>0]|0;
 $96 = $90 ^ 255;
 $97 = (((($0)) + 256|0) + ($96)|0);
 $98 = HEAP8[$97>>0]|0;
 $99 = $98 ^ $95;
 $100 = $99&255;
 $101 = (($0) + ($100)|0);
 $102 = HEAP8[$101>>0]|0;
 $103 = $102&255;
 $104 = (($64) + ($103))|0;
 $105 = (((($0)) + 256|0) + ($104)|0);
 $106 = HEAP8[$105>>0]|0;
 $107 = $106&255;
 $108 = $107 ^ $1;
 $109 = $108&255;
 HEAP8[$4>>0] = $109;
 $110 = (($90) + 85)|0;
 $111 = (((($0)) + 256|0) + ($110)|0);
 $112 = HEAP8[$111>>0]|0;
 $113 = (170 - ($90))|0;
 $114 = (((($0)) + 256|0) + ($113)|0);
 $115 = HEAP8[$114>>0]|0;
 $116 = $115 ^ $112;
 $117 = $116&255;
 $118 = (($0) + ($117)|0);
 $119 = HEAP8[$118>>0]|0;
 $120 = $119&255;
 $121 = (($64) + ($120))|0;
 $122 = (((($0)) + 256|0) + ($121)|0);
 $123 = HEAP8[$122>>0]|0;
 $124 = $123&255;
 $125 = $124 ^ $1;
 $126 = $125&255;
 $127 = ((($4)) + 1|0);
 HEAP8[$127>>0] = $126;
 $128 = $123 ^ $109;
 $129 = ((($4)) + 2|0);
 HEAP8[$129>>0] = $128;
 $$1 = 3;
 return ($$1|0);
}
function _rs_quadratic_solve($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$i = 0, $$0146 = 0, $$0147 = 0, $$0148 = 0, $$0149 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($1|0)==(0);
 $5 = ($2|0)==(0);
 if ($4) {
  if ($5) {
   $$0$i = 0;
  } else {
   $6 = (($0) + ($2)|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = $7&255;
   $9 = $8 & 1;
   $10 = (0 - ($9))|0;
   $11 = $10 & 255;
   $12 = (($11) + ($8))|0;
   $13 = $12 >>> 1;
   $14 = (((($0)) + 256|0) + ($13)|0);
   $15 = HEAP8[$14>>0]|0;
   $$0$i = $15;
  }
  HEAP8[$3>>0] = $$0$i;
  $$0 = 1;
  return ($$0|0);
 }
 if ($5) {
  HEAP8[$3>>0] = 0;
  $16 = $1&255;
  $17 = ((($3)) + 1|0);
  HEAP8[$17>>0] = $16;
  $$0 = 2;
  return ($$0|0);
 }
 $18 = (($0) + ($1)|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = (($0) + ($2)|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = (($20>>>0) % 17)&-1;
 $25 = ($24|0)==(0);
 $26 = $25&1;
 if ($25) {
  $27 = (($20) + 254)|0;
  $28 = (((($0)) + 256|0) + ($27)|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = (($0) + ($30)|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = (($23) + 253)|0;
  $35 = (((($0)) + 256|0) + ($34)|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = (($0) + ($37)|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39&255;
  $$0146 = $37;$$0147 = $30;$$0148 = $33;$$0149 = $40;
 } else {
  $$0146 = $2;$$0147 = $1;$$0148 = $20;$$0149 = $23;
 }
 $41 = $$0148 << 1;
 $42 = (((($0)) + 256|0) + ($41)|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&255;
 $45 = (($0) + ($44)|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $48 = $47 << 1;
 $49 = (((($0)) + 256|0) + ($48)|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = (($0) + ($51)|0);
 $53 = HEAP8[$52>>0]|0;
 $54 = $53&255;
 $55 = $54 << 1;
 $56 = (((($0)) + 256|0) + ($55)|0);
 $57 = HEAP8[$56>>0]|0;
 $58 = $57&255;
 $59 = (($0) + ($58)|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = $60&255;
 $62 = (($61) + ($54))|0;
 $63 = (((($0)) + 256|0) + ($62)|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&255;
 $66 = (($0) + ($65)|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = $67&255;
 $69 = (($68) + ($47))|0;
 $70 = (((($0)) + 256|0) + ($69)|0);
 $71 = HEAP8[$70>>0]|0;
 $72 = $71&255;
 $73 = (($0) + ($72)|0);
 $74 = HEAP8[$73>>0]|0;
 $75 = $74&255;
 $76 = $$0149 << 1;
 $77 = (((($0)) + 256|0) + ($76)|0);
 $78 = HEAP8[$77>>0]|0;
 $79 = $78&255;
 $80 = (($0) + ($79)|0);
 $81 = HEAP8[$80>>0]|0;
 $82 = $81&255;
 $83 = $82 << 1;
 $84 = (((($0)) + 256|0) + ($83)|0);
 $85 = HEAP8[$84>>0]|0;
 $86 = $85&255;
 $87 = (($0) + ($86)|0);
 $88 = HEAP8[$87>>0]|0;
 $89 = $88&255;
 $90 = $89 << 1;
 $91 = (((($0)) + 256|0) + ($90)|0);
 $92 = HEAP8[$91>>0]|0;
 $93 = (($$0149) + ($75))|0;
 $94 = (((($0)) + 256|0) + ($93)|0);
 $95 = HEAP8[$94>>0]|0;
 $96 = (($82) + ($68))|0;
 $97 = (((($0)) + 256|0) + ($96)|0);
 $98 = HEAP8[$97>>0]|0;
 $99 = (($89) + ($61))|0;
 $100 = (((($0)) + 256|0) + ($99)|0);
 $101 = HEAP8[$100>>0]|0;
 $102 = $95 ^ $92;
 $103 = $102 ^ $98;
 $104 = $103 ^ $101;
 $105 = ($104<<24>>24)==(0);
 if ($105) {
  $115 = 0;
 } else {
  $106 = $104&255;
  $107 = (($0) + ($106)|0);
  $108 = HEAP8[$107>>0]|0;
  $109 = $108&255;
  $110 = (($$0148) + ($109))|0;
  $111 = (((($0)) + 256|0) + ($110)|0);
  $112 = HEAP8[$111>>0]|0;
  $113 = $112&255;
  $115 = $113;
 }
 $114 = (($0) + ($115)|0);
 $116 = HEAP8[$114>>0]|0;
 $117 = (($116&255) % 17)&-1;
 $118 = ($117<<24>>24)==(0);
 if (!($118)) {
  $$0 = 0;
  return ($$0|0);
 }
 $119 = ($115|0)==(0);
 if ($119) {
  $147 = 0;$149 = 0;$262 = 0;
 } else {
  $120 = $61 << 1;
  $121 = (((($0)) + 256|0) + ($120)|0);
  $122 = HEAP8[$121>>0]|0;
  $123 = $122&255;
  $124 = $$0147 ^ $123;
  $125 = $116&255;
  $126 = (($125) + 255)|0;
  $127 = (($0) + ($124)|0);
  $128 = HEAP8[$127>>0]|0;
  $129 = $128&255;
  $130 = (($126) - ($129))|0;
  $131 = (((($0)) + 256|0) + ($130)|0);
  $132 = HEAP8[$131>>0]|0;
  $133 = $132&255;
  $134 = ($132<<24>>24)==(0);
  if ($134) {
   $147 = 0;$149 = 0;$262 = 0;
  } else {
   $135 = (($0) + ($133)|0);
   $136 = HEAP8[$135>>0]|0;
   $137 = $136&255;
   $138 = $137 << 1;
   $139 = (((($0)) + 256|0) + ($138)|0);
   $140 = HEAP8[$139>>0]|0;
   $141 = $140&255;
   $142 = (($$0148) + ($137))|0;
   $143 = (((($0)) + 256|0) + ($142)|0);
   $144 = HEAP8[$143>>0]|0;
   $145 = $144&255;
   $147 = $141;$149 = $145;$262 = $133;
  }
 }
 $146 = $147 ^ $$0146;
 $148 = $146 ^ $149;
 $150 = ($148|0)==(0);
 if ($150) {
  $180 = 0;$181 = 0;$222 = 0;
 } else {
  $151 = $47 ^ 255;
  $152 = (($0) + ($148)|0);
  $153 = HEAP8[$152>>0]|0;
  $154 = $153&255;
  $155 = (($151) + ($154))|0;
  $156 = (((($0)) + 256|0) + ($155)|0);
  $157 = HEAP8[$156>>0]|0;
  $158 = ($157<<24>>24)==(0);
  if ($158) {
   $180 = 0;$181 = 0;$222 = 0;
  } else {
   $159 = $157&255;
   $160 = (($0) + ($159)|0);
   $161 = HEAP8[$160>>0]|0;
   $162 = $161&255;
   $163 = (($162) + 221)|0;
   $164 = (((($0)) + 256|0) + ($163)|0);
   $165 = HEAP8[$164>>0]|0;
   $166 = $165&255;
   $167 = ($165<<24>>24)==(0);
   if ($167) {
    $180 = 0;$181 = 0;$222 = 0;
   } else {
    $168 = (($0) + ($166)|0);
    $169 = HEAP8[$168>>0]|0;
    $170 = $169&255;
    $171 = (($170) + 221)|0;
    $172 = (((($0)) + 256|0) + ($171)|0);
    $173 = HEAP8[$172>>0]|0;
    $174 = $173&255;
    $175 = $170 << 1;
    $176 = (((($0)) + 256|0) + ($175)|0);
    $177 = HEAP8[$176>>0]|0;
    $178 = $177&255;
    $180 = $178;$181 = $174;$222 = $166;
   }
  }
 }
 $179 = $180 ^ $181;
 $182 = ($179|0)==(0);
 if ($182) {
  $221 = 0;$224 = 0;$242 = 0;$273 = 1;
 } else {
  $183 = (($0) + ($179)|0);
  $184 = HEAP8[$183>>0]|0;
  $185 = $184&255;
  $186 = (($185) + 238)|0;
  $187 = (((($0)) + 256|0) + ($186)|0);
  $188 = HEAP8[$187>>0]|0;
  $189 = ($188<<24>>24)==(0);
  if ($189) {
   $221 = 0;$224 = 0;$242 = 0;$273 = 1;
  } else {
   $190 = $188&255;
   $191 = ((($0)) + 443|0);
   $192 = HEAP8[$191>>0]|0;
   $193 = ((($0)) + 494|0);
   $194 = HEAP8[$193>>0]|0;
   $195 = $194 ^ $192;
   $196 = $195&255;
   $197 = (($0) + ($190)|0);
   $198 = HEAP8[$197>>0]|0;
   $199 = $198&255;
   $200 = (($199) + 255)|0;
   $201 = (($0) + ($196)|0);
   $202 = HEAP8[$201>>0]|0;
   $203 = $202&255;
   $204 = (($200) - ($203))|0;
   $205 = (((($0)) + 256|0) + ($204)|0);
   $206 = HEAP8[$205>>0]|0;
   $207 = $206&255;
   $208 = ($206<<24>>24)==(0);
   if ($208) {
    $221 = 0;$224 = 0;$242 = 0;$273 = 1;
   } else {
    $209 = (($0) + ($207)|0);
    $210 = HEAP8[$209>>0]|0;
    $211 = $210&255;
    $212 = $211 << 1;
    $213 = (((($0)) + 256|0) + ($212)|0);
    $214 = HEAP8[$213>>0]|0;
    $215 = $214&255;
    $216 = (($211) + 238)|0;
    $217 = (((($0)) + 256|0) + ($216)|0);
    $218 = HEAP8[$217>>0]|0;
    $219 = $218&255;
    $221 = $215;$224 = $219;$242 = $207;$273 = 0;
   }
  }
 }
 $220 = $221 ^ $222;
 $223 = $220 ^ $224;
 $225 = ($223|0)==(0);
 if ($225) {
  $251 = 0;
 } else {
  $226 = (($0) + ($223)|0);
  $227 = HEAP8[$226>>0]|0;
  $228 = $227&255;
  $229 = (($228) + 34)|0;
  $230 = (((($0)) + 256|0) + ($229)|0);
  $231 = HEAP8[$230>>0]|0;
  $232 = ($231<<24>>24)==(0);
  if ($232) {
   $251 = 0;
  } else {
   $233 = $231&255;
   $234 = (($0) + ($233)|0);
   $235 = HEAP8[$234>>0]|0;
   $236 = $235&255;
   $237 = (($236) + 85)|0;
   $238 = (((($0)) + 256|0) + ($237)|0);
   $239 = HEAP8[$238>>0]|0;
   $240 = $239&255;
   $251 = $240;
  }
 }
 if ($273) {
  $250 = 0;
 } else {
  $241 = (($0) + ($242)|0);
  $243 = HEAP8[$241>>0]|0;
  $244 = $243&255;
  $245 = (($244) + 17)|0;
  $246 = (((($0)) + 256|0) + ($245)|0);
  $247 = HEAP8[$246>>0]|0;
  $248 = $247&255;
  $250 = $248;
 }
 $249 = $250 ^ $251;
 $252 = ($249|0)==(0);
 if ($252) {
  $261 = 0;
 } else {
  $253 = (($0) + ($249)|0);
  $254 = HEAP8[$253>>0]|0;
  $255 = $254&255;
  $256 = (($$0148) + ($255))|0;
  $257 = (((($0)) + 256|0) + ($256)|0);
  $258 = HEAP8[$257>>0]|0;
  $259 = $258&255;
  $261 = $259;
 }
 $260 = $261 ^ $262;
 $263 = (($0) + ($260)|0);
 $264 = HEAP8[$263>>0]|0;
 $265 = $264&255;
 $266 = (($265) + ($26))|0;
 $267 = (((($0)) + 256|0) + ($266)|0);
 $268 = HEAP8[$267>>0]|0;
 HEAP8[$3>>0] = $268;
 $269 = $268&255;
 $270 = $269 ^ $1;
 $271 = $270&255;
 $272 = ((($3)) + 1|0);
 HEAP8[$272>>0] = $271;
 $$0 = 2;
 return ($$0|0);
}
function _isaac_init($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$077 = 0, $$170$lcssa = 0, $$17078 = 0, $$271 = 0, $$376 = 0, $$474 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $3 = sp;
 $4 = ((($0)) + 2060|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 2056|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 2052|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($3)) + 28|0);
 $8 = ((($3)) + 24|0);
 $9 = ((($3)) + 20|0);
 $10 = ((($3)) + 16|0);
 $11 = ((($3)) + 12|0);
 $12 = ((($3)) + 8|0);
 $13 = ((($3)) + 4|0);
 HEAP32[$13>>2] = -1780940711;
 HEAP32[$3>>2] = 325574490;
 HEAP32[$11>>2] = 255990488;
 HEAP32[$12>>2] = -1021952437;
 HEAP32[$10>>2] = -651539848;
 HEAP32[$9>>2] = -1525007287;
 HEAP32[$8>>2] = -990909925;
 HEAP32[$7>>2] = 811634969;
 $14 = ($2|0)<(1024);
 $spec$select = $14 ? $2 : 1024;
 $15 = $spec$select >> 2;
 $16 = ($spec$select|0)>(3);
 if ($16) {
  $$17078 = 0;
  while(1) {
   $17 = $$17078 << 2;
   $18 = $17 | 3;
   $19 = (($1) + ($18)|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&255;
   $22 = $21 << 24;
   $23 = $17 | 2;
   $24 = (($1) + ($23)|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = $25&255;
   $27 = $26 << 16;
   $28 = $27 | $22;
   $29 = $17 | 1;
   $30 = (($1) + ($29)|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $33 = $32 << 8;
   $34 = $28 | $33;
   $35 = (($1) + ($17)|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $36&255;
   $38 = $34 | $37;
   $39 = (((($0)) + 4|0) + ($$17078<<2)|0);
   HEAP32[$39>>2] = $38;
   $40 = (($$17078) + 1)|0;
   $41 = ($40|0)<($15|0);
   if ($41) {
    $$17078 = $40;
   } else {
    $$170$lcssa = $40;
    break;
   }
  }
 } else {
  $$170$lcssa = 0;
 }
 $42 = $spec$select & 3;
 $43 = ($42|0)==(0);
 if ($43) {
  $$271 = $$170$lcssa;
 } else {
  $44 = $$170$lcssa << 2;
  $45 = (($1) + ($44)|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  $48 = (((($0)) + 4|0) + ($$170$lcssa<<2)|0);
  HEAP32[$48>>2] = $47;
  $49 = ($42|0)==(1);
  if (!($49)) {
   $$077 = 1;$57 = $47;
   while(1) {
    $50 = $$077 | $44;
    $51 = (($1) + ($50)|0);
    $52 = HEAP8[$51>>0]|0;
    $53 = $52&255;
    $54 = $$077 << 3;
    $55 = $53 << $54;
    $56 = (($55) + ($57))|0;
    HEAP32[$48>>2] = $56;
    $58 = (($$077) + 1)|0;
    $59 = ($58>>>0)<($42>>>0);
    if ($59) {
     $$077 = $58;$57 = $56;
    } else {
     break;
    }
   }
  }
  $60 = (($$170$lcssa) + 1)|0;
  $$271 = $60;
 }
 $61 = (((($0)) + 4|0) + ($$271<<2)|0);
 $62 = $$271 << 2;
 $63 = (1024 - ($62))|0;
 _memset(($61|0),0,($63|0))|0;
 $$376 = 0;$102 = 811634969;$67 = 325574490;$72 = -1780940711;$77 = -1021952437;$82 = 255990488;$87 = -651539848;$92 = -1525007287;$97 = -990909925;
 while(1) {
  $64 = (((($0)) + 4|0) + ($$376<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($67) + ($65))|0;
  $68 = $$376 | 1;
  $69 = (((($0)) + 4|0) + ($68<<2)|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (($72) + ($70))|0;
  $73 = $$376 | 2;
  $74 = (((($0)) + 4|0) + ($73<<2)|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (($77) + ($75))|0;
  $78 = $$376 | 3;
  $79 = (((($0)) + 4|0) + ($78<<2)|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (($82) + ($80))|0;
  $83 = $$376 | 4;
  $84 = (((($0)) + 4|0) + ($83<<2)|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($87) + ($85))|0;
  $88 = $$376 | 5;
  $89 = (((($0)) + 4|0) + ($88<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($92) + ($90))|0;
  $93 = $$376 | 6;
  $94 = (((($0)) + 4|0) + ($93<<2)|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (($97) + ($95))|0;
  $98 = $$376 | 7;
  $99 = (((($0)) + 4|0) + ($98<<2)|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (($102) + ($100))|0;
  $103 = $71 << 11;
  $104 = $103 ^ $66;
  $105 = (($81) + ($104))|0;
  $106 = (($76) + ($71))|0;
  $107 = $76 >>> 2;
  $108 = $107 ^ $106;
  $109 = (($108) + ($86))|0;
  $110 = (($76) + ($105))|0;
  $111 = $105 << 8;
  $112 = $111 ^ $110;
  $113 = (($91) + ($112))|0;
  $114 = (($109) + ($105))|0;
  $115 = $109 >>> 16;
  $116 = $115 ^ $114;
  HEAP32[$11>>2] = $116;
  $117 = (($116) + ($96))|0;
  $118 = (($109) + ($113))|0;
  $119 = $113 << 10;
  $120 = $119 ^ $118;
  HEAP32[$10>>2] = $120;
  $121 = (($101) + ($120))|0;
  $122 = (($117) + ($113))|0;
  $123 = $117 >>> 4;
  $124 = $123 ^ $122;
  HEAP32[$9>>2] = $124;
  $125 = (($124) + ($104))|0;
  $126 = (($121) + ($117))|0;
  $127 = $121 << 8;
  $128 = $127 ^ $126;
  HEAP32[$8>>2] = $128;
  $129 = (($128) + ($108))|0;
  HEAP32[$13>>2] = $129;
  $130 = (($125) + ($121))|0;
  $131 = $125 >>> 9;
  $132 = $131 ^ $130;
  HEAP32[$7>>2] = $132;
  $133 = (($132) + ($112))|0;
  HEAP32[$12>>2] = $133;
  $134 = (($129) + ($125))|0;
  HEAP32[$3>>2] = $134;
  $135 = (((($0)) + 1028|0) + ($$376<<2)|0);
  ;HEAP32[$135>>2]=HEAP32[$3>>2]|0;HEAP32[$135+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$135+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$135+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$135+16>>2]=HEAP32[$3+16>>2]|0;HEAP32[$135+20>>2]=HEAP32[$3+20>>2]|0;HEAP32[$135+24>>2]=HEAP32[$3+24>>2]|0;HEAP32[$135+28>>2]=HEAP32[$3+28>>2]|0;
  $136 = (($$376) + 8)|0;
  $137 = ($136>>>0)<(256);
  if ($137) {
   $$376 = $136;$102 = $132;$67 = $134;$72 = $129;$77 = $133;$82 = $116;$87 = $120;$92 = $124;$97 = $128;
  } else {
   break;
  }
 }
 $$474 = 0;$141 = $134;$146 = $129;$151 = $133;$156 = $116;$161 = $120;$166 = $124;$171 = $128;$176 = $132;
 while(1) {
  $138 = (((($0)) + 1028|0) + ($$474<<2)|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = (($141) + ($139))|0;
  $142 = $$474 | 1;
  $143 = (((($0)) + 1028|0) + ($142<<2)|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = (($146) + ($144))|0;
  $147 = $$474 | 2;
  $148 = (((($0)) + 1028|0) + ($147<<2)|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = (($151) + ($149))|0;
  $152 = $$474 | 3;
  $153 = (((($0)) + 1028|0) + ($152<<2)|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = (($156) + ($154))|0;
  $157 = $$474 | 4;
  $158 = (((($0)) + 1028|0) + ($157<<2)|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = (($161) + ($159))|0;
  $162 = $$474 | 5;
  $163 = (((($0)) + 1028|0) + ($162<<2)|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = (($166) + ($164))|0;
  $167 = $$474 | 6;
  $168 = (((($0)) + 1028|0) + ($167<<2)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = (($171) + ($169))|0;
  $172 = $$474 | 7;
  $173 = (((($0)) + 1028|0) + ($172<<2)|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = (($176) + ($174))|0;
  $177 = $145 << 11;
  $178 = $177 ^ $140;
  $179 = (($155) + ($178))|0;
  $180 = (($150) + ($145))|0;
  $181 = $150 >>> 2;
  $182 = $181 ^ $180;
  $183 = (($182) + ($160))|0;
  $184 = (($150) + ($179))|0;
  $185 = $179 << 8;
  $186 = $185 ^ $184;
  $187 = (($165) + ($186))|0;
  $188 = (($183) + ($179))|0;
  $189 = $183 >>> 16;
  $190 = $189 ^ $188;
  HEAP32[$11>>2] = $190;
  $191 = (($190) + ($170))|0;
  $192 = (($183) + ($187))|0;
  $193 = $187 << 10;
  $194 = $193 ^ $192;
  HEAP32[$10>>2] = $194;
  $195 = (($175) + ($194))|0;
  $196 = (($191) + ($187))|0;
  $197 = $191 >>> 4;
  $198 = $197 ^ $196;
  HEAP32[$9>>2] = $198;
  $199 = (($198) + ($178))|0;
  $200 = (($195) + ($191))|0;
  $201 = $195 << 8;
  $202 = $201 ^ $200;
  HEAP32[$8>>2] = $202;
  $203 = (($202) + ($182))|0;
  HEAP32[$13>>2] = $203;
  $204 = (($199) + ($195))|0;
  $205 = $199 >>> 9;
  $206 = $205 ^ $204;
  HEAP32[$7>>2] = $206;
  $207 = (($206) + ($186))|0;
  HEAP32[$12>>2] = $207;
  $208 = (($203) + ($199))|0;
  HEAP32[$3>>2] = $208;
  ;HEAP32[$138>>2]=HEAP32[$3>>2]|0;HEAP32[$138+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$138+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$138+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$138+16>>2]=HEAP32[$3+16>>2]|0;HEAP32[$138+20>>2]=HEAP32[$3+20>>2]|0;HEAP32[$138+24>>2]=HEAP32[$3+24>>2]|0;HEAP32[$138+28>>2]=HEAP32[$3+28>>2]|0;
  $209 = (($$474) + 8)|0;
  $210 = ($209>>>0)<(256);
  if ($210) {
   $$474 = $209;$141 = $208;$146 = $203;$151 = $207;$156 = $190;$161 = $194;$166 = $198;$171 = $202;$176 = $206;
  } else {
   break;
  }
 }
 _isaac_update($0);
 STACKTOP = sp;return;
}
function _isaac_update($0) {
 $0 = $0|0;
 var $$0162170 = 0, $$0164169 = 0, $$0171 = 0, $$1163167 = 0, $$1165166 = 0, $$1168 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 2052|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 2056|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 2060|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[$5>>2] = $7;
 $8 = (($7) + ($4))|0;
 $$0162170 = $8;$$0164169 = $2;$$0171 = 0;
 while(1) {
  $9 = (((($0)) + 1028|0) + ($$0171<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $$0164169 << 13;
  $12 = $11 ^ $$0164169;
  $13 = (($$0171) + 128)|0;
  $14 = (((($0)) + 1028|0) + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($12))|0;
  $17 = $10 >>> 2;
  $18 = $17 & 255;
  $19 = (((($0)) + 1028|0) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($16) + ($$0162170))|0;
  $22 = (($21) + ($20))|0;
  HEAP32[$9>>2] = $22;
  $23 = $22 >>> 10;
  $24 = $23 & 255;
  $25 = (((($0)) + 1028|0) + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + ($10))|0;
  $28 = (((($0)) + 4|0) + ($$0171<<2)|0);
  HEAP32[$28>>2] = $27;
  $29 = $$0171 | 1;
  $30 = (((($0)) + 1028|0) + ($29<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $16 >>> 6;
  $33 = $32 ^ $16;
  $34 = (($$0171) + 129)|0;
  $35 = (((($0)) + 1028|0) + ($34<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + ($33))|0;
  $38 = $31 >>> 2;
  $39 = $38 & 255;
  $40 = (((($0)) + 1028|0) + ($39<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($37) + ($27))|0;
  $43 = (($42) + ($41))|0;
  HEAP32[$30>>2] = $43;
  $44 = $43 >>> 10;
  $45 = $44 & 255;
  $46 = (((($0)) + 1028|0) + ($45<<2)|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + ($31))|0;
  $49 = (((($0)) + 4|0) + ($29<<2)|0);
  HEAP32[$49>>2] = $48;
  $50 = $$0171 | 2;
  $51 = (((($0)) + 1028|0) + ($50<<2)|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $37 << 2;
  $54 = $53 ^ $37;
  $55 = (($$0171) + 130)|0;
  $56 = (((($0)) + 1028|0) + ($55<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($57) + ($54))|0;
  $59 = $52 >>> 2;
  $60 = $59 & 255;
  $61 = (((($0)) + 1028|0) + ($60<<2)|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (($58) + ($48))|0;
  $64 = (($63) + ($62))|0;
  HEAP32[$51>>2] = $64;
  $65 = $64 >>> 10;
  $66 = $65 & 255;
  $67 = (((($0)) + 1028|0) + ($66<<2)|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($68) + ($52))|0;
  $70 = (((($0)) + 4|0) + ($50<<2)|0);
  HEAP32[$70>>2] = $69;
  $71 = $$0171 | 3;
  $72 = (((($0)) + 1028|0) + ($71<<2)|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $58 >>> 16;
  $75 = $74 ^ $58;
  $76 = (($$0171) + 131)|0;
  $77 = (((($0)) + 1028|0) + ($76<<2)|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (($78) + ($75))|0;
  $80 = $73 >>> 2;
  $81 = $80 & 255;
  $82 = (((($0)) + 1028|0) + ($81<<2)|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (($79) + ($69))|0;
  $85 = (($84) + ($83))|0;
  HEAP32[$72>>2] = $85;
  $86 = $85 >>> 10;
  $87 = $86 & 255;
  $88 = (((($0)) + 1028|0) + ($87<<2)|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (($89) + ($73))|0;
  $91 = (((($0)) + 4|0) + ($71<<2)|0);
  HEAP32[$91>>2] = $90;
  $92 = (($$0171) + 4)|0;
  $93 = ($92>>>0)<(128);
  if ($93) {
   $$0162170 = $90;$$0164169 = $79;$$0171 = $92;
  } else {
   break;
  }
 }
 $$1163167 = $90;$$1165166 = $79;$$1168 = 128;
 while(1) {
  $94 = (((($0)) + 1028|0) + ($$1168<<2)|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $$1165166 << 13;
  $97 = $96 ^ $$1165166;
  $98 = (($$1168) + -128)|0;
  $99 = (((($0)) + 1028|0) + ($98<<2)|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (($100) + ($97))|0;
  $102 = $95 >>> 2;
  $103 = $102 & 255;
  $104 = (((($0)) + 1028|0) + ($103<<2)|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (($101) + ($$1163167))|0;
  $107 = (($106) + ($105))|0;
  HEAP32[$94>>2] = $107;
  $108 = $107 >>> 10;
  $109 = $108 & 255;
  $110 = (((($0)) + 1028|0) + ($109<<2)|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($111) + ($95))|0;
  $113 = (((($0)) + 4|0) + ($$1168<<2)|0);
  HEAP32[$113>>2] = $112;
  $114 = $$1168 | 1;
  $115 = (((($0)) + 1028|0) + ($114<<2)|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $101 >>> 6;
  $118 = $117 ^ $101;
  $119 = (($$1168) + -127)|0;
  $120 = (((($0)) + 1028|0) + ($119<<2)|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = (($121) + ($118))|0;
  $123 = $116 >>> 2;
  $124 = $123 & 255;
  $125 = (((($0)) + 1028|0) + ($124<<2)|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = (($122) + ($112))|0;
  $128 = (($127) + ($126))|0;
  HEAP32[$115>>2] = $128;
  $129 = $128 >>> 10;
  $130 = $129 & 255;
  $131 = (((($0)) + 1028|0) + ($130<<2)|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = (($132) + ($116))|0;
  $134 = (((($0)) + 4|0) + ($114<<2)|0);
  HEAP32[$134>>2] = $133;
  $135 = $$1168 | 2;
  $136 = (((($0)) + 1028|0) + ($135<<2)|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $122 << 2;
  $139 = $138 ^ $122;
  $140 = (($$1168) + -126)|0;
  $141 = (((($0)) + 1028|0) + ($140<<2)|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = (($142) + ($139))|0;
  $144 = $137 >>> 2;
  $145 = $144 & 255;
  $146 = (((($0)) + 1028|0) + ($145<<2)|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = (($143) + ($133))|0;
  $149 = (($148) + ($147))|0;
  HEAP32[$136>>2] = $149;
  $150 = $149 >>> 10;
  $151 = $150 & 255;
  $152 = (((($0)) + 1028|0) + ($151<<2)|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = (($153) + ($137))|0;
  $155 = (((($0)) + 4|0) + ($135<<2)|0);
  HEAP32[$155>>2] = $154;
  $156 = $$1168 | 3;
  $157 = (((($0)) + 1028|0) + ($156<<2)|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = $143 >>> 16;
  $160 = $159 ^ $143;
  $161 = (($$1168) + -125)|0;
  $162 = (((($0)) + 1028|0) + ($161<<2)|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (($163) + ($160))|0;
  $165 = $158 >>> 2;
  $166 = $165 & 255;
  $167 = (((($0)) + 1028|0) + ($166<<2)|0);
  $168 = HEAP32[$167>>2]|0;
  $169 = (($164) + ($154))|0;
  $170 = (($169) + ($168))|0;
  HEAP32[$157>>2] = $170;
  $171 = $170 >>> 10;
  $172 = $171 & 255;
  $173 = (((($0)) + 1028|0) + ($172<<2)|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = (($174) + ($158))|0;
  $176 = (((($0)) + 4|0) + ($156<<2)|0);
  HEAP32[$176>>2] = $175;
  $177 = (($$1168) + 4)|0;
  $178 = ($177>>>0)<(256);
  if ($178) {
   $$1163167 = $175;$$1165166 = $164;$$1168 = $177;
  } else {
   break;
  }
 }
 HEAP32[$3>>2] = $175;
 HEAP32[$1>>2] = $164;
 HEAP32[$0>>2] = 256;
 return;
}
function _isaac_next_uint($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + -1)|0;
 $$pre = HEAP32[$0>>2]|0;
 $4 = $$pre;
 while(1) {
  $3 = ($4|0)==(0);
  if ($3) {
   _isaac_update($0);
   $$pre$i = HEAP32[$0>>2]|0;
   $6 = $$pre$i;
  } else {
   $6 = $4;
  }
  $5 = (($6) + -1)|0;
  HEAP32[$0>>2] = $5;
  $7 = (((($0)) + 4|0) + ($5<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8>>>0) % ($1>>>0))&-1;
  $10 = (($8) - ($9))|0;
  $11 = (($2) + ($10))|0;
  $12 = ($11>>>0)<($10>>>0);
  if ($12) {
   $4 = $5;
  } else {
   break;
  }
 }
 return ($9|0);
}
function _bch15_5_correct($0) {
 $0 = $0|0;
 var $$018 = 0, $$01934 = 0, $$02533$i = 0, $$02533$i$us = 0, $$02533$us$i = 0, $$026$lcssa$i = 0, $$02632$i = 0, $$02632$i$us = 0, $$02632$us$i = 0, $$035 = 0, $$1$i = 0, $$1$i$us = 0, $$1$us$i = 0, $$140$11$i = 0, $$140$13$i = 0, $$140$5$i = 0, $$140$7$i = 0, $$140$9$i = 0, $$2$i31 = 0, $$4$1$1$i = 0;
 var $$4$2$2$i = 0, $$4$2$i = 0, $$4$255$i = 0, $$4$3$1$i = 0, $$4$4$2$i = 0, $$4$4$i = 0, $$7$1$1$i = 0, $$7$1$3$i = 0, $$7$2$2$i = 0, $$7$2$4$i = 0, $$7$2$i = 0, $$7$253$i = 0, $$7$4$i = 0, $$ph$i = 0, $$pre = 0, $$pre$i = 0, $$pre52$i = 0, $$sroa$5$0$i = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0;
 var $exitcond$i = 0, $exitcond51$i = 0, $exitcond51$i$us = 0, $not$79$i = 0, $not$80$i = 0, $not$82$i = 0, $not$83$i = 0, $not$84$i = 0, $not$85$i = 0, $or$cond = 0, $spec$select58$i = 0, $spec$select59$i = 0, $spec$select60$i = 0, $spec$select61$i = 0, $spec$select62$i = 0, $spec$select63$i = 0, $spec$select64$i = 0, $spec$select65$i = 0, $spec$select66$i = 0, $spec$select67$i = 0;
 var $spec$select68$i = 0, $spec$select69$i = 0, $spec$select70$i = 0, $spec$select72$i = 0, $spec$select73$i = 0, $spec$select74$i = 0, $spec$select75$i = 0, $spec$select76$i = 0, $spec$select77$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = $2 & 1;
 $4 = $2 & 2;
 $5 = ($4|0)==(0);
 $6 = $2 & 4;
 $7 = ($6|0)==(0);
 $8 = $2 & 8;
 $9 = ($8|0)==(0);
 $10 = $2 & 15;
 $11 = $2 & 16;
 $12 = ($11|0)==(0);
 $13 = $10 ^ 3;
 $spec$select72$i = $12 ? $10 : $13;
 $14 = $2 & 32;
 $15 = ($14|0)==(0);
 $16 = $spec$select72$i ^ 6;
 $$140$5$i = $15 ? $spec$select72$i : $16;
 $17 = $2 & 64;
 $18 = ($17|0)==(0);
 $19 = $$140$5$i ^ 12;
 $spec$select73$i = $18 ? $$140$5$i : $19;
 $20 = $2 & 128;
 $21 = ($20|0)==(0);
 $22 = $spec$select73$i ^ 11;
 $$140$7$i = $21 ? $spec$select73$i : $22;
 $23 = $2 & 256;
 $24 = ($23|0)==(0);
 $25 = $$140$7$i ^ 5;
 $spec$select74$i = $24 ? $$140$7$i : $25;
 $26 = $2 & 512;
 $27 = ($26|0)==(0);
 $28 = $spec$select74$i ^ 10;
 $$140$9$i = $27 ? $spec$select74$i : $28;
 $29 = $2 & 1024;
 $30 = ($29|0)==(0);
 $31 = $$140$9$i ^ 7;
 $spec$select75$i = $30 ? $$140$9$i : $31;
 $32 = $2 & 2048;
 $33 = ($32|0)==(0);
 $34 = $spec$select75$i ^ 14;
 $$140$11$i = $33 ? $spec$select75$i : $34;
 $35 = $2 & 4096;
 $36 = ($35|0)==(0);
 $37 = $$140$11$i ^ 15;
 $spec$select76$i = $36 ? $$140$11$i : $37;
 $38 = $2 & 8192;
 $39 = ($38|0)==(0);
 $40 = $spec$select76$i ^ 13;
 $$140$13$i = $39 ? $spec$select76$i : $40;
 $41 = $2 & 16384;
 $42 = ($41|0)==(0);
 $43 = $$140$13$i ^ 9;
 $spec$select77$i = $42 ? $$140$13$i : $43;
 $44 = $4 << 2;
 $45 = $44 | $3;
 $46 = $45 ^ 12;
 $$4$2$i = $7 ? $45 : $46;
 $47 = $$4$2$i ^ 10;
 $spec$select65$i = $9 ? $$4$2$i : $47;
 $48 = $spec$select65$i ^ 15;
 $$4$4$i = $12 ? $spec$select65$i : $48;
 $not$79$i = $15 ^ 1;
 $49 = $not$79$i&1;
 $spec$select66$i = $$4$4$i ^ $49;
 $50 = $spec$select66$i ^ 8;
 $$4$1$1$i = $18 ? $spec$select66$i : $50;
 $51 = $$4$1$1$i ^ 12;
 $spec$select67$i = $21 ? $$4$1$1$i : $51;
 $52 = $spec$select67$i ^ 10;
 $$4$3$1$i = $24 ? $spec$select67$i : $52;
 $53 = $$4$3$1$i ^ 15;
 $spec$select68$i = $27 ? $$4$3$1$i : $53;
 $not$80$i = $30 ^ 1;
 $54 = $not$80$i&1;
 $$4$255$i = $spec$select68$i ^ $54;
 $55 = $$4$255$i ^ 8;
 $spec$select69$i = $33 ? $$4$255$i : $55;
 $56 = $spec$select69$i ^ 12;
 $$4$2$2$i = $36 ? $spec$select69$i : $56;
 $57 = $$4$2$2$i ^ 10;
 $spec$select70$i = $39 ? $$4$2$2$i : $57;
 $58 = $spec$select70$i ^ 15;
 $$4$4$2$i = $42 ? $spec$select70$i : $58;
 $59 = $3 | 6;
 $spec$select58$i = $5 ? $3 : $59;
 $60 = $spec$select58$i ^ 7;
 $$7$2$i = $7 ? $spec$select58$i : $60;
 $not$82$i = $9 ^ 1;
 $61 = $not$82$i&1;
 $spec$select59$i = $$7$2$i ^ $61;
 $62 = $spec$select59$i ^ 6;
 $$7$1$1$i = $12 ? $spec$select59$i : $62;
 $63 = $$7$1$1$i ^ 7;
 $spec$select60$i = $15 ? $$7$1$1$i : $63;
 $not$83$i = $18 ^ 1;
 $64 = $not$83$i&1;
 $$7$253$i = $spec$select60$i ^ $64;
 $65 = $$7$253$i ^ 6;
 $spec$select61$i = $21 ? $$7$253$i : $65;
 $66 = $spec$select61$i ^ 7;
 $$7$2$2$i = $24 ? $spec$select61$i : $66;
 $not$84$i = $27 ^ 1;
 $67 = $not$84$i&1;
 $spec$select62$i = $$7$2$2$i ^ $67;
 $68 = $spec$select62$i ^ 6;
 $$7$1$3$i = $30 ? $spec$select62$i : $68;
 $69 = $$7$1$3$i ^ 7;
 $spec$select63$i = $33 ? $$7$1$3$i : $69;
 $not$85$i = $36 ^ 1;
 $70 = $not$85$i&1;
 $$7$4$i = $spec$select63$i ^ $70;
 $71 = $$7$4$i ^ 6;
 $spec$select64$i = $39 ? $$7$4$i : $71;
 $72 = $spec$select64$i ^ 7;
 $$7$2$4$i = $42 ? $spec$select64$i : $72;
 $73 = ($spec$select77$i|0)==(0);
 do {
  if ($73) {
   $74 = $$4$4$2$i | $$7$2$4$i;
   $75 = ($74|0)==(0);
   if ($75) {
    $$018 = 0;
    STACKTOP = sp;return ($$018|0);
   } else {
    $100 = $$4$4$2$i;$102 = 0;$132 = $1;
    break;
   }
  } else {
   $76 = (656 + ($spec$select77$i)|0);
   $77 = HEAP8[$76>>0]|0;
   $78 = $77 << 24 >> 24;
   $79 = $78 << 1;
   $80 = (672 + ($79)|0);
   $81 = HEAP8[$80>>0]|0;
   $82 = $81&255;
   $83 = (656 + ($82)|0);
   $84 = HEAP8[$83>>0]|0;
   $85 = $84 << 24 >> 24;
   $86 = (($85) + ($78))|0;
   $87 = (672 + ($86)|0);
   $88 = HEAP8[$87>>0]|0;
   $89 = $88&255;
   $90 = $$4$4$2$i ^ $89;
   $91 = ($$4$4$2$i|0)==(0);
   if ($91) {
    $100 = $90;$102 = 0;$132 = $1;
   } else {
    $92 = (656 + ($$4$4$2$i)|0);
    $93 = HEAP8[$92>>0]|0;
    $94 = $93 << 24 >> 24;
    $95 = (($94) + ($85))|0;
    $96 = (672 + ($95)|0);
    $97 = HEAP8[$96>>0]|0;
    $98 = $97&255;
    $100 = $90;$102 = $98;$132 = $1;
   }
  }
 } while(0);
 $99 = ($100|0)==(0);
 if ($99) {
  $$sroa$5$0$i = 0;$126 = 0;
 } else {
  $101 = $102 ^ $$7$2$4$i;
  $103 = ($101|0)==(0);
  if ($103) {
   $$sroa$5$0$i = 0;$126 = 0;
  } else {
   $104 = (656 + ($101)|0);
   $105 = HEAP8[$104>>0]|0;
   $106 = $105 << 24 >> 24;
   $107 = (($106) + 15)|0;
   $108 = (656 + ($100)|0);
   $109 = HEAP8[$108>>0]|0;
   $110 = $109 << 24 >> 24;
   $111 = (($107) - ($110))|0;
   $112 = (672 + ($111)|0);
   $113 = HEAP8[$112>>0]|0;
   $114 = $113&255;
   if ($73) {
    $$sroa$5$0$i = $114;$126 = 0;
   } else {
    $115 = (656 + ($spec$select77$i)|0);
    $116 = HEAP8[$115>>0]|0;
    $117 = $116 << 24 >> 24;
    $118 = (656 + ($114)|0);
    $119 = HEAP8[$118>>0]|0;
    $120 = $119 << 24 >> 24;
    $121 = (($120) + ($117))|0;
    $122 = (672 + ($121)|0);
    $123 = HEAP8[$122>>0]|0;
    $124 = $123&255;
    $$sroa$5$0$i = $114;$126 = $124;
   }
  }
 }
 $125 = $126 ^ $100;
 $127 = ($125|0)==(0);
 do {
  if ($127) {
   $128 = ($$sroa$5$0$i|0)==(0);
   if ($128) {
    if ($73) {
     $$018 = -1;
     STACKTOP = sp;return ($$018|0);
    } else {
     $129 = (656 + ($spec$select77$i)|0);
     $130 = HEAP8[$129>>0]|0;
     $131 = $130 << 24 >> 24;
     HEAP32[$132>>2] = $131;
     $$2$i31 = 1;
     break;
    }
   } else {
    $$ph$i = 2;
    label = 14;
   }
  } else {
   $$ph$i = 3;
   label = 14;
  }
 } while(0);
 L20: do {
  if ((label|0) == 14) {
   $133 = ($$sroa$5$0$i|0)==(0);
   $134 = (656 + ($$sroa$5$0$i)|0);
   L22: do {
    if ($73) {
     if (!($133)) {
      $$pre52$i = HEAP8[$134>>0]|0;
      $135 = $$pre52$i << 24 >> 24;
      $$02533$us$i = 0;$$02632$us$i = 0;
      while(1) {
       $136 = $$02533$us$i << 1;
       $137 = (672 + ($136)|0);
       $138 = HEAP8[$137>>0]|0;
       $139 = $138&255;
       $140 = (656 + ($139)|0);
       $141 = HEAP8[$140>>0]|0;
       $142 = $141 << 24 >> 24;
       $143 = (($$02533$us$i) + ($142))|0;
       $144 = (672 + ($143)|0);
       $145 = HEAP8[$144>>0]|0;
       $146 = (($$02533$us$i) + ($135))|0;
       $147 = (672 + ($146)|0);
       $148 = HEAP8[$147>>0]|0;
       $149 = $148 ^ $145;
       $150 = $149&255;
       $151 = ($125|0)==($150|0);
       if ($151) {
        $152 = (($$02632$us$i) + 1)|0;
        $153 = (($1) + ($$02632$us$i<<2)|0);
        HEAP32[$153>>2] = $$02533$us$i;
        $$1$us$i = $152;
       } else {
        $$1$us$i = $$02632$us$i;
       }
       $154 = (($$02533$us$i) + 1)|0;
       $exitcond$i = ($154|0)==(15);
       if ($exitcond$i) {
        $$026$lcssa$i = $$1$us$i;
        break L22;
       } else {
        $$02533$us$i = $154;$$02632$us$i = $$1$us$i;
       }
      }
     }
     switch ($125|0) {
     case 1:  {
      HEAP32[$132>>2] = 0;
      $206 = ((($1)) + 4|0);
      HEAP32[$206>>2] = 5;
      $207 = ((($1)) + 8|0);
      HEAP32[$207>>2] = 10;
      $$2$i31 = 3;
      break L20;
      break;
     }
     case 8:  {
      HEAP32[$132>>2] = 1;
      $204 = ((($1)) + 4|0);
      HEAP32[$204>>2] = 6;
      $205 = ((($1)) + 8|0);
      HEAP32[$205>>2] = 11;
      $$2$i31 = 3;
      break L20;
      break;
     }
     case 12:  {
      HEAP32[$132>>2] = 2;
      $208 = ((($1)) + 4|0);
      HEAP32[$208>>2] = 7;
      $209 = ((($1)) + 8|0);
      HEAP32[$209>>2] = 12;
      $$2$i31 = 3;
      break L20;
      break;
     }
     case 10:  {
      HEAP32[$132>>2] = 3;
      $202 = ((($1)) + 4|0);
      HEAP32[$202>>2] = 8;
      $203 = ((($1)) + 8|0);
      HEAP32[$203>>2] = 13;
      $$2$i31 = 3;
      break L20;
      break;
     }
     case 15:  {
      HEAP32[$132>>2] = 4;
      $210 = ((($1)) + 4|0);
      HEAP32[$210>>2] = 9;
      $211 = ((($1)) + 8|0);
      HEAP32[$211>>2] = 14;
      $$026$lcssa$i = 3;
      break L22;
      break;
     }
     default: {
      $$018 = -1;
      STACKTOP = sp;return ($$018|0);
     }
     }
    } else {
     $155 = (656 + ($spec$select77$i)|0);
     $$pre$i = HEAP8[$155>>0]|0;
     $156 = $$pre$i << 24 >> 24;
     if ($133) {
      $$02533$i$us = 0;$$02632$i$us = 0;
      while(1) {
       $157 = $$02533$i$us << 1;
       $158 = (672 + ($157)|0);
       $159 = HEAP8[$158>>0]|0;
       $160 = $159&255;
       $161 = (656 + ($160)|0);
       $162 = HEAP8[$161>>0]|0;
       $163 = $162 << 24 >> 24;
       $164 = (($$02533$i$us) + ($163))|0;
       $165 = (672 + ($164)|0);
       $166 = HEAP8[$165>>0]|0;
       $167 = (($163) + ($156))|0;
       $168 = (672 + ($167)|0);
       $169 = HEAP8[$168>>0]|0;
       $170 = $169 ^ $166;
       $171 = $170&255;
       $172 = ($125|0)==($171|0);
       if ($172) {
        $173 = (($$02632$i$us) + 1)|0;
        $174 = (($1) + ($$02632$i$us<<2)|0);
        HEAP32[$174>>2] = $$02533$i$us;
        $$1$i$us = $173;
       } else {
        $$1$i$us = $$02632$i$us;
       }
       $175 = (($$02533$i$us) + 1)|0;
       $exitcond51$i$us = ($175|0)==(15);
       if ($exitcond51$i$us) {
        $$026$lcssa$i = $$1$i$us;
        break;
       } else {
        $$02533$i$us = $175;$$02632$i$us = $$1$i$us;
       }
      }
     } else {
      $$pre = HEAP8[$134>>0]|0;
      $176 = $$pre << 24 >> 24;
      $$02533$i = 0;$$02632$i = 0;
      while(1) {
       $177 = $$02533$i << 1;
       $178 = (672 + ($177)|0);
       $179 = HEAP8[$178>>0]|0;
       $180 = $179&255;
       $181 = (656 + ($180)|0);
       $182 = HEAP8[$181>>0]|0;
       $183 = $182 << 24 >> 24;
       $184 = (($$02533$i) + ($183))|0;
       $185 = (672 + ($184)|0);
       $186 = HEAP8[$185>>0]|0;
       $187 = (($183) + ($156))|0;
       $188 = (672 + ($187)|0);
       $189 = HEAP8[$188>>0]|0;
       $190 = $189 ^ $186;
       $191 = (($$02533$i) + ($176))|0;
       $192 = (672 + ($191)|0);
       $193 = HEAP8[$192>>0]|0;
       $194 = $193 ^ $190;
       $195 = $194&255;
       $196 = ($125|0)==($195|0);
       if ($196) {
        $197 = (($$02632$i) + 1)|0;
        $198 = (($1) + ($$02632$i<<2)|0);
        HEAP32[$198>>2] = $$02533$i;
        $$1$i = $197;
       } else {
        $$1$i = $$02632$i;
       }
       $199 = (($$02533$i) + 1)|0;
       $exitcond51$i = ($199|0)==(15);
       if ($exitcond51$i) {
        $$026$lcssa$i = $$1$i;
        break;
       } else {
        $$02533$i = $199;$$02632$i = $$1$i;
       }
      }
     }
    }
   } while(0);
   $200 = ($$026$lcssa$i|0)>=($$ph$i|0);
   $201 = ($$026$lcssa$i|0)>(0);
   $or$cond = $200 & $201;
   if ($or$cond) {
    $$2$i31 = $$026$lcssa$i;
   } else {
    $$018 = -1;
    STACKTOP = sp;return ($$018|0);
   }
  }
 } while(0);
 $$01934 = $2;$$035 = 0;
 while(1) {
  $212 = (($1) + ($$035<<2)|0);
  $213 = HEAP32[$212>>2]|0;
  $214 = 1 << $213;
  $215 = $214 ^ $$01934;
  $216 = (($$035) + 1)|0;
  $exitcond = ($216|0)==($$2$i31|0);
  if ($exitcond) {
   break;
  } else {
   $$01934 = $215;$$035 = $216;
  }
 }
 $217 = $215 >>> 10;
 $218 = $217 & 1;
 $219 = (0 - ($218))|0;
 $220 = $219 & 1335;
 $221 = $215 >>> 11;
 $222 = $221 & 1;
 $223 = (0 - ($222))|0;
 $224 = $223 & 2670;
 $225 = $224 ^ $220;
 $226 = $215 >>> 12;
 $227 = $226 & 1;
 $228 = (0 - ($227))|0;
 $229 = $228 & 4587;
 $230 = $225 ^ $229;
 $231 = $215 >>> 13;
 $232 = $231 & 1;
 $233 = (0 - ($232))|0;
 $234 = $233 & 9174;
 $235 = $230 ^ $234;
 $236 = $215 >>> 14;
 $237 = $236 & 1;
 $238 = (0 - ($237))|0;
 $239 = $238 & 17051;
 $240 = $235 ^ $239;
 $241 = ($240|0)==($215|0);
 if (!($241)) {
  $$018 = -1;
  STACKTOP = sp;return ($$018|0);
 }
 HEAP32[$0>>2] = $215;
 $$018 = $$2$i31;
 STACKTOP = sp;return ($$018|0);
}
function _qr_binarize($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0153163$us = 0, $$0154181$us = 0, $$0156186 = 0, $$0159$lcssa = 0, $$0160$lcssa = 0, $$1155173 = 0, $$1155173$us = 0, $$1157177$us = 0, $$1166 = 0, $$1166$us = 0, $$2 = 0, $$2$us = 0, $$2158162$us = 0, $$3165 = 0, $$3165$us = 0, $$phi$trans$insert = 0, $$phi$trans$insert201 = 0, $$pre = 0, $$pre202 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond193 = 0, $exitcond193206 = 0, $exitcond194 = 0, $exitcond195 = 0, $exitcond196 = 0, $exitcond197 = 0, $exitcond198 = 0, $exitcond199 = 0, $or$cond = 0, $spec$select = 0;
 var $spec$select204 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)>(0);
 $4 = ($2|0)>(0);
 $or$cond = $3 & $4;
 if (!($or$cond)) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = Math_imul($2, $1)|0;
 $6 = (_malloc($5)|0);
 $7 = ($1|0)>(128);
 if ($7) {
  $8 = ($1|0)>(256);
  if ($8) {
   $170 = ($1|0)>(512);
   if ($170) {
    $171 = ($1|0)>(1024);
    $spec$select204 = $171 ? 8 : 7;
    $$0159$lcssa = $spec$select204;
   } else {
    $$0159$lcssa = 6;
   }
  } else {
   $$0159$lcssa = 5;
  }
 } else {
  $$0159$lcssa = 4;
 }
 $9 = ($2|0)>(128);
 if ($9) {
  $10 = ($2|0)>(256);
  if ($10) {
   $168 = ($2|0)>(512);
   if ($168) {
    $169 = ($2|0)>(1024);
    $spec$select = $169 ? 8 : 7;
    $$0160$lcssa = $spec$select;
   } else {
    $$0160$lcssa = 6;
   }
  } else {
   $$0160$lcssa = 5;
  }
 } else {
  $$0160$lcssa = 4;
 }
 $11 = 1 << $$0159$lcssa;
 $12 = 1 << $$0160$lcssa;
 $13 = $1 << 2;
 $14 = (_malloc($13)|0);
 $15 = (($$0160$lcssa) + -1)|0;
 $$0156186 = 0;
 while(1) {
  $16 = (($0) + ($$0156186)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $18 << $15;
  $20 = (($19) + ($18))|0;
  $21 = (($14) + ($$0156186<<2)|0);
  HEAP32[$21>>2] = $20;
  $22 = (($$0156186) + 1)|0;
  $exitcond199 = ($22|0)==($1|0);
  if ($exitcond199) {
   break;
  } else {
   $$0156186 = $22;
  }
 }
 $23 = $12 >>> 1;
 $24 = ($12|0)>(3);
 if ($24) {
  $25 = (($2) + -1)|0;
  $$0154181$us = 1;
  while(1) {
   $26 = ($$0154181$us|0)<($2|0);
   $27 = $26 ? $$0154181$us : $25;
   $28 = Math_imul($27, $1)|0;
   $$1157177$us = 0;
   while(1) {
    $29 = (($$1157177$us) + ($28))|0;
    $30 = (($0) + ($29)|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31&255;
    $33 = (($14) + ($$1157177$us<<2)|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (($34) + ($32))|0;
    HEAP32[$33>>2] = $35;
    $36 = (($$1157177$us) + 1)|0;
    $exitcond198 = ($36|0)==($1|0);
    if ($exitcond198) {
     break;
    } else {
     $$1157177$us = $36;
    }
   }
   $37 = (($$0154181$us) + 1)|0;
   $38 = ($37>>>0)<($23>>>0);
   if ($38) {
    $$0154181$us = $37;
   } else {
    break;
   }
  }
 }
 $39 = (($$0159$lcssa) + -1)|0;
 $40 = $11 >>> 1;
 $41 = ($11|0)>(3);
 $42 = (($1) + -1)|0;
 $43 = (($$0160$lcssa) + ($$0159$lcssa))|0;
 $44 = (($2) + -1)|0;
 $exitcond193206 = ($1|0)==(1);
 if ($41) {
  $$1155173$us = 0;
  while(1) {
   $45 = HEAP32[$14>>2]|0;
   $46 = $45 << $39;
   $47 = (($46) + ($45))|0;
   $$0153163$us = $47;$$2158162$us = 1;
   while(1) {
    $89 = ($$2158162$us|0)<($1|0);
    $90 = $89 ? $$2158162$us : $42;
    $91 = (($14) + ($90<<2)|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (($92) + ($$0153163$us))|0;
    $94 = (($$2158162$us) + 1)|0;
    $95 = ($94>>>0)<($40>>>0);
    if ($95) {
     $$0153163$us = $93;$$2158162$us = $94;
    } else {
     break;
    }
   }
   $66 = Math_imul($$1155173$us, $1)|0;
   $$1166$us = $93;$$3165$us = 0;
   while(1) {
    $65 = (($$3165$us) + ($66))|0;
    $67 = (($0) + ($65)|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68&255;
    $70 = (($69) + 3)|0;
    $71 = $70 << $43;
    $72 = ($71>>>0)<($$1166$us>>>0);
    $73 = $72 << 31 >> 31;
    $74 = (($6) + ($65)|0);
    HEAP8[$74>>0] = $73;
    $75 = (($$3165$us) + 1)|0;
    $76 = ($75|0)<($1|0);
    if ($76) {
     $77 = (($$3165$us) - ($40))|0;
     $78 = ($77|0)>(0);
     $79 = $78 ? $77 : 0;
     $80 = (($$3165$us) + ($40))|0;
     $81 = ($80|0)<($1|0);
     $82 = $81 ? $80 : $42;
     $83 = (($14) + ($82<<2)|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = (($14) + ($79<<2)|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = (($84) + ($$1166$us))|0;
     $88 = (($87) - ($86))|0;
     $$2$us = $88;
    } else {
     $$2$us = $$1166$us;
    }
    $exitcond = ($75|0)==($1|0);
    if ($exitcond) {
     break;
    } else {
     $$1166$us = $$2$us;$$3165$us = $75;
    }
   }
   $48 = (($$1155173$us) + 1)|0;
   $49 = ($48|0)<($2|0);
   if ($49) {
    $96 = (($$1155173$us) - ($23))|0;
    $97 = ($96|0)>(0);
    $98 = $97 ? $96 : 0;
    $52 = Math_imul($98, $1)|0;
    $99 = (($$1155173$us) + ($23))|0;
    $100 = ($99|0)<($2|0);
    $101 = $100 ? $99 : $44;
    $59 = Math_imul($101, $1)|0;
    $102 = (($0) + ($52)|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = $103&255;
    $105 = (($45) - ($104))|0;
    $106 = (($0) + ($59)|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = $107&255;
    $109 = (($105) + ($108))|0;
    HEAP32[$14>>2] = $109;
    if (!($exitcond193206)) {
     $50 = 1;
     while(1) {
      $$phi$trans$insert201 = (($14) + ($50<<2)|0);
      $$pre202 = HEAP32[$$phi$trans$insert201>>2]|0;
      $51 = (($50) + ($52))|0;
      $53 = (($0) + ($51)|0);
      $54 = HEAP8[$53>>0]|0;
      $55 = $54&255;
      $56 = (($14) + ($50<<2)|0);
      $57 = (($$pre202) - ($55))|0;
      $58 = (($50) + ($59))|0;
      $60 = (($0) + ($58)|0);
      $61 = HEAP8[$60>>0]|0;
      $62 = $61&255;
      $63 = (($57) + ($62))|0;
      HEAP32[$56>>2] = $63;
      $64 = (($50) + 1)|0;
      $exitcond193 = ($64|0)==($1|0);
      if ($exitcond193) {
       break;
      } else {
       $50 = $64;
      }
     }
    }
   }
   $exitcond194 = ($48|0)==($2|0);
   if ($exitcond194) {
    break;
   } else {
    $$1155173$us = $48;
   }
  }
 } else {
  $$1155173 = 0;
  while(1) {
   $110 = HEAP32[$14>>2]|0;
   $111 = $110 << $39;
   $112 = (($111) + ($110))|0;
   $113 = Math_imul($$1155173, $1)|0;
   $$1166 = $112;$$3165 = 0;
   while(1) {
    $114 = (($$3165) + ($113))|0;
    $115 = (($0) + ($114)|0);
    $116 = HEAP8[$115>>0]|0;
    $117 = $116&255;
    $118 = (($117) + 3)|0;
    $119 = $118 << $43;
    $120 = ($119>>>0)<($$1166>>>0);
    $121 = $120 << 31 >> 31;
    $122 = (($6) + ($114)|0);
    HEAP8[$122>>0] = $121;
    $123 = (($$3165) + 1)|0;
    $124 = ($123|0)<($1|0);
    if ($124) {
     $125 = (($$3165) - ($40))|0;
     $126 = ($125|0)>(0);
     $127 = $126 ? $125 : 0;
     $128 = (($$3165) + ($40))|0;
     $129 = ($128|0)<($1|0);
     $130 = $129 ? $128 : $42;
     $131 = (($14) + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($14) + ($127<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = (($132) + ($$1166))|0;
     $136 = (($135) - ($134))|0;
     $$2 = $136;
    } else {
     $$2 = $$1166;
    }
    $exitcond195 = ($123|0)==($1|0);
    if ($exitcond195) {
     break;
    } else {
     $$1166 = $$2;$$3165 = $123;
    }
   }
   $137 = (($$1155173) + 1)|0;
   $138 = ($137|0)<($2|0);
   if ($138) {
    $139 = (($$1155173) - ($23))|0;
    $140 = ($139|0)>(0);
    $141 = $140 ? $139 : 0;
    $142 = Math_imul($141, $1)|0;
    $143 = (($$1155173) + ($23))|0;
    $144 = ($143|0)<($2|0);
    $145 = $144 ? $143 : $44;
    $146 = Math_imul($145, $1)|0;
    $147 = (($0) + ($142)|0);
    $148 = HEAP8[$147>>0]|0;
    $149 = $148&255;
    $150 = (($110) - ($149))|0;
    $151 = (($0) + ($146)|0);
    $152 = HEAP8[$151>>0]|0;
    $153 = $152&255;
    $154 = (($150) + ($153))|0;
    HEAP32[$14>>2] = $154;
    if (!($exitcond193206)) {
     $155 = 1;
     while(1) {
      $$phi$trans$insert = (($14) + ($155<<2)|0);
      $$pre = HEAP32[$$phi$trans$insert>>2]|0;
      $156 = (($155) + ($142))|0;
      $157 = (($0) + ($156)|0);
      $158 = HEAP8[$157>>0]|0;
      $159 = $158&255;
      $160 = (($14) + ($155<<2)|0);
      $161 = (($$pre) - ($159))|0;
      $162 = (($155) + ($146))|0;
      $163 = (($0) + ($162)|0);
      $164 = HEAP8[$163>>0]|0;
      $165 = $164&255;
      $166 = (($161) + ($165))|0;
      HEAP32[$160>>2] = $166;
      $167 = (($155) + 1)|0;
      $exitcond196 = ($167|0)==($1|0);
      if ($exitcond196) {
       break;
      } else {
       $155 = $167;
      }
     }
    }
   }
   $exitcond197 = ($137|0)==($2|0);
   if ($exitcond197) {
    break;
   } else {
    $$1155173 = $137;
   }
  }
 }
 _free($14);
 $$0 = $6;
 return ($$0|0);
}
function _qr_isqrt($0) {
 $0 = $0|0;
 var $$1 = 0, $$1$1 = 0, $$1$10 = 0, $$1$11 = 0, $$1$12 = 0, $$1$13 = 0, $$1$14 = 0, $$1$2 = 0, $$1$3 = 0, $$1$4 = 0, $$1$5 = 0, $$1$6 = 0, $$1$7 = 0, $$1$8 = 0, $$1$9 = 0, $$122$1 = 0, $$122$10 = 0, $$122$11 = 0, $$122$12 = 0, $$122$13 = 0;
 var $$122$14 = 0, $$122$15 = 0, $$122$2 = 0, $$122$3 = 0, $$122$4 = 0, $$122$5 = 0, $$122$6 = 0, $$122$7 = 0, $$122$8 = 0, $$122$9 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)<(1073741824);
 $2 = $1 ? 0 : 32768;
 $3 = $1 ? 0 : 1073741824;
 $$1 = (($0) - ($3))|0;
 $4 = $2 << 15;
 $5 = $4 | 268435456;
 $6 = ($$1>>>0)<($5>>>0);
 $7 = $6 ? 0 : 16384;
 $$122$1 = $7 | $2;
 $8 = $6 ? 0 : $5;
 $$1$1 = (($$1) - ($8))|0;
 $9 = $$122$1 << 14;
 $10 = $9 | 67108864;
 $11 = ($$1$1>>>0)<($10>>>0);
 $12 = $11 ? 0 : 8192;
 $$122$2 = $12 | $$122$1;
 $13 = $11 ? 0 : $10;
 $$1$2 = (($$1$1) - ($13))|0;
 $14 = $$122$2 << 13;
 $15 = $14 | 16777216;
 $16 = ($$1$2>>>0)<($15>>>0);
 $17 = $16 ? 0 : 4096;
 $$122$3 = $17 | $$122$2;
 $18 = $16 ? 0 : $15;
 $$1$3 = (($$1$2) - ($18))|0;
 $19 = $$122$3 << 12;
 $20 = $19 | 4194304;
 $21 = ($$1$3>>>0)<($20>>>0);
 $22 = $21 ? 0 : 2048;
 $$122$4 = $22 | $$122$3;
 $23 = $21 ? 0 : $20;
 $$1$4 = (($$1$3) - ($23))|0;
 $24 = $$122$4 << 11;
 $25 = $24 | 1048576;
 $26 = ($$1$4>>>0)<($25>>>0);
 $27 = $26 ? 0 : 1024;
 $$122$5 = $27 | $$122$4;
 $28 = $26 ? 0 : $25;
 $$1$5 = (($$1$4) - ($28))|0;
 $29 = $$122$5 << 10;
 $30 = (($29) + 262144)|0;
 $31 = ($$1$5>>>0)<($30>>>0);
 $32 = $31 ? 0 : 512;
 $$122$6 = $32 | $$122$5;
 $33 = $31 ? 0 : $30;
 $$1$6 = (($$1$5) - ($33))|0;
 $34 = $$122$6 << 9;
 $35 = (($34) + 65536)|0;
 $36 = ($$1$6>>>0)<($35>>>0);
 $37 = $36 ? 0 : 256;
 $$122$7 = (($37) + ($$122$6))|0;
 $38 = $36 ? 0 : $35;
 $$1$7 = (($$1$6) - ($38))|0;
 $39 = $$122$7 << 8;
 $40 = (($39) + 16384)|0;
 $41 = ($$1$7>>>0)<($40>>>0);
 $42 = $41 ? 0 : 128;
 $$122$8 = (($42) + ($$122$7))|0;
 $43 = $41 ? 0 : $40;
 $$1$8 = (($$1$7) - ($43))|0;
 $44 = $$122$8 << 7;
 $45 = (($44) + 4096)|0;
 $46 = ($$1$8>>>0)<($45>>>0);
 $47 = $46 ? 0 : 64;
 $$122$9 = (($47) + ($$122$8))|0;
 $48 = $46 ? 0 : $45;
 $$1$9 = (($$1$8) - ($48))|0;
 $49 = $$122$9 << 6;
 $50 = (($49) + 1024)|0;
 $51 = ($$1$9>>>0)<($50>>>0);
 $52 = $51 ? 0 : 32;
 $$122$10 = (($52) + ($$122$9))|0;
 $53 = $51 ? 0 : $50;
 $$1$10 = (($$1$9) - ($53))|0;
 $54 = $$122$10 << 5;
 $55 = (($54) + 256)|0;
 $56 = ($$1$10>>>0)<($55>>>0);
 $57 = $56 ? 0 : 16;
 $$122$11 = (($57) + ($$122$10))|0;
 $58 = $56 ? 0 : $55;
 $$1$11 = (($$1$10) - ($58))|0;
 $59 = $$122$11 << 4;
 $60 = (($59) + 64)|0;
 $61 = ($$1$11>>>0)<($60>>>0);
 $62 = $61 ? 0 : 8;
 $$122$12 = (($62) + ($$122$11))|0;
 $63 = $61 ? 0 : $60;
 $$1$12 = (($$1$11) - ($63))|0;
 $64 = $$122$12 << 3;
 $65 = (($64) + 16)|0;
 $66 = ($$1$12>>>0)<($65>>>0);
 $67 = $66 ? 0 : 4;
 $$122$13 = (($67) + ($$122$12))|0;
 $68 = $66 ? 0 : $65;
 $$1$13 = (($$1$12) - ($68))|0;
 $69 = $$122$13 << 2;
 $70 = (($69) + 4)|0;
 $71 = ($$1$13>>>0)<($70>>>0);
 $72 = $71 ? 0 : 2;
 $$122$14 = (($72) + ($$122$13))|0;
 $73 = $71 ? 0 : $70;
 $$1$14 = (($$1$13) - ($73))|0;
 $74 = $$122$14 << 1;
 $75 = $74 | 1;
 $76 = ($$1$14>>>0)>=($75>>>0);
 $77 = $76&1;
 $$122$15 = (($$122$14) + ($77))|0;
 return ($$122$15|0);
}
function _qr_ihypot($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$lobit$i = 0, $$neg = 0, $$neg82 = 0, $$not = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ispos = 0, $ispos77 = 0, $neg = 0, $neg78 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ispos = ($0|0)>(-1);
 $neg = (0 - ($0))|0;
 $2 = $ispos ? $0 : $neg;
 $ispos77 = ($1|0)>(-1);
 $neg78 = (0 - ($1))|0;
 $3 = $ispos77 ? $1 : $neg78;
 $4 = ($2>>>0)>($3>>>0);
 $5 = $3 ^ $2;
 $6 = $4 ? $5 : 0;
 $7 = $6 ^ $2;
 $8 = $6 ^ $3;
 $9 = ($8>>>0)>(65535);
 $10 = $9&1;
 $11 = $10 << 4;
 $12 = $8 >>> $11;
 $13 = $12 & 65280;
 $14 = ($13|0)!=(0);
 $15 = $14&1;
 $16 = $15 << 3;
 $17 = $12 >>> $16;
 $18 = $16 | $11;
 $19 = $17 & 240;
 $20 = ($19|0)!=(0);
 $21 = $20&1;
 $22 = $21 << 2;
 $23 = $17 >>> $22;
 $24 = $18 | $22;
 $25 = $23 & 12;
 $26 = ($25|0)!=(0);
 $27 = $26&1;
 $28 = $27 << 1;
 $29 = $23 >>> $28;
 $30 = $24 | $28;
 $31 = $29 >>> 1;
 $$lobit$i = $31 & 1;
 $32 = $30 | $$lobit$i;
 $33 = ($29|0)!=(0);
 $$neg = $33 << 31 >> 31;
 $$neg82 = (($$neg) + 31)|0;
 $34 = (($$neg82) - ($32))|0;
 $35 = $34 >> 31;
 $$not = $35 ^ -1;
 $36 = $34 & $$not;
 $37 = $7 << $36;
 (___muldi3(($37|0),0,-1686835798,0)|0);
 $38 = (getTempRet0() | 0);
 $39 = $8 << $36;
 $40 = ($39|0)<(0);
 $41 = $40 << 31 >> 31;
 $42 = (___muldi3(($39|0),($41|0),-1686835799,0)|0);
 $43 = (getTempRet0() | 0);
 $44 = (_bitshift64Lshr(($42|0),($43|0),63)|0);
 $45 = (getTempRet0() | 0);
 $46 = (0 - ($44))|0;
 $47 = (($43) - ($44))|0;
 $48 = $47 ^ $46;
 $49 = (($48) + ($38))|0;
 $50 = (($38) - ($44))|0;
 $51 = $50 ^ $46;
 $52 = (($43) - ($51))|0;
 $53 = (($49) + 1)|0;
 $54 = $53 >>> 1;
 $55 = (($52) + 1)|0;
 $56 = $55 >> 1;
 $57 = $52 >> 31;
 $58 = (($56) + ($57))|0;
 $59 = $58 ^ $57;
 $60 = (($59) + ($49))|0;
 $61 = (($54) + ($57))|0;
 $62 = $61 ^ $57;
 $63 = (($52) - ($62))|0;
 $64 = (($60) + 1)|0;
 $65 = $64 >>> 2;
 $66 = (($63) + 2)|0;
 $67 = $66 >> 2;
 $68 = $63 >> 31;
 $69 = (($67) + ($68))|0;
 $70 = $69 ^ $68;
 $71 = (($70) + ($60))|0;
 $72 = (($68) + ($65))|0;
 $73 = $72 ^ $68;
 $74 = (($63) - ($73))|0;
 $75 = $74 << 1;
 $76 = (($71) + 1)|0;
 $77 = $76 >>> 2;
 $78 = (($75) + 8)|0;
 $79 = $78 >> 4;
 $80 = $75 >> 31;
 $81 = (($79) + ($80))|0;
 $82 = $81 ^ $80;
 $83 = (($82) + ($71))|0;
 $84 = (($80) + ($77))|0;
 $85 = $84 ^ $80;
 $86 = (($75) - ($85))|0;
 $87 = $86 << 1;
 $88 = (($83) + 1)|0;
 $89 = $88 >>> 2;
 $90 = (($87) + 32)|0;
 $91 = $90 >> 6;
 $92 = $87 >> 31;
 $93 = (($91) + ($92))|0;
 $94 = $93 ^ $92;
 $95 = (($94) + ($83))|0;
 $96 = (($92) + ($89))|0;
 $97 = $96 ^ $92;
 $98 = (($87) - ($97))|0;
 $99 = $98 << 1;
 $100 = (($95) + 1)|0;
 $101 = $100 >>> 2;
 $102 = (($99) + 128)|0;
 $103 = $102 >> 8;
 $104 = $99 >> 31;
 $105 = (($103) + ($104))|0;
 $106 = $105 ^ $104;
 $107 = (($106) + ($95))|0;
 $108 = (($104) + ($101))|0;
 $109 = $108 ^ $104;
 $110 = (($99) - ($109))|0;
 $111 = $110 << 1;
 $112 = (($107) + 1)|0;
 $113 = $112 >>> 2;
 $114 = (($111) + 512)|0;
 $115 = $114 >> 10;
 $116 = $111 >> 31;
 $117 = (($115) + ($116))|0;
 $118 = $117 ^ $116;
 $119 = (($118) + ($107))|0;
 $120 = (($116) + ($113))|0;
 $121 = $120 ^ $116;
 $122 = (($111) - ($121))|0;
 $123 = $122 << 1;
 $124 = (($119) + 1)|0;
 $125 = $124 >>> 2;
 $126 = (($123) + 2048)|0;
 $127 = $126 >> 12;
 $128 = $123 >> 31;
 $129 = (($127) + ($128))|0;
 $130 = $129 ^ $128;
 $131 = (($130) + ($119))|0;
 $132 = (($128) + ($125))|0;
 $133 = $132 ^ $128;
 $134 = (($123) - ($133))|0;
 $135 = $134 << 1;
 $136 = (($131) + 1)|0;
 $137 = $136 >>> 2;
 $138 = (($135) + 8192)|0;
 $139 = $138 >> 14;
 $140 = $135 >> 31;
 $141 = (($139) + ($140))|0;
 $142 = $141 ^ $140;
 $143 = (($142) + ($131))|0;
 $144 = (($140) + ($137))|0;
 $145 = $144 ^ $140;
 $146 = (($135) - ($145))|0;
 $147 = $146 << 1;
 $148 = (($143) + 1)|0;
 $149 = $148 >>> 2;
 $150 = (($147) + 32768)|0;
 $151 = $150 >> 16;
 $152 = $147 >> 31;
 $153 = (($151) + ($152))|0;
 $154 = $153 ^ $152;
 $155 = (($154) + ($143))|0;
 $156 = (($152) + ($149))|0;
 $157 = $156 ^ $152;
 $158 = (($147) - ($157))|0;
 $159 = $158 << 1;
 $160 = (($155) + 1)|0;
 $161 = $160 >>> 2;
 $162 = (($159) + 131072)|0;
 $163 = $162 >> 18;
 $164 = $159 >> 31;
 $165 = (($163) + ($164))|0;
 $166 = $165 ^ $164;
 $167 = (($166) + ($155))|0;
 $168 = (($164) + ($161))|0;
 $169 = $168 ^ $164;
 $170 = (($159) - ($169))|0;
 $171 = $170 << 1;
 $172 = (($167) + 1)|0;
 $173 = $172 >>> 2;
 $174 = (($171) + 524288)|0;
 $175 = $174 >> 20;
 $176 = $171 >> 31;
 $177 = (($175) + ($176))|0;
 $178 = $177 ^ $176;
 $179 = (($178) + ($167))|0;
 $180 = (($176) + ($173))|0;
 $181 = $180 ^ $176;
 $182 = (($171) - ($181))|0;
 $183 = $182 << 1;
 $184 = (($179) + 1)|0;
 $185 = $184 >>> 2;
 $186 = (($183) + 2097152)|0;
 $187 = $186 >> 22;
 $188 = $183 >> 31;
 $189 = (($187) + ($188))|0;
 $190 = $189 ^ $188;
 $191 = (($190) + ($179))|0;
 $192 = (($188) + ($185))|0;
 $193 = $192 ^ $188;
 $194 = (($183) - ($193))|0;
 $195 = $194 << 1;
 $196 = (($191) + 1)|0;
 $197 = $196 >>> 2;
 $198 = (($195) + 8388608)|0;
 $199 = $198 >> 24;
 $200 = $195 >> 31;
 $201 = (($199) + ($200))|0;
 $202 = $201 ^ $200;
 $203 = (($202) + ($191))|0;
 $204 = (($200) + ($197))|0;
 $205 = $204 ^ $200;
 $206 = (($195) - ($205))|0;
 $207 = $206 << 1;
 $208 = (($203) + 1)|0;
 $209 = $208 >>> 2;
 $210 = (($207) + 33554432)|0;
 $211 = $210 >> 26;
 $212 = $207 >> 31;
 $213 = (($211) + ($212))|0;
 $214 = $213 ^ $212;
 $215 = (($214) + ($203))|0;
 $216 = (($212) + ($209))|0;
 $217 = $216 ^ $212;
 $218 = (($207) - ($217))|0;
 $219 = $218 << 1;
 $220 = (($215) + 1)|0;
 $221 = $220 >>> 2;
 $222 = (($219) + 134217728)|0;
 $223 = $222 >> 28;
 $224 = $219 >> 31;
 $225 = (($223) + ($224))|0;
 $226 = $225 ^ $224;
 $227 = (($226) + ($215))|0;
 $228 = (($224) + ($221))|0;
 $229 = $228 ^ $224;
 $230 = (($219) - ($229))|0;
 $231 = $230 << 1;
 $232 = (($231) + 536870912)|0;
 $233 = $232 >> 30;
 $234 = $231 >> 31;
 $235 = (($233) + ($234))|0;
 $236 = $235 ^ $234;
 $237 = (($236) + ($227))|0;
 $238 = 1 << $36;
 $239 = $238 >>> 1;
 $240 = (($237) + ($239))|0;
 $241 = $240 >>> $36;
 return ($241|0);
}
function _qr_ilog($0) {
 $0 = $0|0;
 var $$lobit = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(65535);
 $2 = $1&1;
 $3 = $2 << 4;
 $4 = $0 >>> $3;
 $5 = $4 & 65280;
 $6 = ($5|0)!=(0);
 $7 = $6&1;
 $8 = $7 << 3;
 $9 = $4 >>> $8;
 $10 = $8 | $3;
 $11 = $9 & 240;
 $12 = ($11|0)!=(0);
 $13 = $12&1;
 $14 = $13 << 2;
 $15 = $9 >>> $14;
 $16 = $10 | $14;
 $17 = $15 & 12;
 $18 = ($17|0)!=(0);
 $19 = $18&1;
 $20 = $19 << 1;
 $21 = $15 >>> $20;
 $22 = $16 | $20;
 $23 = $21 >>> 1;
 $$lobit = $23 & 1;
 $24 = $22 | $$lobit;
 $25 = ($21|0)!=(0);
 $26 = $25&1;
 $27 = (($24) + ($26))|0;
 return ($27|0);
}
function __zbar_event_trigger($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 HEAP32[$0>>2] = 1;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(-1);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 HEAP32[$1>>2] = 0;
 $5 = (_write($3,$1,4)|0);
 $6 = ($5|0)<(0);
 if ($6) {
  _perror(136388);
 }
 HEAP32[$2>>2] = -1;
 STACKTOP = sp;return;
}
function __zbar_processor_init($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_calloc(1,36)|0);
 $2 = ((($0)) + 196|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($1)) + 24|0);
 $4 = ((($1)) + 28|0);
 HEAP32[$4>>2] = -1;
 HEAP32[$3>>2] = -1;
 $5 = ((($0)) + 88|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = (_pipe($3)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $20 = HEAP32[$3>>2]|0;
  _add_poll($0,$20,4);
  $21 = HEAP32[$2>>2]|0;
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($21)) + 12|0);
  HEAP32[$23>>2] = $22;
  $24 = ((($21)) + 16|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[$23>>2]|0;
  $27 = $26 << 3;
  $28 = (_realloc($25,$27)|0);
  HEAP32[$24>>2] = $28;
  $29 = ((($21)) + 20|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = HEAP32[$23>>2]|0;
  $32 = $31 << 2;
  $33 = (_realloc($30,$32)|0);
  HEAP32[$29>>2] = $33;
  $34 = HEAP32[$24>>2]|0;
  $35 = ((($21)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $22 << 3;
  _memcpy(($34|0),($36|0),($37|0))|0;
  $38 = HEAP32[$29>>2]|0;
  $39 = ((($21)) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $22 << 2;
  _memcpy(($38|0),($40|0),($41|0))|0;
  $$0 = 0;
  return ($$0|0);
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = ($10|0)==(1381123450);
 if (!($11)) {
  ___assert_fail((134377|0),(134405|0),150,(134420|0));
  // unreachable;
 }
 $12 = (___errno_location()|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($0)) + 12|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($0)) + 16|0);
 HEAP32[$15>>2] = -2;
 $16 = ((($0)) + 20|0);
 HEAP32[$16>>2] = 5;
 $17 = ((($0)) + 24|0);
 HEAP32[$17>>2] = 132965;
 $18 = ((($0)) + 28|0);
 HEAP32[$18>>2] = 132986;
 $19 = (0)>(0);
 if (!($19)) {
  $$0 = -1;
  return ($$0|0);
 }
 (__zbar_error_spew($0,0)|0);
 $$0 = -1;
 return ($$0|0);
}
function _proc_kick_handler($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 $3 = ((($0)) + 196|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (0)>(4);
 if ($5) {
  $6 = HEAP32[32495]|0;
  $7 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = 133109;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $7;
  (_fprintf($6,133089,$vararg_buffer)|0);
 }
 $8 = ((($4)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_read($9,$2,8)|0);
 $11 = ((($0)) + 88|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 if ($13) {
  ___assert_fail((133127|0),(132942|0),225,(133109|0));
  // unreachable;
 } else {
  $14 = HEAP32[$3>>2]|0;
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($14)) + 12|0);
  HEAP32[$16>>2] = $15;
  $17 = ((($14)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$16>>2]|0;
  $20 = $19 << 3;
  $21 = (_realloc($18,$20)|0);
  HEAP32[$17>>2] = $21;
  $22 = ((($14)) + 20|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP32[$16>>2]|0;
  $25 = $24 << 2;
  $26 = (_realloc($23,$25)|0);
  HEAP32[$22>>2] = $26;
  $27 = HEAP32[$17>>2]|0;
  $28 = ((($14)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $15 << 3;
  _memcpy(($27|0),($29|0),($30|0))|0;
  $31 = HEAP32[$22>>2]|0;
  $32 = ((($14)) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $15 << 2;
  _memcpy(($31|0),($33|0),($34|0))|0;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function _add_poll($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 196|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[$5>>2] = $7;
 HEAP32[$3>>2] = $6;
 $8 = (0)>(4);
 if ($8) {
  $9 = HEAP32[32495]|0;
  HEAP32[$vararg_buffer>>2] = 133033;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $6;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $1;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $2;
  (_fprintf($9,133006,$vararg_buffer)|0);
 }
 $10 = ((($5)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$5>>2]|0;
 $13 = $12 << 3;
 $14 = (_realloc($11,$13)|0);
 HEAP32[$10>>2] = $14;
 $15 = ((($5)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$5>>2]|0;
 $18 = $17 << 2;
 $19 = (_realloc($16,$18)|0);
 HEAP32[$15>>2] = $19;
 $20 = HEAP32[$10>>2]|0;
 $21 = (($20) + ($6<<3)|0);
 $22 = $21;
 $23 = $22;
 HEAP32[$23>>2] = 0;
 $24 = (($22) + 4)|0;
 $25 = $24;
 HEAP32[$25>>2] = 0;
 $26 = HEAP32[$10>>2]|0;
 $27 = (($26) + ($6<<3)|0);
 HEAP32[$27>>2] = $1;
 $28 = (((($26) + ($6<<3)|0)) + 4|0);
 HEAP16[$28>>1] = 1;
 $29 = HEAP32[$15>>2]|0;
 $30 = (($29) + ($6<<2)|0);
 HEAP32[$30>>2] = $2;
 $31 = ((($0)) + 116|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(0);
 if ($33) {
  $37 = ((($0)) + 88|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(0);
  if (!($39)) {
   STACKTOP = sp;return;
  }
  $40 = HEAP32[$5>>2]|0;
  $41 = ((($5)) + 12|0);
  HEAP32[$41>>2] = $40;
  $42 = HEAP32[$10>>2]|0;
  $43 = ((($5)) + 16|0);
  HEAP32[$43>>2] = $42;
  $44 = HEAP32[$15>>2]|0;
  $45 = ((($5)) + 20|0);
  HEAP32[$45>>2] = $44;
  STACKTOP = sp;return;
 } else {
  $34 = ((($5)) + 28|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)>(-1);
  if (!($36)) {
   ___assert_fail((133042|0),(133066|0),85,(133033|0));
   // unreachable;
  }
  (_write($35,$3,4)|0);
  STACKTOP = sp;return;
 }
}
function __zbar_processor_enable($0) {
 $0 = $0|0;
 var $$pre$i = 0, $$pre$phi$iZ2D = 0, $$pre$phi17$iZ2D = 0, $$pre15$i = 0, $$pre16$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge$i = 0, $storemerge$in$lcssa$i = 0, $storemerge$in2$i = 0, $storemerge$in2$i$phi = 0, $storemerge$lcssa$i = 0, $storemerge1$i = 0, $storemerge8$i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $1 = sp + 16|0;
 $2 = ((($0)) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_zbar_video_get_fd($3)|0);
 $5 = ($4|0)<(0);
 if ($5) {
  STACKTOP = sp;return 0;
 }
 $6 = ((($0)) + 96|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if (!($8)) {
  _add_poll($0,$4,5);
  STACKTOP = sp;return 0;
 }
 $9 = ((($0)) + 196|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $storemerge1$i = (($11) + -1)|0;
 HEAP32[$1>>2] = $storemerge1$i;
 $12 = ($11|0)>(0);
 do {
  if ($12) {
   $13 = ((($10)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $storemerge$in2$i = $11;$storemerge8$i = $storemerge1$i;
   while(1) {
    $16 = (($14) + ($storemerge8$i<<3)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==($4|0);
    if ($18) {
     label = 9;
     break;
    }
    $storemerge$i = (($storemerge8$i) + -1)|0;
    $15 = ($storemerge8$i|0)>(0);
    if ($15) {
     $storemerge$in2$i$phi = $storemerge8$i;$storemerge8$i = $storemerge$i;$storemerge$in2$i = $storemerge$in2$i$phi;
    } else {
     label = 8;
     break;
    }
   }
   if ((label|0) == 8) {
    HEAP32[$1>>2] = $storemerge$i;
    $storemerge$in$lcssa$i = $storemerge8$i;$storemerge$lcssa$i = $storemerge$i;
    break;
   }
   else if ((label|0) == 9) {
    HEAP32[$1>>2] = $storemerge8$i;
    $storemerge$in$lcssa$i = $storemerge$in2$i;$storemerge$lcssa$i = $storemerge8$i;
    break;
   }
  } else {
   $storemerge$in$lcssa$i = $11;$storemerge$lcssa$i = $storemerge1$i;
  }
 } while(0);
 $19 = (0)>(4);
 if ($19) {
  $20 = HEAP32[32495]|0;
  HEAP32[$vararg_buffer>>2] = 133163;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $storemerge$lcssa$i;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $4;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $11;
  (_fprintf($20,133142,$vararg_buffer)|0);
 }
 $21 = ($storemerge$in$lcssa$i|0)>(0);
 if ($21) {
  $22 = HEAP32[$10>>2]|0;
  $23 = ($storemerge$in$lcssa$i|0)<($22|0);
  if ($23) {
   $24 = (($22) - ($storemerge$lcssa$i))|0;
   $25 = (($24) + -1)|0;
   $26 = ((($10)) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + ($storemerge$lcssa$i<<3)|0);
   $29 = (($27) + ($storemerge$in$lcssa$i<<3)|0);
   $30 = $25 << 3;
   _memmove(($28|0),($29|0),($30|0))|0;
   $31 = ((($10)) + 8|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + ($storemerge$lcssa$i<<2)|0);
   $34 = (($32) + ($storemerge$in$lcssa$i<<2)|0);
   _memmove(($33|0),($34|0),($25|0))|0;
   $$pre$i = HEAP32[$10>>2]|0;
   $$pre$phi$iZ2D = $26;$$pre$phi17$iZ2D = $31;$36 = $$pre$i;
  } else {
   $$pre15$i = ((($10)) + 4|0);
   $$pre16$i = ((($10)) + 8|0);
   $$pre$phi$iZ2D = $$pre15$i;$$pre$phi17$iZ2D = $$pre16$i;$36 = $22;
  }
  $35 = (($36) + -1)|0;
  HEAP32[$10>>2] = $35;
  $37 = HEAP32[$$pre$phi$iZ2D>>2]|0;
  $38 = HEAP32[$10>>2]|0;
  $39 = $38 << 3;
  $40 = (_realloc($37,$39)|0);
  HEAP32[$$pre$phi$iZ2D>>2] = $40;
  $41 = HEAP32[$$pre$phi17$iZ2D>>2]|0;
  $42 = HEAP32[$10>>2]|0;
  $43 = $42 << 2;
  $44 = (_realloc($41,$43)|0);
  HEAP32[$$pre$phi17$iZ2D>>2] = $44;
  HEAP32[$1>>2] = 0;
 }
 $45 = ((($0)) + 116|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)==(0);
 if ($47) {
  $50 = ((($0)) + 88|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)==(0);
  if ($52) {
   $53 = HEAP32[$10>>2]|0;
   $54 = ((($10)) + 12|0);
   HEAP32[$54>>2] = $53;
   $55 = ((($10)) + 4|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ((($10)) + 16|0);
   HEAP32[$57>>2] = $56;
   $58 = ((($10)) + 8|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ((($10)) + 20|0);
   HEAP32[$60>>2] = $59;
  }
 } else {
  $48 = ((($10)) + 28|0);
  $49 = HEAP32[$48>>2]|0;
  (_write($49,$1,4)|0);
 }
 STACKTOP = sp;return 0;
}
function _proc_video_handler($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (__zbar_processor_lock($0)|0);
 $2 = ((($0)) + 96|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = ((($0)) + 44|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_zbar_video_next_image($6)|0);
  $8 = ($7|0)==(0|0);
  if (!($8)) {
   (__zbar_process_image($0,$7)|0);
   (__zbar_processor_unlock($0,0)|0);
   _zbar_image_destroy($7);
   return 0;
  }
 }
 (__zbar_processor_unlock($0,0)|0);
 return 0;
}
function __zbar_video_open($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(1381123450);
 if (!($3)) {
  ___assert_fail((134377|0),(134405|0),150,(134420|0));
  // unreachable;
 }
 $4 = ((($0)) + 16|0);
 HEAP32[$4>>2] = -1;
 $5 = ((($0)) + 20|0);
 HEAP32[$5>>2] = 3;
 $6 = ((($0)) + 24|0);
 HEAP32[$6>>2] = 133175;
 $7 = ((($0)) + 28|0);
 HEAP32[$7>>2] = 133192;
 $8 = (0)>(0);
 if (!($8)) {
  return -1;
 }
 (__zbar_error_spew($0,0)|0);
 return -1;
}
function __zbar_processor_open($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = ($4|0)==(1381123450);
 if (!($5)) {
  ___assert_fail((134377|0),(134405|0),150,(134420|0));
  // unreachable;
 }
 $6 = ((($0)) + 16|0);
 HEAP32[$6>>2] = -1;
 $7 = ((($0)) + 20|0);
 HEAP32[$7>>2] = 3;
 $8 = ((($0)) + 24|0);
 HEAP32[$8>>2] = 133230;
 $9 = ((($0)) + 28|0);
 HEAP32[$9>>2] = 133345;
 $10 = (0)>(0);
 if (!($10)) {
  return -1;
 }
 (__zbar_error_spew($0,0)|0);
 return -1;
}
function __zbar_processor_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1381123450);
 if (!($2)) {
  ___assert_fail((134377|0),(134405|0),150,(134420|0));
  // unreachable;
 }
 $3 = ((($0)) + 16|0);
 HEAP32[$3>>2] = -1;
 $4 = ((($0)) + 20|0);
 HEAP32[$4>>2] = 3;
 $5 = ((($0)) + 24|0);
 HEAP32[$5>>2] = 133251;
 $6 = ((($0)) + 28|0);
 HEAP32[$6>>2] = 133345;
 $7 = (0)>(0);
 if (!($7)) {
  return -1;
 }
 (__zbar_error_spew($0,0)|0);
 return -1;
}
function __zbar_processor_set_size($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)==(1381123450);
 if (!($4)) {
  ___assert_fail((134377|0),(134405|0),150,(134420|0));
  // unreachable;
 }
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = -1;
 $6 = ((($0)) + 20|0);
 HEAP32[$6>>2] = 3;
 $7 = ((($0)) + 24|0);
 HEAP32[$7>>2] = 133273;
 $8 = ((($0)) + 28|0);
 HEAP32[$8>>2] = 133345;
 $9 = (0)>(0);
 if (!($9)) {
  return -1;
 }
 (__zbar_error_spew($0,0)|0);
 return -1;
}
function __zbar_processor_invalidate($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(1381123450);
 if (!($2)) {
  ___assert_fail((134377|0),(134405|0),150,(134420|0));
  // unreachable;
 }
 $3 = ((($0)) + 16|0);
 HEAP32[$3>>2] = -1;
 $4 = ((($0)) + 20|0);
 HEAP32[$4>>2] = 3;
 $5 = ((($0)) + 24|0);
 HEAP32[$5>>2] = 133298;
 $6 = ((($0)) + 28|0);
 HEAP32[$6>>2] = 133345;
 $7 = (0)>(0);
 if (!($7)) {
  return -1;
 }
 (__zbar_error_spew($0,0)|0);
 return -1;
}
function __zbar_window_attach($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)==(1381123450);
 if (!($4)) {
  ___assert_fail((134377|0),(134405|0),150,(134420|0));
  // unreachable;
 }
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = -1;
 $6 = ((($0)) + 20|0);
 HEAP32[$6>>2] = 3;
 $7 = ((($0)) + 24|0);
 HEAP32[$7>>2] = 133325;
 $8 = ((($0)) + 28|0);
 HEAP32[$8>>2] = 133345;
 $9 = (0)>(0);
 if (!($9)) {
  return -1;
 }
 (__zbar_error_spew($0,0)|0);
 return -1;
}
function __zbar_error_spew($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(1381123450);
 if ($3) {
  $4 = HEAP32[32495]|0;
  $5 = (__zbar_error_string($0,0)|0);
  (_fputs($5,$4)|0);
  $6 = ((($0)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (0 - ($7))|0;
  return ($8|0);
 } else {
  ___assert_fail((134377|0),(133385|0),83,(133398|0));
  // unreachable;
 }
 return (0)|0;
}
function __zbar_error_string($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$089 = 0, $$091 = 0, $$093 = 0, $$094 = 0, $$1 = 0, $$192 = 0, $$off = 0, $$pn = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $leninc = 0, $spec$select = 0, $strlen = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(1381123450);
 if (!($3)) {
  ___assert_fail((134377|0),(133385|0),107,(133415|0));
  // unreachable;
 }
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $$off = (($5) + 2)|0;
 $6 = ($$off>>>0)<(5);
 if ($6) {
  $7 = (704 + ($$off<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $$089 = $8;
 } else {
  $$089 = 133434;
 }
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10>>>0)<(4);
 if ($11) {
  $12 = (736 + ($10<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $$094 = $13;
 } else {
  $$094 = 133440;
 }
 $14 = ((($0)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 $spec$select = $16 ? 133440 : $15;
 $17 = ((($0)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18>>>0)<(12);
 if ($19) {
  $20 = (768 + ($18<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $$093 = $21;
 } else {
  $$093 = 133450;
 }
 $22 = (_strlen($spec$select)|0);
 $23 = (($22) + 77)|0;
 $24 = ((($0)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (_realloc($25,$23)|0);
 HEAP32[$24>>2] = $26;
 HEAP32[$vararg_buffer>>2] = $$089;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $$094;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $spec$select;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $$093;
 $27 = (_sprintf($26,832,$vararg_buffer)|0);
 $28 = ($27|0)<(1);
 if ($28) {
  $$1 = 133440;
  STACKTOP = sp;return ($$1|0);
 }
 $29 = ((($0)) + 28|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0|0);
 if ($31) {
  $$192 = $27;
 } else {
  $32 = (_strlen($30)|0);
  $33 = (($32) + ($27))|0;
  $34 = (($33) + 1)|0;
  $35 = (_strstr($30,133464)|0);
  $36 = ($35|0)==(0|0);
  do {
   if ($36) {
    $50 = (_strstr($30,133471)|0);
    $51 = ($50|0)==(0|0);
    if ($51) {
     $52 = (_strstr($30,133474)|0);
     $53 = ($52|0)==(0|0);
     if ($53) {
      $62 = HEAP32[$24>>2]|0;
      $63 = (_realloc($62,$34)|0);
      HEAP32[$24>>2] = $63;
      $64 = (($63) + ($27)|0);
      $65 = HEAP32[$29>>2]|0;
      $strlen = (_strlen($65)|0);
      $leninc = (($strlen) + 1)|0;
      _memcpy(($64|0),($65|0),($leninc|0))|0;
      $$pn = $strlen;
      break;
     }
    }
    $54 = HEAP32[$24>>2]|0;
    $55 = (($33) + 33)|0;
    $56 = (_realloc($54,$55)|0);
    HEAP32[$24>>2] = $56;
    $57 = (($56) + ($27)|0);
    $58 = HEAP32[$29>>2]|0;
    $59 = ((($0)) + 36|0);
    $60 = HEAP32[$59>>2]|0;
    HEAP32[$vararg_buffer7>>2] = $60;
    $61 = (_sprintf($57,$58,$vararg_buffer7)|0);
    $$pn = $61;
   } else {
    $37 = ((($0)) + 32|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($38|0)==(0|0);
    if ($39) {
     $40 = (___strdup(133467)|0);
     HEAP32[$37>>2] = $40;
     $42 = $40;
    } else {
     $42 = $38;
    }
    $41 = HEAP32[$24>>2]|0;
    $43 = (_strlen($42)|0);
    $44 = (($43) + ($34))|0;
    $45 = (_realloc($41,$44)|0);
    HEAP32[$24>>2] = $45;
    $46 = (($45) + ($27)|0);
    $47 = HEAP32[$29>>2]|0;
    $48 = HEAP32[$37>>2]|0;
    HEAP32[$vararg_buffer4>>2] = $48;
    $49 = (_sprintf($46,$47,$vararg_buffer4)|0);
    $$pn = $49;
   }
  } while(0);
  $$091 = (($$pn) + ($27))|0;
  $66 = ($$091|0)>(0);
  if ($66) {
   $$192 = $$091;
  } else {
   $$1 = 133440;
   STACKTOP = sp;return ($$1|0);
  }
 }
 $67 = HEAP32[$17>>2]|0;
 $68 = ($67|0)==(5);
 if ($68) {
  $69 = ((($0)) + 12|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (_strerror($70)|0);
  $72 = HEAP32[$24>>2]|0;
  $73 = (($$192) + 10)|0;
  $74 = (_strlen($71)|0);
  $75 = (($73) + ($74))|0;
  $76 = (_realloc($72,$75)|0);
  HEAP32[$24>>2] = $76;
  $77 = (($76) + ($$192)|0);
  $78 = HEAP32[$69>>2]|0;
  HEAP32[$vararg_buffer10>>2] = $71;
  $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $78;
  (_sprintf($77,133477,$vararg_buffer10)|0);
  $$pre = HEAP32[$24>>2]|0;
  $$1 = $$pre;
  STACKTOP = sp;return ($$1|0);
 } else {
  $79 = HEAP32[$24>>2]|0;
  $80 = (($$192) + 2)|0;
  $81 = (_realloc($79,$80)|0);
  HEAP32[$24>>2] = $81;
  $82 = (($81) + ($$192)|0);
  HEAP8[$82>>0]=10&255;HEAP8[$82+1>>0]=10>>8;
  $$1 = $81;
  STACKTOP = sp;return ($$1|0);
 }
 return (0)|0;
}
function _zbar_image_convert_resize($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$012$i = 0, $$013$i = 0, $$013$i53 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $spec$select$i = 0, $spec$select$i54 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_zbar_image_create()|0);
 HEAP32[$4>>2] = $1;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($4)) + 8|0);
 HEAP32[$6>>2] = $3;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 _zbar_image_set_crop($4,$8,$10,$12,$14);
 $15 = HEAP32[$0>>2]|0;
 $16 = ($15|0)==($1|0);
 if ($16) {
  $17 = ((($0)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==($2|0);
  if ($19) {
   $20 = ((($0)) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==($3|0);
   if ($22) {
    _convert_copy($4,0,$0,0);
    $$0 = $4;
    return ($$0|0);
   }
  }
 }
 $$013$i = 0;
 while(1) {
  $23 = (1024 + (($$013$i*12)|0)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==($15|0);
  if ($25) {
   $$012$i = $23;
   break;
  }
  $26 = $$013$i << 1;
  $27 = $26 | 1;
  $28 = ($24>>>0)<($15>>>0);
  $29 = $28&1;
  $spec$select$i = (($27) + ($29))|0;
  $30 = ($spec$select$i|0)<(31);
  if ($30) {
   $$013$i = $spec$select$i;
  } else {
   $$012$i = 0;
   break;
  }
 }
 $31 = HEAP32[$4>>2]|0;
 $$013$i53 = 0;
 while(1) {
  $32 = (1024 + (($$013$i53*12)|0)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)==($31|0);
  if ($34) {
   break;
  }
  $35 = $$013$i53 << 1;
  $36 = $35 | 1;
  $37 = ($33>>>0)<($31>>>0);
  $38 = $37&1;
  $spec$select$i54 = (($36) + ($38))|0;
  $39 = ($spec$select$i54|0)<(31);
  if ($39) {
   $$013$i53 = $spec$select$i54;
  } else {
   $$0 = 0;
   label = 19;
   break;
  }
 }
 if ((label|0) == 19) {
  return ($$0|0);
 }
 $40 = ($$012$i|0)!=(0|0);
 $41 = ($32|0)!=(0|0);
 $or$cond = $40 & $41;
 if (!($or$cond)) {
  $$0 = 0;
  return ($$0|0);
 }
 $42 = ((($$012$i)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (((1024 + (($$013$i53*12)|0)|0)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($43|0)==($45|0);
 if ($46) {
  $47 = ((($$012$i)) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (((1024 + (($$013$i53*12)|0)|0)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($48|0)==($50|0);
  if ($51) {
   $52 = ((($0)) + 4|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)==($2|0);
   if ($54) {
    $55 = ((($0)) + 8|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ($56|0)==($3|0);
    if ($57) {
     _convert_copy($4,0,$0,0);
     $$0 = $4;
     return ($$0|0);
    }
   }
  }
 }
 $58 = ((((1408 + (($43*48)|0)|0) + ($45<<3)|0)) + 4|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ((($4)) + 40|0);
 HEAP32[$60>>2] = 1;
 FUNCTION_TABLE_viiii[$59 & 15]($4,$32,$0,$$012$i);
 $61 = ((($4)) + 12|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)==(0|0);
 if (!($63)) {
  $$0 = $4;
  return ($$0|0);
 }
 _zbar_image_destroy($4);
 $$0 = 0;
 return ($$0|0);
}
function _convert_copy($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$i = 0, $$0$lcssa$i = 0, $$063$lcssa$i = 0, $$0638$i = 0, $$0638$us$i = 0, $$064$lcssa$i = 0, $$0647$i = 0, $$0647$us$i = 0, $$09$i = 0, $$09$us$i = 0, $$16$i = 0, $$16$us$i = 0, $$25$i = 0, $$25$us$i = 0, $$4$i = 0, $$phi$trans$insert = 0, $$phi$trans$insert30 = 0, $$pre = 0, $$pre$phi34Z2D = 0, $$pre28$i = 0;
 var $$pre31 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, $scevgep$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==($5|0);
 do {
  if ($8) {
   $9 = ((($2)) + 8|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($0)) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($10|0)==($12|0);
   if ($13) {
    $14 = ((($2)) + 12|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ((($0)) + 12|0);
    HEAP32[$16>>2] = $15;
    $17 = ((($2)) + 16|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($0)) + 16|0);
    HEAP32[$19>>2] = $18;
    $20 = ((($0)) + 40|0);
    HEAP32[$20>>2] = 5;
    $21 = ((($0)) + 56|0);
    HEAP32[$21>>2] = $2;
    $22 = ((($2)) + 44|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (($23) + 1)|0;
    HEAP32[$22>>2] = $24;
    $25 = ($23|0)>(-2);
    if ($25) {
     return;
    } else {
     ___assert_fail((134216|0),(134224|0),87,(134240|0));
     // unreachable;
    }
   } else {
    $26 = ($12|0)==($10|0);
    $or$cond$i = $8 & $26;
    if (!($or$cond$i)) {
     $$pre$phi34Z2D = $11;$40 = $12;$41 = $10;
     break;
    }
    $27 = Math_imul($10, $5)|0;
    $28 = ((($0)) + 12|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ((($2)) + 12|0);
    $31 = HEAP32[$30>>2]|0;
    _memcpy(($29|0),($31|0),($27|0))|0;
    return;
   }
  } else {
   $$phi$trans$insert = ((($0)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $$phi$trans$insert30 = ((($2)) + 8|0);
   $$pre31 = HEAP32[$$phi$trans$insert30>>2]|0;
   $$pre$phi34Z2D = $$phi$trans$insert;$40 = $$pre;$41 = $$pre31;
  }
 } while(0);
 $32 = ((($2)) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($0)) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($7>>>0)>($5>>>0);
 $$$i = $36 ? $5 : $7;
 $37 = (($7) - ($5))|0;
 $38 = $36 ? $37 : 0;
 $39 = ($40>>>0)>($41>>>0);
 $$4$i = $39 ? $41 : $40;
 $42 = ($$4$i|0)==(0);
 do {
  if ($42) {
   $$0$lcssa$i = 0;$$063$lcssa$i = $33;$$064$lcssa$i = $35;$59 = $5;
  } else {
   $43 = ($38|0)==(0);
   if ($43) {
    $$0638$us$i = $33;$$0647$us$i = $35;$$09$us$i = 0;
    while(1) {
     _memcpy(($$0647$us$i|0),($$0638$us$i|0),($$$i|0))|0;
     $44 = (($$0647$us$i) + ($$$i)|0);
     $45 = HEAP32[$4>>2]|0;
     $46 = (($$0638$us$i) + ($45)|0);
     $47 = (($$09$us$i) + 1)|0;
     $48 = ($47>>>0)<($$4$i>>>0);
     if ($48) {
      $$0638$us$i = $46;$$0647$us$i = $44;$$09$us$i = $47;
     } else {
      break;
     }
    }
    $57 = Math_imul($$$i, $$4$i)|0;
    $scevgep$i = (($35) + ($57)|0);
    $$0$lcssa$i = $$4$i;$$063$lcssa$i = $46;$$064$lcssa$i = $scevgep$i;$59 = $45;
    break;
   } else {
    $$0638$i = $33;$$0647$i = $35;$$09$i = 0;
    while(1) {
     _memcpy(($$0647$i|0),($$0638$i|0),($$$i|0))|0;
     $49 = (($$0647$i) + ($$$i)|0);
     $50 = HEAP32[$4>>2]|0;
     $51 = (($$0638$i) + ($50)|0);
     $52 = ((($51)) + -1|0);
     $53 = HEAP8[$52>>0]|0;
     _memset(($49|0),($53|0),($38|0))|0;
     $54 = (($49) + ($38)|0);
     $55 = (($$09$i) + 1)|0;
     $56 = ($55>>>0)<($$4$i>>>0);
     if ($56) {
      $$0638$i = $51;$$0647$i = $54;$$09$i = $55;
     } else {
      break;
     }
    }
    $$pre28$i = HEAP32[$4>>2]|0;
    $$0$lcssa$i = $$4$i;$$063$lcssa$i = $51;$$064$lcssa$i = $54;$59 = $$pre28$i;
    break;
   }
  }
 } while(0);
 $58 = (0 - ($59))|0;
 $60 = (($$063$lcssa$i) + ($58)|0);
 $61 = HEAP32[$$pre$phi34Z2D>>2]|0;
 $62 = ($$0$lcssa$i>>>0)<($61>>>0);
 if (!($62)) {
  return;
 }
 $63 = ($38|0)==(0);
 $64 = ((($60)) + -1|0);
 if ($63) {
  $$16$us$i = $$0$lcssa$i;$$25$us$i = $$064$lcssa$i;
  while(1) {
   _memcpy(($$25$us$i|0),($60|0),($$$i|0))|0;
   $65 = (($$25$us$i) + ($$$i)|0);
   $66 = (($$16$us$i) + 1)|0;
   $67 = HEAP32[$$pre$phi34Z2D>>2]|0;
   $68 = ($66>>>0)<($67>>>0);
   if ($68) {
    $$16$us$i = $66;$$25$us$i = $65;
   } else {
    break;
   }
  }
  return;
 } else {
  $$16$i = $$0$lcssa$i;$$25$i = $$064$lcssa$i;
  while(1) {
   _memcpy(($$25$i|0),($60|0),($$$i|0))|0;
   $69 = (($$25$i) + ($$$i)|0);
   $70 = HEAP8[$64>>0]|0;
   _memset(($69|0),($70|0),($38|0))|0;
   $71 = (($69) + ($38)|0);
   $72 = (($$16$i) + 1)|0;
   $73 = HEAP32[$$pre$phi34Z2D>>2]|0;
   $74 = ($72>>>0)<($73>>>0);
   if ($74) {
    $$16$i = $72;$$25$i = $71;
   } else {
    break;
   }
  }
  return;
 }
}
function _convert_uvp_append($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$i = 0, $$0$i = 0, $$0$lcssa$i = 0, $$063$lcssa$i = 0, $$0638$i = 0, $$0638$us$i = 0, $$064$lcssa$i = 0, $$0647$i = 0, $$0647$us$i = 0, $$09$i = 0, $$09$us$i = 0, $$16$i = 0, $$16$us$i = 0, $$25$i = 0, $$25$us$i = 0, $$4$i = 0, $$phi$trans$insert = 0, $$phi$trans$insert42 = 0, $$pre = 0, $$pre$phi45Z2D = 0;
 var $$pre$phi47Z2D = 0, $$pre$phiZ2D = 0, $$pre28$i = 0, $$pre41 = 0, $$pre43 = 0, $$pre44 = 0, $$pre46 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond$i = 0, $phitmp = 0, $scevgep$i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$phi$trans$insert = ((($0)) + 4|0);
  $$pre41 = HEAP32[$$phi$trans$insert>>2]|0;
  $$phi$trans$insert42 = ((($0)) + 8|0);
  $$pre43 = HEAP32[$$phi$trans$insert42>>2]|0;
  $$0$i = 0;$$pre$phi45Z2D = $$phi$trans$insert42;$$pre$phiZ2D = $$phi$trans$insert;$40 = $$pre41;$41 = $$pre43;
 } else {
  $7 = ((($1)) + 8|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $10 = 1 << $9;
  $11 = (($10) + -1)|0;
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $11 & $13;
  $15 = ($14|0)==(0);
  if ($15) {
   $34 = $13;
  } else {
   $16 = (($11) + ($13))|0;
   $17 = (0 - ($10))|0;
   $18 = $16 & $17;
   HEAP32[$12>>2] = $18;
   $34 = $18;
  }
  $19 = ((($7)) + 1|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = 1 << $21;
  $23 = (($22) + -1)|0;
  $24 = ((($0)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $23 & $25;
  $27 = ($26|0)==(0);
  if ($27) {
   $$pre$phi47Z2D = $21;$36 = $25;
  } else {
   $28 = (($23) + ($25))|0;
   $29 = (0 - ($22))|0;
   $30 = $28 & $29;
   HEAP32[$24>>2] = $30;
   $$pre = HEAP8[$19>>0]|0;
   $$pre46 = $$pre&255;
   $$pre$phi47Z2D = $$pre46;$36 = $30;
  }
  $31 = HEAP8[$7>>0]|0;
  $32 = $31&255;
  $33 = $34 >>> $32;
  $35 = $36 >>> $$pre$phi47Z2D;
  $37 = $33 << 1;
  $phitmp = Math_imul($37, $35)|0;
  $$0$i = $phitmp;$$pre$phi45Z2D = $24;$$pre$phiZ2D = $12;$40 = $34;$41 = $36;
 }
 $38 = ((($0)) + 16|0);
 $39 = Math_imul($41, $40)|0;
 $42 = (($39) + ($$0$i))|0;
 HEAP32[$38>>2] = $42;
 $43 = ((($2)) + 16|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($2)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($2)) + 8|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = Math_imul($48, $46)|0;
 $50 = ($44>>>0)<($49>>>0);
 if ($50) {
  ___assert_fail((134117|0),(133826|0),373,(134158|0));
  // unreachable;
 }
 $51 = (0)>(23);
 if ($51) {
  $52 = HEAP32[32495]|0;
  HEAP32[$vararg_buffer>>2] = 134158;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $40;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $41;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $39;
  $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr4>>2] = $42;
  $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
  HEAP32[$vararg_ptr5>>2] = $46;
  $vararg_ptr6 = ((($vararg_buffer)) + 24|0);
  HEAP32[$vararg_ptr6>>2] = $48;
  $vararg_ptr7 = ((($vararg_buffer)) + 28|0);
  HEAP32[$vararg_ptr7>>2] = $44;
  (_fprintf($52,134177,$vararg_buffer)|0);
  $$pre44 = HEAP32[$38>>2]|0;
  $53 = $$pre44;
 } else {
  $53 = $42;
 }
 $54 = (_malloc($53)|0);
 $55 = ((($0)) + 12|0);
 HEAP32[$55>>2] = $54;
 $56 = ($54|0)==(0|0);
 if ($56) {
  STACKTOP = sp;return;
 }
 $57 = HEAP32[$$pre$phiZ2D>>2]|0;
 $58 = HEAP32[$45>>2]|0;
 $59 = ($57|0)==($58|0);
 $60 = HEAP32[$$pre$phi45Z2D>>2]|0;
 $61 = HEAP32[$47>>2]|0;
 $62 = ($60|0)==($61|0);
 $or$cond$i = $59 & $62;
 $63 = ((($2)) + 12|0);
 $64 = HEAP32[$63>>2]|0;
 if ($or$cond$i) {
  _memcpy(($54|0),($64|0),($39|0))|0;
 } else {
  $65 = ($57>>>0)>($58>>>0);
  $$$i = $65 ? $58 : $57;
  $66 = (($57) - ($58))|0;
  $67 = $65 ? $66 : 0;
  $68 = ($60>>>0)>($61>>>0);
  $$4$i = $68 ? $61 : $60;
  $69 = ($$4$i|0)==(0);
  do {
   if ($69) {
    $$0$lcssa$i = 0;$$063$lcssa$i = $64;$$064$lcssa$i = $54;$86 = $58;
   } else {
    $70 = ($67|0)==(0);
    if ($70) {
     $$0638$us$i = $64;$$0647$us$i = $54;$$09$us$i = 0;
     while(1) {
      _memcpy(($$0647$us$i|0),($$0638$us$i|0),($$$i|0))|0;
      $71 = (($$0647$us$i) + ($$$i)|0);
      $72 = HEAP32[$45>>2]|0;
      $73 = (($$0638$us$i) + ($72)|0);
      $74 = (($$09$us$i) + 1)|0;
      $75 = ($74>>>0)<($$4$i>>>0);
      if ($75) {
       $$0638$us$i = $73;$$0647$us$i = $71;$$09$us$i = $74;
      } else {
       break;
      }
     }
     $84 = Math_imul($$$i, $$4$i)|0;
     $scevgep$i = (($54) + ($84)|0);
     $$0$lcssa$i = $$4$i;$$063$lcssa$i = $73;$$064$lcssa$i = $scevgep$i;$86 = $72;
     break;
    } else {
     $$0638$i = $64;$$0647$i = $54;$$09$i = 0;
     while(1) {
      _memcpy(($$0647$i|0),($$0638$i|0),($$$i|0))|0;
      $76 = (($$0647$i) + ($$$i)|0);
      $77 = HEAP32[$45>>2]|0;
      $78 = (($$0638$i) + ($77)|0);
      $79 = ((($78)) + -1|0);
      $80 = HEAP8[$79>>0]|0;
      _memset(($76|0),($80|0),($67|0))|0;
      $81 = (($76) + ($67)|0);
      $82 = (($$09$i) + 1)|0;
      $83 = ($82>>>0)<($$4$i>>>0);
      if ($83) {
       $$0638$i = $78;$$0647$i = $81;$$09$i = $82;
      } else {
       break;
      }
     }
     $$pre28$i = HEAP32[$45>>2]|0;
     $$0$lcssa$i = $$4$i;$$063$lcssa$i = $78;$$064$lcssa$i = $81;$86 = $$pre28$i;
     break;
    }
   }
  } while(0);
  $85 = (0 - ($86))|0;
  $87 = (($$063$lcssa$i) + ($85)|0);
  $88 = HEAP32[$$pre$phi45Z2D>>2]|0;
  $89 = ($$0$lcssa$i>>>0)<($88>>>0);
  if ($89) {
   $90 = ($67|0)==(0);
   $91 = ((($87)) + -1|0);
   if ($90) {
    $$16$us$i = $$0$lcssa$i;$$25$us$i = $$064$lcssa$i;
    while(1) {
     _memcpy(($$25$us$i|0),($87|0),($$$i|0))|0;
     $92 = (($$25$us$i) + ($$$i)|0);
     $93 = (($$16$us$i) + 1)|0;
     $94 = HEAP32[$$pre$phi45Z2D>>2]|0;
     $95 = ($93>>>0)<($94>>>0);
     if ($95) {
      $$16$us$i = $93;$$25$us$i = $92;
     } else {
      break;
     }
    }
   } else {
    $$16$i = $$0$lcssa$i;$$25$i = $$064$lcssa$i;
    while(1) {
     _memcpy(($$25$i|0),($87|0),($$$i|0))|0;
     $96 = (($$25$i) + ($$$i)|0);
     $97 = HEAP8[$91>>0]|0;
     _memset(($96|0),($97|0),($67|0))|0;
     $98 = (($96) + ($67)|0);
     $99 = (($$16$i) + 1)|0;
     $100 = HEAP32[$$pre$phi45Z2D>>2]|0;
     $101 = ($99>>>0)<($100>>>0);
     if ($101) {
      $$16$i = $99;$$25$i = $98;
     } else {
      break;
     }
    }
   }
  }
 }
 $102 = HEAP32[$55>>2]|0;
 $103 = (($102) + ($39)|0);
 $104 = HEAP32[$38>>2]|0;
 $105 = (($104) - ($39))|0;
 _memset(($103|0),-128,($105|0))|0;
 STACKTOP = sp;return;
}
function _convert_yuv_pack($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0$i = 0, $$0$i137 = 0, $$0106174 = 0, $$0106174$us = 0, $$0109173 = 0, $$0109173$us = 0, $$0112172 = 0, $$0112172$us = 0, $$0115171 = 0, $$0115171$us = 0, $$0116$lcssa = 0, $$0116$lcssa$us = 0, $$0116144 = 0, $$0116144$us$us = 0, $$0118170 = 0, $$0118170$us = 0, $$0121169 = 0, $$0121169$us = 0, $$0175 = 0;
 var $$0175$us = 0, $$1$lcssa = 0, $$1$lcssa$us = 0, $$1107$lcssa = 0, $$1107$lcssa$us = 0, $$1107147 = 0, $$1107147$us$us = 0, $$1110$lcssa = 0, $$1110$lcssa$us = 0, $$1110146 = 0, $$1110146$us$us = 0, $$1113$lcssa = 0, $$1113$lcssa$us = 0, $$1113145 = 0, $$1113145$us$us = 0, $$1117160 = 0, $$1117160$us = 0, $$1119 = 0, $$1119$us = 0, $$1122$lcssa = 0;
 var $$1122$lcssa$us = 0, $$1122142 = 0, $$1122142$us$us = 0, $$1125168 = 0, $$1125168$us = 0, $$1130167 = 0, $$1130167$us = 0, $$1148 = 0, $$1148$us$us = 0, $$136 = 0, $$2 = 0, $$2$us$us = 0, $$2108 = 0, $$2108$us$us = 0, $$2111 = 0, $$2111$us$us = 0, $$2114 = 0, $$2114$us$us = 0, $$2120$lcssa = 0, $$2120$lcssa$us = 0;
 var $$2120143 = 0, $$2120143$us$us = 0, $$2123 = 0, $$2123$us$us = 0, $$2126 = 0, $$2126$us = 0, $$2131 = 0, $$2131$us = 0, $$3 = 0, $$3$us$us = 0, $$3127$lcssa = 0, $$3127$lcssa$us = 0, $$3127141 = 0, $$3127141$us$us = 0, $$3132$lcssa = 0, $$3132$lcssa$us = 0, $$3132140 = 0, $$3132140$us$us = 0, $$4$lcssa = 0, $$4$lcssa$us = 0;
 var $$4128 = 0, $$4128$us$us = 0, $$4133 = 0, $$4133$us$us = 0, $$4159 = 0, $$4159$us = 0, $$5$lcssa = 0, $$5$lcssa$us = 0, $$5134$lcssa = 0, $$5134$lcssa$us = 0, $$5134157 = 0, $$5134157$us = 0, $$5158 = 0, $$5158$us = 0, $$6 = 0, $$6$us = 0, $$6135 = 0, $$6135$us = 0, $$phi$trans$insert = 0, $$phi$trans$insert211 = 0;
 var $$pre = 0, $$pre$phi219Z2D = 0, $$pre$phi221Z2D = 0, $$pre210 = 0, $$pre212 = 0, $$pre214 = 0, $$pre217 = 0, $$pre220 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp = 0, $spec$select = 0, $spec$select$us = 0, $spec$select139 = 0, $spec$select139$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $31 = ((($0)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($0)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = Math_imul($34, $32)|0;
  $$0$i137 = 0;$115 = $33;$141 = $31;$186 = $32;$45 = $35;$93 = $34;
 } else {
  $7 = ((($1)) + 8|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $10 = 1 << $9;
  $11 = (($10) + -1)|0;
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $11 & $13;
  $15 = ($14|0)==(0);
  if ($15) {
   $37 = $13;
  } else {
   $16 = (($11) + ($13))|0;
   $17 = (0 - ($10))|0;
   $18 = $16 & $17;
   HEAP32[$12>>2] = $18;
   $37 = $18;
  }
  $19 = ((($7)) + 1|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = 1 << $21;
  $23 = (($22) + -1)|0;
  $24 = ((($0)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $23 & $25;
  $27 = ($26|0)==(0);
  if ($27) {
   $$pre$phi221Z2D = $21;$38 = $25;
  } else {
   $28 = (($23) + ($25))|0;
   $29 = (0 - ($22))|0;
   $30 = $28 & $29;
   HEAP32[$24>>2] = $30;
   $$pre = HEAP8[$19>>0]|0;
   $$pre220 = $$pre&255;
   $$pre$phi221Z2D = $$pre220;$38 = $30;
  }
  $36 = Math_imul($38, $37)|0;
  $39 = HEAP8[$7>>0]|0;
  $40 = $39&255;
  $41 = $37 >>> $40;
  $42 = $38 >>> $$pre$phi221Z2D;
  $43 = $41 << 1;
  $phitmp = Math_imul($43, $42)|0;
  $$0$i137 = $phitmp;$115 = $24;$141 = $12;$186 = $37;$45 = $36;$93 = $38;
 }
 $44 = (($$0$i137) + ($45))|0;
 $46 = ((($0)) + 16|0);
 HEAP32[$46>>2] = $44;
 $47 = (_malloc($44)|0);
 $48 = ((($0)) + 12|0);
 HEAP32[$48>>2] = $47;
 $49 = ($47|0)==(0|0);
 if ($49) {
  return;
 }
 $50 = ((($3)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)==(0);
 $$phi$trans$insert = ((($2)) + 4|0);
 $$pre210 = HEAP32[$$phi$trans$insert>>2]|0;
 if ($52) {
  $$phi$trans$insert211 = ((($2)) + 8|0);
  $$pre212 = HEAP32[$$phi$trans$insert211>>2]|0;
  $$0$i = 0;$$pre$phi219Z2D = $$phi$trans$insert211;$65 = $$pre212;
 } else {
  $53 = ((($3)) + 8|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = $$pre210 >>> $55;
  $57 = ((($2)) + 8|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ((($53)) + 1|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = $58 >>> $61;
  $63 = Math_imul($62, $56)|0;
  $$0$i = $63;$$pre$phi219Z2D = $57;$65 = $58;
 }
 $64 = Math_imul($65, $$pre210)|0;
 $66 = ((($2)) + 16|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ($64*3)|0;
 $69 = ($67>>>0)<($68>>>0);
 if ($69) {
  ___assert_fail((134068|0),(133826|0),403,(134100|0));
  // unreachable;
 }
 $70 = ((($1)) + 8|0);
 $71 = ((($70)) + 2|0);
 $72 = HEAP8[$71>>0]|0;
 $73 = ((($3)) + 8|0);
 $74 = ((($73)) + 2|0);
 $75 = HEAP8[$74>>0]|0;
 $76 = $75 ^ $72;
 $77 = ((($2)) + 12|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = $76 & 1;
 $80 = ($79<<24>>24)==(0);
 $81 = (($78) + ($64)|0);
 $82 = (($81) + ($$0$i)|0);
 $$ = $80 ? $81 : $82;
 $$136 = $80 ? $82 : $81;
 $83 = HEAP8[$73>>0]|0;
 $84 = $83&255;
 $85 = 1 << $84;
 $86 = (($85) + -1)|0;
 $87 = ((($73)) + 1|0);
 $88 = HEAP8[$87>>0]|0;
 $89 = $88&255;
 $90 = 1 << $89;
 $91 = (($90) + -1)|0;
 $92 = ($93|0)==(0);
 if ($92) {
  return;
 }
 $94 = $$pre210 >>> $84;
 $95 = $72 & 2;
 $96 = (0 - ($94))|0;
 $97 = ($95<<24>>24)==(0);
 if ($97) {
  $$0106174$us = -128;$$0109173$us = 0;$$0112172$us = 0;$$0115171$us = 0;$$0118170$us = $78;$$0121169$us = $47;$$0175$us = -128;$$1125168$us = $$136;$$1130167$us = $$;$101 = $$pre210;$110 = $186;
  while(1) {
   $98 = HEAP32[$$pre$phi219Z2D>>2]|0;
   $99 = ($$0115171$us>>>0)<($98>>>0);
   if ($99) {
    $105 = $$0115171$us & $91;
    $106 = ($105|0)==(0);
    $107 = (($$1130167$us) + ($96)|0);
    $108 = (($$1125168$us) + ($96)|0);
    $spec$select$us = $106 ? $$1130167$us : $107;
    $spec$select139$us = $106 ? $$1125168$us : $108;
    $$1119$us = $$0118170$us;$$2126$us = $spec$select139$us;$$2131$us = $spec$select$us;
   } else {
    $100 = (0 - ($101))|0;
    $102 = (($$0118170$us) + ($100)|0);
    $103 = (($$1130167$us) + ($96)|0);
    $104 = (($$1125168$us) + ($96)|0);
    $$1119$us = $102;$$2126$us = $104;$$2131$us = $103;
   }
   $109 = ($110|0)==(0);
   if ($109) {
    $$0116$lcssa$us = 0;$$1$lcssa$us = $$0175$us;$$1107$lcssa$us = $$0106174$us;$$1110$lcssa$us = $$0109173$us;$$1113$lcssa$us = $$0112172$us;$$1122$lcssa$us = $$0121169$us;$$2120$lcssa$us = $$1119$us;$$3127$lcssa$us = $$2126$us;$$3132$lcssa$us = $$2131$us;$112 = $101;$187 = 0;
   } else {
    $$0116144$us$us = 0;$$1107147$us$us = $$0106174$us;$$1110146$us$us = $$0109173$us;$$1113145$us$us = $$0112172$us;$$1122142$us$us = $$0121169$us;$$1148$us$us = $$0175$us;$$2120143$us$us = $$1119$us;$$3127141$us$us = $$2126$us;$$3132140$us$us = $$2131$us;$125 = $101;
    while(1) {
     $124 = ($$0116144$us$us>>>0)<($125>>>0);
     if ($124) {
      $126 = ((($$2120143$us$us)) + 1|0);
      $127 = HEAP8[$$2120143$us$us>>0]|0;
      $128 = ((($$2120143$us$us)) + 2|0);
      $129 = HEAP8[$126>>0]|0;
      $130 = $$0116144$us$us & $86;
      $131 = ($130|0)==(0);
      if ($131) {
       $132 = ((($$3132140$us$us)) + 1|0);
       $133 = HEAP8[$$3132140$us$us>>0]|0;
       $134 = ((($$3127141$us$us)) + 1|0);
       $135 = HEAP8[$$3127141$us$us>>0]|0;
       $$2$us$us = $135;$$2108$us$us = $133;$$2111$us$us = $129;$$2114$us$us = $127;$$3$us$us = $128;$$4128$us$us = $134;$$4133$us$us = $132;
      } else {
       $$2$us$us = $$1148$us$us;$$2108$us$us = $$1107147$us$us;$$2111$us$us = $129;$$2114$us$us = $127;$$3$us$us = $128;$$4128$us$us = $$3127141$us$us;$$4133$us$us = $$3132140$us$us;
      }
     } else {
      $$2$us$us = $$1148$us$us;$$2108$us$us = $$1107147$us$us;$$2111$us$us = $$1110146$us$us;$$2114$us$us = $$1113145$us$us;$$3$us$us = $$2120143$us$us;$$4128$us$us = $$3127141$us$us;$$4133$us$us = $$3132140$us$us;
     }
     $136 = ((($$1122142$us$us)) + 1|0);
     HEAP8[$$1122142$us$us>>0] = $$2114$us$us;
     $137 = ((($$1122142$us$us)) + 2|0);
     HEAP8[$136>>0] = $$2108$us$us;
     $138 = ((($$1122142$us$us)) + 3|0);
     HEAP8[$137>>0] = $$2111$us$us;
     HEAP8[$138>>0] = $$2$us$us;
     $$2123$us$us = ((($$1122142$us$us)) + 4|0);
     $139 = (($$0116144$us$us) + 2)|0;
     $140 = HEAP32[$141>>2]|0;
     $142 = ($139>>>0)<($140>>>0);
     $$pre217 = HEAP32[$$phi$trans$insert>>2]|0;
     if ($142) {
      $$0116144$us$us = $139;$$1107147$us$us = $$2108$us$us;$$1110146$us$us = $$2111$us$us;$$1113145$us$us = $$2114$us$us;$$1122142$us$us = $$2123$us$us;$$1148$us$us = $$2$us$us;$$2120143$us$us = $$3$us$us;$$3127141$us$us = $$4128$us$us;$$3132140$us$us = $$4133$us$us;$125 = $$pre217;
     } else {
      $$0116$lcssa$us = $139;$$1$lcssa$us = $$2$us$us;$$1107$lcssa$us = $$2108$us$us;$$1110$lcssa$us = $$2111$us$us;$$1113$lcssa$us = $$2114$us$us;$$1122$lcssa$us = $$2123$us$us;$$2120$lcssa$us = $$3$us$us;$$3127$lcssa$us = $$4128$us$us;$$3132$lcssa$us = $$4133$us$us;$112 = $$pre217;$187 = $140;
      break;
     }
    }
   }
   $111 = ($$0116$lcssa$us>>>0)<($112>>>0);
   if ($111) {
    $$1117160$us = $$0116$lcssa$us;$$4159$us = $$2120$lcssa$us;$$5134157$us = $$3132$lcssa$us;$$5158$us = $$3127$lcssa$us;
    while(1) {
     $117 = ((($$4159$us)) + 2|0);
     $118 = $$1117160$us & $86;
     $119 = ($118|0)==(0);
     $120 = ((($$5134157$us)) + 1|0);
     $121 = ((($$5158$us)) + 1|0);
     $$6135$us = $119 ? $120 : $$5134157$us;
     $$6$us = $119 ? $121 : $$5158$us;
     $122 = (($$1117160$us) + 2)|0;
     $123 = ($122>>>0)<($112>>>0);
     if ($123) {
      $$1117160$us = $122;$$4159$us = $117;$$5134157$us = $$6135$us;$$5158$us = $$6$us;
     } else {
      $$4$lcssa$us = $117;$$5$lcssa$us = $$6$us;$$5134$lcssa$us = $$6135$us;
      break;
     }
    }
   } else {
    $$4$lcssa$us = $$2120$lcssa$us;$$5$lcssa$us = $$3127$lcssa$us;$$5134$lcssa$us = $$3132$lcssa$us;
   }
   $113 = (($$0115171$us) + 1)|0;
   $114 = HEAP32[$115>>2]|0;
   $116 = ($113>>>0)<($114>>>0);
   if ($116) {
    $$0106174$us = $$1107$lcssa$us;$$0109173$us = $$1110$lcssa$us;$$0112172$us = $$1113$lcssa$us;$$0115171$us = $113;$$0118170$us = $$4$lcssa$us;$$0121169$us = $$1122$lcssa$us;$$0175$us = $$1$lcssa$us;$$1125168$us = $$5$lcssa$us;$$1130167$us = $$5134$lcssa$us;$101 = $112;$110 = $187;
   } else {
    break;
   }
  }
  return;
 } else {
  $$0106174 = -128;$$0109173 = 0;$$0112172 = 0;$$0115171 = 0;$$0118170 = $78;$$0121169 = $47;$$0175 = -128;$$1125168 = $$136;$$1130167 = $$;$146 = $$pre210;$155 = $186;
  while(1) {
   $143 = HEAP32[$$pre$phi219Z2D>>2]|0;
   $144 = ($$0115171>>>0)<($143>>>0);
   if ($144) {
    $150 = $$0115171 & $91;
    $151 = ($150|0)==(0);
    $152 = (($$1130167) + ($96)|0);
    $153 = (($$1125168) + ($96)|0);
    $spec$select = $151 ? $$1130167 : $152;
    $spec$select139 = $151 ? $$1125168 : $153;
    $$1119 = $$0118170;$$2126 = $spec$select139;$$2131 = $spec$select;
   } else {
    $145 = (0 - ($146))|0;
    $147 = (($$0118170) + ($145)|0);
    $148 = (($$1130167) + ($96)|0);
    $149 = (($$1125168) + ($96)|0);
    $$1119 = $147;$$2126 = $149;$$2131 = $148;
   }
   $154 = ($155|0)==(0);
   if ($154) {
    $$0116$lcssa = 0;$$1$lcssa = $$0175;$$1107$lcssa = $$0106174;$$1110$lcssa = $$0109173;$$1113$lcssa = $$0112172;$$1122$lcssa = $$0121169;$$2120$lcssa = $$1119;$$3127$lcssa = $$2126;$$3132$lcssa = $$2131;$175 = $146;$188 = 0;
   } else {
    $$0116144 = 0;$$1107147 = $$0106174;$$1110146 = $$0109173;$$1113145 = $$0112172;$$1122142 = $$0121169;$$1148 = $$0175;$$2120143 = $$1119;$$3127141 = $$2126;$$3132140 = $$2131;$157 = $146;
    while(1) {
     $156 = ($$0116144>>>0)<($157>>>0);
     if ($156) {
      $158 = ((($$2120143)) + 1|0);
      $159 = HEAP8[$$2120143>>0]|0;
      $160 = ((($$2120143)) + 2|0);
      $161 = HEAP8[$158>>0]|0;
      $162 = $$0116144 & $86;
      $163 = ($162|0)==(0);
      if ($163) {
       $164 = ((($$3132140)) + 1|0);
       $165 = HEAP8[$$3132140>>0]|0;
       $166 = ((($$3127141)) + 1|0);
       $167 = HEAP8[$$3127141>>0]|0;
       $$2 = $167;$$2108 = $165;$$2111 = $161;$$2114 = $159;$$3 = $160;$$4128 = $166;$$4133 = $164;
      } else {
       $$2 = $$1148;$$2108 = $$1107147;$$2111 = $161;$$2114 = $159;$$3 = $160;$$4128 = $$3127141;$$4133 = $$3132140;
      }
     } else {
      $$2 = $$1148;$$2108 = $$1107147;$$2111 = $$1110146;$$2114 = $$1113145;$$3 = $$2120143;$$4128 = $$3127141;$$4133 = $$3132140;
     }
     $168 = ((($$1122142)) + 1|0);
     HEAP8[$$1122142>>0] = $$2108;
     $169 = ((($$1122142)) + 2|0);
     HEAP8[$168>>0] = $$2114;
     $170 = ((($$1122142)) + 3|0);
     HEAP8[$169>>0] = $$2;
     HEAP8[$170>>0] = $$2111;
     $$2123 = ((($$1122142)) + 4|0);
     $171 = (($$0116144) + 2)|0;
     $172 = HEAP32[$141>>2]|0;
     $173 = ($171>>>0)<($172>>>0);
     $$pre214 = HEAP32[$$phi$trans$insert>>2]|0;
     if ($173) {
      $$0116144 = $171;$$1107147 = $$2108;$$1110146 = $$2111;$$1113145 = $$2114;$$1122142 = $$2123;$$1148 = $$2;$$2120143 = $$3;$$3127141 = $$4128;$$3132140 = $$4133;$157 = $$pre214;
     } else {
      $$0116$lcssa = $171;$$1$lcssa = $$2;$$1107$lcssa = $$2108;$$1110$lcssa = $$2111;$$1113$lcssa = $$2114;$$1122$lcssa = $$2123;$$2120$lcssa = $$3;$$3127$lcssa = $$4128;$$3132$lcssa = $$4133;$175 = $$pre214;$188 = $172;
      break;
     }
    }
   }
   $174 = ($$0116$lcssa>>>0)<($175>>>0);
   if ($174) {
    $$1117160 = $$0116$lcssa;$$4159 = $$2120$lcssa;$$5134157 = $$3132$lcssa;$$5158 = $$3127$lcssa;
    while(1) {
     $176 = ((($$4159)) + 2|0);
     $177 = $$1117160 & $86;
     $178 = ($177|0)==(0);
     $179 = ((($$5134157)) + 1|0);
     $180 = ((($$5158)) + 1|0);
     $$6135 = $178 ? $179 : $$5134157;
     $$6 = $178 ? $180 : $$5158;
     $181 = (($$1117160) + 2)|0;
     $182 = ($181>>>0)<($175>>>0);
     if ($182) {
      $$1117160 = $181;$$4159 = $176;$$5134157 = $$6135;$$5158 = $$6;
     } else {
      $$4$lcssa = $176;$$5$lcssa = $$6;$$5134$lcssa = $$6135;
      break;
     }
    }
   } else {
    $$4$lcssa = $$2120$lcssa;$$5$lcssa = $$3127$lcssa;$$5134$lcssa = $$3132$lcssa;
   }
   $183 = (($$0115171) + 1)|0;
   $184 = HEAP32[$115>>2]|0;
   $185 = ($183>>>0)<($184>>>0);
   if ($185) {
    $$0106174 = $$1107$lcssa;$$0109173 = $$1110$lcssa;$$0112172 = $$1113$lcssa;$$0115171 = $183;$$0118170 = $$4$lcssa;$$0121169 = $$1122$lcssa;$$0175 = $$1$lcssa;$$1125168 = $$5$lcssa;$$1130167 = $$5134$lcssa;$146 = $175;$155 = $188;
   } else {
    break;
   }
  }
  return;
 }
}
function _convert_yuvp_to_rgb($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$i = 0, $$07897 = 0, $$08096 = 0, $$081$lcssa = 0, $$08187 = 0, $$08295 = 0, $$098 = 0, $$1$lcssa = 0, $$179$lcssa = 0, $$17988 = 0, $$183 = 0, $$189 = 0, $$2 = 0, $$284$lcssa = 0, $$28486 = 0, $$3 = 0, $$4 = 0, $$lcssa = 0, $$phi$trans$insert = 0, $$phi$trans$insert105 = 0;
 var $$pre = 0, $$pre$phi108Z2D = 0, $$pre106 = 0, $$pre107 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = Math_imul($7, $5)|0;
 $9 = ((($1)) + 8|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = Math_imul($8, $11)|0;
 $13 = ((($0)) + 16|0);
 HEAP32[$13>>2] = $12;
 $14 = (_malloc($12)|0);
 $15 = ((($0)) + 12|0);
 HEAP32[$15>>2] = $14;
 $16 = ($14|0)==(0|0);
 if ($16) {
  return;
 }
 $17 = ((($9)) + 1|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $19 >>> 5;
 $21 = $19 & 31;
 $22 = ((($9)) + 2|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 >>> 5;
 $26 = $24 & 31;
 $27 = ((($9)) + 3|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $29 >>> 5;
 $31 = $29 & 31;
 $32 = ((($3)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0);
 $$phi$trans$insert = ((($2)) + 4|0);
 $$pre = HEAP32[$$phi$trans$insert>>2]|0;
 if ($34) {
  $$phi$trans$insert105 = ((($2)) + 8|0);
  $$pre106 = HEAP32[$$phi$trans$insert105>>2]|0;
  $$0$i = 0;$$pre$phi108Z2D = $$phi$trans$insert105;$47 = $$pre106;
 } else {
  $35 = ((($3)) + 8|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = $$pre >>> $37;
  $39 = ((($2)) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ((($35)) + 1|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = $40 >>> $43;
  $45 = $38 << 1;
  $phitmp = Math_imul($45, $44)|0;
  $$0$i = $phitmp;$$pre$phi108Z2D = $39;$47 = $40;
 }
 $46 = Math_imul($47, $$pre)|0;
 $48 = ((($2)) + 16|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (($46) + ($$0$i))|0;
 $51 = ($49>>>0)<($50>>>0);
 if ($51) {
  ___assert_fail((134016|0),(133826|0),599,(134048|0));
  // unreachable;
 }
 $52 = ($7|0)==(0);
 if ($52) {
  return;
 }
 $53 = ((($2)) + 12|0);
 $54 = HEAP32[$53>>2]|0;
 $$07897 = 0;$$08096 = 0;$$08295 = $54;$$098 = $14;$58 = $$pre;$61 = $5;$98 = $7;
 while(1) {
  $55 = HEAP32[$$pre$phi108Z2D>>2]|0;
  $56 = ($$08096>>>0)<($55>>>0);
  $57 = (0 - ($58))|0;
  $59 = (($$08295) + ($57)|0);
  $$183 = $56 ? $$08295 : $59;
  $60 = ($61|0)==(0);
  $62 = ($58|0)!=(0);
  if ($60) {
   $$081$lcssa = 0;$$1$lcssa = $$098;$$179$lcssa = $$07897;$$284$lcssa = $$183;$$lcssa = $62;$93 = $58;$97 = $98;$99 = 0;
  } else {
   $$08187 = 0;$$17988 = $$07897;$$189 = $$098;$$28486 = $$183;$100 = $62;
   while(1) {
    if ($100) {
     $63 = ((($$28486)) + 1|0);
     $64 = HEAP8[$$28486>>0]|0;
     $65 = $64&255;
     $66 = $65 >>> $20;
     $67 = $66 << $21;
     $68 = $65 >>> $25;
     $69 = $68 << $26;
     $70 = $67 | $69;
     $71 = $65 >>> $30;
     $72 = $71 << $31;
     $73 = $70 | $72;
     $$2 = $73;$$3 = $63;
    } else {
     $$2 = $$17988;$$3 = $$28486;
    }
    $74 = HEAP8[$9>>0]|0;
    switch ($74<<24>>24) {
    case 3:  {
     $75 = $$2&255;
     HEAP8[$$189>>0] = $75;
     $76 = $$2 >>> 8;
     $77 = $76&255;
     $78 = ((($$189)) + 1|0);
     HEAP8[$78>>0] = $77;
     $79 = $$2 >>> 16;
     $80 = $79&255;
     $81 = ((($$189)) + 2|0);
     HEAP8[$81>>0] = $80;
     break;
    }
    case 4:  {
     HEAP32[$$189>>2] = $$2;
     break;
    }
    case 2:  {
     $82 = $$2&65535;
     HEAP16[$$189>>1] = $82;
     break;
    }
    default: {
     $83 = $$2&255;
     HEAP8[$$189>>0] = $83;
    }
    }
    $84 = HEAP8[$9>>0]|0;
    $85 = $84&255;
    $86 = (($$189) + ($85)|0);
    $87 = (($$08187) + 1)|0;
    $88 = HEAP32[$4>>2]|0;
    $89 = ($87>>>0)<($88>>>0);
    $90 = HEAP32[$$phi$trans$insert>>2]|0;
    $91 = ($90>>>0)>($87>>>0);
    if ($89) {
     $$08187 = $87;$$17988 = $$2;$$189 = $86;$$28486 = $$3;$100 = $91;
    } else {
     break;
    }
   }
   $$pre107 = HEAP32[$6>>2]|0;
   $$081$lcssa = $87;$$1$lcssa = $86;$$179$lcssa = $$2;$$284$lcssa = $$3;$$lcssa = $91;$93 = $90;$97 = $$pre107;$99 = $88;
  }
  $92 = (($93) - ($$081$lcssa))|0;
  $94 = (($$284$lcssa) + ($92)|0);
  $$4 = $$lcssa ? $94 : $$284$lcssa;
  $95 = (($$08096) + 1)|0;
  $96 = ($95>>>0)<($97>>>0);
  if ($96) {
   $$07897 = $$179$lcssa;$$08096 = $95;$$08295 = $$4;$$098 = $$1$lcssa;$58 = $93;$61 = $99;$98 = $97;
  } else {
   break;
  }
 }
 return;
}
function _convert_uvp_resample($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$i = 0, $$0$i = 0, $$0$lcssa$i = 0, $$063$lcssa$i = 0, $$0638$i = 0, $$0638$us$i = 0, $$064$lcssa$i = 0, $$0647$i = 0, $$0647$us$i = 0, $$09$i = 0, $$09$us$i = 0, $$16$i = 0, $$16$us$i = 0, $$25$i = 0, $$25$us$i = 0, $$4$i = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre28$i = 0, $$pre33 = 0;
 var $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond$i = 0, $phitmp = 0, $scevgep$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $31 = ((($0)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($0)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = Math_imul($34, $32)|0;
  $$0$i = 0;$45 = $35;$53 = $32;$57 = $34;$84 = $33;
 } else {
  $7 = ((($1)) + 8|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $10 = 1 << $9;
  $11 = (($10) + -1)|0;
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $11 & $13;
  $15 = ($14|0)==(0);
  if ($15) {
   $37 = $13;
  } else {
   $16 = (($11) + ($13))|0;
   $17 = (0 - ($10))|0;
   $18 = $16 & $17;
   HEAP32[$12>>2] = $18;
   $37 = $18;
  }
  $19 = ((($7)) + 1|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = 1 << $21;
  $23 = (($22) + -1)|0;
  $24 = ((($0)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $23 & $25;
  $27 = ($26|0)==(0);
  if ($27) {
   $$pre$phiZ2D = $21;$38 = $25;
  } else {
   $28 = (($23) + ($25))|0;
   $29 = (0 - ($22))|0;
   $30 = $28 & $29;
   HEAP32[$24>>2] = $30;
   $$pre = HEAP8[$19>>0]|0;
   $$pre33 = $$pre&255;
   $$pre$phiZ2D = $$pre33;$38 = $30;
  }
  $36 = Math_imul($38, $37)|0;
  $39 = HEAP8[$7>>0]|0;
  $40 = $39&255;
  $41 = $37 >>> $40;
  $42 = $38 >>> $$pre$phiZ2D;
  $43 = $41 << 1;
  $phitmp = Math_imul($43, $42)|0;
  $$0$i = $phitmp;$45 = $36;$53 = $37;$57 = $38;$84 = $24;
 }
 $44 = (($$0$i) + ($45))|0;
 $46 = ((($0)) + 16|0);
 HEAP32[$46>>2] = $44;
 $47 = (_malloc($44)|0);
 $48 = ((($0)) + 12|0);
 HEAP32[$48>>2] = $47;
 $49 = ($47|0)==(0|0);
 if ($49) {
  return;
 }
 $50 = ((($2)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($53|0)==($51|0);
 $54 = ((($2)) + 8|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($57|0)==($55|0);
 $or$cond$i = $52 & $56;
 $58 = ((($2)) + 12|0);
 $59 = HEAP32[$58>>2]|0;
 if ($or$cond$i) {
  _memcpy(($47|0),($59|0),($45|0))|0;
 } else {
  $60 = ($53>>>0)>($51>>>0);
  $$$i = $60 ? $51 : $53;
  $61 = (($53) - ($51))|0;
  $62 = $60 ? $61 : 0;
  $63 = ($57>>>0)>($55>>>0);
  $$4$i = $63 ? $55 : $57;
  $64 = ($$4$i|0)==(0);
  do {
   if ($64) {
    $$0$lcssa$i = 0;$$063$lcssa$i = $59;$$064$lcssa$i = $47;$81 = $51;
   } else {
    $65 = ($62|0)==(0);
    if ($65) {
     $$0638$us$i = $59;$$0647$us$i = $47;$$09$us$i = 0;
     while(1) {
      _memcpy(($$0647$us$i|0),($$0638$us$i|0),($$$i|0))|0;
      $66 = (($$0647$us$i) + ($$$i)|0);
      $67 = HEAP32[$50>>2]|0;
      $68 = (($$0638$us$i) + ($67)|0);
      $69 = (($$09$us$i) + 1)|0;
      $70 = ($69>>>0)<($$4$i>>>0);
      if ($70) {
       $$0638$us$i = $68;$$0647$us$i = $66;$$09$us$i = $69;
      } else {
       break;
      }
     }
     $79 = Math_imul($$$i, $$4$i)|0;
     $scevgep$i = (($47) + ($79)|0);
     $$0$lcssa$i = $$4$i;$$063$lcssa$i = $68;$$064$lcssa$i = $scevgep$i;$81 = $67;
     break;
    } else {
     $$0638$i = $59;$$0647$i = $47;$$09$i = 0;
     while(1) {
      _memcpy(($$0647$i|0),($$0638$i|0),($$$i|0))|0;
      $71 = (($$0647$i) + ($$$i)|0);
      $72 = HEAP32[$50>>2]|0;
      $73 = (($$0638$i) + ($72)|0);
      $74 = ((($73)) + -1|0);
      $75 = HEAP8[$74>>0]|0;
      _memset(($71|0),($75|0),($62|0))|0;
      $76 = (($71) + ($62)|0);
      $77 = (($$09$i) + 1)|0;
      $78 = ($77>>>0)<($$4$i>>>0);
      if ($78) {
       $$0638$i = $73;$$0647$i = $76;$$09$i = $77;
      } else {
       break;
      }
     }
     $$pre28$i = HEAP32[$50>>2]|0;
     $$0$lcssa$i = $$4$i;$$063$lcssa$i = $73;$$064$lcssa$i = $76;$81 = $$pre28$i;
     break;
    }
   }
  } while(0);
  $80 = (0 - ($81))|0;
  $82 = (($$063$lcssa$i) + ($80)|0);
  $83 = HEAP32[$84>>2]|0;
  $85 = ($$0$lcssa$i>>>0)<($83>>>0);
  if ($85) {
   $86 = ($62|0)==(0);
   $87 = ((($82)) + -1|0);
   if ($86) {
    $$16$us$i = $$0$lcssa$i;$$25$us$i = $$064$lcssa$i;
    while(1) {
     _memcpy(($$25$us$i|0),($82|0),($$$i|0))|0;
     $88 = (($$25$us$i) + ($$$i)|0);
     $89 = (($$16$us$i) + 1)|0;
     $90 = HEAP32[$84>>2]|0;
     $91 = ($89>>>0)<($90>>>0);
     if ($91) {
      $$16$us$i = $89;$$25$us$i = $88;
     } else {
      break;
     }
    }
   } else {
    $$16$i = $$0$lcssa$i;$$25$i = $$064$lcssa$i;
    while(1) {
     _memcpy(($$25$i|0),($82|0),($$$i|0))|0;
     $92 = (($$25$i) + ($$$i)|0);
     $93 = HEAP8[$87>>0]|0;
     _memset(($92|0),($93|0),($62|0))|0;
     $94 = (($92) + ($62)|0);
     $95 = (($$16$i) + 1)|0;
     $96 = HEAP32[$84>>2]|0;
     $97 = ($95>>>0)<($96>>>0);
     if ($97) {
      $$16$i = $95;$$25$i = $94;
     } else {
      break;
     }
    }
   }
  }
 }
 $98 = ($$0$i|0)==(0);
 if ($98) {
  return;
 }
 $99 = HEAP32[$48>>2]|0;
 $100 = (($99) + ($45)|0);
 _memset(($100|0),-128,($$0$i|0))|0;
 return;
}
function _convert_yuv_unpack($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$i = 0, $$06186 = 0, $$06485 = 0, $$065$lcssa = 0, $$06574 = 0, $$06684 = 0, $$087 = 0, $$1$lcssa = 0, $$162$lcssa = 0, $$16275 = 0, $$167$lcssa = 0, $$16773 = 0, $$16983 = 0, $$176 = 0, $$2 = 0, $$263 = 0, $$270 = 0, $$3$lcssa = 0, $$372 = 0, $$4 = 0;
 var $$5 = 0, $$lcssa = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre94 = 0, $$pre95 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $31 = ((($0)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($0)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = Math_imul($34, $32)|0;
  $$0$i = 0;$101 = $32;$45 = $35;$58 = $34;$89 = $31;$93 = $33;
 } else {
  $7 = ((($1)) + 8|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $10 = 1 << $9;
  $11 = (($10) + -1)|0;
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $11 & $13;
  $15 = ($14|0)==(0);
  if ($15) {
   $37 = $13;
  } else {
   $16 = (($11) + ($13))|0;
   $17 = (0 - ($10))|0;
   $18 = $16 & $17;
   HEAP32[$12>>2] = $18;
   $37 = $18;
  }
  $19 = ((($7)) + 1|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = 1 << $21;
  $23 = (($22) + -1)|0;
  $24 = ((($0)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $23 & $25;
  $27 = ($26|0)==(0);
  if ($27) {
   $$pre$phiZ2D = $21;$38 = $25;
  } else {
   $28 = (($23) + ($25))|0;
   $29 = (0 - ($22))|0;
   $30 = $28 & $29;
   HEAP32[$24>>2] = $30;
   $$pre = HEAP8[$19>>0]|0;
   $$pre95 = $$pre&255;
   $$pre$phiZ2D = $$pre95;$38 = $30;
  }
  $36 = Math_imul($38, $37)|0;
  $39 = HEAP8[$7>>0]|0;
  $40 = $39&255;
  $41 = $37 >>> $40;
  $42 = $38 >>> $$pre$phiZ2D;
  $43 = $41 << 1;
  $phitmp = Math_imul($43, $42)|0;
  $$0$i = $phitmp;$101 = $37;$45 = $36;$58 = $38;$89 = $12;$93 = $24;
 }
 $44 = (($$0$i) + ($45))|0;
 $46 = ((($0)) + 16|0);
 HEAP32[$46>>2] = $44;
 $47 = (_malloc($44)|0);
 $48 = ((($0)) + 12|0);
 HEAP32[$48>>2] = $47;
 $49 = ($47|0)==(0|0);
 if ($49) {
  return;
 }
 $50 = ($$0$i|0)==(0);
 if (!($50)) {
  $51 = (($47) + ($45)|0);
  _memset(($51|0),-128,($$0$i|0))|0;
 }
 $52 = ((($3)) + 8|0);
 $53 = ((($2)) + 12|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ((($2)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ($58|0)==(0);
 if ($57) {
  return;
 }
 $59 = HEAP8[$52>>0]|0;
 $60 = $59&255;
 $61 = $56 >>> $60;
 $62 = (($56) + ($61))|0;
 $63 = ((($1)) + 8|0);
 $64 = ((($63)) + 2|0);
 $65 = HEAP8[$64>>0]|0;
 $66 = ((($52)) + 2|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = $65 ^ $67;
 $69 = $68 & 2;
 $70 = ($69<<24>>24)==(0);
 $71 = ((($54)) + 1|0);
 $spec$select = $70 ? $54 : $71;
 $72 = ((($2)) + 8|0);
 $73 = (0 - ($62))|0;
 $$06186 = 0;$$06485 = 0;$$06684 = $47;$$087 = 0;$$16983 = $spec$select;$102 = $58;$78 = $101;$80 = $56;
 while(1) {
  $74 = HEAP32[$72>>2]|0;
  $75 = ($$06485>>>0)<($74>>>0);
  $76 = (($$16983) + ($73)|0);
  $$270 = $75 ? $$16983 : $76;
  $77 = ($78|0)==(0);
  $79 = ($80|0)!=(0);
  if ($77) {
   $$065$lcssa = 0;$$1$lcssa = $$087;$$162$lcssa = $$06186;$$167$lcssa = $$06684;$$3$lcssa = $$270;$$lcssa = $79;$100 = $102;$103 = 0;$95 = $80;
  } else {
   $$06574 = 0;$$16275 = $$06186;$$16773 = $$06684;$$176 = $$087;$$372 = $$270;$104 = $79;
   while(1) {
    if ($104) {
     $81 = HEAP8[$$372>>0]|0;
     $82 = ((($$372)) + 2|0);
     $83 = HEAP8[$82>>0]|0;
     $84 = ((($$372)) + 4|0);
     $$2 = $83;$$263 = $81;$$4 = $84;
    } else {
     $$2 = $$176;$$263 = $$16275;$$4 = $$372;
    }
    $85 = ((($$16773)) + 1|0);
    HEAP8[$$16773>>0] = $$263;
    $86 = ((($$16773)) + 2|0);
    HEAP8[$85>>0] = $$2;
    $87 = (($$06574) + 2)|0;
    $88 = HEAP32[$89>>2]|0;
    $90 = ($87>>>0)<($88>>>0);
    $91 = HEAP32[$55>>2]|0;
    $92 = ($91>>>0)>($87>>>0);
    if ($90) {
     $$06574 = $87;$$16275 = $$263;$$16773 = $86;$$176 = $$2;$$372 = $$4;$104 = $92;
    } else {
     break;
    }
   }
   $$pre94 = HEAP32[$93>>2]|0;
   $$065$lcssa = $87;$$1$lcssa = $$2;$$162$lcssa = $$263;$$167$lcssa = $86;$$3$lcssa = $$4;$$lcssa = $92;$100 = $$pre94;$103 = $88;$95 = $91;
  }
  $94 = (($95) - ($$065$lcssa))|0;
  $96 = $94 << 1;
  $97 = (($$3$lcssa) + ($96)|0);
  $$5 = $$lcssa ? $97 : $$3$lcssa;
  $98 = (($$06485) + 1)|0;
  $99 = ($98>>>0)<($100>>>0);
  if ($99) {
   $$06186 = $$162$lcssa;$$06485 = $98;$$06684 = $$167$lcssa;$$087 = $$1$lcssa;$$16983 = $$5;$102 = $100;$78 = $103;$80 = $95;
  } else {
   break;
  }
 }
 return;
}
function _convert_uv_resample($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$$us$us = 0, $$0$i = 0, $$0119 = 0, $$0119$us = 0, $$072118 = 0, $$072118$us = 0, $$075117 = 0, $$075117$us = 0, $$079116 = 0, $$079116$us = 0, $$083115 = 0, $$083115$us = 0, $$087114 = 0, $$087114$us = 0, $$088$lcssa = 0, $$088$lcssa$us = 0, $$08899 = 0, $$08899$us$us = 0, $$089113 = 0;
 var $$089113$us = 0, $$1$lcssa = 0, $$1$lcssa$us = 0, $$1104 = 0, $$1104$us$us = 0, $$173$lcssa = 0, $$173$lcssa$us = 0, $$173103 = 0, $$173103$us$us = 0, $$176$lcssa = 0, $$176$lcssa$us = 0, $$176102 = 0, $$176102$us$us = 0, $$180$lcssa = 0, $$180$lcssa$us = 0, $$180101 = 0, $$180101$us$us = 0, $$184$lcssa = 0, $$184$lcssa$us = 0, $$184100 = 0;
 var $$184100$us$us = 0, $$190 = 0, $$190$us = 0, $$2 = 0, $$2$us$us = 0, $$274 = 0, $$274$us$us = 0, $$281 = 0, $$281$us$us = 0, $$291$lcssa = 0, $$291$lcssa$us = 0, $$29198 = 0, $$29198$us$us = 0, $$3 = 0, $$3$us$us = 0, $$378 = 0, $$378$us$us = 0, $$382 = 0, $$382$us$us = 0, $$386 = 0;
 var $$386$us$us = 0, $$392 = 0, $$392$us$us = 0, $$4 = 0, $$4$us$us = 0, $$5 = 0, $$5$us = 0, $$93 = 0, $$93$us$us = 0, $$94 = 0, $$94$us$us = 0, $$95 = 0, $$95$us$us = 0, $$lcssa = 0, $$lcssa$us = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre160 = 0, $$pre161 = 0, $$pre162 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $phitmp = 0, $spec$select = 0, $spec$select175 = 0, $spec$select176 = 0, $spec$select177 = 0, $spec$select178 = 0, $spec$select179 = 0, $spec$select180 = 0, $spec$select181 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $31 = ((($0)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($0)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = Math_imul($34, $32)|0;
  $$0$i = 0;$102 = $31;$139 = $32;$45 = $35;$59 = $34;$78 = $33;
 } else {
  $7 = ((($1)) + 8|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $10 = 1 << $9;
  $11 = (($10) + -1)|0;
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $11 & $13;
  $15 = ($14|0)==(0);
  if ($15) {
   $37 = $13;
  } else {
   $16 = (($11) + ($13))|0;
   $17 = (0 - ($10))|0;
   $18 = $16 & $17;
   HEAP32[$12>>2] = $18;
   $37 = $18;
  }
  $19 = ((($7)) + 1|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = 1 << $21;
  $23 = (($22) + -1)|0;
  $24 = ((($0)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $23 & $25;
  $27 = ($26|0)==(0);
  if ($27) {
   $$pre$phiZ2D = $21;$38 = $25;
  } else {
   $28 = (($23) + ($25))|0;
   $29 = (0 - ($22))|0;
   $30 = $28 & $29;
   HEAP32[$24>>2] = $30;
   $$pre = HEAP8[$19>>0]|0;
   $$pre162 = $$pre&255;
   $$pre$phiZ2D = $$pre162;$38 = $30;
  }
  $36 = Math_imul($38, $37)|0;
  $39 = HEAP8[$7>>0]|0;
  $40 = $39&255;
  $41 = $37 >>> $40;
  $42 = $38 >>> $$pre$phiZ2D;
  $43 = $41 << 1;
  $phitmp = Math_imul($43, $42)|0;
  $$0$i = $phitmp;$102 = $12;$139 = $37;$45 = $36;$59 = $38;$78 = $24;
 }
 $44 = (($$0$i) + ($45))|0;
 $46 = ((($0)) + 16|0);
 HEAP32[$46>>2] = $44;
 $47 = (_malloc($44)|0);
 $48 = ((($0)) + 12|0);
 HEAP32[$48>>2] = $47;
 $49 = ($47|0)==(0|0);
 if ($49) {
  return;
 }
 $50 = ((($3)) + 8|0);
 $51 = ((($50)) + 2|0);
 $52 = ((($1)) + 8|0);
 $53 = ((($52)) + 2|0);
 $54 = ((($2)) + 12|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ((($2)) + 4|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($59|0)==(0);
 if ($58) {
  return;
 }
 $60 = HEAP8[$50>>0]|0;
 $61 = $60&255;
 $62 = $57 >>> $61;
 $63 = (($57) + ($62))|0;
 $64 = HEAP8[$53>>0]|0;
 $65 = HEAP8[$51>>0]|0;
 $66 = $64 ^ $65;
 $67 = $66 & 1;
 $68 = ((($2)) + 8|0);
 $69 = (0 - ($63))|0;
 $70 = ($67<<24>>24)==(0);
 if ($70) {
  $$0119$us = $47;$$072118$us = -128;$$075117$us = -128;$$079116$us = 0;$$083115$us = 0;$$087114$us = 0;$$089113$us = $55;$141 = $59;$75 = $139;$77 = $57;
  while(1) {
   $71 = HEAP32[$68>>2]|0;
   $72 = ($$087114$us>>>0)<($71>>>0);
   $73 = (($$089113$us) + ($69)|0);
   $$190$us = $72 ? $$089113$us : $73;
   $74 = ($75|0)==(0);
   $76 = ($77|0)!=(0);
   if ($74) {
    $$088$lcssa$us = 0;$$1$lcssa$us = $$0119$us;$$173$lcssa$us = $$072118$us;$$176$lcssa$us = $$075117$us;$$180$lcssa$us = $$079116$us;$$184$lcssa$us = $$083115$us;$$291$lcssa$us = $$190$us;$$lcssa$us = $76;$142 = 0;$80 = $77;$85 = $141;
   } else {
    $$08899$us$us = 0;$$1104$us$us = $$0119$us;$$173103$us$us = $$072118$us;$$176102$us$us = $$075117$us;$$180101$us$us = $$079116$us;$$184100$us$us = $$083115$us;$$29198$us$us = $$190$us;$143 = $76;
    while(1) {
     if ($143) {
      $86 = HEAP8[$51>>0]|0;
      $87 = $86 & 2;
      $88 = ($87<<24>>24)==(0);
      $89 = ((($$29198$us$us)) + 1|0);
      $90 = HEAP8[$$29198$us$us>>0]|0;
      $91 = ((($$29198$us$us)) + 2|0);
      $92 = HEAP8[$89>>0]|0;
      $93 = ((($$29198$us$us)) + 3|0);
      $$$us$us = $88 ? $90 : $92;
      $$93$us$us = $88 ? $91 : $93;
      $$94$us$us = $88 ? $92 : $90;
      $$95$us$us = $88 ? $93 : $91;
      $$392$us$us = ((($$29198$us$us)) + 4|0);
      $$274$us$us = HEAP8[$$95$us$us>>0]|0;
      $$281$us$us = HEAP8[$$93$us$us>>0]|0;
      $$3$us$us = $$274$us$us;$$378$us$us = $$94$us$us;$$382$us$us = $$281$us$us;$$386$us$us = $$$us$us;$$4$us$us = $$392$us$us;
     } else {
      $$3$us$us = $$173103$us$us;$$378$us$us = $$176102$us$us;$$382$us$us = $$180101$us$us;$$386$us$us = $$184100$us$us;$$4$us$us = $$29198$us$us;
     }
     $94 = HEAP8[$53>>0]|0;
     $95 = $94 & 2;
     $96 = ($95<<24>>24)==(0);
     $97 = ((($$1104$us$us)) + 1|0);
     $spec$select = $96 ? $$386$us$us : $$378$us$us;
     $spec$select175 = $96 ? $$378$us$us : $$386$us$us;
     $spec$select176 = $96 ? $$382$us$us : $$3$us$us;
     $spec$select177 = $96 ? $$3$us$us : $$382$us$us;
     HEAP8[$$1104$us$us>>0] = $spec$select;
     HEAP8[$97>>0] = $spec$select175;
     $98 = ((($$1104$us$us)) + 2|0);
     HEAP8[$98>>0] = $spec$select176;
     $99 = ((($$1104$us$us)) + 3|0);
     HEAP8[$99>>0] = $spec$select177;
     $$2$us$us = ((($$1104$us$us)) + 4|0);
     $100 = (($$08899$us$us) + 2)|0;
     $101 = HEAP32[$102>>2]|0;
     $103 = ($100>>>0)<($101>>>0);
     $104 = HEAP32[$56>>2]|0;
     $105 = ($104>>>0)>($100>>>0);
     if ($103) {
      $$08899$us$us = $100;$$1104$us$us = $$2$us$us;$$173103$us$us = $$3$us$us;$$176102$us$us = $$378$us$us;$$180101$us$us = $$382$us$us;$$184100$us$us = $$386$us$us;$$29198$us$us = $$4$us$us;$143 = $105;
     } else {
      break;
     }
    }
    $$pre161 = HEAP32[$78>>2]|0;
    $$088$lcssa$us = $100;$$1$lcssa$us = $$2$us$us;$$173$lcssa$us = $$3$us$us;$$176$lcssa$us = $$378$us$us;$$180$lcssa$us = $$382$us$us;$$184$lcssa$us = $$386$us$us;$$291$lcssa$us = $$4$us$us;$$lcssa$us = $105;$142 = $101;$80 = $104;$85 = $$pre161;
   }
   $79 = (($80) - ($$088$lcssa$us))|0;
   $81 = $79 << 1;
   $82 = (($$291$lcssa$us) + ($81)|0);
   $$5$us = $$lcssa$us ? $82 : $$291$lcssa$us;
   $83 = (($$087114$us) + 1)|0;
   $84 = ($83>>>0)<($85>>>0);
   if ($84) {
    $$0119$us = $$1$lcssa$us;$$072118$us = $$173$lcssa$us;$$075117$us = $$176$lcssa$us;$$079116$us = $$180$lcssa$us;$$083115$us = $$184$lcssa$us;$$087114$us = $83;$$089113$us = $$5$us;$141 = $85;$75 = $142;$77 = $80;
   } else {
    break;
   }
  }
  return;
 } else {
  $$0119 = $47;$$072118 = -128;$$075117 = -128;$$079116 = 0;$$083115 = 0;$$087114 = 0;$$089113 = $55;$110 = $139;$112 = $57;$140 = $59;
  while(1) {
   $106 = HEAP32[$68>>2]|0;
   $107 = ($$087114>>>0)<($106>>>0);
   $108 = (($$089113) + ($69)|0);
   $$190 = $107 ? $$089113 : $108;
   $109 = ($110|0)==(0);
   $111 = ($112|0)!=(0);
   if ($109) {
    $$088$lcssa = 0;$$1$lcssa = $$0119;$$173$lcssa = $$072118;$$176$lcssa = $$075117;$$180$lcssa = $$079116;$$184$lcssa = $$083115;$$291$lcssa = $$190;$$lcssa = $111;$133 = $112;$138 = $140;$144 = 0;
   } else {
    $$08899 = 0;$$1104 = $$0119;$$173103 = $$072118;$$176102 = $$075117;$$180101 = $$079116;$$184100 = $$083115;$$29198 = $$190;$145 = $111;
    while(1) {
     if ($145) {
      $113 = HEAP8[$51>>0]|0;
      $114 = $113 & 2;
      $115 = ($114<<24>>24)==(0);
      $116 = ((($$29198)) + 1|0);
      $117 = HEAP8[$$29198>>0]|0;
      $118 = ((($$29198)) + 2|0);
      $119 = HEAP8[$116>>0]|0;
      $120 = ((($$29198)) + 3|0);
      $$ = $115 ? $117 : $119;
      $$93 = $115 ? $118 : $120;
      $$94 = $115 ? $119 : $117;
      $$95 = $115 ? $120 : $118;
      $$392 = ((($$29198)) + 4|0);
      $$274 = HEAP8[$$95>>0]|0;
      $$281 = HEAP8[$$93>>0]|0;
      $$3 = $$94;$$378 = $$274;$$382 = $$281;$$386 = $$;$$4 = $$392;
     } else {
      $$3 = $$173103;$$378 = $$176102;$$382 = $$180101;$$386 = $$184100;$$4 = $$29198;
     }
     $121 = HEAP8[$53>>0]|0;
     $122 = $121 & 2;
     $123 = ($122<<24>>24)==(0);
     $124 = ((($$1104)) + 1|0);
     $spec$select178 = $123 ? $$386 : $$378;
     $spec$select179 = $123 ? $$378 : $$386;
     $spec$select180 = $123 ? $$382 : $$3;
     $spec$select181 = $123 ? $$3 : $$382;
     HEAP8[$$1104>>0] = $spec$select178;
     HEAP8[$124>>0] = $spec$select179;
     $125 = ((($$1104)) + 2|0);
     HEAP8[$125>>0] = $spec$select180;
     $126 = ((($$1104)) + 3|0);
     HEAP8[$126>>0] = $spec$select181;
     $$2 = ((($$1104)) + 4|0);
     $127 = (($$08899) + 2)|0;
     $128 = HEAP32[$102>>2]|0;
     $129 = ($127>>>0)<($128>>>0);
     $130 = HEAP32[$56>>2]|0;
     $131 = ($130>>>0)>($127>>>0);
     if ($129) {
      $$08899 = $127;$$1104 = $$2;$$173103 = $$3;$$176102 = $$378;$$180101 = $$382;$$184100 = $$386;$$29198 = $$4;$145 = $131;
     } else {
      break;
     }
    }
    $$pre160 = HEAP32[$78>>2]|0;
    $$088$lcssa = $127;$$1$lcssa = $$2;$$173$lcssa = $$3;$$176$lcssa = $$378;$$180$lcssa = $$382;$$184$lcssa = $$386;$$291$lcssa = $$4;$$lcssa = $131;$133 = $130;$138 = $$pre160;$144 = $128;
   }
   $132 = (($133) - ($$088$lcssa))|0;
   $134 = $132 << 1;
   $135 = (($$291$lcssa) + ($134)|0);
   $$5 = $$lcssa ? $135 : $$291$lcssa;
   $136 = (($$087114) + 1)|0;
   $137 = ($136>>>0)<($138>>>0);
   if ($137) {
    $$0119 = $$1$lcssa;$$072118 = $$173$lcssa;$$075117 = $$176$lcssa;$$079116 = $$180$lcssa;$$083115 = $$184$lcssa;$$087114 = $136;$$089113 = $$5;$110 = $144;$112 = $133;$140 = $138;
   } else {
    break;
   }
  }
  return;
 }
}
function _convert_yuv_to_rgb($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$i = 0, $$084105 = 0, $$085104 = 0, $$086$lcssa = 0, $$08695 = 0, $$087103 = 0, $$1$lcssa = 0, $$188$lcssa = 0, $$18894 = 0, $$190102 = 0, $$196 = 0, $$2 = 0, $$291 = 0, $$3$lcssa = 0, $$393 = 0, $$4 = 0, $$5 = 0, $$lcssa = 0, $$pre = 0;
 var $$pre112 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp = 0, $spec$select = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = Math_imul($7, $5)|0;
 $9 = ((($1)) + 8|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = Math_imul($8, $11)|0;
 $13 = ((($0)) + 16|0);
 HEAP32[$13>>2] = $12;
 $14 = (_malloc($12)|0);
 $15 = ((($0)) + 12|0);
 HEAP32[$15>>2] = $14;
 $16 = ($14|0)==(0|0);
 if ($16) {
  return;
 }
 $17 = ((($9)) + 1|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $19 >>> 5;
 $21 = $19 & 31;
 $22 = ((($9)) + 2|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 >>> 5;
 $26 = $24 & 31;
 $27 = ((($9)) + 3|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $29 >>> 5;
 $31 = $29 & 31;
 $32 = ((($2)) + 16|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($2)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($2)) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = Math_imul($37, $35)|0;
 $39 = ((($3)) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)==(0);
 if ($41) {
  $$0$i = 0;
 } else {
  $42 = ((($3)) + 8|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $45 = $35 >>> $44;
  $46 = ((($42)) + 1|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = $37 >>> $48;
  $50 = $45 << 1;
  $phitmp = Math_imul($50, $49)|0;
  $$0$i = $phitmp;
 }
 $51 = (($$0$i) + ($38))|0;
 $52 = ($33>>>0)<($51>>>0);
 if ($52) {
  ___assert_fail((133901|0),(133826|0),707,(133972|0));
  // unreachable;
 }
 $53 = ((($2)) + 12|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ((($3)) + 8|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = ($56<<24>>24)==(1);
 if (!($57)) {
  ___assert_fail((133991|0),(133826|0),712,(133972|0));
  // unreachable;
 }
 $58 = ($7|0)==(0);
 if ($58) {
  return;
 }
 $59 = $35 >>> 1;
 $60 = (($35) + ($59))|0;
 $61 = ((($55)) + 2|0);
 $62 = HEAP8[$61>>0]|0;
 $63 = $62 & 2;
 $64 = ($63<<24>>24)==(0);
 $65 = ((($54)) + 1|0);
 $spec$select = $64 ? $54 : $65;
 $66 = (0 - ($60))|0;
 $$084105 = 0;$$085104 = 0;$$087103 = $14;$$190102 = $spec$select;$117 = $7;$68 = $37;$71 = $5;$73 = $35;
 while(1) {
  $67 = ($$085104>>>0)<($68>>>0);
  $69 = (($$190102) + ($66)|0);
  $$291 = $67 ? $$190102 : $69;
  $70 = ($71|0)==(0);
  $72 = ($73|0)!=(0);
  if ($70) {
   $$086$lcssa = 0;$$1$lcssa = $$084105;$$188$lcssa = $$087103;$$3$lcssa = $$291;$$lcssa = $72;$112 = $117;$114 = $73;$118 = 0;
  } else {
   $$08695 = 0;$$18894 = $$087103;$$196 = $$084105;$$393 = $$291;$119 = $72;
   while(1) {
    if ($119) {
     $74 = HEAP8[$$393>>0]|0;
     $75 = ((($$393)) + 2|0);
     $76 = ($74&255)<(17);
     if ($76) {
      $$0 = 0;
     } else {
      $77 = ($74&255)>(234);
      if ($77) {
       $$0 = 255;
      } else {
       $78 = $74&255;
       $79 = (($78) + 65520)|0;
       $80 = $79 & 65535;
       $81 = ($80*255)|0;
       $82 = (($81>>>0) / 219)&-1;
       $$0 = $82;
      }
     }
     $83 = $$0 & 255;
     $84 = $83 >>> $20;
     $85 = $84 << $21;
     $86 = $83 >>> $25;
     $87 = $86 << $26;
     $88 = $85 | $87;
     $89 = $83 >>> $30;
     $90 = $89 << $31;
     $91 = $88 | $90;
     $$2 = $91;$$4 = $75;
    } else {
     $$2 = $$196;$$4 = $$393;
    }
    $92 = HEAP8[$9>>0]|0;
    switch ($92<<24>>24) {
    case 3:  {
     $93 = $$2&255;
     HEAP8[$$18894>>0] = $93;
     $94 = $$2 >>> 8;
     $95 = $94&255;
     $96 = ((($$18894)) + 1|0);
     HEAP8[$96>>0] = $95;
     $97 = $$2 >>> 16;
     $98 = $97&255;
     $99 = ((($$18894)) + 2|0);
     HEAP8[$99>>0] = $98;
     break;
    }
    case 4:  {
     HEAP32[$$18894>>2] = $$2;
     break;
    }
    case 2:  {
     $100 = $$2&65535;
     HEAP16[$$18894>>1] = $100;
     break;
    }
    default: {
     $101 = $$2&255;
     HEAP8[$$18894>>0] = $101;
    }
    }
    $102 = HEAP8[$9>>0]|0;
    $103 = $102&255;
    $104 = (($$18894) + ($103)|0);
    $105 = (($$08695) + 1)|0;
    $106 = HEAP32[$4>>2]|0;
    $107 = ($105>>>0)<($106>>>0);
    $108 = HEAP32[$34>>2]|0;
    $109 = ($108>>>0)>($105>>>0);
    if ($107) {
     $$08695 = $105;$$18894 = $104;$$196 = $$2;$$393 = $$4;$119 = $109;
    } else {
     break;
    }
   }
   $$pre112 = HEAP32[$6>>2]|0;
   $$086$lcssa = $105;$$1$lcssa = $$2;$$188$lcssa = $104;$$3$lcssa = $$4;$$lcssa = $109;$112 = $$pre112;$114 = $108;$118 = $106;
  }
  $110 = (($$085104) + 1)|0;
  $111 = ($110>>>0)<($112>>>0);
  if (!($111)) {
   break;
  }
  $113 = (($114) - ($$086$lcssa))|0;
  $115 = $113 << 1;
  $116 = (($$3$lcssa) + ($115)|0);
  $$5 = $$lcssa ? $116 : $$3$lcssa;
  $$pre = HEAP32[$36>>2]|0;
  $$084105 = $$1$lcssa;$$085104 = $110;$$087103 = $$188$lcssa;$$190102 = $$5;$117 = $112;$68 = $$pre;$71 = $118;$73 = $114;
 }
 return;
}
function _convert_rgb_to_yuvp($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$i = 0, $$0$i103 = 0, $$0117 = 0, $$092116 = 0, $$094$lcssa = 0, $$094106 = 0, $$095115 = 0, $$096$off0114 = 0, $$1$lcssa = 0, $$1108 = 0, $$193 = 0, $$197$off0$lcssa = 0, $$197$off0105 = 0, $$2$lcssa = 0, $$2107 = 0, $$298$off0 = 0, $$3 = 0, $$4 = 0, $$lcssa = 0, $$pre = 0;
 var $$pre$phiZ2D = 0, $$pre125 = 0, $$pre126 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $extract$t = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $31 = ((($0)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($0)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = Math_imul($34, $32)|0;
  $$0$i103 = 0;$130 = $31;$142 = $33;$144 = $32;$45 = $35;$80 = $34;
 } else {
  $7 = ((($1)) + 8|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $10 = 1 << $9;
  $11 = (($10) + -1)|0;
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $11 & $13;
  $15 = ($14|0)==(0);
  if ($15) {
   $37 = $13;
  } else {
   $16 = (($11) + ($13))|0;
   $17 = (0 - ($10))|0;
   $18 = $16 & $17;
   HEAP32[$12>>2] = $18;
   $37 = $18;
  }
  $19 = ((($7)) + 1|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = 1 << $21;
  $23 = (($22) + -1)|0;
  $24 = ((($0)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $23 & $25;
  $27 = ($26|0)==(0);
  if ($27) {
   $$pre$phiZ2D = $21;$38 = $25;
  } else {
   $28 = (($23) + ($25))|0;
   $29 = (0 - ($22))|0;
   $30 = $28 & $29;
   HEAP32[$24>>2] = $30;
   $$pre = HEAP8[$19>>0]|0;
   $$pre126 = $$pre&255;
   $$pre$phiZ2D = $$pre126;$38 = $30;
  }
  $36 = Math_imul($38, $37)|0;
  $39 = HEAP8[$7>>0]|0;
  $40 = $39&255;
  $41 = $37 >>> $40;
  $42 = $38 >>> $$pre$phiZ2D;
  $43 = $41 << 1;
  $phitmp = Math_imul($43, $42)|0;
  $$0$i103 = $phitmp;$130 = $12;$142 = $24;$144 = $37;$45 = $36;$80 = $38;
 }
 $44 = (($$0$i103) + ($45))|0;
 $46 = ((($0)) + 16|0);
 HEAP32[$46>>2] = $44;
 $47 = (_malloc($44)|0);
 $48 = ((($0)) + 12|0);
 HEAP32[$48>>2] = $47;
 $49 = ($47|0)==(0|0);
 if ($49) {
  return;
 }
 $50 = ($$0$i103|0)==(0);
 if (!($50)) {
  $51 = (($47) + ($45)|0);
  _memset(($51|0),-128,($$0$i103|0))|0;
 }
 $52 = ((($2)) + 16|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ((($2)) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ((($2)) + 8|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ((($3)) + 8|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&255;
 $61 = Math_imul($55, $60)|0;
 $62 = Math_imul($61, $57)|0;
 $63 = ($53>>>0)<($62>>>0);
 if ($63) {
  ___assert_fail((133763|0),(133826|0),646,(133881|0));
  // unreachable;
 }
 $64 = ((($58)) + 1|0);
 $65 = HEAP8[$64>>0]|0;
 $66 = $65&255;
 $67 = $66 >>> 5;
 $68 = $66 & 31;
 $69 = ((($58)) + 2|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = $70&255;
 $72 = $71 >>> 5;
 $73 = $71 & 31;
 $74 = ((($58)) + 3|0);
 $75 = HEAP8[$74>>0]|0;
 $76 = $75&255;
 $77 = $76 >>> 5;
 $78 = $76 & 31;
 $79 = ($80|0)==(0);
 if ($79) {
  return;
 }
 $81 = ((($2)) + 12|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = (0 - ($61))|0;
 $$0117 = $47;$$092116 = $82;$$095115 = 0;$$096$off0114 = 0;$85 = $57;$88 = $144;$90 = $55;
 while(1) {
  $84 = ($$095115>>>0)<($85>>>0);
  $86 = (($$092116) + ($83)|0);
  $$193 = $84 ? $$092116 : $86;
  $87 = ($88|0)==(0);
  $89 = ($90|0)!=(0);
  if ($87) {
   $$094$lcssa = 0;$$1$lcssa = $$0117;$$197$off0$lcssa = $$096$off0114;$$2$lcssa = $$193;$$lcssa = $89;$135 = $90;$145 = 0;
  } else {
   $$094106 = 0;$$1108 = $$0117;$$197$off0105 = $$096$off0114;$$2107 = $$193;$146 = $89;
   while(1) {
    if ($146) {
     $91 = HEAP8[$58>>0]|0;
     $92 = $91&255;
     switch ($91<<24>>24) {
     case 3:  {
      $93 = HEAP8[$$2107>>0]|0;
      $94 = $93&255;
      $95 = ((($$2107)) + 1|0);
      $96 = HEAP8[$95>>0]|0;
      $97 = $96&255;
      $98 = $97 << 8;
      $99 = $98 | $94;
      $100 = ((($$2107)) + 2|0);
      $101 = HEAP8[$100>>0]|0;
      $102 = $101&255;
      $103 = $102 << 16;
      $104 = $99 | $103;
      $$0$i = $104;
      break;
     }
     case 4:  {
      $105 = HEAP32[$$2107>>2]|0;
      $$0$i = $105;
      break;
     }
     case 2:  {
      $106 = HEAP16[$$2107>>1]|0;
      $107 = $106&65535;
      $$0$i = $107;
      break;
     }
     default: {
      $108 = HEAP8[$$2107>>0]|0;
      $109 = $108&255;
      $$0$i = $109;
     }
     }
     $110 = (($$2107) + ($92)|0);
     $111 = $$0$i >>> $68;
     $112 = $111 << $67;
     $113 = $$0$i >>> $73;
     $114 = $113 << $72;
     $115 = $$0$i >>> $78;
     $116 = $115 << $77;
     $117 = $112 & 255;
     $118 = ($117*77)|0;
     $119 = $114 & 255;
     $120 = ($119*150)|0;
     $121 = $116 & 255;
     $122 = ($121*29)|0;
     $123 = (($120) + 128)|0;
     $124 = (($123) + ($118))|0;
     $125 = (($124) + ($122))|0;
     $126 = $125 >>> 8;
     $extract$t = $126&255;
     $$298$off0 = $extract$t;$$3 = $110;
    } else {
     $$298$off0 = $$197$off0105;$$3 = $$2107;
    }
    $127 = ((($$1108)) + 1|0);
    HEAP8[$$1108>>0] = $$298$off0;
    $128 = (($$094106) + 1)|0;
    $129 = HEAP32[$130>>2]|0;
    $131 = ($128>>>0)<($129>>>0);
    $132 = HEAP32[$54>>2]|0;
    $133 = ($132>>>0)>($128>>>0);
    if ($131) {
     $$094106 = $128;$$1108 = $127;$$197$off0105 = $$298$off0;$$2107 = $$3;$146 = $133;
    } else {
     $$094$lcssa = $128;$$1$lcssa = $127;$$197$off0$lcssa = $$298$off0;$$2$lcssa = $$3;$$lcssa = $133;$135 = $132;$145 = $129;
     break;
    }
   }
  }
  if ($$lcssa) {
   $134 = (($135) - ($$094$lcssa))|0;
   $136 = HEAP8[$58>>0]|0;
   $137 = $136&255;
   $138 = Math_imul($134, $137)|0;
   $139 = (($$2$lcssa) + ($138)|0);
   $$4 = $139;
  } else {
   $$4 = $$2$lcssa;
  }
  $140 = (($$095115) + 1)|0;
  $141 = HEAP32[$142>>2]|0;
  $143 = ($140>>>0)<($141>>>0);
  if (!($143)) {
   break;
  }
  $$pre125 = HEAP32[$56>>2]|0;
  $$0117 = $$1$lcssa;$$092116 = $$4;$$095115 = $140;$$096$off0114 = $$197$off0$lcssa;$85 = $$pre125;$88 = $145;$90 = $135;
 }
 return;
}
function _convert_rgb_to_yuv($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$i = 0, $$0$i$us = 0, $$0$i100 = 0, $$0115 = 0, $$088114 = 0, $$091$lcssa = 0, $$091104 = 0, $$091104$us = 0, $$092113 = 0, $$093$off0112 = 0, $$1$lcssa = 0, $$1106 = 0, $$1106$us = 0, $$189 = 0, $$194$off0$lcssa = 0, $$194$off0103 = 0, $$194$off0103$us = 0, $$2 = 0, $$2$us = 0, $$290$lcssa = 0;
 var $$290105 = 0, $$290105$us = 0, $$295$off0 = 0, $$295$off0$us = 0, $$3 = 0, $$3$us = 0, $$4 = 0, $$lcssa = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre126 = 0, $$pre127 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $extract$t = 0, $extract$t$us = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $31 = ((($0)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($0)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = Math_imul($34, $32)|0;
  $$0$i100 = 0;$133 = $31;$187 = $33;$189 = $32;$45 = $35;$82 = $34;
 } else {
  $7 = ((($1)) + 8|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $10 = 1 << $9;
  $11 = (($10) + -1)|0;
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $11 & $13;
  $15 = ($14|0)==(0);
  if ($15) {
   $37 = $13;
  } else {
   $16 = (($11) + ($13))|0;
   $17 = (0 - ($10))|0;
   $18 = $16 & $17;
   HEAP32[$12>>2] = $18;
   $37 = $18;
  }
  $19 = ((($7)) + 1|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = 1 << $21;
  $23 = (($22) + -1)|0;
  $24 = ((($0)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $23 & $25;
  $27 = ($26|0)==(0);
  if ($27) {
   $$pre$phiZ2D = $21;$38 = $25;
  } else {
   $28 = (($23) + ($25))|0;
   $29 = (0 - ($22))|0;
   $30 = $28 & $29;
   HEAP32[$24>>2] = $30;
   $$pre = HEAP8[$19>>0]|0;
   $$pre127 = $$pre&255;
   $$pre$phiZ2D = $$pre127;$38 = $30;
  }
  $36 = Math_imul($38, $37)|0;
  $39 = HEAP8[$7>>0]|0;
  $40 = $39&255;
  $41 = $37 >>> $40;
  $42 = $38 >>> $$pre$phiZ2D;
  $43 = $41 << 1;
  $phitmp = Math_imul($43, $42)|0;
  $$0$i100 = $phitmp;$133 = $12;$187 = $24;$189 = $37;$45 = $36;$82 = $38;
 }
 $44 = (($$0$i100) + ($45))|0;
 $46 = ((($0)) + 16|0);
 HEAP32[$46>>2] = $44;
 $47 = (_malloc($44)|0);
 $48 = ((($0)) + 12|0);
 HEAP32[$48>>2] = $47;
 $49 = ($47|0)==(0|0);
 if ($49) {
  return;
 }
 $50 = ((($1)) + 8|0);
 $51 = ((($50)) + 2|0);
 $52 = HEAP8[$51>>0]|0;
 $53 = $52 & 2;
 $54 = ((($2)) + 16|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ((($2)) + 4|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ((($2)) + 8|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ((($3)) + 8|0);
 $61 = HEAP8[$60>>0]|0;
 $62 = $61&255;
 $63 = Math_imul($57, $62)|0;
 $64 = Math_imul($63, $59)|0;
 $65 = ($55>>>0)<($64>>>0);
 if ($65) {
  ___assert_fail((133763|0),(133826|0),762,(133862|0));
  // unreachable;
 }
 $66 = ((($60)) + 1|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = $67&255;
 $69 = $68 >>> 5;
 $70 = $68 & 31;
 $71 = ((($60)) + 2|0);
 $72 = HEAP8[$71>>0]|0;
 $73 = $72&255;
 $74 = $73 >>> 5;
 $75 = $73 & 31;
 $76 = ((($60)) + 3|0);
 $77 = HEAP8[$76>>0]|0;
 $78 = $77&255;
 $79 = $78 >>> 5;
 $80 = $78 & 31;
 $81 = ($82|0)==(0);
 if ($81) {
  return;
 }
 $83 = ((($2)) + 12|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = (0 - ($63))|0;
 $86 = ($53<<24>>24)==(0);
 $$0115 = $47;$$088114 = $84;$$092113 = 0;$$093$off0112 = 0;$88 = $59;$91 = $189;$93 = $57;
 while(1) {
  $87 = ($$092113>>>0)<($88>>>0);
  $89 = (($$088114) + ($85)|0);
  $$189 = $87 ? $$088114 : $89;
  $90 = ($91|0)==(0);
  $92 = ($93|0)!=(0);
  if ($90) {
   $$091$lcssa = 0;$$1$lcssa = $$0115;$$194$off0$lcssa = $$093$off0112;$$290$lcssa = $$189;$$lcssa = $92;$180 = $93;$190 = 0;
  } else {
   if ($86) {
    $$091104$us = 0;$$1106$us = $$0115;$$194$off0103$us = $$093$off0112;$$290105$us = $$189;$192 = $92;
    while(1) {
     if ($192) {
      $94 = HEAP8[$60>>0]|0;
      $95 = $94&255;
      switch ($94<<24>>24) {
      case 3:  {
       $99 = HEAP8[$$290105$us>>0]|0;
       $100 = $99&255;
       $101 = ((($$290105$us)) + 1|0);
       $102 = HEAP8[$101>>0]|0;
       $103 = $102&255;
       $104 = $103 << 8;
       $105 = $104 | $100;
       $106 = ((($$290105$us)) + 2|0);
       $107 = HEAP8[$106>>0]|0;
       $108 = $107&255;
       $109 = $108 << 16;
       $110 = $105 | $109;
       $$0$i$us = $110;
       break;
      }
      case 4:  {
       $98 = HEAP32[$$290105$us>>2]|0;
       $$0$i$us = $98;
       break;
      }
      case 2:  {
       $96 = HEAP16[$$290105$us>>1]|0;
       $97 = $96&65535;
       $$0$i$us = $97;
       break;
      }
      default: {
       $111 = HEAP8[$$290105$us>>0]|0;
       $112 = $111&255;
       $$0$i$us = $112;
      }
      }
      $113 = (($$290105$us) + ($95)|0);
      $114 = $$0$i$us >>> $70;
      $115 = $114 << $69;
      $116 = $$0$i$us >>> $75;
      $117 = $116 << $74;
      $118 = $$0$i$us >>> $80;
      $119 = $118 << $79;
      $120 = $115 & 255;
      $121 = ($120*77)|0;
      $122 = $117 & 255;
      $123 = ($122*150)|0;
      $124 = $119 & 255;
      $125 = ($124*29)|0;
      $126 = (($123) + 128)|0;
      $127 = (($126) + ($121))|0;
      $128 = (($127) + ($125))|0;
      $129 = $128 >>> 8;
      $extract$t$us = $129&255;
      $$295$off0$us = $extract$t$us;$$3$us = $113;
     } else {
      $$295$off0$us = $$194$off0103$us;$$3$us = $$290105$us;
     }
     $130 = ((($$1106$us)) + 1|0);
     HEAP8[$$1106$us>>0] = $$295$off0$us;
     HEAP8[$130>>0] = -128;
     $$2$us = ((($$1106$us)) + 2|0);
     $131 = (($$091104$us) + 1)|0;
     $132 = HEAP32[$133>>2]|0;
     $134 = ($131>>>0)<($132>>>0);
     $135 = HEAP32[$56>>2]|0;
     $136 = ($135>>>0)>($131>>>0);
     if ($134) {
      $$091104$us = $131;$$1106$us = $$2$us;$$194$off0103$us = $$295$off0$us;$$290105$us = $$3$us;$192 = $136;
     } else {
      $$091$lcssa = $131;$$1$lcssa = $$2$us;$$194$off0$lcssa = $$295$off0$us;$$290$lcssa = $$3$us;$$lcssa = $136;$180 = $135;$190 = $132;
      break;
     }
    }
   } else {
    $$091104 = 0;$$1106 = $$0115;$$194$off0103 = $$093$off0112;$$290105 = $$189;$191 = $92;
    while(1) {
     if ($191) {
      $137 = HEAP8[$60>>0]|0;
      $138 = $137&255;
      switch ($137<<24>>24) {
      case 3:  {
       $139 = HEAP8[$$290105>>0]|0;
       $140 = $139&255;
       $141 = ((($$290105)) + 1|0);
       $142 = HEAP8[$141>>0]|0;
       $143 = $142&255;
       $144 = $143 << 8;
       $145 = $144 | $140;
       $146 = ((($$290105)) + 2|0);
       $147 = HEAP8[$146>>0]|0;
       $148 = $147&255;
       $149 = $148 << 16;
       $150 = $145 | $149;
       $$0$i = $150;
       break;
      }
      case 4:  {
       $151 = HEAP32[$$290105>>2]|0;
       $$0$i = $151;
       break;
      }
      case 2:  {
       $152 = HEAP16[$$290105>>1]|0;
       $153 = $152&65535;
       $$0$i = $153;
       break;
      }
      default: {
       $154 = HEAP8[$$290105>>0]|0;
       $155 = $154&255;
       $$0$i = $155;
      }
      }
      $156 = (($$290105) + ($138)|0);
      $157 = $$0$i >>> $70;
      $158 = $157 << $69;
      $159 = $$0$i >>> $75;
      $160 = $159 << $74;
      $161 = $$0$i >>> $80;
      $162 = $161 << $79;
      $163 = $158 & 255;
      $164 = ($163*77)|0;
      $165 = $160 & 255;
      $166 = ($165*150)|0;
      $167 = $162 & 255;
      $168 = ($167*29)|0;
      $169 = (($166) + 128)|0;
      $170 = (($169) + ($164))|0;
      $171 = (($170) + ($168))|0;
      $172 = $171 >>> 8;
      $extract$t = $172&255;
      $$295$off0 = $extract$t;$$3 = $156;
     } else {
      $$295$off0 = $$194$off0103;$$3 = $$290105;
     }
     $173 = ((($$1106)) + 1|0);
     HEAP8[$$1106>>0] = -128;
     HEAP8[$173>>0] = $$295$off0;
     $$2 = ((($$1106)) + 2|0);
     $174 = (($$091104) + 1)|0;
     $175 = HEAP32[$133>>2]|0;
     $176 = ($174>>>0)<($175>>>0);
     $177 = HEAP32[$56>>2]|0;
     $178 = ($177>>>0)>($174>>>0);
     if ($176) {
      $$091104 = $174;$$1106 = $$2;$$194$off0103 = $$295$off0;$$290105 = $$3;$191 = $178;
     } else {
      $$091$lcssa = $174;$$1$lcssa = $$2;$$194$off0$lcssa = $$295$off0;$$290$lcssa = $$3;$$lcssa = $178;$180 = $177;$190 = $175;
      break;
     }
    }
   }
  }
  if ($$lcssa) {
   $179 = (($180) - ($$091$lcssa))|0;
   $181 = HEAP8[$60>>0]|0;
   $182 = $181&255;
   $183 = Math_imul($179, $182)|0;
   $184 = (($$290$lcssa) + ($183)|0);
   $$4 = $184;
  } else {
   $$4 = $$290$lcssa;
  }
  $185 = (($$092113) + 1)|0;
  $186 = HEAP32[$187>>2]|0;
  $188 = ($185>>>0)<($186>>>0);
  if (!($188)) {
   break;
  }
  $$pre126 = HEAP32[$58>>2]|0;
  $$0115 = $$1$lcssa;$$088114 = $$4;$$092113 = $185;$$093$off0112 = $$194$off0$lcssa;$88 = $$pre126;$91 = $190;$93 = $180;
 }
 return;
}
function _convert_rgb_resample($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$i = 0, $$0107127 = 0, $$0109$lcssa = 0, $$0109117 = 0, $$0110126 = 0, $$0113125 = 0, $$0128 = 0, $$1$lcssa = 0, $$1108$lcssa = 0, $$1108118 = 0, $$1111$lcssa = 0, $$1111116 = 0, $$1119 = 0, $$2 = 0, $$2112 = 0, $$3 = 0, $$lcssa = 0, $$neg = 0, $$op = 0, $$pre = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = Math_imul($7, $5)|0;
 $9 = ((($1)) + 8|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = Math_imul($8, $11)|0;
 $13 = ((($0)) + 16|0);
 HEAP32[$13>>2] = $12;
 $14 = (_malloc($12)|0);
 $15 = ((($0)) + 12|0);
 HEAP32[$15>>2] = $14;
 $16 = ($14|0)==(0|0);
 if ($16) {
  return;
 }
 $17 = ((($9)) + 1|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $19 >>> 5;
 $21 = $19 & 31;
 $22 = ((($9)) + 2|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 >>> 5;
 $26 = $24 & 31;
 $27 = ((($9)) + 3|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $29 >>> 5;
 $31 = $29 & 31;
 $32 = ((($2)) + 16|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($2)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($2)) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($3)) + 8|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $39&255;
 $41 = Math_imul($35, $40)|0;
 $42 = Math_imul($41, $37)|0;
 $43 = ($33>>>0)<($42>>>0);
 if ($43) {
  ___assert_fail((133763|0),(133826|0),828,(133841|0));
  // unreachable;
 }
 $44 = ((($38)) + 1|0);
 $45 = HEAP8[$44>>0]|0;
 $46 = $45&255;
 $47 = $46 >>> 5;
 $48 = $46 & 31;
 $49 = ((($38)) + 2|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = $51 >>> 5;
 $53 = $51 & 31;
 $54 = ((($38)) + 3|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = $55&255;
 $57 = $56 >>> 5;
 $58 = $56 & 31;
 $59 = ($7|0)==(0);
 if ($59) {
  return;
 }
 $60 = ((($2)) + 12|0);
 $61 = HEAP32[$60>>2]|0;
 $$op = (0 - ($41))|0;
 $$0107127 = $61;$$0110126 = 0;$$0113125 = 0;$$0128 = $14;$63 = $37;$65 = $5;$67 = $35;
 while(1) {
  $62 = ($$0113125>>>0)<($63>>>0);
  $$neg = $62 ? 0 : $$op;
  $64 = ($65|0)==(0);
  $66 = ($67|0)!=(0);
  L12: do {
   if ($64) {
    $$0109$lcssa = 0;$$1$lcssa = $$0128;$$1108$lcssa = $$0107127;$$1111$lcssa = $$0110126;$$lcssa = $66;$124 = $67;$132 = 0;
   } else {
    $$0109117 = 0;$$1108118 = $$0107127;$$1111116 = $$0110126;$$1119 = $$0128;$133 = $66;
    while(1) {
     if ($133) {
      $68 = HEAP8[$38>>0]|0;
      $69 = $68&255;
      switch ($68<<24>>24) {
      case 3:  {
       $70 = HEAP8[$$1108118>>0]|0;
       $71 = $70&255;
       $72 = ((($$1108118)) + 1|0);
       $73 = HEAP8[$72>>0]|0;
       $74 = $73&255;
       $75 = $74 << 8;
       $76 = $75 | $71;
       $77 = ((($$1108118)) + 2|0);
       $78 = HEAP8[$77>>0]|0;
       $79 = $78&255;
       $80 = $79 << 16;
       $81 = $76 | $80;
       $$0$i = $81;
       break;
      }
      case 4:  {
       $82 = HEAP32[$$1108118>>2]|0;
       $$0$i = $82;
       break;
      }
      case 2:  {
       $83 = HEAP16[$$1108118>>1]|0;
       $84 = $83&65535;
       $$0$i = $84;
       break;
      }
      default: {
       $85 = HEAP8[$$1108118>>0]|0;
       $86 = $85&255;
       $$0$i = $86;
      }
      }
      $87 = (($$1108118) + ($69)|0);
      $88 = $$0$i >>> $48;
      $89 = $88 << $47;
      $90 = $$0$i >>> $53;
      $91 = $90 << $52;
      $92 = $$0$i >>> $58;
      $93 = $92 << $57;
      $94 = $89 & 255;
      $95 = $94 >>> $20;
      $96 = $95 << $21;
      $97 = $91 & 255;
      $98 = $97 >>> $25;
      $99 = $98 << $26;
      $100 = $96 | $99;
      $101 = $93 & 255;
      $102 = $101 >>> $30;
      $103 = $102 << $31;
      $104 = $100 | $103;
      $$2 = $87;$$2112 = $104;
     } else {
      $$2 = $$1108118;$$2112 = $$1111116;
     }
     $105 = HEAP8[$9>>0]|0;
     switch ($105<<24>>24) {
     case 3:  {
      $106 = $$2112&255;
      HEAP8[$$1119>>0] = $106;
      $107 = $$2112 >>> 8;
      $108 = $107&255;
      $109 = ((($$1119)) + 1|0);
      HEAP8[$109>>0] = $108;
      $110 = $$2112 >>> 16;
      $111 = $110&255;
      $112 = ((($$1119)) + 2|0);
      HEAP8[$112>>0] = $111;
      break;
     }
     case 4:  {
      HEAP32[$$1119>>2] = $$2112;
      break;
     }
     case 2:  {
      $113 = $$2112&65535;
      HEAP16[$$1119>>1] = $113;
      break;
     }
     default: {
      $114 = $$2112&255;
      HEAP8[$$1119>>0] = $114;
     }
     }
     $115 = HEAP8[$9>>0]|0;
     $116 = $115&255;
     $117 = (($$1119) + ($116)|0);
     $118 = (($$0109117) + 1)|0;
     $119 = HEAP32[$4>>2]|0;
     $120 = ($118>>>0)<($119>>>0);
     $121 = HEAP32[$34>>2]|0;
     $122 = ($121>>>0)>($118>>>0);
     if ($120) {
      $$0109117 = $118;$$1108118 = $$2;$$1111116 = $$2112;$$1119 = $117;$133 = $122;
     } else {
      $$0109$lcssa = $118;$$1$lcssa = $117;$$1108$lcssa = $$2;$$1111$lcssa = $$2112;$$lcssa = $122;$124 = $121;$132 = $119;
      break L12;
     }
    }
   }
  } while(0);
  if ($$lcssa) {
   $123 = (($124) - ($$0109$lcssa))|0;
   $125 = HEAP8[$38>>0]|0;
   $126 = $125&255;
   $127 = Math_imul($123, $126)|0;
   $128 = (($$1108$lcssa) + ($127)|0);
   $$3 = $128;
  } else {
   $$3 = $$1108$lcssa;
  }
  $spec$select = (($$0113125) + 1)|0;
  $129 = (($spec$select) + ($$neg))|0;
  $130 = HEAP32[$6>>2]|0;
  $131 = ($129>>>0)<($130>>>0);
  if (!($131)) {
   break;
  }
  $$pre = HEAP32[$36>>2]|0;
  $$0107127 = $$3;$$0110126 = $$1111$lcssa;$$0113125 = $129;$$0128 = $$1$lcssa;$63 = $$pre;$65 = $132;$67 = $124;
 }
 return;
}
function _cleanup_ref($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($5|0)>(0);
 if (!($7)) {
  ___assert_fail((134216|0),(134224|0),87,(134240|0));
  // unreachable;
 }
 $8 = ($6|0)==(0);
 if (!($8)) {
  return;
 }
 $9 = ((($2)) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  FUNCTION_TABLE_vi[$10 & 7]($2);
 }
 $12 = ((($2)) + 48|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  return;
 }
 __zbar_image_free($2);
 return;
}
function _zbar_image_convert($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_zbar_image_convert_resize($0,$1,$3,$5)|0);
 return ($6|0);
}
function __zbar_best_format($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$us = 0, $$013$i = 0, $$013$i$us = 0, $$013$i40 = 0, $$036 = 0, $$038$lcssa = 0, $$038$mux$us = 0, $$03851 = 0, $$03851$us = 0, $$03949 = 0, $$03949$us = 0, $$05$i = 0, $$2 = 0, $$2$us = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0;
 var $or$cond$not = 0, $or$cond$not$us = 0, $spec$select$i = 0, $spec$select$i$us = 0, $spec$select$i41 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer2 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = sp + 52|0;
 HEAP32[$3>>2] = $0;
 $4 = ($1|0)!=(0|0);
 if ($4) {
  HEAP32[$1>>2] = 0;
 }
 $5 = ($2|0)==(0|0);
 if ($5) {
  $$036 = -1;
  STACKTOP = sp;return ($$036|0);
 }
 $6 = HEAP32[$2>>2]|0;
 $7 = ($6|0)==(0);
 L7: do {
  if (!($7)) {
   $$05$i = $2;$12 = $6;
   while(1) {
    $11 = ($12|0)==($0|0);
    $9 = ((($$05$i)) + 4|0);
    if ($11) {
     break;
    }
    $8 = HEAP32[$9>>2]|0;
    $10 = ($8|0)==(0);
    if ($10) {
     break L7;
    } else {
     $$05$i = $9;$12 = $8;
    }
   }
   $13 = (0)>(7);
   if ($13) {
    $14 = HEAP32[32495]|0;
    HEAP32[$vararg_buffer>>2] = 134279;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $3;
    (_fprintf($14,134253,$vararg_buffer)|0);
   }
   if (!($4)) {
    $$036 = 0;
    STACKTOP = sp;return ($$036|0);
   }
   $15 = HEAP32[$3>>2]|0;
   HEAP32[$1>>2] = $15;
   $$036 = 0;
   STACKTOP = sp;return ($$036|0);
  }
 } while(0);
 $$013$i40 = 0;
 while(1) {
  $16 = (1024 + (($$013$i40*12)|0)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==($0|0);
  if ($18) {
   break;
  }
  $19 = $$013$i40 << 1;
  $20 = $19 | 1;
  $21 = ($17>>>0)<($0>>>0);
  $22 = $21&1;
  $spec$select$i41 = (($20) + ($22))|0;
  $23 = ($spec$select$i41|0)<(31);
  if ($23) {
   $$013$i40 = $spec$select$i41;
  } else {
   $$036 = -1;
   label = 47;
   break;
  }
 }
 if ((label|0) == 47) {
  STACKTOP = sp;return ($$036|0);
 }
 $24 = ($16|0)==(0|0);
 if ($24) {
  $$036 = -1;
  STACKTOP = sp;return ($$036|0);
 }
 $25 = (0)>(7);
 if ($25) {
  $26 = HEAP32[32495]|0;
  HEAP32[$vararg_buffer2>>2] = 134279;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $3;
  $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
  HEAP32[$vararg_ptr6>>2] = $0;
  (_fprintf($26,134297,$vararg_buffer2)|0);
  $$pre = HEAP32[$2>>2]|0;
  $28 = $$pre;
 } else {
  $28 = $6;
 }
 $27 = ($28|0)==(0);
 L33: do {
  if ($27) {
   $$038$lcssa = -1;
  } else {
   $29 = (((1024 + (($$013$i40*12)|0)|0)) + 4|0);
   $30 = (((1024 + (($$013$i40*12)|0)|0)) + 8|0);
   $31 = HEAP32[32495]|0;
   if (!($4)) {
    $$03851$us = -1;$$03949$us = $2;$35 = $28;
    while(1) {
     $$013$i$us = 0;
     while(1) {
      $32 = (1024 + (($$013$i$us*12)|0)|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($33|0)==($35|0);
      if ($34) {
       label = 25;
       break;
      }
      $36 = $$013$i$us << 1;
      $37 = $36 | 1;
      $38 = ($33>>>0)<($35>>>0);
      $39 = $38&1;
      $spec$select$i$us = (($37) + ($39))|0;
      $40 = ($spec$select$i$us|0)<(31);
      if ($40) {
       $$013$i$us = $spec$select$i$us;
      } else {
       $$2$us = $$03851$us;
       break;
      }
     }
     if ((label|0) == 25) {
      label = 0;
      $41 = ($32|0)==(0|0);
      if ($41) {
       $$2$us = $$03851$us;
      } else {
       $42 = HEAP32[$29>>2]|0;
       $43 = (((1024 + (($$013$i$us*12)|0)|0)) + 4|0);
       $44 = HEAP32[$43>>2]|0;
       $45 = ($42|0)==($44|0);
       if ($45) {
        $46 = HEAP32[$30>>2]|0;
        $47 = (((1024 + (($$013$i$us*12)|0)|0)) + 8|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = ($46|0)==($48|0);
        if ($49) {
         $$0$us = 0;
        } else {
         label = 28;
        }
       } else {
        label = 28;
       }
       if ((label|0) == 28) {
        label = 0;
        $50 = ((1408 + (($42*48)|0)|0) + ($44<<3)|0);
        $51 = HEAP32[$50>>2]|0;
        $$0$us = $51;
       }
       $52 = (0)>(7);
       if ($52) {
        HEAP32[$vararg_buffer7>>2] = $$03949$us;
        $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
        HEAP32[$vararg_ptr10>>2] = $35;
        $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
        HEAP32[$vararg_ptr11>>2] = $$0$us;
        (_fprintf($31,134320,$vararg_buffer7)|0);
       }
       $53 = ($$0$us|0)<(0);
       $54 = ($$03851$us>>>0)<=($$0$us>>>0);
       $or$cond$not$us = $54 | $53;
       $$038$mux$us = $or$cond$not$us ? $$03851$us : $$0$us;
       $$2$us = $$038$mux$us;
      }
     }
     $55 = ((($$03949$us)) + 4|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($56|0)==(0);
     if ($57) {
      $$038$lcssa = $$2$us;
      break L33;
     } else {
      $$03851$us = $$2$us;$$03949$us = $55;$35 = $56;
     }
    }
   }
   $$03851 = -1;$$03949 = $2;$61 = $28;
   while(1) {
    $$013$i = 0;
    while(1) {
     $58 = (1024 + (($$013$i*12)|0)|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = ($59|0)==($61|0);
     if ($60) {
      label = 36;
      break;
     }
     $62 = $$013$i << 1;
     $63 = $62 | 1;
     $64 = ($59>>>0)<($61>>>0);
     $65 = $64&1;
     $spec$select$i = (($63) + ($65))|0;
     $66 = ($spec$select$i|0)<(31);
     if ($66) {
      $$013$i = $spec$select$i;
     } else {
      $$2 = $$03851;
      break;
     }
    }
    if ((label|0) == 36) {
     label = 0;
     $67 = ($58|0)==(0|0);
     if ($67) {
      $$2 = $$03851;
     } else {
      $68 = HEAP32[$29>>2]|0;
      $69 = (((1024 + (($$013$i*12)|0)|0)) + 4|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ($68|0)==($70|0);
      if ($71) {
       $72 = HEAP32[$30>>2]|0;
       $73 = (((1024 + (($$013$i*12)|0)|0)) + 8|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = ($72|0)==($74|0);
       if ($75) {
        $$0 = 0;
       } else {
        label = 39;
       }
      } else {
       label = 39;
      }
      if ((label|0) == 39) {
       label = 0;
       $76 = ((1408 + (($68*48)|0)|0) + ($70<<3)|0);
       $77 = HEAP32[$76>>2]|0;
       $$0 = $77;
      }
      $78 = (0)>(7);
      if ($78) {
       HEAP32[$vararg_buffer12>>2] = $$03949;
       $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
       HEAP32[$vararg_ptr15>>2] = $61;
       $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
       HEAP32[$vararg_ptr16>>2] = $$0;
       (_fprintf($31,134320,$vararg_buffer12)|0);
      }
      $79 = ($$0|0)<(0);
      $80 = ($$03851>>>0)<=($$0>>>0);
      $or$cond$not = $80 | $79;
      if ($or$cond$not) {
       $$2 = $$03851;
      } else {
       $81 = HEAP32[$$03949>>2]|0;
       HEAP32[$1>>2] = $81;
       $$2 = $$0;
      }
     }
    }
    $82 = ((($$03949)) + 4|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($83|0)==(0);
    if ($84) {
     $$038$lcssa = $$2;
     break;
    } else {
     $$03851 = $$2;$$03949 = $82;$61 = $83;
    }
   }
  }
 } while(0);
 $85 = (0)>(7);
 if (!($85)) {
  $$036 = $$038$lcssa;
  STACKTOP = sp;return ($$036|0);
 }
 $86 = HEAP32[32495]|0;
 (_fputc(10,$86)|0);
 $$036 = $$038$lcssa;
 STACKTOP = sp;return ($$036|0);
}
function _zbar_negotiate_format($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01619$i = 0, $$05$i = 0, $$05866 = 0, $$05965 = 0, $$2$ph = 0, $$3 = 0, $$pre = 0, $$pre68 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0;
 var $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 60|0;
 $3 = sp + 56|0;
 HEAP32[$2>>2] = 0;
 $4 = ($0|0)!=(0|0);
 $5 = ($1|0)!=(0|0);
 $or$cond = $4 | $5;
 if (!($or$cond)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = $4 ? $0 : $1;
 $$01619$i = 0;
 while(1) {
  $7 = $$01619$i << 1;
  $8 = $7 | 1;
  $9 = ($8>>>0)<(31);
  if ($9) {
   $10 = (1024 + (($$01619$i*12)|0)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (1024 + (($8*12)|0)|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($11>>>0)<($13>>>0);
   if ($14) {
    label = 8;
    break;
   }
   $15 = (($8) + 1)|0;
   $16 = ($15>>>0)<(31);
   if ($16) {
    $17 = (1024 + (($15*12)|0)|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18>>>0)<($11>>>0);
    if ($19) {
     label = 8;
     break;
    }
   }
  }
  $20 = (($$01619$i) + 1)|0;
  $21 = ($20>>>0)<(31);
  if ($21) {
   $$01619$i = $20;
  } else {
   break;
  }
 }
 if ((label|0) == 8) {
  $22 = HEAP32[32495]|0;
  (_fwrite(134335,41,1,$22)|0);
  $23 = HEAP32[$6>>2]|0;
  $24 = ($23|0)==(1381123450);
  if (!($24)) {
   ___assert_fail((134377|0),(134405|0),150,(134420|0));
   // unreachable;
  }
  $25 = ((($6)) + 16|0);
  HEAP32[$25>>2] = -2;
  $26 = ((($6)) + 20|0);
  HEAP32[$26>>2] = 2;
  $27 = ((($6)) + 24|0);
  HEAP32[$27>>2] = 134432;
  $28 = ((($6)) + 28|0);
  HEAP32[$28>>2] = 134454;
  $29 = (0)>(0);
  if (!($29)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  (__zbar_error_spew($6,0)|0);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 if ($4) {
  $30 = ((($0)) + 72|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)==(0|0);
  if (!($32)) {
   label = 14;
  }
 } else {
  label = 14;
 }
 do {
  if ((label|0) == 14) {
   if ($5) {
    $33 = ((($1)) + 112|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34|0)==(0|0);
    if ($35) {
     break;
    }
   }
   if ($4) {
    $43 = ((($0)) + 72|0);
    $44 = HEAP32[$43>>2]|0;
    $49 = $44;
   } else {
    $49 = 129920;
   }
   if ($5) {
    $45 = ((($1)) + 112|0);
    $46 = HEAP32[$45>>2]|0;
    $57 = $46;
   } else {
    $57 = 129920;
   }
   $47 = HEAP32[32495]|0;
   $$05866 = 864;$$05965 = -1;$56 = 1345466932;
   L34: while(1) {
    HEAP32[$3>>2] = 0;
    $48 = HEAP32[$49>>2]|0;
    $50 = ($48|0)==(0);
    L36: do {
     if ($50) {
      $$2$ph = $$05965;
     } else {
      $$05$i = $49;$55 = $48;
      while(1) {
       $54 = ($55|0)==($56|0);
       $52 = ((($$05$i)) + 4|0);
       if ($54) {
        break;
       }
       $51 = HEAP32[$52>>2]|0;
       $53 = ($51|0)==(0);
       if ($53) {
        $$2$ph = $$05965;
        break L36;
       } else {
        $$05$i = $52;$55 = $51;
       }
      }
      $58 = (__zbar_best_format($56,$3,$57)|0);
      $59 = ($58|0)<(0);
      $60 = (0)>(3);
      if ($59) {
       if (!($60)) {
        $$2$ph = $$05965;
        break;
       }
       $61 = HEAP32[$$05866>>2]|0;
       HEAP32[$vararg_buffer>>2] = 134432;
       $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
       HEAP32[$vararg_ptr1>>2] = $$05866;
       $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
       HEAP32[$vararg_ptr2>>2] = $61;
       (_fprintf($47,134525,$vararg_buffer)|0);
       $$2$ph = $$05965;
       break;
      }
      if ($60) {
       $62 = HEAP32[$$05866>>2]|0;
       $63 = HEAP32[$3>>2]|0;
       HEAP32[$vararg_buffer3>>2] = 134432;
       $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
       HEAP32[$vararg_ptr6>>2] = $$05866;
       $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
       HEAP32[$vararg_ptr7>>2] = $62;
       $vararg_ptr8 = ((($vararg_buffer3)) + 12|0);
       HEAP32[$vararg_ptr8>>2] = $3;
       $vararg_ptr9 = ((($vararg_buffer3)) + 16|0);
       HEAP32[$vararg_ptr9>>2] = $63;
       $vararg_ptr10 = ((($vararg_buffer3)) + 20|0);
       HEAP32[$vararg_ptr10>>2] = $58;
       (_fprintf($47,134560,$vararg_buffer3)|0);
      }
      $64 = ($$05965>>>0)>($58>>>0);
      if ($64) {
       $65 = HEAP32[$$05866>>2]|0;
       HEAP32[$2>>2] = $65;
       $66 = ($58|0)==(0);
       if ($66) {
        label = 36;
        break L34;
       } else {
        $$2$ph = $58;
       }
      } else {
       $$2$ph = $$05965;
      }
     }
    } while(0);
    $67 = ((($$05866)) + 4|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ($68|0)==(0);
    if ($69) {
     label = 38;
     break;
    } else {
     $$05866 = $67;$$05965 = $$2$ph;$56 = $68;
    }
   }
   if ((label|0) == 36) {
    $$3 = 0;$71 = $65;
   }
   else if ((label|0) == 38) {
    $$pre = HEAP32[$2>>2]|0;
    $$3 = $$2$ph;$71 = $$pre;
   }
   $70 = ($71|0)==(0);
   if ($70) {
    $72 = HEAP32[$6>>2]|0;
    $73 = ($72|0)==(1381123450);
    if (!($73)) {
     ___assert_fail((134377|0),(134405|0),150,(134420|0));
     // unreachable;
    }
    $74 = ((($6)) + 16|0);
    HEAP32[$74>>2] = -1;
    $75 = ((($6)) + 20|0);
    HEAP32[$75>>2] = 3;
    $76 = ((($6)) + 24|0);
    HEAP32[$76>>2] = 134432;
    $77 = ((($6)) + 28|0);
    HEAP32[$77>>2] = 134595;
    $78 = (0)>(0);
    if (!($78)) {
     $$0 = -1;
     STACKTOP = sp;return ($$0|0);
    }
    (__zbar_error_spew($6,0)|0);
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   } else {
    if (!($4)) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    $79 = (0)>(1);
    if ($79) {
     HEAP32[$vararg_buffer11>>2] = 134432;
     $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
     HEAP32[$vararg_ptr14>>2] = $2;
     $vararg_ptr15 = ((($vararg_buffer11)) + 8|0);
     HEAP32[$vararg_ptr15>>2] = $71;
     $vararg_ptr16 = ((($vararg_buffer11)) + 12|0);
     HEAP32[$vararg_ptr16>>2] = $$3;
     (_fprintf($47,134632,$vararg_buffer11)|0);
     $$pre68 = HEAP32[$2>>2]|0;
     $80 = $$pre68;
    } else {
     $80 = $71;
    }
    $81 = (_zbar_video_init($0,$80)|0);
    $$0 = $81;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $36 = HEAP32[$6>>2]|0;
 $37 = ($36|0)==(1381123450);
 if (!($37)) {
  ___assert_fail((134377|0),(134405|0),150,(134420|0));
  // unreachable;
 }
 $38 = ((($6)) + 16|0);
 HEAP32[$38>>2] = -1;
 $39 = ((($6)) + 20|0);
 HEAP32[$39>>2] = 3;
 $40 = ((($6)) + 24|0);
 HEAP32[$40>>2] = 134432;
 $41 = ((($6)) + 28|0);
 HEAP32[$41>>2] = 134488;
 $42 = (0)>(0);
 if (!($42)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 (__zbar_error_spew($6,0)|0);
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy_560($2)|0);
 $4 = (___wasi_fd_close(($3|0))|0);
 $5 = $4&65535;
 return ($5|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$048 = 0, $$049 = 0, $$050 = 0, $$052 = 0, $$1 = 0, $$153 = 0, $$156$ph = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $3 = sp;
 $4 = sp + 16|0;
 $5 = ((($0)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$3>>2] = $6;
 $7 = ((($3)) + 4|0);
 $8 = ((($0)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) - ($6))|0;
 HEAP32[$7>>2] = $10;
 $11 = ((($3)) + 8|0);
 HEAP32[$11>>2] = $1;
 $12 = ((($3)) + 12|0);
 HEAP32[$12>>2] = $2;
 $13 = (($10) + ($2))|0;
 $14 = ((($0)) + 60|0);
 $$049 = 2;$$050 = $13;$$052 = $3;
 while(1) {
  $15 = HEAP32[$14>>2]|0;
  $16 = (___wasi_fd_write(($15|0),($$052|0),($$049|0),($4|0))|0);
  $17 = (___wasi_syscall_ret($16)|0);
  $18 = ($17|0)==(0);
  if ($18) {
   $$pr = HEAP32[$4>>2]|0;
   $20 = $$pr;
  } else {
   HEAP32[$4>>2] = -1;
   $20 = -1;
  }
  $19 = ($$050|0)==($20|0);
  if ($19) {
   label = 6;
   break;
  }
  $28 = ($20|0)<(0);
  if ($28) {
   label = 8;
   break;
  }
  $36 = (($$050) - ($20))|0;
  $37 = ((($$052)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($20>>>0)>($38>>>0);
  $40 = ((($$052)) + 8|0);
  $$153 = $39 ? $40 : $$052;
  $41 = $39 << 31 >> 31;
  $$1 = (($$049) + ($41))|0;
  $42 = $39 ? $38 : 0;
  $$048 = (($20) - ($42))|0;
  $43 = HEAP32[$$153>>2]|0;
  $44 = (($43) + ($$048)|0);
  HEAP32[$$153>>2] = $44;
  $45 = ((($$153)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) - ($$048))|0;
  HEAP32[$45>>2] = $47;
  $$049 = $$1;$$050 = $36;$$052 = $$153;
 }
 if ((label|0) == 6) {
  $21 = ((($0)) + 44|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($0)) + 48|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($22) + ($24)|0);
  $26 = ((($0)) + 16|0);
  HEAP32[$26>>2] = $25;
  $27 = $22;
  HEAP32[$5>>2] = $27;
  HEAP32[$8>>2] = $27;
  $$156$ph = $2;
 }
 else if ((label|0) == 8) {
  $29 = ((($0)) + 16|0);
  HEAP32[$29>>2] = 0;
  HEAP32[$5>>2] = 0;
  HEAP32[$8>>2] = 0;
  $30 = HEAP32[$0>>2]|0;
  $31 = $30 | 32;
  HEAP32[$0>>2] = $31;
  $32 = ($$049|0)==(2);
  if ($32) {
   $$156$ph = 0;
  } else {
   $33 = ((($$052)) + 4|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($2) - ($34))|0;
   $$156$ph = $35;
  }
 }
 STACKTOP = sp;return ($$156$ph|0);
}
function ___stdio_seek($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 $5 = ((($0)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3&255;
 $8 = (___wasi_fd_seek(($6|0),($1|0),($2|0),($7|0),($4|0))|0);
 $9 = (___wasi_syscall_ret($8)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = $4;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($11) + 4)|0;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $21 = $16;$22 = $13;
 } else {
  $17 = $4;
  $18 = $17;
  HEAP32[$18>>2] = -1;
  $19 = (($17) + 4)|0;
  $20 = $19;
  HEAP32[$20>>2] = -1;
  $21 = -1;$22 = -1;
 }
 setTempRet0(($21) | 0);
 STACKTOP = sp;return ($22|0);
}
function ___wasi_syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0<<16>>16)==(0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = $0&65535;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (135872|0);
}
function _dummy_560($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$cast = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $3 = sp;
 $4 = sp + 16|0;
 HEAP32[$3>>2] = $1;
 $5 = ((($3)) + 4|0);
 $6 = ((($0)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 $9 = $8&1;
 $10 = (($2) - ($9))|0;
 HEAP32[$5>>2] = $10;
 $11 = ((($3)) + 8|0);
 $12 = ((($0)) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$11>>2] = $13;
 $14 = ((($3)) + 12|0);
 HEAP32[$14>>2] = $7;
 $15 = ((($0)) + 60|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (___wasi_fd_read(($16|0),($3|0),2,($4|0))|0);
 $18 = (___wasi_syscall_ret($17)|0);
 $19 = ($18|0)==(0);
 if ($19) {
  $$pr = HEAP32[$4>>2]|0;
  $20 = ($$pr|0)<(1);
  if ($20) {
   $22 = $$pr;
   label = 4;
  } else {
   $26 = HEAP32[$5>>2]|0;
   $27 = ($$pr>>>0)>($26>>>0);
   if ($27) {
    $28 = (($$pr) - ($26))|0;
    $29 = HEAP32[$12>>2]|0;
    $30 = ((($0)) + 4|0);
    HEAP32[$30>>2] = $29;
    $$cast = $29;
    $31 = (($$cast) + ($28)|0);
    $32 = ((($0)) + 8|0);
    HEAP32[$32>>2] = $31;
    $33 = HEAP32[$6>>2]|0;
    $34 = ($33|0)==(0);
    if ($34) {
     $$0 = $2;
    } else {
     $35 = ((($$cast)) + 1|0);
     HEAP32[$30>>2] = $35;
     $36 = HEAP8[$$cast>>0]|0;
     $37 = (($2) + -1)|0;
     $38 = (($1) + ($37)|0);
     HEAP8[$38>>0] = $36;
     $$0 = $2;
    }
   } else {
    $$0 = $$pr;
   }
  }
 } else {
  HEAP32[$4>>2] = -1;
  $22 = -1;
  label = 4;
 }
 if ((label|0) == 4) {
  $21 = $22 & 48;
  $23 = $21 ^ 16;
  $24 = HEAP32[$0>>2]|0;
  $25 = $23 | $24;
  HEAP32[$0>>2] = $25;
  $$0 = $22;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___emscripten_stdout_close($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___emscripten_stdout_seek($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 setTempRet0((0) | 0);
 return 0;
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _isdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function _sprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_vsnprintf($0,2147483647,$1,$2)|0);
 return ($3|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $4 = sp + 144|0;
 $5 = sp;
 _memcpy(($5|0),(129776|0),144)|0;
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 61;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $spec$select = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $spec$select;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($spec$select)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($spec$select|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___vfprintf_internal($0,$1,$2,1,1)|0);
 return ($3|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$0 = 0, $$0463$lcssa = 0, $$0463588 = 0, $$0464599 = 0, $$0471 = 0.0, $$0479 = 0, $$0487657 = 0, $$0488 = 0, $$0488669 = 0, $$0488671 = 0, $$0497670 = 0, $$0498 = 0, $$0511586 = 0.0, $$0512 = 0, $$0513 = 0, $$0516652 = 0, $$0522 = 0, $$0523 = 0, $$0525 = 0;
 var $$0527 = 0, $$0529 = 0, $$0529$in646 = 0, $$0532651 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482683 = 0, $$1489656 = 0, $$1499 = 0, $$1510587 = 0, $$1514$lcssa = 0, $$1514614 = 0, $$1517 = 0, $$1526 = 0, $$1528 = 0, $$1530621 = 0;
 var $$1533$lcssa = 0, $$1533645 = 0, $$1604 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483 = 0, $$2490$lcssa = 0, $$2490638 = 0, $$2500$lcssa = 0, $$2500682 = 0, $$2515 = 0, $$2518634 = 0, $$2531 = 0, $$2534633 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484663 = 0, $$3501$lcssa = 0;
 var $$3501676 = 0, $$3535620 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478594 = 0, $$4492 = 0, $$4502$lcssa = 0, $$4502662 = 0, $$4520 = 0, $$5$lcssa = 0, $$5486$lcssa = 0, $$5486639 = 0, $$5493603 = 0, $$5503 = 0, $$5521 = 0, $$560 = 0, $$5609 = 0, $$6 = 0, $$6494593 = 0, $$7495608 = 0;
 var $$8 = 0, $$8506 = 0, $$9 = 0, $$9507$lcssa = 0, $$9507625 = 0, $$lcssa583 = 0, $$lobit = 0, $$neg = 0, $$neg571 = 0, $$not = 0, $$pn = 0, $$pr = 0, $$pr564 = 0, $$pre = 0, $$pre$phi717Z2D = 0, $$pre$phi718Z2D = 0, $$pre720 = 0, $$sink757 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0;
 var $247 = 0.0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0.0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0;
 var $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond543 = 0, $or$cond546 = 0, $or$cond556 = 0, $or$cond559 = 0, $or$cond6 = 0, $scevgep711 = 0, $scevgep711712 = 0, $spec$select = 0, $spec$select539 = 0, $spec$select540 = 0, $spec$select540722 = 0, $spec$select540723 = 0;
 var $spec$select541 = 0, $spec$select544 = 0.0, $spec$select547 = 0, $spec$select548 = 0, $spec$select549 = 0, $spec$select551 = 0, $spec$select554 = 0, $spec$select557 = 0, $spec$select561 = 0.0, $spec$select562 = 0, $spec$select563 = 0, $spec$select565 = 0, $spec$select566 = 0, $spec$select567 = 0.0, $spec$select568 = 0.0, $spec$select569 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0;
 $6 = sp + 32|0;
 $7 = sp + 536|0;
 $8 = sp;
 $9 = $8;
 $10 = sp + 540|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 $12 = (___DOUBLE_BITS_670($1)|0);
 $13 = (getTempRet0() | 0);
 $14 = ($13|0)<(0);
 if ($14) {
  $15 = - $1;
  $16 = (___DOUBLE_BITS_670($15)|0);
  $17 = (getTempRet0() | 0);
  $$0471 = $15;$$0522 = 1;$$0523 = 134690;$25 = $17;$412 = $16;
 } else {
  $18 = $4 & 2048;
  $19 = ($18|0)==(0);
  $20 = $4 & 1;
  $21 = ($20|0)==(0);
  $$ = $21 ? (134691) : (134696);
  $spec$select565 = $19 ? $$ : (134693);
  $22 = $4 & 2049;
  $23 = ($22|0)!=(0);
  $spec$select566 = $23&1;
  $$0471 = $1;$$0522 = $spec$select566;$$0523 = $spec$select565;$25 = $13;$412 = $12;
 }
 $24 = $25 & 2146435072;
 $26 = (0)==(0);
 $27 = ($24|0)==(2146435072);
 $28 = $26 & $27;
 do {
  if ($28) {
   $29 = $5 & 32;
   $30 = ($29|0)!=(0);
   $31 = $30 ? 134709 : 134713;
   $32 = ($$0471 != $$0471) | (0.0 != 0.0);
   $33 = $30 ? 134717 : 134721;
   $$0512 = $32 ? $33 : $31;
   $34 = (($$0522) + 3)|0;
   $35 = $4 & -65537;
   _pad_667($0,32,$2,$34,$35);
   _out($0,$$0523,$$0522);
   _out($0,$$0512,3);
   $36 = $4 ^ 8192;
   _pad_667($0,32,$2,$34,$36);
   $$sink757 = $34;
  } else {
   $37 = (+_frexp($$0471,$7));
   $38 = $37 * 2.0;
   $39 = $38 != 0.0;
   if ($39) {
    $40 = HEAP32[$7>>2]|0;
    $41 = (($40) + -1)|0;
    HEAP32[$7>>2] = $41;
   }
   $42 = $5 | 32;
   $43 = ($42|0)==(97);
   if ($43) {
    $44 = $5 & 32;
    $45 = ($44|0)==(0);
    $46 = ((($$0523)) + 9|0);
    $spec$select = $45 ? $$0523 : $46;
    $47 = $$0522 | 2;
    $48 = ($3>>>0)>(11);
    $49 = (12 - ($3))|0;
    $50 = ($49|0)==(0);
    $51 = $48 | $50;
    do {
     if ($51) {
      $$1472 = $38;
     } else {
      $$0511586 = 8.0;$$1510587 = $49;
      while(1) {
       $52 = (($$1510587) + -1)|0;
       $53 = $$0511586 * 16.0;
       $54 = ($52|0)==(0);
       if ($54) {
        break;
       } else {
        $$0511586 = $53;$$1510587 = $52;
       }
      }
      $55 = HEAP8[$spec$select>>0]|0;
      $56 = ($55<<24>>24)==(45);
      if ($56) {
       $57 = - $38;
       $58 = $57 - $53;
       $59 = $53 + $58;
       $60 = - $59;
       $$1472 = $60;
       break;
      } else {
       $61 = $38 + $53;
       $62 = $61 - $53;
       $$1472 = $62;
       break;
      }
     }
    } while(0);
    $63 = HEAP32[$7>>2]|0;
    $64 = ($63|0)<(0);
    $65 = (0 - ($63))|0;
    $66 = $64 ? $65 : $63;
    $67 = ($66|0)<(0);
    $68 = $67 << 31 >> 31;
    $69 = (_fmt_u($66,$68,$11)|0);
    $70 = ($69|0)==($11|0);
    if ($70) {
     $71 = ((($10)) + 11|0);
     HEAP8[$71>>0] = 48;
     $$0513 = $71;
    } else {
     $$0513 = $69;
    }
    $72 = $63 >> 31;
    $73 = $72 & 2;
    $74 = (($73) + 43)|0;
    $75 = $74&255;
    $76 = ((($$0513)) + -1|0);
    HEAP8[$76>>0] = $75;
    $77 = (($5) + 15)|0;
    $78 = $77&255;
    $79 = ((($$0513)) + -2|0);
    HEAP8[$79>>0] = $78;
    $80 = ($3|0)<(1);
    $81 = $4 & 8;
    $82 = ($81|0)==(0);
    $$0525 = $8;$$2473 = $$1472;
    while(1) {
     $83 = (~~(($$2473)));
     $84 = (2400 + ($83)|0);
     $85 = HEAP8[$84>>0]|0;
     $86 = $85&255;
     $87 = $44 | $86;
     $88 = $87&255;
     $89 = ((($$0525)) + 1|0);
     HEAP8[$$0525>>0] = $88;
     $90 = (+($83|0));
     $91 = $$2473 - $90;
     $92 = $91 * 16.0;
     $93 = $89;
     $94 = (($93) - ($9))|0;
     $95 = ($94|0)==(1);
     if ($95) {
      $96 = $92 == 0.0;
      $or$cond3$not = $80 & $96;
      $or$cond = $82 & $or$cond3$not;
      if ($or$cond) {
       $$1526 = $89;
      } else {
       $97 = ((($$0525)) + 2|0);
       HEAP8[$89>>0] = 46;
       $$1526 = $97;
      }
     } else {
      $$1526 = $89;
     }
     $98 = $92 != 0.0;
     if ($98) {
      $$0525 = $$1526;$$2473 = $92;
     } else {
      break;
     }
    }
    $99 = ($3|0)==(0);
    $$pre720 = $$1526;
    if ($99) {
     label = 25;
    } else {
     $100 = (-2 - ($9))|0;
     $101 = (($100) + ($$pre720))|0;
     $102 = ($101|0)<($3|0);
     if ($102) {
      $103 = $11;
      $104 = $79;
      $105 = (($3) + 2)|0;
      $106 = (($105) + ($103))|0;
      $107 = (($106) - ($104))|0;
      $$0527 = $107;$$pre$phi717Z2D = $103;$$pre$phi718Z2D = $104;
     } else {
      label = 25;
     }
    }
    if ((label|0) == 25) {
     $108 = $11;
     $109 = $79;
     $110 = (($108) - ($9))|0;
     $111 = (($110) - ($109))|0;
     $112 = (($111) + ($$pre720))|0;
     $$0527 = $112;$$pre$phi717Z2D = $108;$$pre$phi718Z2D = $109;
    }
    $113 = (($$0527) + ($47))|0;
    _pad_667($0,32,$2,$113,$4);
    _out($0,$spec$select,$47);
    $114 = $4 ^ 65536;
    _pad_667($0,48,$2,$113,$114);
    $115 = (($$pre720) - ($9))|0;
    _out($0,$8,$115);
    $116 = (($$pre$phi717Z2D) - ($$pre$phi718Z2D))|0;
    $117 = (($115) + ($116))|0;
    $118 = (($$0527) - ($117))|0;
    _pad_667($0,48,$118,0,0);
    _out($0,$79,$116);
    $119 = $4 ^ 8192;
    _pad_667($0,32,$2,$113,$119);
    $$sink757 = $113;
    break;
   }
   $120 = ($3|0)<(0);
   $spec$select539 = $120 ? 6 : $3;
   if ($39) {
    $121 = $38 * 268435456.0;
    $122 = HEAP32[$7>>2]|0;
    $123 = (($122) + -28)|0;
    HEAP32[$7>>2] = $123;
    $$3 = $121;$$pr = $123;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $38;$$pr = $$pre;
   }
   $124 = ($$pr|0)<(0);
   $125 = ((($6)) + 288|0);
   $$0498 = $124 ? $6 : $125;
   $$1499 = $$0498;$$4 = $$3;
   while(1) {
    $126 = (~~(($$4))>>>0);
    HEAP32[$$1499>>2] = $126;
    $127 = ((($$1499)) + 4|0);
    $128 = (+($126>>>0));
    $129 = $$4 - $128;
    $130 = $129 * 1.0E+9;
    $131 = $130 != 0.0;
    if ($131) {
     $$1499 = $127;$$4 = $130;
    } else {
     break;
    }
   }
   $132 = $$0498;
   $133 = ($$pr|0)>(0);
   if ($133) {
    $$1482683 = $$0498;$$2500682 = $127;$135 = $$pr;
    while(1) {
     $134 = ($135|0)<(29);
     $136 = $134 ? $135 : 29;
     $$0488669 = ((($$2500682)) + -4|0);
     $137 = ($$0488669>>>0)<($$1482683>>>0);
     if ($137) {
      $$2483 = $$1482683;
     } else {
      $$0488671 = $$0488669;$$0497670 = 0;
      while(1) {
       $138 = HEAP32[$$0488671>>2]|0;
       $139 = (_bitshift64Shl(($138|0),0,($136|0))|0);
       $140 = (getTempRet0() | 0);
       $141 = (_i64Add(($139|0),($140|0),($$0497670|0),0)|0);
       $142 = (getTempRet0() | 0);
       $143 = (___udivdi3(($141|0),($142|0),1000000000,0)|0);
       $144 = (getTempRet0() | 0);
       $145 = (___muldi3(($143|0),($144|0),1000000000,0)|0);
       $146 = (getTempRet0() | 0);
       $147 = (_i64Subtract(($141|0),($142|0),($145|0),($146|0))|0);
       $148 = (getTempRet0() | 0);
       HEAP32[$$0488671>>2] = $147;
       $$0488 = ((($$0488671)) + -4|0);
       $149 = ($$0488>>>0)<($$1482683>>>0);
       if ($149) {
        break;
       } else {
        $$0488671 = $$0488;$$0497670 = $143;
       }
      }
      $150 = ($143|0)==(0);
      if ($150) {
       $$2483 = $$1482683;
      } else {
       $151 = ((($$1482683)) + -4|0);
       HEAP32[$151>>2] = $143;
       $$2483 = $151;
      }
     }
     $152 = ($$2500682>>>0)>($$2483>>>0);
     L57: do {
      if ($152) {
       $$3501676 = $$2500682;
       while(1) {
        $154 = ((($$3501676)) + -4|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = ($155|0)==(0);
        if (!($156)) {
         $$3501$lcssa = $$3501676;
         break L57;
        }
        $153 = ($154>>>0)>($$2483>>>0);
        if ($153) {
         $$3501676 = $154;
        } else {
         $$3501$lcssa = $154;
         break;
        }
       }
      } else {
       $$3501$lcssa = $$2500682;
      }
     } while(0);
     $157 = HEAP32[$7>>2]|0;
     $158 = (($157) - ($136))|0;
     HEAP32[$7>>2] = $158;
     $159 = ($158|0)>(0);
     if ($159) {
      $$1482683 = $$2483;$$2500682 = $$3501$lcssa;$135 = $158;
     } else {
      $$1482$lcssa = $$2483;$$2500$lcssa = $$3501$lcssa;$$pr564 = $158;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$0498;$$2500$lcssa = $127;$$pr564 = $$pr;
   }
   $160 = ($$pr564|0)<(0);
   if ($160) {
    $161 = (($spec$select539) + 25)|0;
    $162 = (($161|0) / 9)&-1;
    $163 = (($162) + 1)|0;
    $164 = ($42|0)==(102);
    $$3484663 = $$1482$lcssa;$$4502662 = $$2500$lcssa;$166 = $$pr564;
    while(1) {
     $165 = (0 - ($166))|0;
     $167 = ($165|0)<(9);
     $168 = $167 ? $165 : 9;
     $169 = ($$3484663>>>0)<($$4502662>>>0);
     if ($169) {
      $173 = 1 << $168;
      $174 = (($173) + -1)|0;
      $175 = 1000000000 >>> $168;
      $$0487657 = 0;$$1489656 = $$3484663;
      while(1) {
       $176 = HEAP32[$$1489656>>2]|0;
       $177 = $176 & $174;
       $178 = $176 >>> $168;
       $179 = (($178) + ($$0487657))|0;
       HEAP32[$$1489656>>2] = $179;
       $180 = Math_imul($177, $175)|0;
       $181 = ((($$1489656)) + 4|0);
       $182 = ($181>>>0)<($$4502662>>>0);
       if ($182) {
        $$0487657 = $180;$$1489656 = $181;
       } else {
        break;
       }
      }
      $183 = HEAP32[$$3484663>>2]|0;
      $184 = ($183|0)==(0);
      $185 = ((($$3484663)) + 4|0);
      $spec$select540 = $184 ? $185 : $$3484663;
      $186 = ($180|0)==(0);
      if ($186) {
       $$5503 = $$4502662;$spec$select540723 = $spec$select540;
      } else {
       $187 = ((($$4502662)) + 4|0);
       HEAP32[$$4502662>>2] = $180;
       $$5503 = $187;$spec$select540723 = $spec$select540;
      }
     } else {
      $170 = HEAP32[$$3484663>>2]|0;
      $171 = ($170|0)==(0);
      $172 = ((($$3484663)) + 4|0);
      $spec$select540722 = $171 ? $172 : $$3484663;
      $$5503 = $$4502662;$spec$select540723 = $spec$select540722;
     }
     $188 = $164 ? $$0498 : $spec$select540723;
     $189 = $$5503;
     $190 = $188;
     $191 = (($189) - ($190))|0;
     $192 = $191 >> 2;
     $193 = ($192|0)>($163|0);
     $194 = (($188) + ($163<<2)|0);
     $spec$select541 = $193 ? $194 : $$5503;
     $195 = HEAP32[$7>>2]|0;
     $196 = (($195) + ($168))|0;
     HEAP32[$7>>2] = $196;
     $197 = ($196|0)<(0);
     if ($197) {
      $$3484663 = $spec$select540723;$$4502662 = $spec$select541;$166 = $196;
     } else {
      $$3484$lcssa = $spec$select540723;$$4502$lcssa = $spec$select541;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$4502$lcssa = $$2500$lcssa;
   }
   $198 = ($$3484$lcssa>>>0)<($$4502$lcssa>>>0);
   if ($198) {
    $199 = $$3484$lcssa;
    $200 = (($132) - ($199))|0;
    $201 = $200 >> 2;
    $202 = ($201*9)|0;
    $203 = HEAP32[$$3484$lcssa>>2]|0;
    $204 = ($203>>>0)<(10);
    if ($204) {
     $$1517 = $202;
    } else {
     $$0516652 = $202;$$0532651 = 10;
     while(1) {
      $205 = ($$0532651*10)|0;
      $206 = (($$0516652) + 1)|0;
      $207 = ($203>>>0)<($205>>>0);
      if ($207) {
       $$1517 = $206;
       break;
      } else {
       $$0516652 = $206;$$0532651 = $205;
      }
     }
    }
   } else {
    $$1517 = 0;
   }
   $208 = ($42|0)==(102);
   $209 = $208 ? 0 : $$1517;
   $210 = (($spec$select539) - ($209))|0;
   $211 = ($42|0)==(103);
   $212 = ($spec$select539|0)!=(0);
   $213 = $212 & $211;
   $$neg = $213 << 31 >> 31;
   $214 = (($210) + ($$neg))|0;
   $215 = $$4502$lcssa;
   $216 = (($215) - ($132))|0;
   $217 = $216 >> 2;
   $218 = ($217*9)|0;
   $219 = (($218) + -9)|0;
   $220 = ($214|0)<($219|0);
   if ($220) {
    $221 = ((($$0498)) + 4|0);
    $222 = (($214) + 9216)|0;
    $223 = (($222|0) / 9)&-1;
    $224 = (($223) + -1024)|0;
    $225 = (($221) + ($224<<2)|0);
    $226 = ($223*9)|0;
    $227 = (($222) - ($226))|0;
    $228 = ($227|0)<(8);
    if ($228) {
     $$0529$in646 = $227;$$1533645 = 10;
     while(1) {
      $$0529 = (($$0529$in646) + 1)|0;
      $229 = ($$1533645*10)|0;
      $230 = ($$0529$in646|0)<(7);
      if ($230) {
       $$0529$in646 = $$0529;$$1533645 = $229;
      } else {
       $$1533$lcssa = $229;
       break;
      }
     }
    } else {
     $$1533$lcssa = 10;
    }
    $231 = HEAP32[$225>>2]|0;
    $232 = (($231>>>0) / ($$1533$lcssa>>>0))&-1;
    $233 = Math_imul($232, $$1533$lcssa)|0;
    $234 = (($231) - ($233))|0;
    $235 = ($234|0)==(0);
    $236 = ((($225)) + 4|0);
    $237 = ($236|0)==($$4502$lcssa|0);
    $or$cond543 = $237 & $235;
    if ($or$cond543) {
     $$4492 = $225;$$4520 = $$1517;$$8 = $$3484$lcssa;
    } else {
     $238 = $232 & 1;
     $239 = ($238|0)==(0);
     $spec$select544 = $239 ? 9007199254740992.0 : 9007199254740994.0;
     $240 = $$1533$lcssa >>> 1;
     $241 = ($234>>>0)<($240>>>0);
     $242 = ($234|0)==($240|0);
     $or$cond546 = $237 & $242;
     $spec$select561 = $or$cond546 ? 1.0 : 1.5;
     $spec$select567 = $241 ? 0.5 : $spec$select561;
     $243 = ($$0522|0)==(0);
     if ($243) {
      $$1467 = $spec$select567;$$1469 = $spec$select544;
     } else {
      $244 = HEAP8[$$0523>>0]|0;
      $245 = ($244<<24>>24)==(45);
      $246 = - $spec$select544;
      $247 = - $spec$select567;
      $spec$select568 = $245 ? $246 : $spec$select544;
      $spec$select569 = $245 ? $247 : $spec$select567;
      $$1467 = $spec$select569;$$1469 = $spec$select568;
     }
     $248 = (($231) - ($234))|0;
     HEAP32[$225>>2] = $248;
     $249 = $$1469 + $$1467;
     $250 = $249 != $$1469;
     if ($250) {
      $251 = (($248) + ($$1533$lcssa))|0;
      HEAP32[$225>>2] = $251;
      $252 = ($251>>>0)>(999999999);
      if ($252) {
       $$2490638 = $225;$$5486639 = $$3484$lcssa;
       while(1) {
        $253 = ((($$2490638)) + -4|0);
        HEAP32[$$2490638>>2] = 0;
        $254 = ($253>>>0)<($$5486639>>>0);
        if ($254) {
         $255 = ((($$5486639)) + -4|0);
         HEAP32[$255>>2] = 0;
         $$6 = $255;
        } else {
         $$6 = $$5486639;
        }
        $256 = HEAP32[$253>>2]|0;
        $257 = (($256) + 1)|0;
        HEAP32[$253>>2] = $257;
        $258 = ($257>>>0)>(999999999);
        if ($258) {
         $$2490638 = $253;$$5486639 = $$6;
        } else {
         $$2490$lcssa = $253;$$5486$lcssa = $$6;
         break;
        }
       }
      } else {
       $$2490$lcssa = $225;$$5486$lcssa = $$3484$lcssa;
      }
      $259 = $$5486$lcssa;
      $260 = (($132) - ($259))|0;
      $261 = $260 >> 2;
      $262 = ($261*9)|0;
      $263 = HEAP32[$$5486$lcssa>>2]|0;
      $264 = ($263>>>0)<(10);
      if ($264) {
       $$4492 = $$2490$lcssa;$$4520 = $262;$$8 = $$5486$lcssa;
      } else {
       $$2518634 = $262;$$2534633 = 10;
       while(1) {
        $265 = ($$2534633*10)|0;
        $266 = (($$2518634) + 1)|0;
        $267 = ($263>>>0)<($265>>>0);
        if ($267) {
         $$4492 = $$2490$lcssa;$$4520 = $266;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2518634 = $266;$$2534633 = $265;
        }
       }
      }
     } else {
      $$4492 = $225;$$4520 = $$1517;$$8 = $$3484$lcssa;
     }
    }
    $268 = ((($$4492)) + 4|0);
    $269 = ($$4502$lcssa>>>0)>($268>>>0);
    $spec$select547 = $269 ? $268 : $$4502$lcssa;
    $$5521 = $$4520;$$8506 = $spec$select547;$$9 = $$8;
   } else {
    $$5521 = $$1517;$$8506 = $$4502$lcssa;$$9 = $$3484$lcssa;
   }
   $270 = (0 - ($$5521))|0;
   $271 = ($$8506>>>0)>($$9>>>0);
   L109: do {
    if ($271) {
     $$9507625 = $$8506;
     while(1) {
      $273 = ((($$9507625)) + -4|0);
      $274 = HEAP32[$273>>2]|0;
      $275 = ($274|0)==(0);
      if (!($275)) {
       $$9507$lcssa = $$9507625;$$lcssa583 = 1;
       break L109;
      }
      $272 = ($273>>>0)>($$9>>>0);
      if ($272) {
       $$9507625 = $273;
      } else {
       $$9507$lcssa = $273;$$lcssa583 = 0;
       break;
      }
     }
    } else {
     $$9507$lcssa = $$8506;$$lcssa583 = 0;
    }
   } while(0);
   do {
    if ($211) {
     $not$ = $212 ^ 1;
     $276 = $not$&1;
     $spec$select548 = (($spec$select539) + ($276))|0;
     $277 = ($spec$select548|0)>($$5521|0);
     $278 = ($$5521|0)>(-5);
     $or$cond6 = $277 & $278;
     if ($or$cond6) {
      $279 = (($5) + -1)|0;
      $$neg571 = (($spec$select548) + -1)|0;
      $280 = (($$neg571) - ($$5521))|0;
      $$0479 = $279;$$2476 = $280;
     } else {
      $281 = (($5) + -2)|0;
      $282 = (($spec$select548) + -1)|0;
      $$0479 = $281;$$2476 = $282;
     }
     $283 = $4 & 8;
     $284 = ($283|0)==(0);
     if ($284) {
      if ($$lcssa583) {
       $285 = ((($$9507$lcssa)) + -4|0);
       $286 = HEAP32[$285>>2]|0;
       $287 = ($286|0)==(0);
       if ($287) {
        $$2531 = 9;
       } else {
        $288 = (($286>>>0) % 10)&-1;
        $289 = ($288|0)==(0);
        if ($289) {
         $$1530621 = 0;$$3535620 = 10;
         while(1) {
          $290 = ($$3535620*10)|0;
          $291 = (($$1530621) + 1)|0;
          $292 = (($286>>>0) % ($290>>>0))&-1;
          $293 = ($292|0)==(0);
          if ($293) {
           $$1530621 = $291;$$3535620 = $290;
          } else {
           $$2531 = $291;
           break;
          }
         }
        } else {
         $$2531 = 0;
        }
       }
      } else {
       $$2531 = 9;
      }
      $294 = $$0479 | 32;
      $295 = ($294|0)==(102);
      $296 = $$9507$lcssa;
      $297 = (($296) - ($132))|0;
      $298 = $297 >> 2;
      $299 = ($298*9)|0;
      $300 = (($299) + -9)|0;
      if ($295) {
       $301 = (($300) - ($$2531))|0;
       $302 = ($301|0)>(0);
       $spec$select549 = $302 ? $301 : 0;
       $303 = ($$2476|0)<($spec$select549|0);
       $spec$select562 = $303 ? $$2476 : $spec$select549;
       $$1480 = $$0479;$$3477 = $spec$select562;
       break;
      } else {
       $304 = (($300) + ($$5521))|0;
       $305 = (($304) - ($$2531))|0;
       $306 = ($305|0)>(0);
       $spec$select551 = $306 ? $305 : 0;
       $307 = ($$2476|0)<($spec$select551|0);
       $spec$select563 = $307 ? $$2476 : $spec$select551;
       $$1480 = $$0479;$$3477 = $spec$select563;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;
     }
    } else {
     $$1480 = $5;$$3477 = $spec$select539;
    }
   } while(0);
   $308 = ($$3477|0)!=(0);
   $309 = $4 >>> 3;
   $$lobit = $309 & 1;
   $310 = $308 ? 1 : $$lobit;
   $311 = $$1480 | 32;
   $312 = ($311|0)==(102);
   if ($312) {
    $313 = ($$5521|0)>(0);
    $314 = $313 ? $$5521 : 0;
    $$2515 = 0;$$pn = $314;
   } else {
    $315 = ($$5521|0)<(0);
    $316 = $315 ? $270 : $$5521;
    $317 = ($316|0)<(0);
    $318 = $317 << 31 >> 31;
    $319 = (_fmt_u($316,$318,$11)|0);
    $320 = $11;
    $321 = $319;
    $322 = (($320) - ($321))|0;
    $323 = ($322|0)<(2);
    if ($323) {
     $$1514614 = $319;
     while(1) {
      $324 = ((($$1514614)) + -1|0);
      HEAP8[$324>>0] = 48;
      $325 = $324;
      $326 = (($320) - ($325))|0;
      $327 = ($326|0)<(2);
      if ($327) {
       $$1514614 = $324;
      } else {
       $$1514$lcssa = $324;
       break;
      }
     }
    } else {
     $$1514$lcssa = $319;
    }
    $328 = $$5521 >> 31;
    $329 = $328 & 2;
    $330 = (($329) + 43)|0;
    $331 = $330&255;
    $332 = ((($$1514$lcssa)) + -1|0);
    HEAP8[$332>>0] = $331;
    $333 = $$1480&255;
    $334 = ((($$1514$lcssa)) + -2|0);
    HEAP8[$334>>0] = $333;
    $335 = $334;
    $336 = (($320) - ($335))|0;
    $$2515 = $334;$$pn = $336;
   }
   $337 = (($$0522) + 1)|0;
   $338 = (($337) + ($$3477))|0;
   $$1528 = (($338) + ($310))|0;
   $339 = (($$1528) + ($$pn))|0;
   _pad_667($0,32,$2,$339,$4);
   _out($0,$$0523,$$0522);
   $340 = $4 ^ 65536;
   _pad_667($0,48,$2,$339,$340);
   if ($312) {
    $341 = ($$9>>>0)>($$0498>>>0);
    $spec$select554 = $341 ? $$0498 : $$9;
    $342 = ((($8)) + 9|0);
    $343 = $342;
    $344 = ((($8)) + 8|0);
    $$5493603 = $spec$select554;
    while(1) {
     $345 = HEAP32[$$5493603>>2]|0;
     $346 = (_fmt_u($345,0,$342)|0);
     $347 = ($$5493603|0)==($spec$select554|0);
     if ($347) {
      $353 = ($346|0)==($342|0);
      if ($353) {
       HEAP8[$344>>0] = 48;
       $$1465 = $344;
      } else {
       $$1465 = $346;
      }
     } else {
      $348 = ($346>>>0)>($8>>>0);
      if ($348) {
       $349 = $346;
       $350 = (($349) - ($9))|0;
       _memset(($8|0),48,($350|0))|0;
       $$0464599 = $346;
       while(1) {
        $351 = ((($$0464599)) + -1|0);
        $352 = ($351>>>0)>($8>>>0);
        if ($352) {
         $$0464599 = $351;
        } else {
         $$1465 = $351;
         break;
        }
       }
      } else {
       $$1465 = $346;
      }
     }
     $354 = $$1465;
     $355 = (($343) - ($354))|0;
     _out($0,$$1465,$355);
     $356 = ((($$5493603)) + 4|0);
     $357 = ($356>>>0)>($$0498>>>0);
     if ($357) {
      break;
     } else {
      $$5493603 = $356;
     }
    }
    $$not = $308 ^ 1;
    $358 = $4 & 8;
    $359 = ($358|0)==(0);
    $or$cond556 = $359 & $$not;
    if (!($or$cond556)) {
     _out($0,134725,1);
    }
    $360 = ($356>>>0)<($$9507$lcssa>>>0);
    $361 = ($$3477|0)>(0);
    $362 = $360 & $361;
    if ($362) {
     $$4478594 = $$3477;$$6494593 = $356;
     while(1) {
      $363 = HEAP32[$$6494593>>2]|0;
      $364 = (_fmt_u($363,0,$342)|0);
      $365 = ($364>>>0)>($8>>>0);
      if ($365) {
       $366 = $364;
       $367 = (($366) - ($9))|0;
       _memset(($8|0),48,($367|0))|0;
       $$0463588 = $364;
       while(1) {
        $368 = ((($$0463588)) + -1|0);
        $369 = ($368>>>0)>($8>>>0);
        if ($369) {
         $$0463588 = $368;
        } else {
         $$0463$lcssa = $368;
         break;
        }
       }
      } else {
       $$0463$lcssa = $364;
      }
      $370 = ($$4478594|0)<(9);
      $371 = $370 ? $$4478594 : 9;
      _out($0,$$0463$lcssa,$371);
      $372 = ((($$6494593)) + 4|0);
      $373 = (($$4478594) + -9)|0;
      $374 = ($372>>>0)<($$9507$lcssa>>>0);
      $375 = ($$4478594|0)>(9);
      $376 = $374 & $375;
      if ($376) {
       $$4478594 = $373;$$6494593 = $372;
      } else {
       $$4478$lcssa = $373;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $377 = (($$4478$lcssa) + 9)|0;
    _pad_667($0,48,$377,9,0);
   } else {
    $378 = ((($$9)) + 4|0);
    $spec$select557 = $$lcssa583 ? $$9507$lcssa : $378;
    $379 = ($$9>>>0)<($spec$select557>>>0);
    $380 = ($$3477|0)>(-1);
    $381 = $379 & $380;
    if ($381) {
     $382 = ((($8)) + 9|0);
     $383 = $4 & 8;
     $384 = ($383|0)==(0);
     $385 = $382;
     $386 = (0 - ($9))|0;
     $387 = ((($8)) + 8|0);
     $$5609 = $$3477;$$7495608 = $$9;
     while(1) {
      $388 = HEAP32[$$7495608>>2]|0;
      $389 = (_fmt_u($388,0,$382)|0);
      $390 = ($389|0)==($382|0);
      if ($390) {
       HEAP8[$387>>0] = 48;
       $$0 = $387;
      } else {
       $$0 = $389;
      }
      $391 = ($$7495608|0)==($$9|0);
      do {
       if ($391) {
        $395 = ((($$0)) + 1|0);
        _out($0,$$0,1);
        $396 = ($$5609|0)<(1);
        $or$cond559 = $384 & $396;
        if ($or$cond559) {
         $$2 = $395;
         break;
        }
        _out($0,134725,1);
        $$2 = $395;
       } else {
        $392 = ($$0>>>0)>($8>>>0);
        if (!($392)) {
         $$2 = $$0;
         break;
        }
        $scevgep711 = (($$0) + ($386)|0);
        $scevgep711712 = $scevgep711;
        _memset(($8|0),48,($scevgep711712|0))|0;
        $$1604 = $$0;
        while(1) {
         $393 = ((($$1604)) + -1|0);
         $394 = ($393>>>0)>($8>>>0);
         if ($394) {
          $$1604 = $393;
         } else {
          $$2 = $393;
          break;
         }
        }
       }
      } while(0);
      $397 = $$2;
      $398 = (($385) - ($397))|0;
      $399 = ($$5609|0)>($398|0);
      $400 = $399 ? $398 : $$5609;
      _out($0,$$2,$400);
      $401 = (($$5609) - ($398))|0;
      $402 = ((($$7495608)) + 4|0);
      $403 = ($402>>>0)<($spec$select557>>>0);
      $404 = ($401|0)>(-1);
      $405 = $403 & $404;
      if ($405) {
       $$5609 = $401;$$7495608 = $402;
      } else {
       $$5$lcssa = $401;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $406 = (($$5$lcssa) + 18)|0;
    _pad_667($0,48,$406,18,0);
    $407 = $11;
    $408 = $$2515;
    $409 = (($407) - ($408))|0;
    _out($0,$$2515,$409);
   }
   $410 = $4 ^ 8192;
   _pad_667($0,32,$2,$339,$410);
   $$sink757 = $339;
  }
 } while(0);
 $411 = ($$sink757|0)<($2|0);
 $$560 = $411 ? $2 : $$sink757;
 STACKTOP = sp;return ($$560|0);
}
function _pop_arg_long_double($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arglist_current = HEAP32[$1>>2]|0;
 $2 = $arglist_current;
 $3 = ((0) + 8|0);
 $expanded1 = $3;
 $expanded = (($expanded1) - 1)|0;
 $4 = (($2) + ($expanded))|0;
 $5 = ((0) + 8|0);
 $expanded5 = $5;
 $expanded4 = (($expanded5) - 1)|0;
 $expanded3 = $expanded4 ^ -1;
 $6 = $4 & $expanded3;
 $7 = $6;
 $8 = +HEAPF64[$7>>3];
 $arglist_next = ((($7)) + 8|0);
 HEAP32[$1>>2] = $arglist_next;
 HEAPF64[$0>>3] = $8;
 return;
}
function ___vfprintf_internal($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $spec$select = 0, $spec$select45 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $5 = sp + 208|0;
 $6 = sp + 160|0;
 $7 = sp + 80|0;
 $8 = sp;
 dest=$6; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$5>>2] = $vacopy_currentptr;
 $9 = (_printf_core(0,$1,$5,$7,$6,$3,$4)|0);
 $10 = ($9|0)<(0);
 if ($10) {
  $$0 = -1;
 } else {
  $11 = ((($0)) + 76|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)>(-1);
  if ($13) {
   $14 = (___lockfile($0)|0);
   $42 = $14;
  } else {
   $42 = 0;
  }
  $15 = HEAP32[$0>>2]|0;
  $16 = $15 & 32;
  $17 = ((($0)) + 74|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = ($18<<24>>24)<(1);
  if ($19) {
   $20 = $15 & -33;
   HEAP32[$0>>2] = $20;
  }
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(0);
  if ($23) {
   $25 = ((($0)) + 44|0);
   $26 = HEAP32[$25>>2]|0;
   HEAP32[$25>>2] = $8;
   $27 = ((($0)) + 28|0);
   HEAP32[$27>>2] = $8;
   $28 = ((($0)) + 20|0);
   HEAP32[$28>>2] = $8;
   HEAP32[$21>>2] = 80;
   $29 = ((($8)) + 80|0);
   $30 = ((($0)) + 16|0);
   HEAP32[$30>>2] = $29;
   $31 = (_printf_core($0,$1,$5,$7,$6,$3,$4)|0);
   $32 = ($26|0)==(0|0);
   if ($32) {
    $$1 = $31;
   } else {
    $33 = ((($0)) + 36|0);
    $34 = HEAP32[$33>>2]|0;
    (FUNCTION_TABLE_iiii[$34 & 3]($0,0,0)|0);
    $35 = HEAP32[$28>>2]|0;
    $36 = ($35|0)==(0|0);
    $spec$select = $36 ? -1 : $31;
    HEAP32[$25>>2] = $26;
    HEAP32[$21>>2] = 0;
    HEAP32[$30>>2] = 0;
    HEAP32[$27>>2] = 0;
    HEAP32[$28>>2] = 0;
    $$1 = $spec$select;
   }
  } else {
   $24 = (_printf_core($0,$1,$5,$7,$6,$3,$4)|0);
   $$1 = $24;
  }
  $37 = HEAP32[$0>>2]|0;
  $38 = $37 & 32;
  $39 = ($38|0)==(0);
  $spec$select45 = $39 ? $$1 : -1;
  $40 = $37 | $16;
  HEAP32[$0>>2] = $40;
  $41 = ($42|0)==(0);
  if (!($41)) {
   ___unlockfile($0);
  }
  $$0 = $spec$select45;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$ = 0, $$0 = 0, $$0231 = 0, $$0232336 = 0, $$0234 = 0, $$0237 = 0, $$0239 = 0, $$0242315 = 0, $$0242315373 = 0, $$0242335 = 0, $$0245 = 0, $$0245$ph = 0, $$0245$ph$be = 0, $$0249 = 0, $$0249$ph = 0, $$0251$lcssa = 0, $$0251323 = 0, $$0254 = 0, $$0255 = 0, $$0256 = 0;
 var $$0261 = 0, $$0264$lcssa = 0, $$0264330 = 0, $$0271$ph = 0, $$1 = 0, $$1233342 = 0, $$1235 = 0, $$1238 = 0, $$1240 = 0, $$1243341 = 0, $$1250 = 0, $$1252 = 0, $$1257 = 0, $$1262 = 0, $$1265 = 0, $$1272 = 0, $$2236 = 0, $$2241 = 0, $$2244322 = 0, $$2258 = 0;
 var $$2258$ = 0, $$2263 = 0, $$2273 = 0, $$3259 = 0, $$3267 = 0, $$3274 = 0, $$3319 = 0, $$4260372 = 0, $$4268 = 0, $$5 = 0, $$6270 = 0, $$lcssa310 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre362 = 0, $$pre364 = 0, $$pre365 = 0, $$pre365$pre = 0, $$pre366 = 0, $$pre370 = 0;
 var $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0.0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $brmerge = 0, $brmerge328 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $or$cond = 0;
 var $or$cond278 = 0, $or$cond280 = 0, $or$cond285 = 0, $spec$select = 0, $spec$select283 = 0, $spec$select286 = 0, $spec$select293 = 0, $spec$select294 = 0, $spec$select295 = 0, $spec$select296 = 0, $spec$select297 = 0, $spec$select298 = 0, $spec$select299 = 0, $spec$select300 = 0, $spec$select301 = 0, $storemerge275$lcssa = 0, $storemerge275329 = 0, $storemerge276 = 0, $trunc = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $7 = sp + 56|0;
 $8 = sp + 40|0;
 $9 = sp;
 $10 = sp + 48|0;
 $11 = sp + 60|0;
 HEAP32[$7>>2] = $1;
 $12 = ($0|0)!=(0|0);
 $13 = ((($9)) + 40|0);
 $14 = $13;
 $15 = ((($9)) + 39|0);
 $16 = ((($10)) + 4|0);
 $$0245$ph = 0;$$0249$ph = 0;$$0271$ph = 0;
 L1: while(1) {
  $$0245 = $$0245$ph;$$0249 = $$0249$ph;
  while(1) {
   $17 = ($$0249|0)>(-1);
   do {
    if ($17) {
     $18 = (2147483647 - ($$0249))|0;
     $19 = ($$0245|0)>($18|0);
     if ($19) {
      $20 = (___errno_location()|0);
      HEAP32[$20>>2] = 61;
      $$1250 = -1;
      break;
     } else {
      $21 = (($$0245) + ($$0249))|0;
      $$1250 = $21;
      break;
     }
    } else {
     $$1250 = $$0249;
    }
   } while(0);
   $22 = HEAP32[$7>>2]|0;
   $23 = HEAP8[$22>>0]|0;
   $24 = ($23<<24>>24)==(0);
   if ($24) {
    label = 92;
    break L1;
   }
   $25 = $23;$27 = $22;
   L12: while(1) {
    switch ($25<<24>>24) {
    case 37:  {
     label = 10;
     break L12;
     break;
    }
    case 0:  {
     $$0251$lcssa = $27;
     break L12;
     break;
    }
    default: {
    }
    }
    $26 = ((($27)) + 1|0);
    HEAP32[$7>>2] = $26;
    $$pre = HEAP8[$26>>0]|0;
    $25 = $$pre;$27 = $26;
   }
   L15: do {
    if ((label|0) == 10) {
     label = 0;
     $$0251323 = $27;$29 = $27;
     while(1) {
      $28 = ((($29)) + 1|0);
      $30 = HEAP8[$28>>0]|0;
      $31 = ($30<<24>>24)==(37);
      if (!($31)) {
       $$0251$lcssa = $$0251323;
       break L15;
      }
      $32 = ((($$0251323)) + 1|0);
      $33 = ((($29)) + 2|0);
      HEAP32[$7>>2] = $33;
      $34 = HEAP8[$33>>0]|0;
      $35 = ($34<<24>>24)==(37);
      if ($35) {
       $$0251323 = $32;$29 = $33;
      } else {
       $$0251$lcssa = $32;
       break;
      }
     }
    }
   } while(0);
   $36 = $$0251$lcssa;
   $37 = $22;
   $38 = (($36) - ($37))|0;
   if ($12) {
    _out($0,$22,$38);
   }
   $39 = ($38|0)==(0);
   if ($39) {
    break;
   } else {
    $$0245 = $38;$$0249 = $$1250;
   }
  }
  $40 = HEAP32[$7>>2]|0;
  $41 = ((($40)) + 1|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42 << 24 >> 24;
  $44 = (_isdigit($43)|0);
  $45 = ($44|0)==(0);
  $$pre362 = HEAP32[$7>>2]|0;
  if ($45) {
   $$0255 = -1;$$1272 = $$0271$ph;$$sink = 1;
  } else {
   $46 = ((($$pre362)) + 2|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = ($47<<24>>24)==(36);
   if ($48) {
    $49 = ((($$pre362)) + 1|0);
    $50 = HEAP8[$49>>0]|0;
    $51 = $50 << 24 >> 24;
    $52 = (($51) + -48)|0;
    $$0255 = $52;$$1272 = 1;$$sink = 3;
   } else {
    $$0255 = -1;$$1272 = $$0271$ph;$$sink = 1;
   }
  }
  $53 = (($$pre362) + ($$sink)|0);
  HEAP32[$7>>2] = $53;
  $54 = HEAP8[$53>>0]|0;
  $55 = $54 << 24 >> 24;
  $56 = (($55) + -32)|0;
  $57 = ($56>>>0)>(31);
  $58 = 1 << $56;
  $59 = $58 & 75913;
  $60 = ($59|0)==(0);
  $brmerge328 = $57 | $60;
  if ($brmerge328) {
   $$0264$lcssa = 0;$$lcssa310 = $54;$storemerge275$lcssa = $53;
  } else {
   $$0264330 = 0;$62 = $56;$storemerge275329 = $53;
   while(1) {
    $61 = 1 << $62;
    $63 = $61 | $$0264330;
    $64 = ((($storemerge275329)) + 1|0);
    HEAP32[$7>>2] = $64;
    $65 = HEAP8[$64>>0]|0;
    $66 = $65 << 24 >> 24;
    $67 = (($66) + -32)|0;
    $68 = ($67>>>0)>(31);
    $69 = 1 << $67;
    $70 = $69 & 75913;
    $71 = ($70|0)==(0);
    $brmerge = $68 | $71;
    if ($brmerge) {
     $$0264$lcssa = $63;$$lcssa310 = $65;$storemerge275$lcssa = $64;
     break;
    } else {
     $$0264330 = $63;$62 = $67;$storemerge275329 = $64;
    }
   }
  }
  $72 = ($$lcssa310<<24>>24)==(42);
  if ($72) {
   $73 = ((($storemerge275$lcssa)) + 1|0);
   $74 = HEAP8[$73>>0]|0;
   $75 = $74 << 24 >> 24;
   $76 = (_isdigit($75)|0);
   $77 = ($76|0)==(0);
   if ($77) {
    label = 27;
   } else {
    $78 = HEAP32[$7>>2]|0;
    $79 = ((($78)) + 2|0);
    $80 = HEAP8[$79>>0]|0;
    $81 = ($80<<24>>24)==(36);
    if ($81) {
     $82 = ((($78)) + 1|0);
     $83 = HEAP8[$82>>0]|0;
     $84 = $83 << 24 >> 24;
     $85 = (($84) + -48)|0;
     $86 = (($4) + ($85<<2)|0);
     HEAP32[$86>>2] = 10;
     $87 = HEAP8[$82>>0]|0;
     $88 = $87 << 24 >> 24;
     $89 = (($88) + -48)|0;
     $90 = (($3) + ($89<<3)|0);
     $91 = $90;
     $92 = $91;
     $93 = HEAP32[$92>>2]|0;
     $94 = (($91) + 4)|0;
     $95 = $94;
     $96 = HEAP32[$95>>2]|0;
     $97 = ((($78)) + 3|0);
     $$0261 = $93;$$2273 = 1;$storemerge276 = $97;
    } else {
     label = 27;
    }
   }
   if ((label|0) == 27) {
    label = 0;
    $98 = ($$1272|0)==(0);
    if (!($98)) {
     $$0 = -1;
     break;
    }
    if ($12) {
     $arglist_current = HEAP32[$2>>2]|0;
     $99 = $arglist_current;
     $100 = ((0) + 4|0);
     $expanded4 = $100;
     $expanded = (($expanded4) - 1)|0;
     $101 = (($99) + ($expanded))|0;
     $102 = ((0) + 4|0);
     $expanded8 = $102;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $103 = $101 & $expanded6;
     $104 = $103;
     $105 = HEAP32[$104>>2]|0;
     $arglist_next = ((($104)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $367 = $105;
    } else {
     $367 = 0;
    }
    $106 = HEAP32[$7>>2]|0;
    $107 = ((($106)) + 1|0);
    $$0261 = $367;$$2273 = 0;$storemerge276 = $107;
   }
   HEAP32[$7>>2] = $storemerge276;
   $108 = ($$0261|0)<(0);
   $109 = $$0264$lcssa | 8192;
   $110 = (0 - ($$0261))|0;
   $spec$select293 = $108 ? $109 : $$0264$lcssa;
   $spec$select294 = $108 ? $110 : $$0261;
   $$1262 = $spec$select294;$$1265 = $spec$select293;$$3274 = $$2273;$114 = $storemerge276;
  } else {
   $111 = (_getint($7)|0);
   $112 = ($111|0)<(0);
   if ($112) {
    $$0 = -1;
    break;
   }
   $$pre364 = HEAP32[$7>>2]|0;
   $$1262 = $111;$$1265 = $$0264$lcssa;$$3274 = $$1272;$114 = $$pre364;
  }
  $113 = HEAP8[$114>>0]|0;
  $115 = ($113<<24>>24)==(46);
  do {
   if ($115) {
    $116 = ((($114)) + 1|0);
    $117 = HEAP8[$116>>0]|0;
    $118 = ($117<<24>>24)==(42);
    if (!($118)) {
     HEAP32[$7>>2] = $116;
     $154 = (_getint($7)|0);
     $$pre365$pre = HEAP32[$7>>2]|0;
     $$0256 = $154;$$pre365 = $$pre365$pre;
     break;
    }
    $119 = ((($114)) + 2|0);
    $120 = HEAP8[$119>>0]|0;
    $121 = $120 << 24 >> 24;
    $122 = (_isdigit($121)|0);
    $123 = ($122|0)==(0);
    if (!($123)) {
     $124 = HEAP32[$7>>2]|0;
     $125 = ((($124)) + 3|0);
     $126 = HEAP8[$125>>0]|0;
     $127 = ($126<<24>>24)==(36);
     if ($127) {
      $128 = ((($124)) + 2|0);
      $129 = HEAP8[$128>>0]|0;
      $130 = $129 << 24 >> 24;
      $131 = (($130) + -48)|0;
      $132 = (($4) + ($131<<2)|0);
      HEAP32[$132>>2] = 10;
      $133 = HEAP8[$128>>0]|0;
      $134 = $133 << 24 >> 24;
      $135 = (($134) + -48)|0;
      $136 = (($3) + ($135<<3)|0);
      $137 = $136;
      $138 = $137;
      $139 = HEAP32[$138>>2]|0;
      $140 = (($137) + 4)|0;
      $141 = $140;
      $142 = HEAP32[$141>>2]|0;
      $143 = ((($124)) + 4|0);
      HEAP32[$7>>2] = $143;
      $$0256 = $139;$$pre365 = $143;
      break;
     }
    }
    $144 = ($$3274|0)==(0);
    if (!($144)) {
     $$0 = -1;
     break L1;
    }
    if ($12) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $145 = $arglist_current2;
     $146 = ((0) + 4|0);
     $expanded11 = $146;
     $expanded10 = (($expanded11) - 1)|0;
     $147 = (($145) + ($expanded10))|0;
     $148 = ((0) + 4|0);
     $expanded15 = $148;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $149 = $147 & $expanded13;
     $150 = $149;
     $151 = HEAP32[$150>>2]|0;
     $arglist_next3 = ((($150)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $368 = $151;
    } else {
     $368 = 0;
    }
    $152 = HEAP32[$7>>2]|0;
    $153 = ((($152)) + 2|0);
    HEAP32[$7>>2] = $153;
    $$0256 = $368;$$pre365 = $153;
   } else {
    $$0256 = -1;$$pre365 = $114;
   }
  } while(0);
  $$0254 = 0;$156 = $$pre365;
  while(1) {
   $155 = HEAP8[$156>>0]|0;
   $157 = $155 << 24 >> 24;
   $158 = (($157) + -65)|0;
   $159 = ($158>>>0)>(57);
   if ($159) {
    $$0 = -1;
    break L1;
   }
   $160 = ((($156)) + 1|0);
   HEAP32[$7>>2] = $160;
   $161 = HEAP8[$156>>0]|0;
   $162 = $161 << 24 >> 24;
   $163 = (($162) + -65)|0;
   $164 = ((1936 + (($$0254*58)|0)|0) + ($163)|0);
   $165 = HEAP8[$164>>0]|0;
   $166 = $165&255;
   $167 = (($166) + -1)|0;
   $168 = ($167>>>0)<(8);
   if ($168) {
    $$0254 = $166;$156 = $160;
   } else {
    break;
   }
  }
  $169 = ($165<<24>>24)==(0);
  if ($169) {
   $$0 = -1;
   break;
  }
  $170 = ($165<<24>>24)==(19);
  $171 = ($$0255|0)>(-1);
  do {
   if ($170) {
    if ($171) {
     $$0 = -1;
     break L1;
    } else {
     label = 54;
    }
   } else {
    if ($171) {
     $172 = (($4) + ($$0255<<2)|0);
     HEAP32[$172>>2] = $166;
     $173 = (($3) + ($$0255<<3)|0);
     $174 = $173;
     $175 = $174;
     $176 = HEAP32[$175>>2]|0;
     $177 = (($174) + 4)|0;
     $178 = $177;
     $179 = HEAP32[$178>>2]|0;
     $180 = $8;
     $181 = $180;
     HEAP32[$181>>2] = $176;
     $182 = (($180) + 4)|0;
     $183 = $182;
     HEAP32[$183>>2] = $179;
     label = 54;
     break;
    }
    if (!($12)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($8,$166,$2,$6);
    $$pre366 = HEAP32[$7>>2]|0;
    $185 = $$pre366;
    label = 55;
   }
  } while(0);
  if ((label|0) == 54) {
   label = 0;
   if ($12) {
    $185 = $160;
    label = 55;
   } else {
    $$0245$ph$be = 0;
   }
  }
  L77: do {
   if ((label|0) == 55) {
    label = 0;
    $184 = ((($185)) + -1|0);
    $186 = HEAP8[$184>>0]|0;
    $187 = $186 << 24 >> 24;
    $188 = ($$0254|0)!=(0);
    $189 = $187 & 15;
    $190 = ($189|0)==(3);
    $or$cond278 = $188 & $190;
    $191 = $187 & -33;
    $$0237 = $or$cond278 ? $191 : $187;
    $192 = $$1265 & 8192;
    $193 = ($192|0)==(0);
    $194 = $$1265 & -65537;
    $spec$select = $193 ? $$1265 : $194;
    L79: do {
     switch ($$0237|0) {
     case 110:  {
      $trunc = $$0254&255;
      switch ($trunc<<24>>24) {
      case 0:  {
       $201 = HEAP32[$8>>2]|0;
       HEAP32[$201>>2] = $$1250;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
      case 1:  {
       $202 = HEAP32[$8>>2]|0;
       HEAP32[$202>>2] = $$1250;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
      case 2:  {
       $203 = ($$1250|0)<(0);
       $204 = $203 << 31 >> 31;
       $205 = HEAP32[$8>>2]|0;
       $206 = $205;
       $207 = $206;
       HEAP32[$207>>2] = $$1250;
       $208 = (($206) + 4)|0;
       $209 = $208;
       HEAP32[$209>>2] = $204;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
      case 3:  {
       $210 = $$1250&65535;
       $211 = HEAP32[$8>>2]|0;
       HEAP16[$211>>1] = $210;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
      case 4:  {
       $212 = $$1250&255;
       $213 = HEAP32[$8>>2]|0;
       HEAP8[$213>>0] = $212;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
      case 6:  {
       $214 = HEAP32[$8>>2]|0;
       HEAP32[$214>>2] = $$1250;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
      case 7:  {
       $215 = ($$1250|0)<(0);
       $216 = $215 << 31 >> 31;
       $217 = HEAP32[$8>>2]|0;
       $218 = $217;
       $219 = $218;
       HEAP32[$219>>2] = $$1250;
       $220 = (($218) + 4)|0;
       $221 = $220;
       HEAP32[$221>>2] = $216;
       $$0245$ph$be = 0;
       break L77;
       break;
      }
      default: {
       $$0245$ph$be = 0;
       break L77;
      }
      }
      break;
     }
     case 112:  {
      $222 = ($$0256>>>0)>(8);
      $223 = $222 ? $$0256 : 8;
      $224 = $spec$select | 8;
      $$1238 = 120;$$1257 = $223;$$3267 = $224;
      label = 67;
      break;
     }
     case 88: case 120:  {
      $$1238 = $$0237;$$1257 = $$0256;$$3267 = $spec$select;
      label = 67;
      break;
     }
     case 111:  {
      $246 = $8;
      $247 = $246;
      $248 = HEAP32[$247>>2]|0;
      $249 = (($246) + 4)|0;
      $250 = $249;
      $251 = HEAP32[$250>>2]|0;
      $252 = (_fmt_o($248,$251,$13)|0);
      $253 = $spec$select & 8;
      $254 = ($253|0)==(0);
      $255 = $252;
      $256 = (($14) - ($255))|0;
      $257 = ($$0256|0)>($256|0);
      $258 = (($256) + 1)|0;
      $259 = $254 | $257;
      $spec$select297 = $259 ? $$0256 : $258;
      $$0231 = $252;$$1235 = 0;$$1240 = 134673;$$2258 = $spec$select297;$$4268 = $spec$select;
      label = 73;
      break;
     }
     case 105: case 100:  {
      $260 = $8;
      $261 = $260;
      $262 = HEAP32[$261>>2]|0;
      $263 = (($260) + 4)|0;
      $264 = $263;
      $265 = HEAP32[$264>>2]|0;
      $266 = ($265|0)<(0);
      if ($266) {
       $267 = (_i64Subtract(0,0,($262|0),($265|0))|0);
       $268 = (getTempRet0() | 0);
       $269 = $8;
       $270 = $269;
       HEAP32[$270>>2] = $267;
       $271 = (($269) + 4)|0;
       $272 = $271;
       HEAP32[$272>>2] = $268;
       $$0234 = 1;$$0239 = 134673;$279 = $267;$280 = $268;
       label = 72;
       break L79;
      } else {
       $273 = $spec$select & 2048;
       $274 = ($273|0)==(0);
       $275 = $spec$select & 1;
       $276 = ($275|0)==(0);
       $$ = $276 ? 134673 : (134675);
       $spec$select298 = $274 ? $$ : (134674);
       $277 = $spec$select & 2049;
       $278 = ($277|0)!=(0);
       $spec$select299 = $278&1;
       $$0234 = $spec$select299;$$0239 = $spec$select298;$279 = $262;$280 = $265;
       label = 72;
       break L79;
      }
      break;
     }
     case 117:  {
      $195 = $8;
      $196 = $195;
      $197 = HEAP32[$196>>2]|0;
      $198 = (($195) + 4)|0;
      $199 = $198;
      $200 = HEAP32[$199>>2]|0;
      $$0234 = 0;$$0239 = 134673;$279 = $197;$280 = $200;
      label = 72;
      break;
     }
     case 99:  {
      $300 = $8;
      $301 = $300;
      $302 = HEAP32[$301>>2]|0;
      $303 = (($300) + 4)|0;
      $304 = $303;
      $305 = HEAP32[$304>>2]|0;
      $306 = $302&255;
      HEAP8[$15>>0] = $306;
      $$1 = $15;$$2236 = 0;$$2241 = 134673;$$5 = 1;$$6270 = $194;$$pre$phiZ2D = $14;
      break;
     }
     case 115:  {
      $307 = HEAP32[$8>>2]|0;
      $308 = ($307|0)==(0|0);
      $309 = $308 ? 134683 : $307;
      $310 = (_memchr($309,0,$$0256)|0);
      $311 = ($310|0)==(0|0);
      $312 = $310;
      $313 = $309;
      $314 = (($312) - ($313))|0;
      $315 = (($309) + ($$0256)|0);
      $$3259 = $311 ? $$0256 : $314;
      $$1252 = $311 ? $315 : $310;
      $$pre370 = $$1252;
      $$1 = $309;$$2236 = 0;$$2241 = 134673;$$5 = $$3259;$$6270 = $194;$$pre$phiZ2D = $$pre370;
      break;
     }
     case 67:  {
      $316 = $8;
      $317 = $316;
      $318 = HEAP32[$317>>2]|0;
      $319 = (($316) + 4)|0;
      $320 = $319;
      $321 = HEAP32[$320>>2]|0;
      HEAP32[$10>>2] = $318;
      HEAP32[$16>>2] = 0;
      HEAP32[$8>>2] = $10;
      $$4260372 = -1;
      label = 79;
      break;
     }
     case 83:  {
      $322 = ($$0256|0)==(0);
      if ($322) {
       _pad_667($0,32,$$1262,0,$spec$select);
       $$0242315373 = 0;
       label = 89;
      } else {
       $$4260372 = $$0256;
       label = 79;
      }
      break;
     }
     case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
      $345 = +HEAPF64[$8>>3];
      $346 = (FUNCTION_TABLE_iidiiii[$5 & 1]($0,$345,$$1262,$$0256,$spec$select,$$0237)|0);
      $$0245$ph$be = $346;
      break L77;
      break;
     }
     default: {
      $$1 = $22;$$2236 = 0;$$2241 = 134673;$$5 = $$0256;$$6270 = $spec$select;$$pre$phiZ2D = $14;
     }
     }
    } while(0);
    L102: do {
     if ((label|0) == 67) {
      label = 0;
      $225 = $8;
      $226 = $225;
      $227 = HEAP32[$226>>2]|0;
      $228 = (($225) + 4)|0;
      $229 = $228;
      $230 = HEAP32[$229>>2]|0;
      $231 = $$1238 & 32;
      $232 = (_fmt_x($227,$230,$13,$231)|0);
      $233 = $8;
      $234 = $233;
      $235 = HEAP32[$234>>2]|0;
      $236 = (($233) + 4)|0;
      $237 = $236;
      $238 = HEAP32[$237>>2]|0;
      $239 = ($235|0)==(0);
      $240 = ($238|0)==(0);
      $241 = $239 & $240;
      $242 = $$3267 & 8;
      $243 = ($242|0)==(0);
      $or$cond280 = $243 | $241;
      $244 = $$1238 >>> 4;
      $245 = (134673 + ($244)|0);
      $spec$select295 = $or$cond280 ? 134673 : $245;
      $spec$select296 = $or$cond280 ? 0 : 2;
      $$0231 = $232;$$1235 = $spec$select296;$$1240 = $spec$select295;$$2258 = $$1257;$$4268 = $$3267;
      label = 73;
     }
     else if ((label|0) == 72) {
      label = 0;
      $281 = (_fmt_u($279,$280,$13)|0);
      $$0231 = $281;$$1235 = $$0234;$$1240 = $$0239;$$2258 = $$0256;$$4268 = $spec$select;
      label = 73;
     }
     else if ((label|0) == 79) {
      label = 0;
      $323 = HEAP32[$8>>2]|0;
      $$0232336 = $323;$$0242335 = 0;
      while(1) {
       $324 = HEAP32[$$0232336>>2]|0;
       $325 = ($324|0)==(0);
       if ($325) {
        $$0242315 = $$0242335;
        break;
       }
       $326 = (_wctomb($11,$324)|0);
       $327 = ($326|0)<(0);
       $328 = (($$4260372) - ($$0242335))|0;
       $329 = ($326>>>0)>($328>>>0);
       $or$cond285 = $327 | $329;
       if ($or$cond285) {
        label = 83;
        break;
       }
       $330 = ((($$0232336)) + 4|0);
       $331 = (($326) + ($$0242335))|0;
       $332 = ($$4260372>>>0)>($331>>>0);
       if ($332) {
        $$0232336 = $330;$$0242335 = $331;
       } else {
        $$0242315 = $331;
        break;
       }
      }
      if ((label|0) == 83) {
       label = 0;
       if ($327) {
        $$0 = -1;
        break L1;
       } else {
        $$0242315 = $$0242335;
       }
      }
      _pad_667($0,32,$$1262,$$0242315,$spec$select);
      $333 = ($$0242315|0)==(0);
      if ($333) {
       $$0242315373 = 0;
       label = 89;
      } else {
       $334 = HEAP32[$8>>2]|0;
       $$1233342 = $334;$$1243341 = 0;
       while(1) {
        $335 = HEAP32[$$1233342>>2]|0;
        $336 = ($335|0)==(0);
        if ($336) {
         $$0242315373 = $$0242315;
         label = 89;
         break L102;
        }
        $337 = (_wctomb($11,$335)|0);
        $338 = (($337) + ($$1243341))|0;
        $339 = ($338|0)>($$0242315|0);
        if ($339) {
         $$0242315373 = $$0242315;
         label = 89;
         break L102;
        }
        $340 = ((($$1233342)) + 4|0);
        _out($0,$11,$337);
        $341 = ($338>>>0)<($$0242315>>>0);
        if ($341) {
         $$1233342 = $340;$$1243341 = $338;
        } else {
         $$0242315373 = $$0242315;
         label = 89;
         break;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 73) {
     label = 0;
     $282 = ($$2258|0)>(-1);
     $283 = $$4268 & -65537;
     $spec$select283 = $282 ? $283 : $$4268;
     $284 = $8;
     $285 = $284;
     $286 = HEAP32[$285>>2]|0;
     $287 = (($284) + 4)|0;
     $288 = $287;
     $289 = HEAP32[$288>>2]|0;
     $290 = ($286|0)!=(0);
     $291 = ($289|0)!=(0);
     $292 = $290 | $291;
     $293 = ($$2258|0)!=(0);
     $or$cond = $293 | $292;
     $294 = $$0231;
     $295 = (($14) - ($294))|0;
     $296 = $292 ^ 1;
     $297 = $296&1;
     $298 = (($295) + ($297))|0;
     $299 = ($$2258|0)>($298|0);
     $$2258$ = $299 ? $$2258 : $298;
     $spec$select300 = $or$cond ? $$2258$ : 0;
     $spec$select301 = $or$cond ? $$0231 : $13;
     $$1 = $spec$select301;$$2236 = $$1235;$$2241 = $$1240;$$5 = $spec$select300;$$6270 = $spec$select283;$$pre$phiZ2D = $14;
    }
    else if ((label|0) == 89) {
     label = 0;
     $342 = $spec$select ^ 8192;
     _pad_667($0,32,$$1262,$$0242315373,$342);
     $343 = ($$1262|0)>($$0242315373|0);
     $344 = $343 ? $$1262 : $$0242315373;
     $$0245$ph$be = $344;
     break;
    }
    $347 = $$1;
    $348 = (($$pre$phiZ2D) - ($347))|0;
    $349 = ($$5|0)<($348|0);
    $spec$select286 = $349 ? $348 : $$5;
    $350 = (($spec$select286) + ($$2236))|0;
    $351 = ($$1262|0)<($350|0);
    $$2263 = $351 ? $350 : $$1262;
    _pad_667($0,32,$$2263,$350,$$6270);
    _out($0,$$2241,$$2236);
    $352 = $$6270 ^ 65536;
    _pad_667($0,48,$$2263,$350,$352);
    _pad_667($0,48,$spec$select286,$348,0);
    _out($0,$$1,$348);
    $353 = $$6270 ^ 8192;
    _pad_667($0,32,$$2263,$350,$353);
    $$0245$ph$be = $$2263;
   }
  } while(0);
  $$0245$ph = $$0245$ph$be;$$0249$ph = $$1250;$$0271$ph = $$3274;
 }
 L123: do {
  if ((label|0) == 92) {
   $354 = ($0|0)==(0|0);
   if ($354) {
    $355 = ($$0271$ph|0)==(0);
    if ($355) {
     $$0 = 0;
    } else {
     $$2244322 = 1;
     while(1) {
      $356 = (($4) + ($$2244322<<2)|0);
      $357 = HEAP32[$356>>2]|0;
      $358 = ($357|0)==(0);
      if ($358) {
       break;
      }
      $359 = (($3) + ($$2244322<<3)|0);
      _pop_arg($359,$357,$2,$6);
      $360 = (($$2244322) + 1)|0;
      $361 = ($360>>>0)<(10);
      if ($361) {
       $$2244322 = $360;
      } else {
       $$0 = 1;
       break L123;
      }
     }
     $$3319 = $$2244322;
     while(1) {
      $364 = (($4) + ($$3319<<2)|0);
      $365 = HEAP32[$364>>2]|0;
      $366 = ($365|0)==(0);
      $363 = (($$3319) + 1)|0;
      if (!($366)) {
       $$0 = -1;
       break L123;
      }
      $362 = ($363>>>0)<(10);
      if ($362) {
       $$3319 = $363;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1250;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _getint($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$04 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_isdigit($3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0$lcssa = 0;
 } else {
  $$04 = 0;
  while(1) {
   $6 = ($$04*10)|0;
   $7 = HEAP32[$0>>2]|0;
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = (($6) + -48)|0;
   $11 = (($10) + ($9))|0;
   $12 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $12;
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = (_isdigit($14)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0$lcssa = $11;
    break;
   } else {
    $$04 = $11;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _pop_arg($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0;
 var $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded25 = 0, $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded31 = 0, $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0;
 var $expanded42 = 0, $expanded43 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded50 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded57 = 0, $expanded59 = 0, $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded64 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0;
 var $expanded70 = 0, $expanded71 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded78 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded85 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($1>>>0)>(20);
 L1: do {
  if (!($4)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $5 = $arglist_current;
     $6 = ((0) + 4|0);
     $expanded25 = $6;
     $expanded = (($expanded25) - 1)|0;
     $7 = (($5) + ($expanded))|0;
     $8 = ((0) + 4|0);
     $expanded29 = $8;
     $expanded28 = (($expanded29) - 1)|0;
     $expanded27 = $expanded28 ^ -1;
     $9 = $7 & $expanded27;
     $10 = $9;
     $11 = HEAP32[$10>>2]|0;
     $arglist_next = ((($10)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $11;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $12 = $arglist_current2;
     $13 = ((0) + 4|0);
     $expanded32 = $13;
     $expanded31 = (($expanded32) - 1)|0;
     $14 = (($12) + ($expanded31))|0;
     $15 = ((0) + 4|0);
     $expanded36 = $15;
     $expanded35 = (($expanded36) - 1)|0;
     $expanded34 = $expanded35 ^ -1;
     $16 = $14 & $expanded34;
     $17 = $16;
     $18 = HEAP32[$17>>2]|0;
     $arglist_next3 = ((($17)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $19 = ($18|0)<(0);
     $20 = $19 << 31 >> 31;
     $21 = $0;
     $22 = $21;
     HEAP32[$22>>2] = $18;
     $23 = (($21) + 4)|0;
     $24 = $23;
     HEAP32[$24>>2] = $20;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $25 = $arglist_current5;
     $26 = ((0) + 4|0);
     $expanded39 = $26;
     $expanded38 = (($expanded39) - 1)|0;
     $27 = (($25) + ($expanded38))|0;
     $28 = ((0) + 4|0);
     $expanded43 = $28;
     $expanded42 = (($expanded43) - 1)|0;
     $expanded41 = $expanded42 ^ -1;
     $29 = $27 & $expanded41;
     $30 = $29;
     $31 = HEAP32[$30>>2]|0;
     $arglist_next6 = ((($30)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $32 = $0;
     $33 = $32;
     HEAP32[$33>>2] = $31;
     $34 = (($32) + 4)|0;
     $35 = $34;
     HEAP32[$35>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $36 = $arglist_current8;
     $37 = ((0) + 8|0);
     $expanded46 = $37;
     $expanded45 = (($expanded46) - 1)|0;
     $38 = (($36) + ($expanded45))|0;
     $39 = ((0) + 8|0);
     $expanded50 = $39;
     $expanded49 = (($expanded50) - 1)|0;
     $expanded48 = $expanded49 ^ -1;
     $40 = $38 & $expanded48;
     $41 = $40;
     $42 = $41;
     $43 = $42;
     $44 = HEAP32[$43>>2]|0;
     $45 = (($42) + 4)|0;
     $46 = $45;
     $47 = HEAP32[$46>>2]|0;
     $arglist_next9 = ((($41)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $48 = $0;
     $49 = $48;
     HEAP32[$49>>2] = $44;
     $50 = (($48) + 4)|0;
     $51 = $50;
     HEAP32[$51>>2] = $47;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $52 = $arglist_current11;
     $53 = ((0) + 4|0);
     $expanded53 = $53;
     $expanded52 = (($expanded53) - 1)|0;
     $54 = (($52) + ($expanded52))|0;
     $55 = ((0) + 4|0);
     $expanded57 = $55;
     $expanded56 = (($expanded57) - 1)|0;
     $expanded55 = $expanded56 ^ -1;
     $56 = $54 & $expanded55;
     $57 = $56;
     $58 = HEAP32[$57>>2]|0;
     $arglist_next12 = ((($57)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $59 = $58&65535;
     $60 = $59 << 16 >> 16;
     $61 = ($60|0)<(0);
     $62 = $61 << 31 >> 31;
     $63 = $0;
     $64 = $63;
     HEAP32[$64>>2] = $60;
     $65 = (($63) + 4)|0;
     $66 = $65;
     HEAP32[$66>>2] = $62;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $67 = $arglist_current14;
     $68 = ((0) + 4|0);
     $expanded60 = $68;
     $expanded59 = (($expanded60) - 1)|0;
     $69 = (($67) + ($expanded59))|0;
     $70 = ((0) + 4|0);
     $expanded64 = $70;
     $expanded63 = (($expanded64) - 1)|0;
     $expanded62 = $expanded63 ^ -1;
     $71 = $69 & $expanded62;
     $72 = $71;
     $73 = HEAP32[$72>>2]|0;
     $arglist_next15 = ((($72)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $73 & 65535;
     $74 = $0;
     $75 = $74;
     HEAP32[$75>>2] = $$mask31;
     $76 = (($74) + 4)|0;
     $77 = $76;
     HEAP32[$77>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $78 = $arglist_current17;
     $79 = ((0) + 4|0);
     $expanded67 = $79;
     $expanded66 = (($expanded67) - 1)|0;
     $80 = (($78) + ($expanded66))|0;
     $81 = ((0) + 4|0);
     $expanded71 = $81;
     $expanded70 = (($expanded71) - 1)|0;
     $expanded69 = $expanded70 ^ -1;
     $82 = $80 & $expanded69;
     $83 = $82;
     $84 = HEAP32[$83>>2]|0;
     $arglist_next18 = ((($83)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $85 = $84&255;
     $86 = $85 << 24 >> 24;
     $87 = ($86|0)<(0);
     $88 = $87 << 31 >> 31;
     $89 = $0;
     $90 = $89;
     HEAP32[$90>>2] = $86;
     $91 = (($89) + 4)|0;
     $92 = $91;
     HEAP32[$92>>2] = $88;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $93 = $arglist_current20;
     $94 = ((0) + 4|0);
     $expanded74 = $94;
     $expanded73 = (($expanded74) - 1)|0;
     $95 = (($93) + ($expanded73))|0;
     $96 = ((0) + 4|0);
     $expanded78 = $96;
     $expanded77 = (($expanded78) - 1)|0;
     $expanded76 = $expanded77 ^ -1;
     $97 = $95 & $expanded76;
     $98 = $97;
     $99 = HEAP32[$98>>2]|0;
     $arglist_next21 = ((($98)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $99 & 255;
     $100 = $0;
     $101 = $100;
     HEAP32[$101>>2] = $$mask;
     $102 = (($100) + 4)|0;
     $103 = $102;
     HEAP32[$103>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $104 = $arglist_current23;
     $105 = ((0) + 8|0);
     $expanded81 = $105;
     $expanded80 = (($expanded81) - 1)|0;
     $106 = (($104) + ($expanded80))|0;
     $107 = ((0) + 8|0);
     $expanded85 = $107;
     $expanded84 = (($expanded85) - 1)|0;
     $expanded83 = $expanded84 ^ -1;
     $108 = $106 & $expanded83;
     $109 = $108;
     $110 = +HEAPF64[$109>>3];
     $arglist_next24 = ((($109)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $110;
     break L1;
     break;
    }
    case 18:  {
     FUNCTION_TABLE_vii[$3 & 1]($0,$2);
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (2400 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = (getTempRet0() | 0);
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = (getTempRet0() | 0);
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $11 = (getTempRet0() | 0);
   $12 = (___muldi3(($10|0),($11|0),10,0)|0);
   $13 = (getTempRet0() | 0);
   $14 = (_i64Subtract(($8|0),($9|0),($12|0),($13|0))|0);
   $15 = (getTempRet0() | 0);
   $16 = $14&255;
   $17 = $16 | 48;
   $18 = ((($$0914)) + -1|0);
   HEAP8[$18>>0] = $17;
   $19 = ($9>>>0)>(9);
   $20 = ($8>>>0)>(4294967295);
   $21 = ($9|0)==(9);
   $22 = $21 & $20;
   $23 = $19 | $22;
   if ($23) {
    $$0914 = $18;$8 = $10;$9 = $11;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $10;$$09$lcssa = $18;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $24 = ($$010$lcssa$off0|0)==(0);
 if ($24) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $25 = (($$012>>>0) / 10)&-1;
   $26 = ($25*10)|0;
   $27 = (($$012) - ($26))|0;
   $28 = $27 | 48;
   $29 = $28&255;
   $30 = ((($$111)) + -1|0);
   HEAP8[$30>>0] = $29;
   $31 = ($$012>>>0)<(10);
   if ($31) {
    $$1$lcssa = $30;
    break;
   } else {
    $$012 = $25;$$111 = $30;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$137$lcssa66 = 0, $$13745 = 0, $$140 = 0, $$23839 = 0, $$in = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   label = 16;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $38 = ($$036$lcssa64|0)==(0);
    if ($38) {
     label = 16;
     break;
    } else {
     $39 = $$035$lcssa65;
     break;
    }
   }
   $20 = Math_imul($3, 16843009)|0;
   $21 = ($$036$lcssa64>>>0)>(3);
   L13: do {
    if ($21) {
     $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
     while(1) {
      $22 = HEAP32[$$046>>2]|0;
      $23 = $22 ^ $20;
      $24 = (($23) + -16843009)|0;
      $25 = $23 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $$137$lcssa66 = $$13745;$$in = $$046;
       break L13;
      }
      $29 = ((($$046)) + 4|0);
      $30 = (($$13745) + -4)|0;
      $31 = ($30>>>0)>(3);
      if ($31) {
       $$046 = $29;$$13745 = $30;
      } else {
       $$0$lcssa = $29;$$137$lcssa = $30;
       label = 11;
       break;
      }
     }
    } else {
     $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
     label = 11;
    }
   } while(0);
   if ((label|0) == 11) {
    $32 = ($$137$lcssa|0)==(0);
    if ($32) {
     label = 16;
     break;
    } else {
     $$137$lcssa66 = $$137$lcssa;$$in = $$0$lcssa;
    }
   }
   $$140 = $$in;$$23839 = $$137$lcssa66;
   while(1) {
    $33 = HEAP8[$$140>>0]|0;
    $34 = ($33<<24>>24)==($18<<24>>24);
    if ($34) {
     $39 = $$140;
     break L8;
    }
    $35 = ((($$140)) + 1|0);
    $36 = (($$23839) + -1)|0;
    $37 = ($36|0)==(0);
    if ($37) {
     label = 16;
     break;
    } else {
     $$140 = $35;$$23839 = $36;
    }
   }
  }
 } while(0);
 if ((label|0) == 16) {
  $39 = 0;
 }
 return ($39|0);
}
function _pad_667($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = $1 << 24 >> 24;
  $11 = ($9>>>0)<(256);
  $12 = $11 ? $9 : 256;
  (_memset(($5|0),($10|0),($12|0))|0);
  $13 = ($9>>>0)>(255);
  if ($13) {
   $14 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out($0,$5,256);
    $15 = (($$011) + -256)|0;
    $16 = ($15>>>0)>(255);
    if ($16) {
     $$011 = $15;
    } else {
     break;
    }
   }
   $17 = $14 & 255;
   $$0$lcssa = $17;
  } else {
   $$0$lcssa = $9;
  }
  _out($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_423()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = $1 & -128;
    $12 = ($11|0)==(57216);
    if ($12) {
     $14 = $1&255;
     HEAP8[$0>>0] = $14;
     $$0 = 1;
     break;
    } else {
     $13 = (___errno_location()|0);
     HEAP32[$13>>2] = 25;
     $$0 = -1;
     break;
    }
   }
   $15 = ($1>>>0)<(2048);
   if ($15) {
    $16 = $1 >>> 6;
    $17 = $16 | 192;
    $18 = $17&255;
    $19 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $18;
    $20 = $1 & 63;
    $21 = $20 | 128;
    $22 = $21&255;
    HEAP8[$19>>0] = $22;
    $$0 = 2;
    break;
   }
   $23 = ($1>>>0)<(55296);
   $24 = $1 & -8192;
   $25 = ($24|0)==(57344);
   $or$cond = $23 | $25;
   if ($or$cond) {
    $26 = $1 >>> 12;
    $27 = $26 | 224;
    $28 = $27&255;
    $29 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $28;
    $30 = $1 >>> 6;
    $31 = $30 & 63;
    $32 = $31 | 128;
    $33 = $32&255;
    $34 = ((($0)) + 2|0);
    HEAP8[$29>>0] = $33;
    $35 = $1 & 63;
    $36 = $35 | 128;
    $37 = $36&255;
    HEAP8[$34>>0] = $37;
    $$0 = 3;
    break;
   }
   $38 = (($1) + -65536)|0;
   $39 = ($38>>>0)<(1048576);
   if ($39) {
    $40 = $1 >>> 18;
    $41 = $40 | 240;
    $42 = $41&255;
    $43 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $42;
    $44 = $1 >>> 12;
    $45 = $44 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    $48 = ((($0)) + 2|0);
    HEAP8[$43>>0] = $47;
    $49 = $1 >>> 6;
    $50 = $49 & 63;
    $51 = $50 | 128;
    $52 = $51&255;
    $53 = ((($0)) + 3|0);
    HEAP8[$48>>0] = $52;
    $54 = $1 & 63;
    $55 = $54 | 128;
    $56 = $55&255;
    HEAP8[$53>>0] = $56;
    $$0 = 4;
    break;
   } else {
    $57 = (___errno_location()|0);
    HEAP32[$57>>2] = 25;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_423() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (129988|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$03846 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre48 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 3]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)<(0);
   $21 = ($1|0)==(0);
   $or$cond = $20 | $21;
   L10: do {
    if ($or$cond) {
     $$139 = 0;$$141 = $0;$$143 = $1;$32 = $14;
    } else {
     $$03846 = $1;
     while(1) {
      $23 = (($$03846) + -1)|0;
      $24 = (($0) + ($23)|0);
      $25 = HEAP8[$24>>0]|0;
      $26 = ($25<<24>>24)==(10);
      if ($26) {
       break;
      }
      $22 = ($23|0)==(0);
      if ($22) {
       $$139 = 0;$$141 = $0;$$143 = $1;$32 = $14;
       break L10;
      } else {
       $$03846 = $23;
      }
     }
     $27 = ((($2)) + 36|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (FUNCTION_TABLE_iiii[$28 & 3]($2,$0,$$03846)|0);
     $30 = ($29>>>0)<($$03846>>>0);
     if ($30) {
      $$1 = $29;
      break L5;
     }
     $31 = (($0) + ($$03846)|0);
     $$042 = (($1) - ($$03846))|0;
     $$pre48 = HEAP32[$9>>2]|0;
     $$139 = $$03846;$$141 = $31;$$143 = $$042;$32 = $$pre48;
    }
   } while(0);
   (_memcpy(($32|0),($$141|0),($$143|0))|0);
   $33 = HEAP32[$9>>2]|0;
   $34 = (($33) + ($$143)|0);
   HEAP32[$9>>2] = $34;
   $35 = (($$139) + ($$143))|0;
   $$1 = $35;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___DOUBLE_BITS_670($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($2) | 0);
 return ($1|0);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = (getTempRet0() | 0);
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)>($2>>>0);
 $spec$select = $8 ? $2 : $7;
 $$cast = $6;
 (_memcpy(($$cast|0),($1|0),($spec$select|0))|0);
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($spec$select)|0);
 HEAP32[$5>>2] = $10;
 return ($2|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function _qsort($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$067$lcssa = 0, $$06772 = 0, $$068$lcssa = 0, $$06871 = 0, $$1 = 0, $$169 = 0, $$169$be = 0, $$2 = 0, $$2$be = 0, $$be = 0, $$pre$pre = 0, $$pre76 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $15$phi = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $4 = sp;
 $5 = sp + 192|0;
 $6 = Math_imul($2, $1)|0;
 $7 = $5;
 $8 = $7;
 HEAP32[$8>>2] = 1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = ($6|0)==(0);
 L1: do {
  if (!($11)) {
   $12 = (0 - ($2))|0;
   $13 = ((($4)) + 4|0);
   HEAP32[$13>>2] = $2;
   HEAP32[$4>>2] = $2;
   $$0 = 2;$15 = $2;$17 = $2;
   while(1) {
    $14 = (($15) + ($2))|0;
    $16 = (($14) + ($17))|0;
    $18 = (($4) + ($$0<<2)|0);
    HEAP32[$18>>2] = $16;
    $19 = ($16>>>0)<($6>>>0);
    $20 = (($$0) + 1)|0;
    if ($19) {
     $15$phi = $17;$$0 = $20;$17 = $16;$15 = $15$phi;
    } else {
     break;
    }
   }
   $21 = (($0) + ($6)|0);
   $22 = (($21) + ($12)|0);
   $23 = ($22>>>0)>($0>>>0);
   if ($23) {
    $24 = $22;
    $$06772 = 1;$$06871 = $0;$26 = 1;
    while(1) {
     $25 = $26 & 3;
     $27 = ($25|0)==(3);
     do {
      if ($27) {
       _sift($$06871,$2,$3,$$06772,$4);
       _shr($5,2);
       $28 = (($$06772) + 2)|0;
       $$1 = $28;
      } else {
       $29 = (($$06772) + -1)|0;
       $30 = (($4) + ($29<<2)|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = $$06871;
       $33 = (($24) - ($32))|0;
       $34 = ($31>>>0)<($33>>>0);
       if ($34) {
        _sift($$06871,$2,$3,$$06772,$4);
       } else {
        _trinkle($$06871,$2,$3,$5,$$06772,0,$4);
       }
       $35 = ($$06772|0)==(1);
       if ($35) {
        _shl($5,1);
        $$1 = 0;
        break;
       } else {
        _shl($5,$29);
        $$1 = 1;
        break;
       }
      }
     } while(0);
     $36 = HEAP32[$5>>2]|0;
     $37 = $36 | 1;
     HEAP32[$5>>2] = $37;
     $38 = (($$06871) + ($2)|0);
     $39 = ($38>>>0)<($22>>>0);
     if ($39) {
      $$06772 = $$1;$$06871 = $38;$26 = $37;
     } else {
      $$067$lcssa = $$1;$$068$lcssa = $38;$61 = $37;
      break;
     }
    }
   } else {
    $$067$lcssa = 1;$$068$lcssa = $0;$61 = 1;
   }
   _trinkle($$068$lcssa,$2,$3,$5,$$067$lcssa,0,$4);
   $40 = ((($5)) + 4|0);
   $$169 = $$068$lcssa;$$2 = $$067$lcssa;$43 = $61;
   while(1) {
    $41 = ($$2|0)==(1);
    $42 = ($43|0)==(1);
    $or$cond = $41 & $42;
    if ($or$cond) {
     $44 = HEAP32[$40>>2]|0;
     $45 = ($44|0)==(0);
     if ($45) {
      break L1;
     } else {
      label = 19;
     }
    } else {
     $46 = ($$2|0)<(2);
     if ($46) {
      label = 19;
     } else {
      _shl($5,2);
      $49 = (($$2) + -2)|0;
      $50 = HEAP32[$5>>2]|0;
      $51 = $50 ^ 7;
      HEAP32[$5>>2] = $51;
      _shr($5,1);
      $52 = (($4) + ($49<<2)|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = (0 - ($53))|0;
      $55 = (($$169) + ($54)|0);
      $56 = (($55) + ($12)|0);
      $57 = (($$2) + -1)|0;
      _trinkle($56,$2,$3,$5,$57,1,$4);
      _shl($5,1);
      $58 = HEAP32[$5>>2]|0;
      $59 = $58 | 1;
      HEAP32[$5>>2] = $59;
      $60 = (($$169) + ($12)|0);
      _trinkle($60,$2,$3,$5,$49,1,$4);
      $$169$be = $60;$$2$be = $49;$$be = $59;
     }
    }
    if ((label|0) == 19) {
     label = 0;
     $47 = (_pntz($5)|0);
     _shr($5,$47);
     $48 = (($47) + ($$2))|0;
     $$pre$pre = HEAP32[$5>>2]|0;
     $$pre76 = (($$169) + ($12)|0);
     $$169$be = $$pre76;$$2$be = $48;$$be = $$pre$pre;
    }
    $$169 = $$169$be;$$2 = $$2$be;$43 = $$be;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _sift($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$02934 = 0, $$03133 = 0, $$035 = 0, $$1 = 0, $$130 = 0, $$132 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $5 = sp;
 HEAP32[$5>>2] = $0;
 $6 = ($3|0)>(1);
 L1: do {
  if ($6) {
   $7 = (0 - ($1))|0;
   $$02934 = $0;$$03133 = $3;$$035 = 1;$14 = $0;
   while(1) {
    $8 = (($$02934) + ($7)|0);
    $9 = (($$03133) + -2)|0;
    $10 = (($4) + ($9<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (0 - ($11))|0;
    $13 = (($8) + ($12)|0);
    $15 = (FUNCTION_TABLE_iii[$2 & 7]($14,$13)|0);
    $16 = ($15|0)>(-1);
    if ($16) {
     $17 = (FUNCTION_TABLE_iii[$2 & 7]($14,$8)|0);
     $18 = ($17|0)>(-1);
     if ($18) {
      $$0$lcssa = $$035;
      break L1;
     }
    }
    $19 = (FUNCTION_TABLE_iii[$2 & 7]($13,$8)|0);
    $20 = ($19|0)>(-1);
    $21 = (($5) + ($$035<<2)|0);
    if ($20) {
     HEAP32[$21>>2] = $13;
     $22 = (($$03133) + -1)|0;
     $$130 = $13;$$132 = $22;
    } else {
     HEAP32[$21>>2] = $8;
     $$130 = $8;$$132 = $9;
    }
    $$1 = (($$035) + 1)|0;
    $23 = ($$132|0)>(1);
    if (!($23)) {
     $$0$lcssa = $$1;
     break L1;
    }
    $$pre = HEAP32[$5>>2]|0;
    $$02934 = $$130;$$03133 = $$132;$$035 = $$1;$14 = $$pre;
   }
  } else {
   $$0$lcssa = 1;
  }
 } while(0);
 _cycle($1,$5,$$0$lcssa);
 STACKTOP = sp;return;
}
function _shr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre11 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(31);
 $3 = ((($0)) + 4|0);
 if ($2) {
  $4 = (($1) + -32)|0;
  $5 = HEAP32[$3>>2]|0;
  HEAP32[$0>>2] = $5;
  HEAP32[$3>>2] = 0;
  $$0 = $4;$10 = 0;$7 = $5;
 } else {
  $$pre = HEAP32[$0>>2]|0;
  $$pre11 = HEAP32[$3>>2]|0;
  $$0 = $1;$10 = $$pre11;$7 = $$pre;
 }
 $6 = $7 >>> $$0;
 $8 = (32 - ($$0))|0;
 $9 = $10 << $8;
 $11 = $9 | $6;
 HEAP32[$0>>2] = $11;
 $12 = $10 >>> $$0;
 HEAP32[$3>>2] = $12;
 return;
}
function _trinkle($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0$lcssa = 0, $$045$lcssa = 0, $$04551 = 0, $$0455780 = 0, $$046$lcssa = 0, $$04653 = 0, $$0465681 = 0, $$047$lcssa = 0, $$0475582 = 0, $$049 = 0, $$05879 = 0, $$05879$phi = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $7 = sp + 232|0;
 $8 = sp;
 $9 = HEAP32[$3>>2]|0;
 HEAP32[$7>>2] = $9;
 $10 = ((($3)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($7)) + 4|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$8>>2] = $0;
 $13 = ($9|0)!=(1);
 $14 = ($11|0)!=(0);
 $15 = $13 | $14;
 L1: do {
  if ($15) {
   $16 = (0 - ($1))|0;
   $17 = (($6) + ($4<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (0 - ($18))|0;
   $20 = (($0) + ($19)|0);
   $21 = (FUNCTION_TABLE_iii[$2 & 7]($20,$0)|0);
   $22 = ($21|0)<(1);
   if ($22) {
    $$0$lcssa = $0;$$045$lcssa = 1;$$046$lcssa = $4;$$047$lcssa = $5;
    label = 9;
   } else {
    $phitmp = ($5|0)==(0);
    $$0455780 = 1;$$0465681 = $4;$$0475582 = $phitmp;$$05879 = $0;$28 = $20;
    while(1) {
     $23 = ($$0465681|0)>(1);
     $or$cond = $$0475582 & $23;
     if ($or$cond) {
      $24 = (($$05879) + ($16)|0);
      $25 = (($$0465681) + -2)|0;
      $26 = (($6) + ($25<<2)|0);
      $27 = HEAP32[$26>>2]|0;
      $29 = (FUNCTION_TABLE_iii[$2 & 7]($24,$28)|0);
      $30 = ($29|0)>(-1);
      if ($30) {
       $$04551 = $$0455780;$$04653 = $$0465681;$$049 = $$05879;
       label = 10;
       break L1;
      }
      $31 = (0 - ($27))|0;
      $32 = (($24) + ($31)|0);
      $33 = (FUNCTION_TABLE_iii[$2 & 7]($32,$28)|0);
      $34 = ($33|0)>(-1);
      if ($34) {
       $$04551 = $$0455780;$$04653 = $$0465681;$$049 = $$05879;
       label = 10;
       break L1;
      }
     }
     $35 = (($$0455780) + 1)|0;
     $36 = (($8) + ($$0455780<<2)|0);
     HEAP32[$36>>2] = $28;
     $37 = (_pntz($7)|0);
     _shr($7,$37);
     $38 = (($37) + ($$0465681))|0;
     $39 = HEAP32[$7>>2]|0;
     $40 = ($39|0)!=(1);
     $41 = HEAP32[$12>>2]|0;
     $42 = ($41|0)!=(0);
     $43 = $40 | $42;
     if (!($43)) {
      $$04551 = $35;$$04653 = $38;$$049 = $28;
      label = 10;
      break L1;
     }
     $$pre = HEAP32[$8>>2]|0;
     $44 = (($6) + ($38<<2)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = (0 - ($45))|0;
     $47 = (($28) + ($46)|0);
     $48 = (FUNCTION_TABLE_iii[$2 & 7]($47,$$pre)|0);
     $49 = ($48|0)<(1);
     if ($49) {
      $$0$lcssa = $28;$$045$lcssa = $35;$$046$lcssa = $38;$$047$lcssa = 0;
      label = 9;
      break;
     } else {
      $$05879$phi = $28;$$0455780 = $35;$$0465681 = $38;$$0475582 = 1;$28 = $47;$$05879 = $$05879$phi;
     }
    }
   }
  } else {
   $$0$lcssa = $0;$$045$lcssa = 1;$$046$lcssa = $4;$$047$lcssa = $5;
   label = 9;
  }
 } while(0);
 if ((label|0) == 9) {
  $50 = ($$047$lcssa|0)==(0);
  if ($50) {
   $$04551 = $$045$lcssa;$$04653 = $$046$lcssa;$$049 = $$0$lcssa;
   label = 10;
  }
 }
 if ((label|0) == 10) {
  _cycle($1,$8,$$04551);
  _sift($$049,$1,$2,$$04653,$6);
 }
 STACKTOP = sp;return;
}
function _shl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre11 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(31);
 $3 = ((($0)) + 4|0);
 if ($2) {
  $4 = (($1) + -32)|0;
  $5 = HEAP32[$0>>2]|0;
  HEAP32[$3>>2] = $5;
  HEAP32[$0>>2] = 0;
  $$0 = $4;$10 = 0;$7 = $5;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $$pre11 = HEAP32[$0>>2]|0;
  $$0 = $1;$10 = $$pre11;$7 = $$pre;
 }
 $6 = $7 << $$0;
 $8 = (32 - ($$0))|0;
 $9 = $10 >>> $8;
 $11 = $9 | $6;
 HEAP32[$3>>2] = $11;
 $12 = $10 << $$0;
 HEAP32[$0>>2] = $12;
 return;
}
function _pntz($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 $3 = (_a_ctz_l_730($2)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = ((($0)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_a_ctz_l_730($6)|0);
  $8 = (($7) + 32)|0;
  $9 = ($7|0)==(0);
  $spec$select = $9 ? 0 : $8;
  return ($spec$select|0);
 } else {
  return ($3|0);
 }
 return (0)|0;
}
function _a_ctz_l_730($0) {
 $0 = $0|0;
 var $$068 = 0, $$07 = 0, $$09 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 if ($1) {
  $$07 = 32;
 } else {
  $2 = $0 & 1;
  $3 = ($2|0)==(0);
  if ($3) {
   $$068 = $0;$$09 = 0;
   while(1) {
    $4 = (($$09) + 1)|0;
    $5 = $$068 >>> 1;
    $6 = $$068 & 2;
    $7 = ($6|0)==(0);
    if ($7) {
     $$068 = $5;$$09 = $4;
    } else {
     $$07 = $4;
     break;
    }
   }
  } else {
   $$07 = 0;
  }
 }
 return ($$07|0);
}
function _cycle($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$02527 = 0, $$026 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $3 = sp;
 $4 = ($2|0)<(2);
 L1: do {
  if (!($4)) {
   $5 = (($1) + ($2<<2)|0);
   HEAP32[$5>>2] = $3;
   $6 = ($0|0)==(0);
   if (!($6)) {
    $$02527 = $0;$10 = $3;
    while(1) {
     $7 = ($$02527>>>0)<(256);
     $8 = $7 ? $$02527 : 256;
     $9 = HEAP32[$1>>2]|0;
     (_memcpy(($10|0),($9|0),($8|0))|0);
     $$026 = 0;
     while(1) {
      $11 = (($1) + ($$026<<2)|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = (($$026) + 1)|0;
      $14 = (($1) + ($13<<2)|0);
      $15 = HEAP32[$14>>2]|0;
      (_memcpy(($12|0),($15|0),($8|0))|0);
      $16 = HEAP32[$11>>2]|0;
      $17 = (($16) + ($8)|0);
      HEAP32[$11>>2] = $17;
      $exitcond = ($13|0)==($2|0);
      if ($exitcond) {
       break;
      } else {
       $$026 = $13;
      }
     }
     $18 = (($$02527) - ($8))|0;
     $19 = ($18|0)==(0);
     if ($19) {
      break L1;
     }
     $$pre = HEAP32[$5>>2]|0;
     $$02527 = $18;$10 = $$pre;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $$115$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $2 = (2416 + ($$016)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = ($4|0)==($0|0);
  if ($5) {
   label = 4;
   break;
  }
  $6 = (($$016) + 1)|0;
  $7 = ($6|0)==(87);
  if ($7) {
   $$115$ph = 87;
   label = 5;
   break;
  } else {
   $$016 = $6;
  }
 }
 if ((label|0) == 4) {
  $8 = ($$016|0)==(0);
  if ($8) {
   $$012$lcssa = 2512;
  } else {
   $$115$ph = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $$01214 = 2512;$$115 = $$115$ph;
  while(1) {
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)==(0|0);
 $8 = $7 ? $0 : $$0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      if ($62) {
       $$4 = 0;
       break L1;
      }
      $$191 = $63 ? $$090 : $26;
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$090 = $$191;$$094 = $$195;
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $spec$select = $61 ? $57 : 0;
      $$4 = $spec$select;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $spec$select = $2 ? $0 : $3;
 return ($spec$select|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_105()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function ___pthread_self_105() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 5;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 5;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $4 = (_strlen($0)|0);
   $5 = (($0) + ($4)|0);
   $$0 = $5;
  } else {
   $6 = $0;
   $7 = $6 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$030$lcssa = $0;
   } else {
    $9 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($9<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _iconv_open($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_find_charmap($0)|0);
 $3 = ($2|0)==(-1);
 if ($3) {
  label = 4;
 } else {
  $4 = (_find_charmap($1)|0);
  $5 = ($4|0)==(-1);
  if ($5) {
   label = 4;
  } else {
   $6 = (4320 + ($2)|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7&255)>(207);
   if ($8) {
    label = 4;
   } else {
    $10 = $4 << 16;
    $11 = $10 | $2;
    $12 = $11;
    $$0 = $12;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = (___errno_location()|0);
  HEAP32[$9>>2] = 28;
  $$0 = (-1);
 }
 return ($$0|0);
}
function _find_charmap($0) {
 $0 = $0|0;
 var $$015 = 0, $$018 = 0, $$1$lcssa = 0, $$117 = 0, $$2 = 0, $$pr = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 $spec$select = $2 ? 4320 : $0;
 $$018 = 4320;
 while(1) {
  $3 = (_fuzzycmp($spec$select,$$018)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
   break;
  }
  $15 = (_strlen($$018)|0);
  $16 = (($15) + 1)|0;
  $17 = (($$018) + ($16)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = ($18<<24>>24)==(0);
  if ($19) {
   $20 = ((($17)) + 1|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21&255)>(128);
   if ($22) {
    $$sink = 2;
   } else {
    $23 = $21&255;
    $24 = (128 - ($23))|0;
    $25 = $24 >>> 2;
    $26 = ($25*5)|0;
    $27 = (($26) + 2)|0;
    $$sink = $27;
   }
   $28 = (($17) + ($$sink)|0);
   $$pr = HEAP8[$28>>0]|0;
   $$2 = $28;$30 = $$pr;
  } else {
   $$2 = $17;$30 = $18;
  }
  $29 = ($30<<24>>24)==(0);
  if ($29) {
   $$015 = -1;
   break;
  } else {
   $$018 = $$2;
  }
 }
 if ((label|0) == 3) {
  $5 = HEAP8[$$018>>0]|0;
  $6 = ($5<<24>>24)==(0);
  if ($6) {
   $$1$lcssa = $$018;
  } else {
   $$117 = $$018;
   while(1) {
    $7 = (_strlen($$117)|0);
    $8 = (($7) + 1)|0;
    $9 = (($$117) + ($8)|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)==(0);
    if ($11) {
     $$1$lcssa = $9;
     break;
    } else {
     $$117 = $9;
    }
   }
  }
  $12 = ((($$1$lcssa)) + 1|0);
  $13 = $12;
  $14 = (($13) - (4320))|0;
  $$015 = $14;
 }
 return ($$015|0);
}
function _fuzzycmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$01124 = 0, $$012 = 0, $$025 = 0, $$1$lcssa = 0, $$119 = 0, $$lcssa = 0, $$lcssa16 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = ($2<<24>>24)==(0);
 L1: do {
  if ($3) {
   $$0$lcssa = $1;$$lcssa16 = 0;
   label = 9;
  } else {
   $$01124 = $0;$$025 = $1;$7 = $2;
   while(1) {
    $4 = HEAP8[$$025>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$0$lcssa = $$025;$$lcssa16 = $7;
     label = 9;
     break L1;
    }
    $6 = $7&255;
    $$119 = $$01124;$27 = $7;$9 = $6;
    while(1) {
     $8 = $9 | 32;
     $10 = (($8) + -97)|0;
     $11 = ($10>>>0)>(26);
     $12 = (($9) + -48)|0;
     $13 = ($12>>>0)>(10);
     $or$cond = $13 & $11;
     if (!($or$cond)) {
      $$1$lcssa = $$119;$$lcssa = $27;
      break;
     }
     $14 = ((($$119)) + 1|0);
     $15 = HEAP8[$14>>0]|0;
     $16 = $15&255;
     $17 = ($15<<24>>24)==(0);
     if ($17) {
      $$1$lcssa = $14;$$lcssa = 0;
      break;
     } else {
      $$119 = $14;$27 = $15;$9 = $16;
     }
    }
    $18 = $$lcssa | 32;
    $19 = ($18<<24>>24)==($4<<24>>24);
    if (!($19)) {
     $$012 = 1;
     break L1;
    }
    $20 = ((($$1$lcssa)) + 1|0);
    $21 = ((($$025)) + 1|0);
    $22 = HEAP8[$20>>0]|0;
    $23 = ($22<<24>>24)==(0);
    if ($23) {
     $$0$lcssa = $21;$$lcssa16 = 0;
     label = 9;
     break;
    } else {
     $$01124 = $20;$$025 = $21;$7 = $22;
    }
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $24 = HEAP8[$$0$lcssa>>0]|0;
  $25 = ($$lcssa16<<24>>24)!=($24<<24>>24);
  $26 = $25&1;
  $$012 = $26;
 }
 return ($$012|0);
}
function _iconv_close($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _iconv($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0318375 = 0, $$0319379 = 0, $$0320381 = 0, $$0322 = 0, $$0323386 = 0, $$0324 = 0, $$0337 = 0, $$0337$ph = 0, $$0338 = 0, $$0342380 = 0, $$0373 = 0, $$1 = 0, $$10 = 0, $$11 = 0, $$12384 = 0, $$1325 = 0, $$1331 = 0, $$1343378 = 0, $$2326 = 0, $$2332382 = 0;
 var $$2340 = 0, $$3 = 0, $$3327383 = 0, $$3341 = 0, $$3345 = 0, $$4 = 0, $$4328 = 0, $$4346374 = 0, $$5329 = 0, $$5335 = 0, $$5347372 = 0, $$6336376 = 0, $$6377 = 0, $$7349 = 0, $$8 = 0, $$in = 0, $$lobit = 0, $$mask = 0, $$pn = 0, $$pre = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $exitcond = 0, $exitcond393 = 0, $exitcond394 = 0, $exitcond395 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond352 = 0, $or$cond353 = 0;
 var $or$cond357 = 0, $or$cond361 = 0, $or$cond5 = 0, $or$cond9 = 0, $spec$select350 = 0, $spec$select351 = 0, $spec$select354 = 0, $spec$select355 = 0, $spec$select358 = 0, $spec$select359 = 0, $spec$select362 = 0, $spec$select364 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $5 = sp;
 $6 = sp + 16|0;
 $7 = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 20|0;
 $10 = $0;
 $11 = $10 & 65535;
 $12 = $10 >>> 16;
 $13 = (4320 + ($12)|0);
 $14 = ((($13)) + 1|0);
 $15 = (4320 + ($11)|0);
 $16 = ((($15)) + 1|0);
 $17 = $5;
 $18 = $17;
 HEAP32[$18>>2] = 0;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = 0;
 $21 = HEAP8[$13>>0]|0;
 $22 = HEAP8[$15>>0]|0;
 $23 = (___pthread_self_140()|0);
 $24 = ((($23)) + 188|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($1|0)==(0|0);
 do {
  if ($26) {
   $$0322 = 0;
  } else {
   $27 = HEAP32[$1>>2]|0;
   $28 = ($27|0)==(0|0);
   if ($28) {
    $$0322 = 0;
   } else {
    $29 = HEAP32[$2>>2]|0;
    $30 = ($29|0)==(0);
    if ($30) {
     $$0322 = 0;
    } else {
     HEAP32[$24>>2] = 129956;
     $31 = $21&255;
     $32 = $22&255;
     $33 = (($31) + -192)|0;
     $34 = ($33>>>0)<(7);
     $35 = (($31) + 128)|0;
     $36 = $21 & -2;
     $37 = ($36<<24>>24)==(-60);
     $38 = (($32) + 128)|0;
     $39 = $31 & 254;
     $40 = ($39|0)==(196);
     $41 = ($21<<24>>24)==(-38);
     $42 = (128 - ($32))|0;
     $43 = ($42|0)==(0);
     $44 = ($21<<24>>24)==(-40);
     $45 = (($32) + -192)|0;
     $46 = ($45>>>0)>(8);
     $47 = (134727 + ($45)|0);
     $48 = $11;
     $$pre = HEAP32[$1>>2]|0;
     $$0323386 = 0;$$in = $$pre;$52 = $29;
     L5: while(1) {
      $49 = HEAP8[$$in>>0]|0;
      $50 = $49&255;
      $51 = ($49<<24>>24)<(0);
      $brmerge = $51 | $34;
      L7: do {
       if ($brmerge) {
        do {
         switch ($21<<24>>24) {
         case -57:  {
          $$0337$ph = 25;
          label = 115;
          break L5;
          break;
         }
         case -56:  {
          $53 = (_mbrtowc($6,$$in,$52,$5)|0);
          switch ($53|0) {
          case -1:  {
           $$0337$ph = 25;
           label = 115;
           break L5;
           break;
          }
          case -2:  {
           $$0337 = 28;
           break L5;
           break;
          }
          case 0:  {
           $$0338 = 1;
           break;
          }
          default: {
           $$0338 = $53;
          }
          }
          $54 = HEAP32[$6>>2]|0;
          $$2340 = $$0338;$$8 = $54;
          label = 87;
          break L7;
          break;
         }
         case -58:  {
          $55 = ($52>>>0)<(4);
          if ($55) {
           $$0337 = 28;
           break L5;
          }
          $56 = HEAP32[$$in>>2]|0;
          $$0324 = $56;
          label = 14;
          break;
         }
         case -61: case -64:  {
          $57 = ($52>>>0)<(4);
          if ($57) {
           $$0337 = 28;
           break L5;
          }
          $58 = (_get_32($$in,$31)|0);
          $$0324 = $58;
          label = 14;
          break;
         }
         case -63: case -62: case -59: case -60:  {
          $62 = ($52>>>0)<(2);
          if ($62) {
           $$0337 = 28;
           break L5;
          }
          $63 = (_get_16($$in,$31)|0);
          $64 = $63 & -1024;
          switch ($64|0) {
          case 56320:  {
           $$0337$ph = 25;
           label = 115;
           break L5;
           break;
          }
          case 55296:  {
           break;
          }
          default: {
           $$2340 = 2;$$8 = $63;
           label = 87;
           break L7;
          }
          }
          if ($40) {
           $$0337$ph = 25;
           label = 115;
           break L5;
          }
          $65 = ($52>>>0)<(4);
          if ($65) {
           $$0337 = 28;
           break L5;
          }
          $66 = ((($$in)) + 2|0);
          $67 = (_get_16($66,$31)|0);
          $68 = (($67) + -56320)|0;
          $69 = ($68>>>0)>(1023);
          if ($69) {
           $$0337$ph = 25;
           label = 115;
           break L5;
          }
          $70 = $63 << 10;
          $71 = (($70) + -56557568)|0;
          $72 = (($71) + ($68))|0;
          $$2340 = 4;$$8 = $72;
          label = 87;
          break L7;
          break;
         }
         case -47:  {
          $73 = (($50) + -161)|0;
          $74 = ($73>>>0)<(63);
          if ($74) {
           $75 = (($50) + 65216)|0;
           $$2340 = 1;$$8 = $75;
           label = 87;
           break L7;
          }
          $76 = ($52>>>0)<(2);
          if ($76) {
           $$0337 = 28;
           break L5;
          }
          $77 = ((($$in)) + 1|0);
          $78 = HEAP8[$77>>0]|0;
          $79 = $78&255;
          $80 = (($50) + -129)|0;
          $81 = ($80>>>0)<(31);
          if ($81) {
           $$1325 = $80;
          } else {
           $82 = $50 & 240;
           $83 = ($82|0)==(224);
           if (!($83)) {
            $$0337$ph = 25;
            label = 115;
            break L5;
           }
           $84 = (($50) + -193)|0;
           $$1325 = $84;
          }
          $85 = $$1325 << 1;
          $86 = (($79) + -64)|0;
          $87 = ($86>>>0)<(95);
          if ($87) {
           $88 = ($78<<24>>24)==(127);
           if ($88) {
            $$0337$ph = 25;
            label = 115;
            break L5;
           }
           $$lobit = ($78<<24>>24) >> 7;
           $89 = $$lobit << 24 >> 24;
           $90 = (($86) + ($89))|0;
           $$1331 = $90;$$2326 = $85;
          } else {
           $91 = (($79) + -159)|0;
           $92 = ($91>>>0)<(94);
           $spec$select350 = $92 ? $91 : $79;
           $93 = $92&1;
           $spec$select351 = $85 | $93;
           $$1331 = $spec$select350;$$2326 = $spec$select351;
          }
          $94 = ((8688 + (($$2326*188)|0)|0) + ($$1331<<1)|0);
          $95 = HEAP16[$94>>1]|0;
          $96 = $95&65535;
          $97 = ($95<<16>>16)==(0);
          if ($97) {
           $$0337$ph = 25;
           label = 115;
           break L5;
          } else {
           $$2340 = 2;$$8 = $96;
           label = 87;
           break L7;
          }
          break;
         }
         case -48:  {
          $98 = ($52>>>0)<(2);
          if ($98) {
           $$0337 = 28;
           break L5;
          }
          $99 = ((($$in)) + 1|0);
          $100 = HEAP8[$99>>0]|0;
          $101 = $100&255;
          $102 = ($49<<24>>24)==(-114);
          if ($102) {
           $103 = (($101) + -161)|0;
           $104 = ($103>>>0)>(62);
           if ($104) {
            $$0337$ph = 25;
            label = 115;
            break L5;
           }
           $105 = (($101) + 65216)|0;
           $$2340 = 2;$$8 = $105;
           label = 87;
           break L7;
          } else {
           $106 = (($50) + -161)|0;
           $107 = (($101) + -161)|0;
           $108 = ($106>>>0)>(83);
           $109 = ($107>>>0)>(93);
           $or$cond3 = $108 | $109;
           if ($or$cond3) {
            $$0337$ph = 25;
            label = 115;
            break L5;
           }
           $110 = ((8688 + (($106*188)|0)|0) + ($107<<1)|0);
           $111 = HEAP16[$110>>1]|0;
           $112 = $111&65535;
           $113 = ($111<<16>>16)==(0);
           if ($113) {
            $$0337$ph = 25;
            label = 115;
            break L5;
           } else {
            $$2340 = 2;$$8 = $112;
            label = 87;
            break L7;
           }
          }
          break;
         }
         case -38:  {
          $114 = ($49&255)<(161);
          if ($114) {
           $$0337$ph = 25;
           label = 115;
           break L5;
          }
          break;
         }
         case -40: case -39:  {
          break;
         }
         case -32:  {
          $162 = ($52>>>0)<(2);
          if ($162) {
           $$0337 = 28;
           break L5;
          }
          $163 = ((($$in)) + 1|0);
          $164 = HEAP8[$163>>0]|0;
          $165 = $164&255;
          $166 = (($165) + -64)|0;
          $167 = ($166>>>0)>(190);
          $168 = (($165) + -127)|0;
          $169 = ($168>>>0)<(34);
          $or$cond357 = $167 | $169;
          if ($or$cond357) {
           $$0337$ph = 25;
           label = 115;
           break L5;
          }
          $170 = ($166>>>0)>(62);
          $171 = (($165) + -98)|0;
          $spec$select358 = $170 ? $171 : $166;
          $172 = (($50) + -161)|0;
          $173 = ($172>>>0)>(88);
          if (!($173)) {
           $203 = ((82720 + (($172*314)|0)|0) + ($spec$select358<<1)|0);
           $204 = HEAP16[$203>>1]|0;
           $205 = $204&65535;
           $206 = ($172|0)==(39);
           L53: do {
            if ($206) {
             switch ($spec$select358|0) {
             case 66: case 58: case 60:  {
              $208 = 131072;
              break L53;
              break;
             }
             default: {
             }
             }
             $208 = 0;
            } else {
             $208 = 0;
            }
           } while(0);
           $207 = $208 | $205;
           $209 = ($207|0)==(0);
           if ($209) {
            $$0337$ph = 25;
            label = 115;
            break L5;
           } else {
            $$2340 = 2;$$8 = $207;
            label = 87;
            break L7;
           }
          }
          $174 = (($50) + -135)|0;
          $175 = ($174>>>0)>(119);
          if ($175) {
           $$0337$ph = 25;
           label = 115;
           break L5;
          }
          $176 = ($49&255)<(161);
          $177 = (($50) + -224)|0;
          $$4328 = $176 ? $174 : $177;
          $178 = ($$4328*157)|0;
          $179 = (($spec$select358) + ($178))|0;
          $180 = $179 >>> 4;
          $181 = (($180) + 4867)|0;
          $182 = (72368 + ($181<<1)|0);
          $183 = HEAP16[$182>>1]|0;
          $184 = $183&65535;
          $185 = $179 & 15;
          $186 = $184 >>> $185;
          $187 = $186 << 17;
          $188 = $187 & 131072;
          $189 = (72368 + ($179<<1)|0);
          $190 = HEAP16[$189>>1]|0;
          $191 = $190&65535;
          $192 = $188 | $191;
          $$mask = $192 & 196352;
          $193 = ($$mask|0)==(56320);
          if (!($193)) {
           $202 = ($192|0)==(0);
           if ($202) {
            $$0337$ph = 25;
            label = 115;
            break L5;
           } else {
            $$2340 = 2;$$8 = $192;
            label = 87;
            break L7;
           }
          }
          if ($46) {
           $$3345 = 2;
          } else {
           $194 = HEAP8[$47>>0]|0;
           $195 = $194 << 24 >> 24;
           $$3345 = $195;
          }
          $196 = HEAP32[$4>>2]|0;
          $197 = ($$3345>>>0)>($196>>>0);
          if ($197) {
           $$0337$ph = 1;
           label = 115;
           break L5;
          }
          $198 = $191 & 255;
          $199 = (134737 + ($198)|0);
          HEAP32[$7>>2] = $199;
          HEAP32[$8>>2] = 4;
          $200 = (_iconv($48,$7,$8,$3,$4)|0);
          $201 = (($200) + ($$0323386))|0;
          $$3341 = 2;$$4 = $201;
          break L7;
          break;
         }
         case -24:  {
          $210 = ($52>>>0)<(2);
          if ($210) {
           $$0337 = 28;
           break L5;
          }
          $211 = ((($$in)) + 1|0);
          $212 = HEAP8[$211>>0]|0;
          $213 = $212&255;
          $214 = (($50) + -161)|0;
          $215 = (($213) + -161)|0;
          $216 = ($214>>>0)>(92);
          $217 = ($215>>>0)>(93);
          $or$cond9 = $216 | $217;
          if (!($or$cond9)) {
           $248 = ((110672 + (($214*188)|0)|0) + ($215<<1)|0);
           $249 = HEAP16[$248>>1]|0;
           $250 = $249&65535;
           $251 = ($249<<16>>16)==(0);
           if ($251) {
            $$0337$ph = 25;
            label = 115;
            break L5;
           } else {
            $$2340 = 2;$$8 = $250;
            label = 87;
            break L7;
           }
          }
          $218 = (($50) + -129)|0;
          $219 = ($218>>>0)>(92);
          if ($219) {
           $$0337$ph = 25;
           label = 115;
           break L5;
          }
          $220 = ($218>>>0)>(68);
          $221 = ($212&255)>(82);
          $or$cond11 = $220 & $221;
          if ($or$cond11) {
           $$0337$ph = 25;
           label = 115;
           break L5;
          }
          $222 = (($213) + -65)|0;
          $223 = ($222>>>0)<(26);
          do {
           if ($223) {
            $$5335 = $222;
           } else {
            $224 = (($213) + -97)|0;
            $225 = ($224>>>0)<(26);
            if ($225) {
             $226 = (($213) + -71)|0;
             $$5335 = $226;
             break;
            }
            $227 = (($213) + -129)|0;
            $228 = ($227>>>0)<(126);
            if (!($228)) {
             $$0337$ph = 25;
             label = 115;
             break L5;
            }
            $229 = (($213) + -77)|0;
            $$5335 = $229;
           }
          } while(0);
          $230 = ($218>>>0)<(32);
          $231 = ($218*178)|0;
          $232 = ($214*84)|0;
          $233 = (($232) + 5696)|0;
          $$pn = $230 ? $231 : $233;
          $$5329 = (($$pn) + 44032)|0;
          $234 = (($$5329) + ($$5335))|0;
          $235 = ($234>>>0)<(44032);
          if ($235) {
           $$2340 = 2;$$8 = $234;
           label = 87;
           break L7;
          }
          $$6336376 = 44032;$$6377 = $234;
          while(1) {
           $236 = (($$6377) - ($$6336376))|0;
           $$0318375 = 0;$$4346374 = 0;
           while(1) {
            $$0373 = 0;$$5347372 = $$4346374;
            while(1) {
             $241 = ((110672 + (($$0318375*188)|0)|0) + ($$0373<<1)|0);
             $242 = HEAP16[$241>>1]|0;
             $243 = $242&65535;
             $244 = (($243) - ($$6336376))|0;
             $245 = ($244>>>0)<=($236>>>0);
             $246 = $245&1;
             $spec$select359 = (($$5347372) + ($246))|0;
             $247 = (($$0373) + 1)|0;
             $exitcond = ($247|0)==(94);
             if ($exitcond) {
              break;
             } else {
              $$0373 = $247;$$5347372 = $spec$select359;
             }
            }
            $240 = (($$0318375) + 1)|0;
            $exitcond393 = ($240|0)==(93);
            if ($exitcond393) {
             break;
            } else {
             $$0318375 = $240;$$4346374 = $spec$select359;
            }
           }
           $237 = (($$6377) + 1)|0;
           $238 = (($spec$select359) + ($$6377))|0;
           $239 = ($238>>>0)<($237>>>0);
           if ($239) {
            $$2340 = 2;$$8 = $238;
            label = 87;
            break L7;
           } else {
            $$6336376 = $237;$$6377 = $238;
           }
          }
          break;
         }
         default: {
          $252 = ($35>>>0)>($50>>>0);
          if ($252) {
           $$2340 = 1;$$8 = $50;
           label = 87;
           break L7;
          }
          $253 = (($50) - ($35))|0;
          $254 = ($253*5)|0;
          $255 = $254 >>> 2;
          $256 = (($14) + ($255)|0);
          $257 = HEAP8[$256>>0]|0;
          $258 = $257&255;
          $259 = $253 << 1;
          $260 = $259 & 6;
          $261 = $258 >>> $260;
          $262 = (($255) + 1)|0;
          $263 = (($14) + ($262)|0);
          $264 = HEAP8[$263>>0]|0;
          $265 = $264&255;
          $266 = (8 - ($260))|0;
          $267 = $265 << $266;
          $268 = $267 & 1023;
          $269 = $268 | $261;
          $270 = (128160 + ($269<<1)|0);
          $271 = HEAP16[$270>>1]|0;
          $272 = $271&65535;
          $273 = ($269|0)==(0);
          $spec$select364 = $273 ? $50 : $272;
          $274 = ($spec$select364|0)==(1);
          if ($274) {
           $$0337$ph = 25;
           label = 115;
           break L5;
          } else {
           $$2340 = 1;$$8 = $spec$select364;
           label = 87;
           break L7;
          }
         }
         }
        } while(0);
        if ((label|0) == 14) {
         label = 0;
         $59 = $$0324 & -2048;
         $60 = ($59|0)==(55296);
         $61 = ($$0324>>>0)>(1114111);
         $or$cond = $61 | $60;
         if ($or$cond) {
          $$0337$ph = 25;
          label = 115;
          break L5;
         } else {
          $$2340 = 4;$$8 = $$0324;
          label = 87;
          break;
         }
        }
        $115 = (($50) + -129)|0;
        $116 = ($115>>>0)>(125);
        if ($116) {
         $$0337$ph = 25;
         label = 115;
         break L5;
        }
        $117 = ($52>>>0)<(2);
        if ($117) {
         $$0337 = 28;
         break L5;
        }
        $118 = ((($$in)) + 1|0);
        $119 = HEAP8[$118>>0]|0;
        $120 = $119&255;
        $121 = ($119&255)<(161);
        $or$cond352 = $41 & $121;
        if ($or$cond352) {
         $$0337$ph = 25;
         label = 115;
         break L5;
        }
        $122 = (($120) + -64)|0;
        $123 = ($122>>>0)>(190);
        $124 = ($119<<24>>24)==(127);
        $or$cond5 = $124 | $123;
        if (!($or$cond5)) {
         $157 = ($122>>>0)>(63);
         $158 = (($120) + -65)|0;
         $spec$select355 = $157 ? $158 : $122;
         $159 = ((24480 + (($115*380)|0)|0) + ($spec$select355<<1)|0);
         $160 = HEAP16[$159>>1]|0;
         $161 = $160&65535;
         $$2340 = 2;$$8 = $161;
         label = 87;
         break;
        }
        $125 = (($120) + -48)|0;
        $126 = ($125>>>0)<(10);
        $or$cond353 = $44 & $126;
        if (!($or$cond353)) {
         $$0337$ph = 25;
         label = 115;
         break L5;
        }
        $127 = ($52>>>0)<(4);
        if ($127) {
         $$0337 = 28;
         break L5;
        }
        $128 = ((($$in)) + 2|0);
        $129 = HEAP8[$128>>0]|0;
        $130 = $129&255;
        $131 = (($130) + -129)|0;
        $132 = ($131>>>0)>(126);
        if ($132) {
         $$0337$ph = 25;
         label = 115;
         break L5;
        }
        $133 = ((($$in)) + 3|0);
        $134 = HEAP8[$133>>0]|0;
        $135 = $134&255;
        $136 = (($135) + -48)|0;
        $137 = ($136>>>0)>(9);
        if ($137) {
         $$0337$ph = 25;
         label = 115;
         break L5;
        }
        $138 = ($115*10)|0;
        $139 = (($138) + ($120))|0;
        $140 = ($139*1260)|0;
        $141 = ($131*10)|0;
        $142 = (($140) + -60352)|0;
        $143 = (($142) + ($141))|0;
        $144 = (($143) + ($136))|0;
        $$2332382 = 0;$$3327383 = $144;
        while(1) {
         $145 = (($$3327383) - ($$2332382))|0;
         $$0320381 = 0;$$0342380 = 0;
         while(1) {
          $$0319379 = 0;$$1343378 = $$0342380;
          while(1) {
           $150 = ((24480 + (($$0320381*380)|0)|0) + ($$0319379<<1)|0);
           $151 = HEAP16[$150>>1]|0;
           $152 = $151&65535;
           $153 = (($152) - ($$2332382))|0;
           $154 = ($153>>>0)<=($145>>>0);
           $155 = $154&1;
           $spec$select354 = (($$1343378) + ($155))|0;
           $156 = (($$0319379) + 1)|0;
           $exitcond394 = ($156|0)==(190);
           if ($exitcond394) {
            break;
           } else {
            $$0319379 = $156;$$1343378 = $spec$select354;
           }
          }
          $149 = (($$0320381) + 1)|0;
          $exitcond395 = ($149|0)==(126);
          if ($exitcond395) {
           break;
          } else {
           $$0320381 = $149;$$0342380 = $spec$select354;
          }
         }
         $146 = (($$3327383) + 1)|0;
         $147 = (($spec$select354) + ($$3327383))|0;
         $148 = ($147>>>0)<($146>>>0);
         if ($148) {
          $$2340 = 4;$$8 = $147;
          label = 87;
          break;
         } else {
          $$2332382 = $146;$$3327383 = $147;
         }
        }
       } else {
        $$2340 = 1;$$8 = $50;
        label = 87;
       }
      } while(0);
      L110: do {
       if ((label|0) == 87) {
        label = 0;
        switch ($22<<24>>24) {
        case -58:  {
         $275 = HEAP32[$4>>2]|0;
         $276 = ($275>>>0)<(4);
         if ($276) {
          $$0337$ph = 1;
          label = 115;
          break L5;
         }
         $277 = HEAP32[$3>>2]|0;
         HEAP32[$277>>2] = $$8;
         $278 = ((($277)) + 4|0);
         HEAP32[$3>>2] = $278;
         $279 = (($275) + -4)|0;
         HEAP32[$4>>2] = $279;
         $$3341 = $$2340;$$4 = $$0323386;
         break L110;
         break;
        }
        case -56:  {
         $280 = HEAP32[$4>>2]|0;
         $281 = ($280>>>0)<(4);
         if ($281) {
          $282 = (_wctomb($9,$$8)|0);
          $283 = HEAP32[$4>>2]|0;
          $284 = ($283>>>0)<($282>>>0);
          if ($284) {
           label = 93;
           break L5;
          }
          $285 = HEAP32[$3>>2]|0;
          (_memcpy(($285|0),($9|0),($282|0))|0);
          $$7349 = $282;$289 = $285;
         } else {
          $286 = HEAP32[$3>>2]|0;
          $287 = (_wctomb($286,$$8)|0);
          $$7349 = $287;$289 = $286;
         }
         $288 = (($289) + ($$7349)|0);
         HEAP32[$3>>2] = $288;
         $290 = HEAP32[$4>>2]|0;
         $291 = (($290) - ($$7349))|0;
         HEAP32[$4>>2] = $291;
         $$3341 = $$2340;$$4 = $$0323386;
         break L110;
         break;
        }
        case -57:  {
         $292 = ($$8>>>0)>(127);
         if ($292) {
          $$1 = $$0323386;
          label = 97;
         } else {
          $$10 = $$8;$$3 = $$0323386;
         }
         break;
        }
        case -63: case -62: case -59: case -60:  {
         $325 = ($$8>>>0)<(65536);
         $or$cond361 = $37 | $325;
         $326 = HEAP32[$4>>2]|0;
         if ($or$cond361) {
          $327 = ($326>>>0)<(2);
          if ($327) {
           $$0337$ph = 1;
           label = 115;
           break L5;
          }
          $328 = ($$8>>>0)>(65535);
          $spec$select362 = $328 ? 65533 : $$8;
          $329 = HEAP32[$3>>2]|0;
          _put_16($329,$spec$select362,$32);
          $330 = ((($329)) + 2|0);
          HEAP32[$3>>2] = $330;
          $331 = HEAP32[$4>>2]|0;
          $332 = (($331) + -2)|0;
          HEAP32[$4>>2] = $332;
          $$3341 = $$2340;$$4 = $$0323386;
          break L110;
         } else {
          $333 = ($326>>>0)<(4);
          if ($333) {
           $$0337$ph = 1;
           label = 115;
           break L5;
          }
          $334 = (($$8) + -65536)|0;
          $335 = HEAP32[$3>>2]|0;
          $336 = $334 >>> 10;
          $337 = $336 | 55296;
          _put_16($335,$337,$32);
          $338 = ((($335)) + 2|0);
          $339 = $334 & 1023;
          $340 = $339 | 56320;
          _put_16($338,$340,$32);
          $341 = ((($335)) + 4|0);
          HEAP32[$3>>2] = $341;
          $342 = HEAP32[$4>>2]|0;
          $343 = (($342) + -4)|0;
          HEAP32[$4>>2] = $343;
          $$3341 = $$2340;$$4 = $$0323386;
          break L110;
         }
         break;
        }
        case -61: case -64:  {
         $344 = HEAP32[$4>>2]|0;
         $345 = ($344>>>0)<(4);
         if ($345) {
          $$0337$ph = 1;
          label = 115;
          break L5;
         }
         $346 = HEAP32[$3>>2]|0;
         _put_32($346,$$8,$32);
         $347 = ((($346)) + 4|0);
         HEAP32[$3>>2] = $347;
         $348 = HEAP32[$4>>2]|0;
         $349 = (($348) + -4)|0;
         HEAP32[$4>>2] = $349;
         $$3341 = $$2340;$$4 = $$0323386;
         break L110;
         break;
        }
        default: {
         $$10 = $$8;$$3 = $$0323386;
        }
        }
        L130: while(1) {
         if ((label|0) == 97) {
          label = 0;
          $293 = (($$1) + 1)|0;
          $$10 = 42;$$3 = $293;
         }
         $294 = HEAP32[$4>>2]|0;
         $295 = ($294|0)==(0);
         if ($295) {
          $$0337$ph = 1;
          label = 115;
          break L5;
         }
         $296 = ($$10>>>0)<($38>>>0);
         if ($296) {
          $$11 = $$10;
          break;
         }
         if ($43) {
          $$1 = $$3;
          label = 97;
          continue;
         }
         $$12384 = 0;
         while(1) {
          $302 = ($$12384*5)|0;
          $303 = $302 >>> 2;
          $304 = (($16) + ($303)|0);
          $305 = HEAP8[$304>>0]|0;
          $306 = $305&255;
          $307 = $$12384 << 1;
          $308 = $307 & 6;
          $309 = $306 >>> $308;
          $310 = (($303) + 1)|0;
          $311 = (($16) + ($310)|0);
          $312 = HEAP8[$311>>0]|0;
          $313 = $312&255;
          $314 = (8 - ($308))|0;
          $315 = $313 << $314;
          $316 = $315 & 1023;
          $317 = $316 | $309;
          $318 = (128160 + ($317<<1)|0);
          $319 = HEAP16[$318>>1]|0;
          $320 = $319&65535;
          $321 = ($$10|0)==($320|0);
          if ($321) {
           label = 104;
           break L130;
          }
          $323 = (($$12384) + 1)|0;
          $324 = ($323>>>0)<($42>>>0);
          if ($324) {
           $$12384 = $323;
          } else {
           $$1 = $$3;
           label = 97;
           continue L130;
          }
         }
        }
        if ((label|0) == 104) {
         label = 0;
         $322 = (($$12384) + 128)|0;
         $$11 = $322;
        }
        $297 = $$11&255;
        $298 = HEAP32[$3>>2]|0;
        $299 = ((($298)) + 1|0);
        HEAP32[$3>>2] = $299;
        HEAP8[$298>>0] = $297;
        $300 = HEAP32[$4>>2]|0;
        $301 = (($300) + -1)|0;
        HEAP32[$4>>2] = $301;
        $$3341 = $$2340;$$4 = $$3;
       }
      } while(0);
      $350 = HEAP32[$1>>2]|0;
      $351 = (($350) + ($$3341)|0);
      HEAP32[$1>>2] = $351;
      $352 = (($52) - ($$3341))|0;
      HEAP32[$2>>2] = $352;
      $353 = ($352|0)==(0);
      if ($353) {
       label = 114;
       break;
      } else {
       $$0323386 = $$4;$$in = $351;$52 = $352;
      }
     }
     if ((label|0) == 93) {
      $$0337 = 1;
     }
     else if ((label|0) == 114) {
      HEAP32[$24>>2] = $25;
      $$0322 = $$4;
      break;
     }
     else if ((label|0) == 115) {
      $$0337 = $$0337$ph;
     }
     $354 = (___errno_location()|0);
     HEAP32[$354>>2] = $$0337;
     HEAP32[$24>>2] = $25;
     $$0322 = -1;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0322|0);
}
function ___pthread_self_140() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _mbrtowc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$03952 = 0, $$03952$pn = 0, $$04051 = 0, $$04350 = 0, $$2 = 0, $$lcssa = 0, $$lcssa56 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, $spec$select47 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 $5 = ($3|0)==(0|0);
 $spec$select = $5 ? 135876 : $3;
 $6 = HEAP32[$spec$select>>2]|0;
 $7 = ($1|0)==(0|0);
 L1: do {
  if ($7) {
   $8 = ($6|0)==(0);
   if ($8) {
    $$0 = 0;
   } else {
    label = 19;
   }
  } else {
   $9 = ($0|0)==(0|0);
   $spec$select47 = $9 ? $4 : $0;
   $10 = ($2|0)==(0);
   if ($10) {
    $$0 = -2;
   } else {
    $11 = ($6|0)==(0);
    if ($11) {
     $12 = HEAP8[$1>>0]|0;
     $13 = ($12<<24>>24)>(-1);
     if ($13) {
      $14 = $12&255;
      HEAP32[$spec$select47>>2] = $14;
      $15 = ($12<<24>>24)!=(0);
      $16 = $15&1;
      $$0 = $16;
      break;
     }
     $17 = (___pthread_self_414()|0);
     $18 = ((($17)) + 188|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(0|0);
     $22 = HEAP8[$1>>0]|0;
     if ($21) {
      $23 = $22 << 24 >> 24;
      $24 = $23 & 57343;
      HEAP32[$spec$select47>>2] = $24;
      $$0 = 1;
      break;
     }
     $25 = $22&255;
     $26 = (($25) + -194)|0;
     $27 = ($26>>>0)>(50);
     if ($27) {
      label = 19;
      break;
     }
     $28 = ((($1)) + 1|0);
     $29 = (1728 + ($26<<2)|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($2) + -1)|0;
     $32 = ($31|0)==(0);
     if ($32) {
      $$2 = $30;
     } else {
      $$03952 = $28;$$04051 = $30;$$04350 = $31;
      label = 11;
     }
    } else {
     $$03952 = $1;$$04051 = $6;$$04350 = $2;
     label = 11;
    }
    L14: do {
     if ((label|0) == 11) {
      $33 = HEAP8[$$03952>>0]|0;
      $34 = $33&255;
      $35 = $34 >>> 3;
      $36 = (($35) + -16)|0;
      $37 = $$04051 >> 26;
      $38 = (($35) + ($37))|0;
      $39 = $36 | $38;
      $40 = ($39>>>0)>(7);
      if ($40) {
       label = 19;
       break L1;
      }
      $41 = $$04051 << 6;
      $42 = (($34) + -128)|0;
      $43 = $42 | $41;
      $44 = (($$04350) + -1)|0;
      $45 = ($43|0)<(0);
      if ($45) {
       $$03952$pn = $$03952;$47 = $43;$53 = $44;
       while(1) {
        $56 = ((($$03952$pn)) + 1|0);
        $57 = ($53|0)==(0);
        if ($57) {
         $$2 = $47;
         break L14;
        }
        $49 = HEAP8[$56>>0]|0;
        $58 = $49 & -64;
        $59 = ($58<<24>>24)==(-128);
        if (!($59)) {
         label = 19;
         break L1;
        }
        $46 = $47 << 6;
        $48 = $49&255;
        $50 = (($48) + -128)|0;
        $51 = $50 | $46;
        $52 = (($53) + -1)|0;
        $54 = ($51|0)<(0);
        if ($54) {
         $$03952$pn = $56;$47 = $51;$53 = $52;
        } else {
         $$lcssa = $52;$$lcssa56 = $51;
         break;
        }
       }
      } else {
       $$lcssa = $44;$$lcssa56 = $43;
      }
      HEAP32[$spec$select>>2] = 0;
      HEAP32[$spec$select47>>2] = $$lcssa56;
      $55 = (($2) - ($$lcssa))|0;
      $$0 = $55;
      break L1;
     }
    } while(0);
    HEAP32[$spec$select>>2] = $$2;
    $$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 19) {
  HEAP32[$spec$select>>2] = 0;
  $60 = (___errno_location()|0);
  HEAP32[$60>>2] = 25;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _get_32($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 3;
 $3 = (($0) + ($2)|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 << 24;
 $7 = $2 ^ 1;
 $8 = (($0) + ($7)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 << 16;
 $12 = $11 | $6;
 $13 = $2 ^ 2;
 $14 = (($0) + ($13)|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $16 << 8;
 $18 = $12 | $17;
 $19 = $2 ^ 3;
 $20 = (($0) + ($19)|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = $18 | $22;
 return ($23|0);
}
function _get_16($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 1;
 $3 = (($0) + ($2)|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 << 8;
 $7 = $2 ^ 1;
 $8 = (($0) + ($7)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $6 | $10;
 return ($11|0);
}
function _put_16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2 & 1;
 $4 = $1 >>> 8;
 $5 = $4&255;
 $6 = (($0) + ($3)|0);
 HEAP8[$6>>0] = $5;
 $7 = $1&255;
 $8 = $3 ^ 1;
 $9 = (($0) + ($8)|0);
 HEAP8[$9>>0] = $7;
 return;
}
function _put_32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2 & 3;
 $4 = $1 >>> 24;
 $5 = $4&255;
 $6 = (($0) + ($3)|0);
 HEAP8[$6>>0] = $5;
 $7 = $1 >>> 16;
 $8 = $7&255;
 $9 = $3 ^ 1;
 $10 = (($0) + ($9)|0);
 HEAP8[$10>>0] = $8;
 $11 = $1 >>> 8;
 $12 = $11&255;
 $13 = $3 ^ 2;
 $14 = (($0) + ($13)|0);
 HEAP8[$14>>0] = $12;
 $15 = $1&255;
 $16 = $3 ^ 3;
 $17 = (($0) + ($16)|0);
 HEAP8[$17>>0] = $15;
 return;
}
function ___pthread_self_414() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _snprintf($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (_vsnprintf($0,$1,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($0,$1)|0);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$030 = 0, $$037 = 0, $$1 = 0, $$128 = 0, $$22934 = 0, $$235 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$030 = $$02741;
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1 = $$0$lcssa;$$128 = $$025$lcssa;
   label = 10;
  } else {
   $$1 = $1;$$128 = $0;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  $31 = HEAP8[$$1>>0]|0;
  HEAP8[$$128>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $$030 = $$128;
  } else {
   $$22934 = $$128;$$235 = $$1;
   while(1) {
    $33 = ((($$235)) + 1|0);
    $34 = ((($$22934)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $$030 = $34;
     break;
    } else {
     $$22934 = $34;$$235 = $33;
    }
   }
  }
 }
 return ($$030|0);
}
function _write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $4 = (___syscall4(4,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $4 = (___syscall3(3,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _pipe($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall42(42,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___strdup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  $5 = (_memcpy(($3|0),($0|0),($2|0))|0);
  $$0 = $5;
 }
 return ($$0|0);
}
function _fputs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (_fwrite($0,1,$2,$1)|0);
 $4 = ($3|0)!=($2|0);
 $5 = $4 << 31 >> 31;
 return ($5|0);
}
function _fwrite($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $spec$select = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $10 = (___lockfile($3)|0);
  $phitmp = ($10|0)==(0);
  $11 = (___fwritex($0,$4,$3)|0);
  if ($phitmp) {
   $13 = $11;
  } else {
   ___unlockfile($3);
   $13 = $11;
  }
 } else {
  $9 = (___fwritex($0,$4,$3)|0);
  $13 = $9;
 }
 $12 = ($13|0)==($4|0);
 if ($12) {
  $15 = $spec$select;
 } else {
  $14 = (($13>>>0) / ($1>>>0))&-1;
  $15 = $14;
 }
 return ($15|0);
}
function ___unlist_locked_file($0) {
 $0 = $0|0;
 var $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 132|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  $7 = $5;
  $$pre = ((($0)) + 128|0);
  if (!($6)) {
   $8 = HEAP32[$$pre>>2]|0;
   $9 = ((($5)) + 128|0);
   HEAP32[$9>>2] = $8;
  }
  $10 = HEAP32[$$pre>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $13 = (___pthread_self_603()|0);
   $14 = ((($13)) + 232|0);
   $$sink = $14;
  } else {
   $12 = ((($10)) + 132|0);
   $$sink = $12;
  }
  HEAP32[$$sink>>2] = $7;
 }
 return;
}
function ___pthread_self_603() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 3]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_strchr(134754,$3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 28;
  $$0 = 0;
 } else {
  $7 = (___fmodeflags($1)|0);
  $8 = $0;
  $9 = $7 | 32768;
  HEAP32[$vararg_buffer>>2] = $8;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $9;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $10 = (___syscall5(5,($vararg_buffer|0))|0);
  $11 = (___syscall_ret($10)|0);
  $12 = ($11|0)<(0);
  if ($12) {
   $$0 = 0;
  } else {
   $13 = (___fdopen($11,$1)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    (___wasi_fd_close(($11|0))|0);
    $$0 = 0;
   } else {
    $$0 = $13;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$2 = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $spec$select = 0, $spec$select13 = 0, $spec$select14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $4 = ($3<<24>>24)!=(114);
 $$ = $4&1;
 $$0 = $2 ? $$ : 2;
 $5 = (_strchr($0,120)|0);
 $6 = ($5|0)==(0|0);
 $7 = $$0 | 128;
 $spec$select = $6 ? $$0 : $7;
 $8 = (_strchr($0,101)|0);
 $9 = ($8|0)==(0|0);
 $10 = $spec$select | 524288;
 $$2 = $9 ? $spec$select : $10;
 $11 = ($3<<24>>24)==(114);
 $12 = $$2 | 64;
 $spec$select13 = $11 ? $$2 : $12;
 $13 = ($3<<24>>24)==(119);
 $14 = $spec$select13 | 512;
 $$4 = $13 ? $14 : $spec$select13;
 $15 = ($3<<24>>24)==(97);
 $16 = $$4 | 1024;
 $spec$select14 = $15 ? $16 : $$4;
 return ($spec$select14|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 40|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = (_strchr(134754,$4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 28;
  $$0 = 0;
 } else {
  $8 = (_malloc(1176)|0);
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = 0;
  } else {
   (_memset(($8|0),0,144)|0);
   $10 = (_strchr($1,43)|0);
   $11 = ($10|0)==(0|0);
   $12 = HEAP8[$1>>0]|0;
   if ($11) {
    $13 = ($12<<24>>24)==(114);
    $14 = $13 ? 8 : 4;
    HEAP32[$8>>2] = $14;
   }
   $15 = ($12<<24>>24)==(97);
   if ($15) {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 3;
    $16 = (___syscall221(221,($vararg_buffer|0))|0);
    $17 = $16 & 1024;
    $18 = ($17|0)==(0);
    if ($18) {
     $19 = $16 | 1024;
     HEAP32[$vararg_buffer2>>2] = $0;
     $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
     HEAP32[$vararg_ptr5>>2] = 4;
     $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
     HEAP32[$vararg_ptr6>>2] = $19;
     (___syscall221(221,($vararg_buffer2|0))|0);
    }
    $20 = HEAP32[$8>>2]|0;
    $21 = $20 | 128;
    HEAP32[$8>>2] = $21;
    $28 = $21;
   } else {
    $$pre = HEAP32[$8>>2]|0;
    $28 = $$pre;
   }
   $22 = ((($8)) + 60|0);
   HEAP32[$22>>2] = $0;
   $23 = ((($8)) + 152|0);
   $24 = ((($8)) + 44|0);
   HEAP32[$24>>2] = $23;
   $25 = ((($8)) + 48|0);
   HEAP32[$25>>2] = 1024;
   $26 = ((($8)) + 75|0);
   HEAP8[$26>>0] = -1;
   $27 = $28 & 8;
   $29 = ($27|0)==(0);
   if ($29) {
    $30 = $2;
    HEAP32[$vararg_buffer7>>2] = $0;
    $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
    HEAP32[$vararg_ptr10>>2] = 21523;
    $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
    HEAP32[$vararg_ptr11>>2] = $30;
    $31 = (___syscall54(54,($vararg_buffer7|0))|0);
    $32 = ($31|0)==(0);
    if ($32) {
     HEAP8[$26>>0] = 10;
    }
   }
   $33 = ((($8)) + 32|0);
   HEAP32[$33>>2] = 3;
   $34 = ((($8)) + 36|0);
   HEAP32[$34>>2] = 1;
   $35 = ((($8)) + 40|0);
   HEAP32[$35>>2] = 1;
   $36 = ((($8)) + 12|0);
   HEAP32[$36>>2] = 1;
   $37 = HEAP32[(135812)>>2]|0;
   $38 = ($37|0)==(0);
   if ($38) {
    $39 = ((($8)) + 76|0);
    HEAP32[$39>>2] = -1;
   }
   $40 = (___ofl_add($8)|0);
   $$0 = $8;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___ofl_add($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ofl_lock()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 56|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 52|0);
  HEAP32[$6>>2] = $0;
 }
 HEAP32[$1>>2] = $0;
 ___ofl_unlock();
 return ($0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((135880|0));
 return (135888|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((135880|0));
 return;
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $30 = $4;
 } else {
  $30 = 0;
 }
 ___unlist_locked_file($0);
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = (___ofl_lock()|0);
  $9 = ((($0)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  $12 = $10;
  $$pre = ((($0)) + 56|0);
  if (!($11)) {
   $13 = HEAP32[$$pre>>2]|0;
   $14 = ((($10)) + 56|0);
   HEAP32[$14>>2] = $13;
  }
  $15 = HEAP32[$$pre>>2]|0;
  $16 = ($15|0)==(0|0);
  $17 = $15;
  if (!($16)) {
   $18 = ((($15)) + 52|0);
   HEAP32[$18>>2] = $12;
  }
  $19 = HEAP32[$8>>2]|0;
  $20 = ($19|0)==($0|0);
  if ($20) {
   HEAP32[$8>>2] = $17;
  }
  ___ofl_unlock();
 }
 $21 = (_fflush($0)|0);
 $22 = ((($0)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (FUNCTION_TABLE_ii[$23 & 3]($0)|0);
 $25 = $24 | $21;
 $26 = ((($0)) + 96|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  _free($27);
 }
 if ($7) {
  $29 = ($30|0)==(0);
  if (!($29)) {
   ___unlockfile($0);
  }
 } else {
  _free($0);
 }
 return ($25|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[32496]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[32496]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $26 = $17;
     } else {
      $26 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $25 = ($26|0)==(0);
     if (!($25)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 3]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ($17|0)<(0);
   $19 = $18 << 31 >> 31;
   $20 = ((($0)) + 40|0);
   $21 = HEAP32[$20>>2]|0;
   (FUNCTION_TABLE_iiiii[$21 & 3]($0,$17,$19,1)|0);
   $22 = (getTempRet0() | 0);
  }
  $23 = ((($0)) + 16|0);
  HEAP32[$23>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _fprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vfprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _strstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $$0 = $0;
  } else {
   $4 = $2 << 24 >> 24;
   $5 = (_strchr($0,$4)|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    $$0 = 0;
   } else {
    $7 = ((($1)) + 1|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = ($8<<24>>24)==(0);
    if ($9) {
     $$0 = $5;
    } else {
     $10 = ((($5)) + 1|0);
     $11 = HEAP8[$10>>0]|0;
     $12 = ($11<<24>>24)==(0);
     if ($12) {
      $$0 = 0;
     } else {
      $13 = ((($1)) + 2|0);
      $14 = HEAP8[$13>>0]|0;
      $15 = ($14<<24>>24)==(0);
      if ($15) {
       $16 = (_twobyte_strstr($5,$1)|0);
       $$0 = $16;
       break;
      }
      $17 = ((($5)) + 2|0);
      $18 = HEAP8[$17>>0]|0;
      $19 = ($18<<24>>24)==(0);
      if ($19) {
       $$0 = 0;
      } else {
       $20 = ((($1)) + 3|0);
       $21 = HEAP8[$20>>0]|0;
       $22 = ($21<<24>>24)==(0);
       if ($22) {
        $23 = (_threebyte_strstr($5,$1)|0);
        $$0 = $23;
        break;
       }
       $24 = ((($5)) + 3|0);
       $25 = HEAP8[$24>>0]|0;
       $26 = ($25<<24>>24)==(0);
       if ($26) {
        $$0 = 0;
       } else {
        $27 = ((($1)) + 4|0);
        $28 = HEAP8[$27>>0]|0;
        $29 = ($28<<24>>24)==(0);
        if ($29) {
         $30 = (_fourbyte_strstr($5,$1)|0);
         $$0 = $30;
         break;
        } else {
         $31 = (_twoway_strstr($5,$1)|0);
         $$0 = $31;
         break;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _twobyte_strstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$in16 = 0, $$01415 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $3 << 8;
 $5 = ((($1)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $4 | $7;
 $9 = ((($0)) + 1|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)==(0);
 L1: do {
  if ($11) {
   $26 = 0;
  } else {
   $12 = HEAP8[$0>>0]|0;
   $13 = $12&255;
   $14 = $13 << 8;
   $15 = $10&255;
   $16 = $14 | $15;
   $$0$in16 = $16;$$01415 = $9;
   while(1) {
    $17 = $$0$in16 & 65535;
    $18 = ($17|0)==($8|0);
    if ($18) {
     break;
    }
    $19 = $17 << 8;
    $20 = ((($$01415)) + 1|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = $21&255;
    $23 = $19 | $22;
    $24 = ($21<<24>>24)==(0);
    if ($24) {
     $26 = 0;
     break L1;
    } else {
     $$0$in16 = $23;$$01415 = $20;
    }
   }
   $25 = ((($$01415)) + -1|0);
   $26 = $25;
  }
 } while(0);
 return ($26|0);
}
function _threebyte_strstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$016$lcssa = 0, $$01618 = 0, $$019 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $3 << 24;
 $5 = ((($1)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 << 16;
 $9 = $8 | $4;
 $10 = ((($1)) + 2|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 << 8;
 $14 = $9 | $13;
 $15 = HEAP8[$0>>0]|0;
 $16 = $15&255;
 $17 = $16 << 24;
 $18 = ((($0)) + 1|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $20 << 16;
 $22 = $21 | $17;
 $23 = ((($0)) + 2|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $25 << 8;
 $27 = $22 | $26;
 $28 = ($24<<24>>24)==(0);
 $29 = ($27|0)==($14|0);
 $or$cond17 = $29 | $28;
 if ($or$cond17) {
  $$016$lcssa = $23;$$lcssa = $28;
 } else {
  $$01618 = $23;$$019 = $27;
  while(1) {
   $30 = ((($$01618)) + 1|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $33 = $$019 | $32;
   $34 = $33 << 8;
   $35 = ($31<<24>>24)==(0);
   $36 = ($34|0)==($14|0);
   $or$cond = $36 | $35;
   if ($or$cond) {
    $$016$lcssa = $30;$$lcssa = $35;
    break;
   } else {
    $$01618 = $30;$$019 = $34;
   }
  }
 }
 $37 = ((($$016$lcssa)) + -2|0);
 $38 = $$lcssa ? 0 : $37;
 return ($38|0);
}
function _fourbyte_strstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$018$lcssa = 0, $$01820 = 0, $$021 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $3 << 24;
 $5 = ((($1)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 << 16;
 $9 = $8 | $4;
 $10 = ((($1)) + 2|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 << 8;
 $14 = $9 | $13;
 $15 = ((($1)) + 3|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $14 | $17;
 $19 = HEAP8[$0>>0]|0;
 $20 = $19&255;
 $21 = $20 << 24;
 $22 = ((($0)) + 1|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 << 16;
 $26 = $25 | $21;
 $27 = ((($0)) + 2|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $29 << 8;
 $31 = $26 | $30;
 $32 = ((($0)) + 3|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = $31 | $34;
 $36 = ($33<<24>>24)==(0);
 $37 = ($35|0)==($18|0);
 $or$cond19 = $37 | $36;
 if ($or$cond19) {
  $$018$lcssa = $32;$$lcssa = $36;
 } else {
  $$01820 = $32;$$021 = $35;
  while(1) {
   $38 = $$021 << 8;
   $39 = ((($$01820)) + 1|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40&255;
   $42 = $38 | $41;
   $43 = ($40<<24>>24)==(0);
   $44 = ($42|0)==($18|0);
   $or$cond = $44 | $43;
   if ($or$cond) {
    $$018$lcssa = $39;$$lcssa = $43;
    break;
   } else {
    $$01820 = $39;$$021 = $42;
   }
  }
 }
 $45 = ((($$018$lcssa)) + -3|0);
 $46 = $$lcssa ? 0 : $45;
 return ($46|0);
}
function _twoway_strstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0166 = 0, $$0168 = 0, $$0169 = 0, $$0169$be = 0, $$0170 = 0, $$0175$lcssa237 = 0, $$0175219 = 0, $$0179218 = 0, $$0185217 = 0, $$0189$lcssa236 = 0, $$0189216 = 0, $$0193$lcssa234235 = 0, $$0193225 = 0, $$1176 = 0, $$1180 = 0, $$1186 = 0, $$1190 = 0, $$2177$$0175 = 0, $$2177$lcssa = 0, $$2177210 = 0;
 var $$2181209 = 0, $$2187208 = 0, $$2191$$0189 = 0, $$2191$$0189$ = 0, $$2191$lcssa = 0, $$2191207 = 0, $$3 = 0, $$3173 = 0, $$3178 = 0, $$3182 = 0, $$3188 = 0, $$3192 = 0, $$4183 = 0, $$4183$sink = 0, $$5 = 0, $$5184201 = 0, $$6202 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond194 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0;
 $2 = sp + 1024|0;
 $3 = sp;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;HEAP32[$2+24>>2]=0|0;HEAP32[$2+28>>2]=0|0;
 $4 = HEAP8[$1>>0]|0;
 $5 = ($4<<24>>24)==(0);
 L1: do {
  if ($5) {
   $$0175$lcssa237 = 1;$$0189$lcssa236 = -1;$$0193$lcssa234235 = 0;$$2177$lcssa = 1;$$2191$lcssa = -1;
   label = 25;
  } else {
   $$0193225 = 0;$10 = $4;
   while(1) {
    $6 = (($0) + ($$0193225)|0);
    $7 = HEAP8[$6>>0]|0;
    $8 = ($7<<24>>24)==(0);
    if ($8) {
     $$3 = 0;
     break L1;
    }
    $9 = $10&255;
    $11 = $9 & 31;
    $12 = 1 << $11;
    $13 = $9 >>> 5;
    $14 = (($2) + ($13<<2)|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 | $12;
    HEAP32[$14>>2] = $16;
    $17 = (($$0193225) + 1)|0;
    $18 = (($3) + ($9<<2)|0);
    HEAP32[$18>>2] = $17;
    $19 = (($1) + ($17)|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = ($20<<24>>24)==(0);
    if ($21) {
     break;
    } else {
     $$0193225 = $17;$10 = $20;
    }
   }
   $22 = ($17>>>0)>(1);
   if ($22) {
    $$0175219 = 1;$$0179218 = 1;$$0185217 = 0;$$0189216 = -1;$27 = 1;
    while(1) {
     $23 = (($$0179218) + ($$0189216))|0;
     $24 = (($1) + ($23)|0);
     $25 = HEAP8[$24>>0]|0;
     $26 = (($1) + ($27)|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($25<<24>>24)==($28<<24>>24);
     do {
      if ($29) {
       $30 = ($$0179218|0)==($$0175219|0);
       if ($30) {
        $31 = (($$0175219) + ($$0185217))|0;
        $$1176 = $$0175219;$$1180 = 1;$$1186 = $31;$$1190 = $$0189216;
        break;
       } else {
        $32 = (($$0179218) + 1)|0;
        $$1176 = $$0175219;$$1180 = $32;$$1186 = $$0185217;$$1190 = $$0189216;
        break;
       }
      } else {
       $33 = ($25&255)>($28&255);
       if ($33) {
        $34 = (($27) - ($$0189216))|0;
        $$1176 = $34;$$1180 = 1;$$1186 = $27;$$1190 = $$0189216;
        break;
       } else {
        $35 = (($$0185217) + 1)|0;
        $$1176 = 1;$$1180 = 1;$$1186 = $35;$$1190 = $$0185217;
        break;
       }
      }
     } while(0);
     $36 = (($$1180) + ($$1186))|0;
     $37 = ($36>>>0)<($17>>>0);
     if ($37) {
      $$0175219 = $$1176;$$0179218 = $$1180;$$0185217 = $$1186;$$0189216 = $$1190;$27 = $36;
     } else {
      break;
     }
    }
    if ($22) {
     $$2177210 = 1;$$2181209 = 1;$$2187208 = 0;$$2191207 = -1;$42 = 1;
     while(1) {
      $38 = (($$2181209) + ($$2191207))|0;
      $39 = (($1) + ($38)|0);
      $40 = HEAP8[$39>>0]|0;
      $41 = (($1) + ($42)|0);
      $43 = HEAP8[$41>>0]|0;
      $44 = ($40<<24>>24)==($43<<24>>24);
      do {
       if ($44) {
        $45 = ($$2181209|0)==($$2177210|0);
        if ($45) {
         $46 = (($$2177210) + ($$2187208))|0;
         $$3178 = $$2177210;$$3182 = 1;$$3188 = $46;$$3192 = $$2191207;
         break;
        } else {
         $47 = (($$2181209) + 1)|0;
         $$3178 = $$2177210;$$3182 = $47;$$3188 = $$2187208;$$3192 = $$2191207;
         break;
        }
       } else {
        $48 = ($40&255)<($43&255);
        if ($48) {
         $49 = (($42) - ($$2191207))|0;
         $$3178 = $49;$$3182 = 1;$$3188 = $42;$$3192 = $$2191207;
         break;
        } else {
         $50 = (($$2187208) + 1)|0;
         $$3178 = 1;$$3182 = 1;$$3188 = $50;$$3192 = $$2187208;
         break;
        }
       }
      } while(0);
      $51 = (($$3182) + ($$3188))|0;
      $52 = ($51>>>0)<($17>>>0);
      if ($52) {
       $$2177210 = $$3178;$$2181209 = $$3182;$$2187208 = $$3188;$$2191207 = $$3192;$42 = $51;
      } else {
       $$0175$lcssa237 = $$1176;$$0189$lcssa236 = $$1190;$$0193$lcssa234235 = $17;$$2177$lcssa = $$3178;$$2191$lcssa = $$3192;
       label = 25;
       break;
      }
     }
    } else {
     $$0175$lcssa237 = $$1176;$$0189$lcssa236 = $$1190;$$0193$lcssa234235 = $17;$$2177$lcssa = 1;$$2191$lcssa = -1;
     label = 25;
    }
   } else {
    $$0175$lcssa237 = 1;$$0189$lcssa236 = -1;$$0193$lcssa234235 = $17;$$2177$lcssa = 1;$$2191$lcssa = -1;
    label = 25;
   }
  }
 } while(0);
 L34: do {
  if ((label|0) == 25) {
   $53 = (($$2191$lcssa) + 1)|0;
   $54 = (($$0189$lcssa236) + 1)|0;
   $55 = ($53>>>0)>($54>>>0);
   $$2177$$0175 = $55 ? $$2177$lcssa : $$0175$lcssa237;
   $$2191$$0189 = $55 ? $$2191$lcssa : $$0189$lcssa236;
   $56 = (($1) + ($$2177$$0175)|0);
   $57 = (($$2191$$0189) + 1)|0;
   $58 = (_memcmp($1,$56,$57)|0);
   $59 = ($58|0)==(0);
   if ($59) {
    $64 = (($$0193$lcssa234235) - ($$2177$$0175))|0;
    $$0168 = $64;$$5 = $$2177$$0175;$$pre$phiZ2D = $64;
   } else {
    $60 = (($$0193$lcssa234235) - ($$2191$$0189))|0;
    $61 = (($60) + -1)|0;
    $62 = ($$2191$$0189>>>0)>($61>>>0);
    $$2191$$0189$ = $62 ? $$2191$$0189 : $61;
    $63 = (($$2191$$0189$) + 1)|0;
    $$pre = (($$0193$lcssa234235) - ($63))|0;
    $$0168 = 0;$$5 = $63;$$pre$phiZ2D = $$pre;
   }
   $65 = $$0193$lcssa234235 | 63;
   $66 = (($$0193$lcssa234235) + -1)|0;
   $67 = ($$0168|0)!=(0);
   $$0166 = $0;$$0169 = 0;$$0170 = $0;
   while(1) {
    $68 = $$0170;
    $69 = $$0166;
    $70 = (($68) - ($69))|0;
    $71 = ($70>>>0)<($$0193$lcssa234235>>>0);
    do {
     if ($71) {
      $72 = (_memchr($$0170,0,$65)|0);
      $73 = ($72|0)==(0|0);
      if ($73) {
       $77 = (($$0170) + ($65)|0);
       $$3173 = $77;
       break;
      } else {
       $74 = $72;
       $75 = (($74) - ($69))|0;
       $76 = ($75>>>0)<($$0193$lcssa234235>>>0);
       if ($76) {
        $$3 = 0;
        break L34;
       } else {
        $$3173 = $72;
        break;
       }
      }
     } else {
      $$3173 = $$0170;
     }
    } while(0);
    $78 = (($$0166) + ($66)|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = $79&255;
    $81 = $80 >>> 5;
    $82 = (($2) + ($81<<2)|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = $80 & 31;
    $85 = 1 << $84;
    $86 = $85 & $83;
    $87 = ($86|0)==(0);
    L48: do {
     if ($87) {
      $$0169$be = 0;$$4183$sink = $$0193$lcssa234235;
     } else {
      $88 = (($3) + ($80<<2)|0);
      $89 = HEAP32[$88>>2]|0;
      $90 = (($$0193$lcssa234235) - ($89))|0;
      $91 = ($90|0)==(0);
      if (!($91)) {
       $92 = ($$0169|0)!=(0);
       $or$cond = $67 & $92;
       $93 = ($90>>>0)<($$5>>>0);
       $or$cond194 = $or$cond & $93;
       $$4183 = $or$cond194 ? $$pre$phiZ2D : $90;
       $$0169$be = 0;$$4183$sink = $$4183;
       break;
      }
      $95 = ($57>>>0)>($$0169>>>0);
      $96 = $95 ? $57 : $$0169;
      $97 = (($1) + ($96)|0);
      $98 = HEAP8[$97>>0]|0;
      $99 = ($98<<24>>24)==(0);
      L53: do {
       if (!($99)) {
        $$5184201 = $96;$103 = $98;
        while(1) {
         $100 = (($$0166) + ($$5184201)|0);
         $101 = HEAP8[$100>>0]|0;
         $102 = ($103<<24>>24)==($101<<24>>24);
         if (!($102)) {
          break;
         }
         $104 = (($$5184201) + 1)|0;
         $105 = (($1) + ($104)|0);
         $106 = HEAP8[$105>>0]|0;
         $107 = ($106<<24>>24)==(0);
         if ($107) {
          break L53;
         } else {
          $$5184201 = $104;$103 = $106;
         }
        }
        $108 = (($$5184201) - ($$2191$$0189))|0;
        $$0169$be = 0;$$4183$sink = $108;
        break L48;
       }
      } while(0);
      if (!($95)) {
       $$3 = $$0166;
       break L34;
      }
      $$6202 = $57;
      while(1) {
       $110 = (($$6202) + -1)|0;
       $111 = (($1) + ($110)|0);
       $112 = HEAP8[$111>>0]|0;
       $113 = (($$0166) + ($110)|0);
       $114 = HEAP8[$113>>0]|0;
       $115 = ($112<<24>>24)==($114<<24>>24);
       if (!($115)) {
        $$0169$be = $$0168;$$4183$sink = $$5;
        break L48;
       }
       $109 = ($110>>>0)>($$0169>>>0);
       if ($109) {
        $$6202 = $110;
       } else {
        $$3 = $$0166;
        break L34;
       }
      }
     }
    } while(0);
    $94 = (($$0166) + ($$4183$sink)|0);
    $$0166 = $94;$$0169 = $$0169$be;$$0170 = $$3173;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  label = 3;
 } else {
  $5 = (___lockfile($1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $20 = $0&255;
   $21 = $0 & 255;
   $22 = ((($1)) + 75|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($21|0)==($24|0);
   if ($25) {
    label = 10;
   } else {
    $26 = ((($1)) + 20|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($1)) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($27>>>0)<($29>>>0);
    if ($30) {
     $31 = ((($27)) + 1|0);
     HEAP32[$26>>2] = $31;
     HEAP8[$27>>0] = $20;
     $33 = $21;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $32 = (___overflow($1,$0)|0);
    $33 = $32;
   }
   ___unlockfile($1);
   $$0 = $33;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = $0&255;
   $8 = $0 & 255;
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($8|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $7;
     $$0 = $8;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function _perror($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[32495]|0;
 $2 = (___errno_location()|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_strerror($3)|0);
 $5 = ((($1)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(-1);
 if ($7) {
  $8 = (___lockfile($1)|0);
  $15 = $8;
 } else {
  $15 = 0;
 }
 $9 = ($0|0)==(0|0);
 if (!($9)) {
  $10 = HEAP8[$0>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if (!($11)) {
   $12 = (_strlen($0)|0);
   (_fwrite($0,$12,1,$1)|0);
   (_fputc(58,$1)|0);
   (_fputc(32,$1)|0);
  }
 }
 $13 = (_strlen($4)|0);
 (_fwrite($4,$13,1,$1)|0);
 (_fputc(10,$1)|0);
 $14 = ($15|0)==(0);
 if (!($14)) {
  ___unlockfile($1);
 }
 return;
}
function _malloc($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$0169$i = 0, $$0170$i = 0, $$0171$i = 0, $$0192 = 0, $$0194 = 0, $$02014$i$i = 0, $$0202$lcssa$i$i = 0, $$02023$i$i = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$024372$i = 0, $$0259$i$i = 0, $$02604$i$i = 0, $$0261$lcssa$i$i = 0, $$02613$i$i = 0;
 var $$0267$i$i = 0, $$0268$i$i = 0, $$0318$i = 0, $$032012$i = 0, $$0321$lcssa$i = 0, $$032111$i = 0, $$0323$i = 0, $$0329$i = 0, $$0335$i = 0, $$0336$i = 0, $$0338$i = 0, $$0339$i = 0, $$0344$i = 0, $$1174$i = 0, $$1174$i$be = 0, $$1174$i$ph = 0, $$1176$i = 0, $$1176$i$be = 0, $$1176$i$ph = 0, $$124471$i = 0;
 var $$1263$i$i = 0, $$1263$i$i$be = 0, $$1263$i$i$ph = 0, $$1265$i$i = 0, $$1265$i$i$be = 0, $$1265$i$i$ph = 0, $$1319$i = 0, $$1324$i = 0, $$1340$i = 0, $$1346$i = 0, $$1346$i$be = 0, $$1346$i$ph = 0, $$1350$i = 0, $$1350$i$be = 0, $$1350$i$ph = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2331$i = 0, $$3$i = 0;
 var $$3$i$i = 0, $$3$i198 = 0, $$3$i198211 = 0, $$3326$i = 0, $$3348$i = 0, $$4$lcssa$i = 0, $$415$i = 0, $$415$i$ph = 0, $$4236$i = 0, $$4327$lcssa$i = 0, $$432714$i = 0, $$432714$i$ph = 0, $$4333$i = 0, $$533413$i = 0, $$533413$i$ph = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0;
 var $$pre$i16$i = 0, $$pre$i195 = 0, $$pre$i204 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i17$iZ2D = 0, $$pre$phi$i205Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink320 = 0, $$sink321 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0;
 var $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;
 var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0;
 var $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0;
 var $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0;
 var $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0;
 var $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0;
 var $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i203 = 0, $not$$i = 0, $or$cond$i = 0, $or$cond$i199 = 0, $or$cond1$i = 0, $or$cond1$i197 = 0, $or$cond11$i = 0, $or$cond2$i = 0;
 var $or$cond5$i = 0, $or$cond50$i = 0, $or$cond51$i = 0, $or$cond6$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $or$cond8$not$i = 0, $spec$select$i = 0, $spec$select$i201 = 0, $spec$select1$i = 0, $spec$select2$i = 0, $spec$select4$i = 0, $spec$select49$i = 0, $spec$select9$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[33973]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (135932 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($16|0);
    if ($21) {
     $22 = 1 << $14;
     $23 = $22 ^ -1;
     $24 = $8 & $23;
     HEAP32[33973] = $24;
    } else {
     $25 = ((($20)) + 12|0);
     HEAP32[$25>>2] = $16;
     HEAP32[$17>>2] = $20;
    }
    $26 = $14 << 3;
    $27 = $26 | 3;
    $28 = ((($18)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = (($18) + ($26)|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 | 1;
    HEAP32[$30>>2] = $32;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[(135900)>>2]|0;
   $34 = ($6>>>0)>($33>>>0);
   if ($34) {
    $35 = ($9|0)==(0);
    if (!($35)) {
     $36 = $9 << $7;
     $37 = 2 << $7;
     $38 = (0 - ($37))|0;
     $39 = $37 | $38;
     $40 = $36 & $39;
     $41 = (0 - ($40))|0;
     $42 = $40 & $41;
     $43 = (($42) + -1)|0;
     $44 = $43 >>> 12;
     $45 = $44 & 16;
     $46 = $43 >>> $45;
     $47 = $46 >>> 5;
     $48 = $47 & 8;
     $49 = $48 | $45;
     $50 = $46 >>> $48;
     $51 = $50 >>> 2;
     $52 = $51 & 4;
     $53 = $49 | $52;
     $54 = $50 >>> $52;
     $55 = $54 >>> 1;
     $56 = $55 & 2;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 1;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = (($61) + ($62))|0;
     $64 = $63 << 1;
     $65 = (135932 + ($64<<2)|0);
     $66 = ((($65)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==($65|0);
     if ($70) {
      $71 = 1 << $63;
      $72 = $71 ^ -1;
      $73 = $8 & $72;
      HEAP32[33973] = $73;
      $90 = $73;
     } else {
      $74 = ((($69)) + 12|0);
      HEAP32[$74>>2] = $65;
      HEAP32[$66>>2] = $69;
      $90 = $8;
     }
     $75 = $63 << 3;
     $76 = (($75) - ($6))|0;
     $77 = $6 | 3;
     $78 = ((($67)) + 4|0);
     HEAP32[$78>>2] = $77;
     $79 = (($67) + ($6)|0);
     $80 = $76 | 1;
     $81 = ((($79)) + 4|0);
     HEAP32[$81>>2] = $80;
     $82 = (($67) + ($75)|0);
     HEAP32[$82>>2] = $76;
     $83 = ($33|0)==(0);
     if (!($83)) {
      $84 = HEAP32[(135912)>>2]|0;
      $85 = $33 >>> 3;
      $86 = $85 << 1;
      $87 = (135932 + ($86<<2)|0);
      $88 = 1 << $85;
      $89 = $90 & $88;
      $91 = ($89|0)==(0);
      if ($91) {
       $92 = $90 | $88;
       HEAP32[33973] = $92;
       $$pre = ((($87)) + 8|0);
       $$0194 = $87;$$pre$phiZ2D = $$pre;
      } else {
       $93 = ((($87)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $$0194 = $94;$$pre$phiZ2D = $93;
      }
      HEAP32[$$pre$phiZ2D>>2] = $84;
      $95 = ((($$0194)) + 12|0);
      HEAP32[$95>>2] = $84;
      $96 = ((($84)) + 8|0);
      HEAP32[$96>>2] = $$0194;
      $97 = ((($84)) + 12|0);
      HEAP32[$97>>2] = $87;
     }
     HEAP32[(135900)>>2] = $76;
     HEAP32[(135912)>>2] = $79;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    $98 = HEAP32[(135896)>>2]|0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0192 = $6;
    } else {
     $100 = (0 - ($98))|0;
     $101 = $98 & $100;
     $102 = (($101) + -1)|0;
     $103 = $102 >>> 12;
     $104 = $103 & 16;
     $105 = $102 >>> $104;
     $106 = $105 >>> 5;
     $107 = $106 & 8;
     $108 = $107 | $104;
     $109 = $105 >>> $107;
     $110 = $109 >>> 2;
     $111 = $110 & 4;
     $112 = $108 | $111;
     $113 = $109 >>> $111;
     $114 = $113 >>> 1;
     $115 = $114 & 2;
     $116 = $112 | $115;
     $117 = $113 >>> $115;
     $118 = $117 >>> 1;
     $119 = $118 & 1;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = (($120) + ($121))|0;
     $123 = (136196 + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & -8;
     $128 = (($127) - ($6))|0;
     $$0169$i = $124;$$0170$i = $124;$$0171$i = $128;
     while(1) {
      $129 = ((($$0169$i)) + 16|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = ($130|0)==(0|0);
      if ($131) {
       $132 = ((($$0169$i)) + 20|0);
       $133 = HEAP32[$132>>2]|0;
       $134 = ($133|0)==(0|0);
       if ($134) {
        break;
       } else {
        $136 = $133;
       }
      } else {
       $136 = $130;
      }
      $135 = ((($136)) + 4|0);
      $137 = HEAP32[$135>>2]|0;
      $138 = $137 & -8;
      $139 = (($138) - ($6))|0;
      $140 = ($139>>>0)<($$0171$i>>>0);
      $spec$select$i = $140 ? $139 : $$0171$i;
      $spec$select1$i = $140 ? $136 : $$0170$i;
      $$0169$i = $136;$$0170$i = $spec$select1$i;$$0171$i = $spec$select$i;
     }
     $141 = (($$0170$i) + ($6)|0);
     $142 = ($141>>>0)>($$0170$i>>>0);
     if ($142) {
      $143 = ((($$0170$i)) + 24|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$0170$i)) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($146|0)==($$0170$i|0);
      do {
       if ($147) {
        $152 = ((($$0170$i)) + 20|0);
        $153 = HEAP32[$152>>2]|0;
        $154 = ($153|0)==(0|0);
        if ($154) {
         $155 = ((($$0170$i)) + 16|0);
         $156 = HEAP32[$155>>2]|0;
         $157 = ($156|0)==(0|0);
         if ($157) {
          $$3$i = 0;
          break;
         } else {
          $$1174$i$ph = $156;$$1176$i$ph = $155;
         }
        } else {
         $$1174$i$ph = $153;$$1176$i$ph = $152;
        }
        $$1174$i = $$1174$i$ph;$$1176$i = $$1176$i$ph;
        while(1) {
         $158 = ((($$1174$i)) + 20|0);
         $159 = HEAP32[$158>>2]|0;
         $160 = ($159|0)==(0|0);
         if ($160) {
          $161 = ((($$1174$i)) + 16|0);
          $162 = HEAP32[$161>>2]|0;
          $163 = ($162|0)==(0|0);
          if ($163) {
           break;
          } else {
           $$1174$i$be = $162;$$1176$i$be = $161;
          }
         } else {
          $$1174$i$be = $159;$$1176$i$be = $158;
         }
         $$1174$i = $$1174$i$be;$$1176$i = $$1176$i$be;
        }
        HEAP32[$$1176$i>>2] = 0;
        $$3$i = $$1174$i;
       } else {
        $148 = ((($$0170$i)) + 8|0);
        $149 = HEAP32[$148>>2]|0;
        $150 = ((($149)) + 12|0);
        HEAP32[$150>>2] = $146;
        $151 = ((($146)) + 8|0);
        HEAP32[$151>>2] = $149;
        $$3$i = $146;
       }
      } while(0);
      $164 = ($144|0)==(0|0);
      do {
       if (!($164)) {
        $165 = ((($$0170$i)) + 28|0);
        $166 = HEAP32[$165>>2]|0;
        $167 = (136196 + ($166<<2)|0);
        $168 = HEAP32[$167>>2]|0;
        $169 = ($$0170$i|0)==($168|0);
        if ($169) {
         HEAP32[$167>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $170 = 1 << $166;
          $171 = $170 ^ -1;
          $172 = $98 & $171;
          HEAP32[(135896)>>2] = $172;
          break;
         }
        } else {
         $173 = ((($144)) + 16|0);
         $174 = HEAP32[$173>>2]|0;
         $175 = ($174|0)==($$0170$i|0);
         $176 = ((($144)) + 20|0);
         $$sink = $175 ? $173 : $176;
         HEAP32[$$sink>>2] = $$3$i;
         $177 = ($$3$i|0)==(0|0);
         if ($177) {
          break;
         }
        }
        $178 = ((($$3$i)) + 24|0);
        HEAP32[$178>>2] = $144;
        $179 = ((($$0170$i)) + 16|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = ($180|0)==(0|0);
        if (!($181)) {
         $182 = ((($$3$i)) + 16|0);
         HEAP32[$182>>2] = $180;
         $183 = ((($180)) + 24|0);
         HEAP32[$183>>2] = $$3$i;
        }
        $184 = ((($$0170$i)) + 20|0);
        $185 = HEAP32[$184>>2]|0;
        $186 = ($185|0)==(0|0);
        if (!($186)) {
         $187 = ((($$3$i)) + 20|0);
         HEAP32[$187>>2] = $185;
         $188 = ((($185)) + 24|0);
         HEAP32[$188>>2] = $$3$i;
        }
       }
      } while(0);
      $189 = ($$0171$i>>>0)<(16);
      if ($189) {
       $190 = (($$0171$i) + ($6))|0;
       $191 = $190 | 3;
       $192 = ((($$0170$i)) + 4|0);
       HEAP32[$192>>2] = $191;
       $193 = (($$0170$i) + ($190)|0);
       $194 = ((($193)) + 4|0);
       $195 = HEAP32[$194>>2]|0;
       $196 = $195 | 1;
       HEAP32[$194>>2] = $196;
      } else {
       $197 = $6 | 3;
       $198 = ((($$0170$i)) + 4|0);
       HEAP32[$198>>2] = $197;
       $199 = $$0171$i | 1;
       $200 = ((($141)) + 4|0);
       HEAP32[$200>>2] = $199;
       $201 = (($141) + ($$0171$i)|0);
       HEAP32[$201>>2] = $$0171$i;
       $202 = ($33|0)==(0);
       if (!($202)) {
        $203 = HEAP32[(135912)>>2]|0;
        $204 = $33 >>> 3;
        $205 = $204 << 1;
        $206 = (135932 + ($205<<2)|0);
        $207 = 1 << $204;
        $208 = $207 & $8;
        $209 = ($208|0)==(0);
        if ($209) {
         $210 = $207 | $8;
         HEAP32[33973] = $210;
         $$pre$i = ((($206)) + 8|0);
         $$0$i = $206;$$pre$phi$iZ2D = $$pre$i;
        } else {
         $211 = ((($206)) + 8|0);
         $212 = HEAP32[$211>>2]|0;
         $$0$i = $212;$$pre$phi$iZ2D = $211;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $203;
        $213 = ((($$0$i)) + 12|0);
        HEAP32[$213>>2] = $203;
        $214 = ((($203)) + 8|0);
        HEAP32[$214>>2] = $$0$i;
        $215 = ((($203)) + 12|0);
        HEAP32[$215>>2] = $206;
       }
       HEAP32[(135900)>>2] = $$0171$i;
       HEAP32[(135912)>>2] = $141;
      }
      $216 = ((($$0170$i)) + 8|0);
      $$0 = $216;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0192 = $6;
     }
    }
   } else {
    $$0192 = $6;
   }
  } else {
   $217 = ($0>>>0)>(4294967231);
   if ($217) {
    $$0192 = -1;
   } else {
    $218 = (($0) + 11)|0;
    $219 = $218 & -8;
    $220 = HEAP32[(135896)>>2]|0;
    $221 = ($220|0)==(0);
    if ($221) {
     $$0192 = $219;
    } else {
     $222 = (0 - ($219))|0;
     $223 = $218 >>> 8;
     $224 = ($223|0)==(0);
     if ($224) {
      $$0335$i = 0;
     } else {
      $225 = ($219>>>0)>(16777215);
      if ($225) {
       $$0335$i = 31;
      } else {
       $226 = (($223) + 1048320)|0;
       $227 = $226 >>> 16;
       $228 = $227 & 8;
       $229 = $223 << $228;
       $230 = (($229) + 520192)|0;
       $231 = $230 >>> 16;
       $232 = $231 & 4;
       $233 = $232 | $228;
       $234 = $229 << $232;
       $235 = (($234) + 245760)|0;
       $236 = $235 >>> 16;
       $237 = $236 & 2;
       $238 = $233 | $237;
       $239 = (14 - ($238))|0;
       $240 = $234 << $237;
       $241 = $240 >>> 15;
       $242 = (($239) + ($241))|0;
       $243 = $242 << 1;
       $244 = (($242) + 7)|0;
       $245 = $219 >>> $244;
       $246 = $245 & 1;
       $247 = $246 | $243;
       $$0335$i = $247;
      }
     }
     $248 = (136196 + ($$0335$i<<2)|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = ($249|0)==(0|0);
     L79: do {
      if ($250) {
       $$2331$i = 0;$$3$i198 = 0;$$3326$i = $222;
       label = 61;
      } else {
       $251 = ($$0335$i|0)==(31);
       $252 = $$0335$i >>> 1;
       $253 = (25 - ($252))|0;
       $254 = $251 ? 0 : $253;
       $255 = $219 << $254;
       $$0318$i = 0;$$0323$i = $222;$$0329$i = $249;$$0336$i = $255;$$0339$i = 0;
       while(1) {
        $256 = ((($$0329$i)) + 4|0);
        $257 = HEAP32[$256>>2]|0;
        $258 = $257 & -8;
        $259 = (($258) - ($219))|0;
        $260 = ($259>>>0)<($$0323$i>>>0);
        if ($260) {
         $261 = ($259|0)==(0);
         if ($261) {
          $$415$i$ph = $$0329$i;$$432714$i$ph = 0;$$533413$i$ph = $$0329$i;
          label = 65;
          break L79;
         } else {
          $$1319$i = $$0329$i;$$1324$i = $259;
         }
        } else {
         $$1319$i = $$0318$i;$$1324$i = $$0323$i;
        }
        $262 = ((($$0329$i)) + 20|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = $$0336$i >>> 31;
        $265 = (((($$0329$i)) + 16|0) + ($264<<2)|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = ($263|0)==(0|0);
        $268 = ($263|0)==($266|0);
        $or$cond1$i197 = $267 | $268;
        $$1340$i = $or$cond1$i197 ? $$0339$i : $263;
        $269 = ($266|0)==(0|0);
        $spec$select4$i = $$0336$i << 1;
        if ($269) {
         $$2331$i = $$1340$i;$$3$i198 = $$1319$i;$$3326$i = $$1324$i;
         label = 61;
         break;
        } else {
         $$0318$i = $$1319$i;$$0323$i = $$1324$i;$$0329$i = $266;$$0336$i = $spec$select4$i;$$0339$i = $$1340$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 61) {
      $270 = ($$2331$i|0)==(0|0);
      $271 = ($$3$i198|0)==(0|0);
      $or$cond$i199 = $270 & $271;
      if ($or$cond$i199) {
       $272 = 2 << $$0335$i;
       $273 = (0 - ($272))|0;
       $274 = $272 | $273;
       $275 = $274 & $220;
       $276 = ($275|0)==(0);
       if ($276) {
        $$0192 = $219;
        break;
       }
       $277 = (0 - ($275))|0;
       $278 = $275 & $277;
       $279 = (($278) + -1)|0;
       $280 = $279 >>> 12;
       $281 = $280 & 16;
       $282 = $279 >>> $281;
       $283 = $282 >>> 5;
       $284 = $283 & 8;
       $285 = $284 | $281;
       $286 = $282 >>> $284;
       $287 = $286 >>> 2;
       $288 = $287 & 4;
       $289 = $285 | $288;
       $290 = $286 >>> $288;
       $291 = $290 >>> 1;
       $292 = $291 & 2;
       $293 = $289 | $292;
       $294 = $290 >>> $292;
       $295 = $294 >>> 1;
       $296 = $295 & 1;
       $297 = $293 | $296;
       $298 = $294 >>> $296;
       $299 = (($297) + ($298))|0;
       $300 = (136196 + ($299<<2)|0);
       $301 = HEAP32[$300>>2]|0;
       $$3$i198211 = 0;$$4333$i = $301;
      } else {
       $$3$i198211 = $$3$i198;$$4333$i = $$2331$i;
      }
      $302 = ($$4333$i|0)==(0|0);
      if ($302) {
       $$4$lcssa$i = $$3$i198211;$$4327$lcssa$i = $$3326$i;
      } else {
       $$415$i$ph = $$3$i198211;$$432714$i$ph = $$3326$i;$$533413$i$ph = $$4333$i;
       label = 65;
      }
     }
     if ((label|0) == 65) {
      $$415$i = $$415$i$ph;$$432714$i = $$432714$i$ph;$$533413$i = $$533413$i$ph;
      while(1) {
       $303 = ((($$533413$i)) + 4|0);
       $304 = HEAP32[$303>>2]|0;
       $305 = $304 & -8;
       $306 = (($305) - ($219))|0;
       $307 = ($306>>>0)<($$432714$i>>>0);
       $spec$select$i201 = $307 ? $306 : $$432714$i;
       $spec$select2$i = $307 ? $$533413$i : $$415$i;
       $308 = ((($$533413$i)) + 16|0);
       $309 = HEAP32[$308>>2]|0;
       $310 = ($309|0)==(0|0);
       if ($310) {
        $311 = ((($$533413$i)) + 20|0);
        $312 = HEAP32[$311>>2]|0;
        $314 = $312;
       } else {
        $314 = $309;
       }
       $313 = ($314|0)==(0|0);
       if ($313) {
        $$4$lcssa$i = $spec$select2$i;$$4327$lcssa$i = $spec$select$i201;
        break;
       } else {
        $$415$i = $spec$select2$i;$$432714$i = $spec$select$i201;$$533413$i = $314;
       }
      }
     }
     $315 = ($$4$lcssa$i|0)==(0|0);
     if ($315) {
      $$0192 = $219;
     } else {
      $316 = HEAP32[(135900)>>2]|0;
      $317 = (($316) - ($219))|0;
      $318 = ($$4327$lcssa$i>>>0)<($317>>>0);
      if ($318) {
       $319 = (($$4$lcssa$i) + ($219)|0);
       $320 = ($319>>>0)>($$4$lcssa$i>>>0);
       if ($320) {
        $321 = ((($$4$lcssa$i)) + 24|0);
        $322 = HEAP32[$321>>2]|0;
        $323 = ((($$4$lcssa$i)) + 12|0);
        $324 = HEAP32[$323>>2]|0;
        $325 = ($324|0)==($$4$lcssa$i|0);
        do {
         if ($325) {
          $330 = ((($$4$lcssa$i)) + 20|0);
          $331 = HEAP32[$330>>2]|0;
          $332 = ($331|0)==(0|0);
          if ($332) {
           $333 = ((($$4$lcssa$i)) + 16|0);
           $334 = HEAP32[$333>>2]|0;
           $335 = ($334|0)==(0|0);
           if ($335) {
            $$3348$i = 0;
            break;
           } else {
            $$1346$i$ph = $334;$$1350$i$ph = $333;
           }
          } else {
           $$1346$i$ph = $331;$$1350$i$ph = $330;
          }
          $$1346$i = $$1346$i$ph;$$1350$i = $$1350$i$ph;
          while(1) {
           $336 = ((($$1346$i)) + 20|0);
           $337 = HEAP32[$336>>2]|0;
           $338 = ($337|0)==(0|0);
           if ($338) {
            $339 = ((($$1346$i)) + 16|0);
            $340 = HEAP32[$339>>2]|0;
            $341 = ($340|0)==(0|0);
            if ($341) {
             break;
            } else {
             $$1346$i$be = $340;$$1350$i$be = $339;
            }
           } else {
            $$1346$i$be = $337;$$1350$i$be = $336;
           }
           $$1346$i = $$1346$i$be;$$1350$i = $$1350$i$be;
          }
          HEAP32[$$1350$i>>2] = 0;
          $$3348$i = $$1346$i;
         } else {
          $326 = ((($$4$lcssa$i)) + 8|0);
          $327 = HEAP32[$326>>2]|0;
          $328 = ((($327)) + 12|0);
          HEAP32[$328>>2] = $324;
          $329 = ((($324)) + 8|0);
          HEAP32[$329>>2] = $327;
          $$3348$i = $324;
         }
        } while(0);
        $342 = ($322|0)==(0|0);
        do {
         if ($342) {
          $425 = $220;
         } else {
          $343 = ((($$4$lcssa$i)) + 28|0);
          $344 = HEAP32[$343>>2]|0;
          $345 = (136196 + ($344<<2)|0);
          $346 = HEAP32[$345>>2]|0;
          $347 = ($$4$lcssa$i|0)==($346|0);
          if ($347) {
           HEAP32[$345>>2] = $$3348$i;
           $cond$i203 = ($$3348$i|0)==(0|0);
           if ($cond$i203) {
            $348 = 1 << $344;
            $349 = $348 ^ -1;
            $350 = $220 & $349;
            HEAP32[(135896)>>2] = $350;
            $425 = $350;
            break;
           }
          } else {
           $351 = ((($322)) + 16|0);
           $352 = HEAP32[$351>>2]|0;
           $353 = ($352|0)==($$4$lcssa$i|0);
           $354 = ((($322)) + 20|0);
           $$sink320 = $353 ? $351 : $354;
           HEAP32[$$sink320>>2] = $$3348$i;
           $355 = ($$3348$i|0)==(0|0);
           if ($355) {
            $425 = $220;
            break;
           }
          }
          $356 = ((($$3348$i)) + 24|0);
          HEAP32[$356>>2] = $322;
          $357 = ((($$4$lcssa$i)) + 16|0);
          $358 = HEAP32[$357>>2]|0;
          $359 = ($358|0)==(0|0);
          if (!($359)) {
           $360 = ((($$3348$i)) + 16|0);
           HEAP32[$360>>2] = $358;
           $361 = ((($358)) + 24|0);
           HEAP32[$361>>2] = $$3348$i;
          }
          $362 = ((($$4$lcssa$i)) + 20|0);
          $363 = HEAP32[$362>>2]|0;
          $364 = ($363|0)==(0|0);
          if ($364) {
           $425 = $220;
          } else {
           $365 = ((($$3348$i)) + 20|0);
           HEAP32[$365>>2] = $363;
           $366 = ((($363)) + 24|0);
           HEAP32[$366>>2] = $$3348$i;
           $425 = $220;
          }
         }
        } while(0);
        $367 = ($$4327$lcssa$i>>>0)<(16);
        L128: do {
         if ($367) {
          $368 = (($$4327$lcssa$i) + ($219))|0;
          $369 = $368 | 3;
          $370 = ((($$4$lcssa$i)) + 4|0);
          HEAP32[$370>>2] = $369;
          $371 = (($$4$lcssa$i) + ($368)|0);
          $372 = ((($371)) + 4|0);
          $373 = HEAP32[$372>>2]|0;
          $374 = $373 | 1;
          HEAP32[$372>>2] = $374;
         } else {
          $375 = $219 | 3;
          $376 = ((($$4$lcssa$i)) + 4|0);
          HEAP32[$376>>2] = $375;
          $377 = $$4327$lcssa$i | 1;
          $378 = ((($319)) + 4|0);
          HEAP32[$378>>2] = $377;
          $379 = (($319) + ($$4327$lcssa$i)|0);
          HEAP32[$379>>2] = $$4327$lcssa$i;
          $380 = $$4327$lcssa$i >>> 3;
          $381 = ($$4327$lcssa$i>>>0)<(256);
          if ($381) {
           $382 = $380 << 1;
           $383 = (135932 + ($382<<2)|0);
           $384 = HEAP32[33973]|0;
           $385 = 1 << $380;
           $386 = $384 & $385;
           $387 = ($386|0)==(0);
           if ($387) {
            $388 = $384 | $385;
            HEAP32[33973] = $388;
            $$pre$i204 = ((($383)) + 8|0);
            $$0344$i = $383;$$pre$phi$i205Z2D = $$pre$i204;
           } else {
            $389 = ((($383)) + 8|0);
            $390 = HEAP32[$389>>2]|0;
            $$0344$i = $390;$$pre$phi$i205Z2D = $389;
           }
           HEAP32[$$pre$phi$i205Z2D>>2] = $319;
           $391 = ((($$0344$i)) + 12|0);
           HEAP32[$391>>2] = $319;
           $392 = ((($319)) + 8|0);
           HEAP32[$392>>2] = $$0344$i;
           $393 = ((($319)) + 12|0);
           HEAP32[$393>>2] = $383;
           break;
          }
          $394 = $$4327$lcssa$i >>> 8;
          $395 = ($394|0)==(0);
          if ($395) {
           $$0338$i = 0;
          } else {
           $396 = ($$4327$lcssa$i>>>0)>(16777215);
           if ($396) {
            $$0338$i = 31;
           } else {
            $397 = (($394) + 1048320)|0;
            $398 = $397 >>> 16;
            $399 = $398 & 8;
            $400 = $394 << $399;
            $401 = (($400) + 520192)|0;
            $402 = $401 >>> 16;
            $403 = $402 & 4;
            $404 = $403 | $399;
            $405 = $400 << $403;
            $406 = (($405) + 245760)|0;
            $407 = $406 >>> 16;
            $408 = $407 & 2;
            $409 = $404 | $408;
            $410 = (14 - ($409))|0;
            $411 = $405 << $408;
            $412 = $411 >>> 15;
            $413 = (($410) + ($412))|0;
            $414 = $413 << 1;
            $415 = (($413) + 7)|0;
            $416 = $$4327$lcssa$i >>> $415;
            $417 = $416 & 1;
            $418 = $417 | $414;
            $$0338$i = $418;
           }
          }
          $419 = (136196 + ($$0338$i<<2)|0);
          $420 = ((($319)) + 28|0);
          HEAP32[$420>>2] = $$0338$i;
          $421 = ((($319)) + 16|0);
          $422 = ((($421)) + 4|0);
          HEAP32[$422>>2] = 0;
          HEAP32[$421>>2] = 0;
          $423 = 1 << $$0338$i;
          $424 = $425 & $423;
          $426 = ($424|0)==(0);
          if ($426) {
           $427 = $425 | $423;
           HEAP32[(135896)>>2] = $427;
           HEAP32[$419>>2] = $319;
           $428 = ((($319)) + 24|0);
           HEAP32[$428>>2] = $419;
           $429 = ((($319)) + 12|0);
           HEAP32[$429>>2] = $319;
           $430 = ((($319)) + 8|0);
           HEAP32[$430>>2] = $319;
           break;
          }
          $431 = HEAP32[$419>>2]|0;
          $432 = ((($431)) + 4|0);
          $433 = HEAP32[$432>>2]|0;
          $434 = $433 & -8;
          $435 = ($434|0)==($$4327$lcssa$i|0);
          L145: do {
           if ($435) {
            $$0321$lcssa$i = $431;
           } else {
            $436 = ($$0338$i|0)==(31);
            $437 = $$0338$i >>> 1;
            $438 = (25 - ($437))|0;
            $439 = $436 ? 0 : $438;
            $440 = $$4327$lcssa$i << $439;
            $$032012$i = $440;$$032111$i = $431;
            while(1) {
             $447 = $$032012$i >>> 31;
             $448 = (((($$032111$i)) + 16|0) + ($447<<2)|0);
             $443 = HEAP32[$448>>2]|0;
             $449 = ($443|0)==(0|0);
             if ($449) {
              break;
             }
             $441 = $$032012$i << 1;
             $442 = ((($443)) + 4|0);
             $444 = HEAP32[$442>>2]|0;
             $445 = $444 & -8;
             $446 = ($445|0)==($$4327$lcssa$i|0);
             if ($446) {
              $$0321$lcssa$i = $443;
              break L145;
             } else {
              $$032012$i = $441;$$032111$i = $443;
             }
            }
            HEAP32[$448>>2] = $319;
            $450 = ((($319)) + 24|0);
            HEAP32[$450>>2] = $$032111$i;
            $451 = ((($319)) + 12|0);
            HEAP32[$451>>2] = $319;
            $452 = ((($319)) + 8|0);
            HEAP32[$452>>2] = $319;
            break L128;
           }
          } while(0);
          $453 = ((($$0321$lcssa$i)) + 8|0);
          $454 = HEAP32[$453>>2]|0;
          $455 = ((($454)) + 12|0);
          HEAP32[$455>>2] = $319;
          HEAP32[$453>>2] = $319;
          $456 = ((($319)) + 8|0);
          HEAP32[$456>>2] = $454;
          $457 = ((($319)) + 12|0);
          HEAP32[$457>>2] = $$0321$lcssa$i;
          $458 = ((($319)) + 24|0);
          HEAP32[$458>>2] = 0;
         }
        } while(0);
        $459 = ((($$4$lcssa$i)) + 8|0);
        $$0 = $459;
        STACKTOP = sp;return ($$0|0);
       } else {
        $$0192 = $219;
       }
      } else {
       $$0192 = $219;
      }
     }
    }
   }
  }
 } while(0);
 $460 = HEAP32[(135900)>>2]|0;
 $461 = ($460>>>0)<($$0192>>>0);
 if (!($461)) {
  $462 = (($460) - ($$0192))|0;
  $463 = HEAP32[(135912)>>2]|0;
  $464 = ($462>>>0)>(15);
  if ($464) {
   $465 = (($463) + ($$0192)|0);
   HEAP32[(135912)>>2] = $465;
   HEAP32[(135900)>>2] = $462;
   $466 = $462 | 1;
   $467 = ((($465)) + 4|0);
   HEAP32[$467>>2] = $466;
   $468 = (($463) + ($460)|0);
   HEAP32[$468>>2] = $462;
   $469 = $$0192 | 3;
   $470 = ((($463)) + 4|0);
   HEAP32[$470>>2] = $469;
  } else {
   HEAP32[(135900)>>2] = 0;
   HEAP32[(135912)>>2] = 0;
   $471 = $460 | 3;
   $472 = ((($463)) + 4|0);
   HEAP32[$472>>2] = $471;
   $473 = (($463) + ($460)|0);
   $474 = ((($473)) + 4|0);
   $475 = HEAP32[$474>>2]|0;
   $476 = $475 | 1;
   HEAP32[$474>>2] = $476;
  }
  $477 = ((($463)) + 8|0);
  $$0 = $477;
  STACKTOP = sp;return ($$0|0);
 }
 $478 = HEAP32[(135904)>>2]|0;
 $479 = ($478>>>0)>($$0192>>>0);
 if ($479) {
  $480 = (($478) - ($$0192))|0;
  HEAP32[(135904)>>2] = $480;
  $481 = HEAP32[(135916)>>2]|0;
  $482 = (($481) + ($$0192)|0);
  HEAP32[(135916)>>2] = $482;
  $483 = $480 | 1;
  $484 = ((($482)) + 4|0);
  HEAP32[$484>>2] = $483;
  $485 = $$0192 | 3;
  $486 = ((($481)) + 4|0);
  HEAP32[$486>>2] = $485;
  $487 = ((($481)) + 8|0);
  $$0 = $487;
  STACKTOP = sp;return ($$0|0);
 }
 $488 = HEAP32[34091]|0;
 $489 = ($488|0)==(0);
 if ($489) {
  HEAP32[(136372)>>2] = 4096;
  HEAP32[(136368)>>2] = 4096;
  HEAP32[(136376)>>2] = -1;
  HEAP32[(136380)>>2] = -1;
  HEAP32[(136384)>>2] = 0;
  HEAP32[(136336)>>2] = 0;
  $490 = $1;
  $491 = $490 & -16;
  $492 = $491 ^ 1431655768;
  HEAP32[34091] = $492;
  $496 = 4096;
 } else {
  $$pre$i195 = HEAP32[(136372)>>2]|0;
  $496 = $$pre$i195;
 }
 $493 = (($$0192) + 48)|0;
 $494 = (($$0192) + 47)|0;
 $495 = (($496) + ($494))|0;
 $497 = (0 - ($496))|0;
 $498 = $495 & $497;
 $499 = ($498>>>0)>($$0192>>>0);
 if (!($499)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $500 = HEAP32[(136332)>>2]|0;
 $501 = ($500|0)==(0);
 if (!($501)) {
  $502 = HEAP32[(136324)>>2]|0;
  $503 = (($502) + ($498))|0;
  $504 = ($503>>>0)<=($502>>>0);
  $505 = ($503>>>0)>($500>>>0);
  $or$cond1$i = $504 | $505;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $506 = HEAP32[(136336)>>2]|0;
 $507 = $506 & 4;
 $508 = ($507|0)==(0);
 L178: do {
  if ($508) {
   $509 = HEAP32[(135916)>>2]|0;
   $510 = ($509|0)==(0|0);
   L180: do {
    if ($510) {
     label = 128;
    } else {
     $$0$i20$i = (136340);
     while(1) {
      $511 = HEAP32[$$0$i20$i>>2]|0;
      $512 = ($511>>>0)>($509>>>0);
      if (!($512)) {
       $513 = ((($$0$i20$i)) + 4|0);
       $514 = HEAP32[$513>>2]|0;
       $515 = (($511) + ($514)|0);
       $516 = ($515>>>0)>($509>>>0);
       if ($516) {
        break;
       }
      }
      $517 = ((($$0$i20$i)) + 8|0);
      $518 = HEAP32[$517>>2]|0;
      $519 = ($518|0)==(0|0);
      if ($519) {
       label = 128;
       break L180;
      } else {
       $$0$i20$i = $518;
      }
     }
     $542 = (($495) - ($478))|0;
     $543 = $542 & $497;
     $544 = ($543>>>0)<(2147483647);
     if ($544) {
      $545 = ((($$0$i20$i)) + 4|0);
      $546 = (_sbrk($543)|0);
      $547 = HEAP32[$$0$i20$i>>2]|0;
      $548 = HEAP32[$545>>2]|0;
      $549 = (($547) + ($548)|0);
      $550 = ($546|0)==($549|0);
      if ($550) {
       $551 = ($546|0)==((-1)|0);
       if ($551) {
        $$2234243136$i = $543;
       } else {
        $$723947$i = $543;$$748$i = $546;
        label = 145;
        break L178;
       }
      } else {
       $$2247$ph$i = $546;$$2253$ph$i = $543;
       label = 136;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 128) {
     $520 = (_sbrk(0)|0);
     $521 = ($520|0)==((-1)|0);
     if ($521) {
      $$2234243136$i = 0;
     } else {
      $522 = $520;
      $523 = HEAP32[(136368)>>2]|0;
      $524 = (($523) + -1)|0;
      $525 = $524 & $522;
      $526 = ($525|0)==(0);
      $527 = (($524) + ($522))|0;
      $528 = (0 - ($523))|0;
      $529 = $527 & $528;
      $530 = (($529) - ($522))|0;
      $531 = $526 ? 0 : $530;
      $spec$select49$i = (($531) + ($498))|0;
      $532 = HEAP32[(136324)>>2]|0;
      $533 = (($spec$select49$i) + ($532))|0;
      $534 = ($spec$select49$i>>>0)>($$0192>>>0);
      $535 = ($spec$select49$i>>>0)<(2147483647);
      $or$cond$i = $534 & $535;
      if ($or$cond$i) {
       $536 = HEAP32[(136332)>>2]|0;
       $537 = ($536|0)==(0);
       if (!($537)) {
        $538 = ($533>>>0)<=($532>>>0);
        $539 = ($533>>>0)>($536>>>0);
        $or$cond2$i = $538 | $539;
        if ($or$cond2$i) {
         $$2234243136$i = 0;
         break;
        }
       }
       $540 = (_sbrk($spec$select49$i)|0);
       $541 = ($540|0)==($520|0);
       if ($541) {
        $$723947$i = $spec$select49$i;$$748$i = $520;
        label = 145;
        break L178;
       } else {
        $$2247$ph$i = $540;$$2253$ph$i = $spec$select49$i;
        label = 136;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 136) {
     $552 = (0 - ($$2253$ph$i))|0;
     $553 = ($$2247$ph$i|0)!=((-1)|0);
     $554 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $554 & $553;
     $555 = ($493>>>0)>($$2253$ph$i>>>0);
     $or$cond6$i = $555 & $or$cond7$i;
     if (!($or$cond6$i)) {
      $565 = ($$2247$ph$i|0)==((-1)|0);
      if ($565) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 145;
       break L178;
      }
     }
     $556 = HEAP32[(136372)>>2]|0;
     $557 = (($494) - ($$2253$ph$i))|0;
     $558 = (($557) + ($556))|0;
     $559 = (0 - ($556))|0;
     $560 = $558 & $559;
     $561 = ($560>>>0)<(2147483647);
     if (!($561)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 145;
      break L178;
     }
     $562 = (_sbrk($560)|0);
     $563 = ($562|0)==((-1)|0);
     if ($563) {
      (_sbrk($552)|0);
      $$2234243136$i = 0;
      break;
     } else {
      $564 = (($560) + ($$2253$ph$i))|0;
      $$723947$i = $564;$$748$i = $$2247$ph$i;
      label = 145;
      break L178;
     }
    }
   } while(0);
   $566 = HEAP32[(136336)>>2]|0;
   $567 = $566 | 4;
   HEAP32[(136336)>>2] = $567;
   $$4236$i = $$2234243136$i;
   label = 143;
  } else {
   $$4236$i = 0;
   label = 143;
  }
 } while(0);
 if ((label|0) == 143) {
  $568 = ($498>>>0)<(2147483647);
  if ($568) {
   $569 = (_sbrk($498)|0);
   $570 = (_sbrk(0)|0);
   $571 = ($569|0)!=((-1)|0);
   $572 = ($570|0)!=((-1)|0);
   $or$cond5$i = $571 & $572;
   $573 = ($569>>>0)<($570>>>0);
   $or$cond8$i = $573 & $or$cond5$i;
   $574 = $570;
   $575 = $569;
   $576 = (($574) - ($575))|0;
   $577 = (($$0192) + 40)|0;
   $578 = ($576>>>0)>($577>>>0);
   $spec$select9$i = $578 ? $576 : $$4236$i;
   $or$cond8$not$i = $or$cond8$i ^ 1;
   $579 = ($569|0)==((-1)|0);
   $not$$i = $578 ^ 1;
   $580 = $579 | $not$$i;
   $or$cond50$i = $580 | $or$cond8$not$i;
   if (!($or$cond50$i)) {
    $$723947$i = $spec$select9$i;$$748$i = $569;
    label = 145;
   }
  }
 }
 if ((label|0) == 145) {
  $581 = HEAP32[(136324)>>2]|0;
  $582 = (($581) + ($$723947$i))|0;
  HEAP32[(136324)>>2] = $582;
  $583 = HEAP32[(136328)>>2]|0;
  $584 = ($582>>>0)>($583>>>0);
  if ($584) {
   HEAP32[(136328)>>2] = $582;
  }
  $585 = HEAP32[(135916)>>2]|0;
  $586 = ($585|0)==(0|0);
  L215: do {
   if ($586) {
    $587 = HEAP32[(135908)>>2]|0;
    $588 = ($587|0)==(0|0);
    $589 = ($$748$i>>>0)<($587>>>0);
    $or$cond11$i = $588 | $589;
    if ($or$cond11$i) {
     HEAP32[(135908)>>2] = $$748$i;
    }
    HEAP32[(136340)>>2] = $$748$i;
    HEAP32[(136344)>>2] = $$723947$i;
    HEAP32[(136352)>>2] = 0;
    $590 = HEAP32[34091]|0;
    HEAP32[(135928)>>2] = $590;
    HEAP32[(135924)>>2] = -1;
    HEAP32[(135944)>>2] = (135932);
    HEAP32[(135940)>>2] = (135932);
    HEAP32[(135952)>>2] = (135940);
    HEAP32[(135948)>>2] = (135940);
    HEAP32[(135960)>>2] = (135948);
    HEAP32[(135956)>>2] = (135948);
    HEAP32[(135968)>>2] = (135956);
    HEAP32[(135964)>>2] = (135956);
    HEAP32[(135976)>>2] = (135964);
    HEAP32[(135972)>>2] = (135964);
    HEAP32[(135984)>>2] = (135972);
    HEAP32[(135980)>>2] = (135972);
    HEAP32[(135992)>>2] = (135980);
    HEAP32[(135988)>>2] = (135980);
    HEAP32[(136000)>>2] = (135988);
    HEAP32[(135996)>>2] = (135988);
    HEAP32[(136008)>>2] = (135996);
    HEAP32[(136004)>>2] = (135996);
    HEAP32[(136016)>>2] = (136004);
    HEAP32[(136012)>>2] = (136004);
    HEAP32[(136024)>>2] = (136012);
    HEAP32[(136020)>>2] = (136012);
    HEAP32[(136032)>>2] = (136020);
    HEAP32[(136028)>>2] = (136020);
    HEAP32[(136040)>>2] = (136028);
    HEAP32[(136036)>>2] = (136028);
    HEAP32[(136048)>>2] = (136036);
    HEAP32[(136044)>>2] = (136036);
    HEAP32[(136056)>>2] = (136044);
    HEAP32[(136052)>>2] = (136044);
    HEAP32[(136064)>>2] = (136052);
    HEAP32[(136060)>>2] = (136052);
    HEAP32[(136072)>>2] = (136060);
    HEAP32[(136068)>>2] = (136060);
    HEAP32[(136080)>>2] = (136068);
    HEAP32[(136076)>>2] = (136068);
    HEAP32[(136088)>>2] = (136076);
    HEAP32[(136084)>>2] = (136076);
    HEAP32[(136096)>>2] = (136084);
    HEAP32[(136092)>>2] = (136084);
    HEAP32[(136104)>>2] = (136092);
    HEAP32[(136100)>>2] = (136092);
    HEAP32[(136112)>>2] = (136100);
    HEAP32[(136108)>>2] = (136100);
    HEAP32[(136120)>>2] = (136108);
    HEAP32[(136116)>>2] = (136108);
    HEAP32[(136128)>>2] = (136116);
    HEAP32[(136124)>>2] = (136116);
    HEAP32[(136136)>>2] = (136124);
    HEAP32[(136132)>>2] = (136124);
    HEAP32[(136144)>>2] = (136132);
    HEAP32[(136140)>>2] = (136132);
    HEAP32[(136152)>>2] = (136140);
    HEAP32[(136148)>>2] = (136140);
    HEAP32[(136160)>>2] = (136148);
    HEAP32[(136156)>>2] = (136148);
    HEAP32[(136168)>>2] = (136156);
    HEAP32[(136164)>>2] = (136156);
    HEAP32[(136176)>>2] = (136164);
    HEAP32[(136172)>>2] = (136164);
    HEAP32[(136184)>>2] = (136172);
    HEAP32[(136180)>>2] = (136172);
    HEAP32[(136192)>>2] = (136180);
    HEAP32[(136188)>>2] = (136180);
    $591 = (($$723947$i) + -40)|0;
    $592 = ((($$748$i)) + 8|0);
    $593 = $592;
    $594 = $593 & 7;
    $595 = ($594|0)==(0);
    $596 = (0 - ($593))|0;
    $597 = $596 & 7;
    $598 = $595 ? 0 : $597;
    $599 = (($$748$i) + ($598)|0);
    $600 = (($591) - ($598))|0;
    HEAP32[(135916)>>2] = $599;
    HEAP32[(135904)>>2] = $600;
    $601 = $600 | 1;
    $602 = ((($599)) + 4|0);
    HEAP32[$602>>2] = $601;
    $603 = (($$748$i) + ($591)|0);
    $604 = ((($603)) + 4|0);
    HEAP32[$604>>2] = 40;
    $605 = HEAP32[(136380)>>2]|0;
    HEAP32[(135920)>>2] = $605;
   } else {
    $$024372$i = (136340);
    while(1) {
     $606 = HEAP32[$$024372$i>>2]|0;
     $607 = ((($$024372$i)) + 4|0);
     $608 = HEAP32[$607>>2]|0;
     $609 = (($606) + ($608)|0);
     $610 = ($$748$i|0)==($609|0);
     if ($610) {
      label = 154;
      break;
     }
     $611 = ((($$024372$i)) + 8|0);
     $612 = HEAP32[$611>>2]|0;
     $613 = ($612|0)==(0|0);
     if ($613) {
      break;
     } else {
      $$024372$i = $612;
     }
    }
    if ((label|0) == 154) {
     $614 = ((($$024372$i)) + 4|0);
     $615 = ((($$024372$i)) + 12|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $616 & 8;
     $618 = ($617|0)==(0);
     if ($618) {
      $619 = ($606>>>0)<=($585>>>0);
      $620 = ($$748$i>>>0)>($585>>>0);
      $or$cond51$i = $620 & $619;
      if ($or$cond51$i) {
       $621 = (($608) + ($$723947$i))|0;
       HEAP32[$614>>2] = $621;
       $622 = HEAP32[(135904)>>2]|0;
       $623 = (($622) + ($$723947$i))|0;
       $624 = ((($585)) + 8|0);
       $625 = $624;
       $626 = $625 & 7;
       $627 = ($626|0)==(0);
       $628 = (0 - ($625))|0;
       $629 = $628 & 7;
       $630 = $627 ? 0 : $629;
       $631 = (($585) + ($630)|0);
       $632 = (($623) - ($630))|0;
       HEAP32[(135916)>>2] = $631;
       HEAP32[(135904)>>2] = $632;
       $633 = $632 | 1;
       $634 = ((($631)) + 4|0);
       HEAP32[$634>>2] = $633;
       $635 = (($585) + ($623)|0);
       $636 = ((($635)) + 4|0);
       HEAP32[$636>>2] = 40;
       $637 = HEAP32[(136380)>>2]|0;
       HEAP32[(135920)>>2] = $637;
       break;
      }
     }
    }
    $638 = HEAP32[(135908)>>2]|0;
    $639 = ($$748$i>>>0)<($638>>>0);
    if ($639) {
     HEAP32[(135908)>>2] = $$748$i;
    }
    $640 = (($$748$i) + ($$723947$i)|0);
    $$124471$i = (136340);
    while(1) {
     $641 = HEAP32[$$124471$i>>2]|0;
     $642 = ($641|0)==($640|0);
     if ($642) {
      label = 162;
      break;
     }
     $643 = ((($$124471$i)) + 8|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = ($644|0)==(0|0);
     if ($645) {
      break;
     } else {
      $$124471$i = $644;
     }
    }
    if ((label|0) == 162) {
     $646 = ((($$124471$i)) + 12|0);
     $647 = HEAP32[$646>>2]|0;
     $648 = $647 & 8;
     $649 = ($648|0)==(0);
     if ($649) {
      HEAP32[$$124471$i>>2] = $$748$i;
      $650 = ((($$124471$i)) + 4|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = (($651) + ($$723947$i))|0;
      HEAP32[$650>>2] = $652;
      $653 = ((($$748$i)) + 8|0);
      $654 = $653;
      $655 = $654 & 7;
      $656 = ($655|0)==(0);
      $657 = (0 - ($654))|0;
      $658 = $657 & 7;
      $659 = $656 ? 0 : $658;
      $660 = (($$748$i) + ($659)|0);
      $661 = ((($640)) + 8|0);
      $662 = $661;
      $663 = $662 & 7;
      $664 = ($663|0)==(0);
      $665 = (0 - ($662))|0;
      $666 = $665 & 7;
      $667 = $664 ? 0 : $666;
      $668 = (($640) + ($667)|0);
      $669 = $668;
      $670 = $660;
      $671 = (($669) - ($670))|0;
      $672 = (($660) + ($$0192)|0);
      $673 = (($671) - ($$0192))|0;
      $674 = $$0192 | 3;
      $675 = ((($660)) + 4|0);
      HEAP32[$675>>2] = $674;
      $676 = ($585|0)==($668|0);
      L238: do {
       if ($676) {
        $677 = HEAP32[(135904)>>2]|0;
        $678 = (($677) + ($673))|0;
        HEAP32[(135904)>>2] = $678;
        HEAP32[(135916)>>2] = $672;
        $679 = $678 | 1;
        $680 = ((($672)) + 4|0);
        HEAP32[$680>>2] = $679;
       } else {
        $681 = HEAP32[(135912)>>2]|0;
        $682 = ($681|0)==($668|0);
        if ($682) {
         $683 = HEAP32[(135900)>>2]|0;
         $684 = (($683) + ($673))|0;
         HEAP32[(135900)>>2] = $684;
         HEAP32[(135912)>>2] = $672;
         $685 = $684 | 1;
         $686 = ((($672)) + 4|0);
         HEAP32[$686>>2] = $685;
         $687 = (($672) + ($684)|0);
         HEAP32[$687>>2] = $684;
         break;
        }
        $688 = ((($668)) + 4|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = $689 & 3;
        $691 = ($690|0)==(1);
        if ($691) {
         $692 = $689 & -8;
         $693 = $689 >>> 3;
         $694 = ($689>>>0)<(256);
         L246: do {
          if ($694) {
           $695 = ((($668)) + 8|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ((($668)) + 12|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ($698|0)==($696|0);
           if ($699) {
            $700 = 1 << $693;
            $701 = $700 ^ -1;
            $702 = HEAP32[33973]|0;
            $703 = $702 & $701;
            HEAP32[33973] = $703;
            break;
           } else {
            $704 = ((($696)) + 12|0);
            HEAP32[$704>>2] = $698;
            $705 = ((($698)) + 8|0);
            HEAP32[$705>>2] = $696;
            break;
           }
          } else {
           $706 = ((($668)) + 24|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ((($668)) + 12|0);
           $709 = HEAP32[$708>>2]|0;
           $710 = ($709|0)==($668|0);
           do {
            if ($710) {
             $715 = ((($668)) + 16|0);
             $716 = ((($715)) + 4|0);
             $717 = HEAP32[$716>>2]|0;
             $718 = ($717|0)==(0|0);
             if ($718) {
              $719 = HEAP32[$715>>2]|0;
              $720 = ($719|0)==(0|0);
              if ($720) {
               $$3$i$i = 0;
               break;
              } else {
               $$1263$i$i$ph = $719;$$1265$i$i$ph = $715;
              }
             } else {
              $$1263$i$i$ph = $717;$$1265$i$i$ph = $716;
             }
             $$1263$i$i = $$1263$i$i$ph;$$1265$i$i = $$1265$i$i$ph;
             while(1) {
              $721 = ((($$1263$i$i)) + 20|0);
              $722 = HEAP32[$721>>2]|0;
              $723 = ($722|0)==(0|0);
              if ($723) {
               $724 = ((($$1263$i$i)) + 16|0);
               $725 = HEAP32[$724>>2]|0;
               $726 = ($725|0)==(0|0);
               if ($726) {
                break;
               } else {
                $$1263$i$i$be = $725;$$1265$i$i$be = $724;
               }
              } else {
               $$1263$i$i$be = $722;$$1265$i$i$be = $721;
              }
              $$1263$i$i = $$1263$i$i$be;$$1265$i$i = $$1265$i$i$be;
             }
             HEAP32[$$1265$i$i>>2] = 0;
             $$3$i$i = $$1263$i$i;
            } else {
             $711 = ((($668)) + 8|0);
             $712 = HEAP32[$711>>2]|0;
             $713 = ((($712)) + 12|0);
             HEAP32[$713>>2] = $709;
             $714 = ((($709)) + 8|0);
             HEAP32[$714>>2] = $712;
             $$3$i$i = $709;
            }
           } while(0);
           $727 = ($707|0)==(0|0);
           if ($727) {
            break;
           }
           $728 = ((($668)) + 28|0);
           $729 = HEAP32[$728>>2]|0;
           $730 = (136196 + ($729<<2)|0);
           $731 = HEAP32[$730>>2]|0;
           $732 = ($731|0)==($668|0);
           do {
            if ($732) {
             HEAP32[$730>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $733 = 1 << $729;
             $734 = $733 ^ -1;
             $735 = HEAP32[(135896)>>2]|0;
             $736 = $735 & $734;
             HEAP32[(135896)>>2] = $736;
             break L246;
            } else {
             $737 = ((($707)) + 16|0);
             $738 = HEAP32[$737>>2]|0;
             $739 = ($738|0)==($668|0);
             $740 = ((($707)) + 20|0);
             $$sink321 = $739 ? $737 : $740;
             HEAP32[$$sink321>>2] = $$3$i$i;
             $741 = ($$3$i$i|0)==(0|0);
             if ($741) {
              break L246;
             }
            }
           } while(0);
           $742 = ((($$3$i$i)) + 24|0);
           HEAP32[$742>>2] = $707;
           $743 = ((($668)) + 16|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = ($744|0)==(0|0);
           if (!($745)) {
            $746 = ((($$3$i$i)) + 16|0);
            HEAP32[$746>>2] = $744;
            $747 = ((($744)) + 24|0);
            HEAP32[$747>>2] = $$3$i$i;
           }
           $748 = ((($743)) + 4|0);
           $749 = HEAP32[$748>>2]|0;
           $750 = ($749|0)==(0|0);
           if ($750) {
            break;
           }
           $751 = ((($$3$i$i)) + 20|0);
           HEAP32[$751>>2] = $749;
           $752 = ((($749)) + 24|0);
           HEAP32[$752>>2] = $$3$i$i;
          }
         } while(0);
         $753 = (($668) + ($692)|0);
         $754 = (($692) + ($673))|0;
         $$0$i$i = $753;$$0259$i$i = $754;
        } else {
         $$0$i$i = $668;$$0259$i$i = $673;
        }
        $755 = ((($$0$i$i)) + 4|0);
        $756 = HEAP32[$755>>2]|0;
        $757 = $756 & -2;
        HEAP32[$755>>2] = $757;
        $758 = $$0259$i$i | 1;
        $759 = ((($672)) + 4|0);
        HEAP32[$759>>2] = $758;
        $760 = (($672) + ($$0259$i$i)|0);
        HEAP32[$760>>2] = $$0259$i$i;
        $761 = $$0259$i$i >>> 3;
        $762 = ($$0259$i$i>>>0)<(256);
        if ($762) {
         $763 = $761 << 1;
         $764 = (135932 + ($763<<2)|0);
         $765 = HEAP32[33973]|0;
         $766 = 1 << $761;
         $767 = $765 & $766;
         $768 = ($767|0)==(0);
         if ($768) {
          $769 = $765 | $766;
          HEAP32[33973] = $769;
          $$pre$i16$i = ((($764)) + 8|0);
          $$0267$i$i = $764;$$pre$phi$i17$iZ2D = $$pre$i16$i;
         } else {
          $770 = ((($764)) + 8|0);
          $771 = HEAP32[$770>>2]|0;
          $$0267$i$i = $771;$$pre$phi$i17$iZ2D = $770;
         }
         HEAP32[$$pre$phi$i17$iZ2D>>2] = $672;
         $772 = ((($$0267$i$i)) + 12|0);
         HEAP32[$772>>2] = $672;
         $773 = ((($672)) + 8|0);
         HEAP32[$773>>2] = $$0267$i$i;
         $774 = ((($672)) + 12|0);
         HEAP32[$774>>2] = $764;
         break;
        }
        $775 = $$0259$i$i >>> 8;
        $776 = ($775|0)==(0);
        do {
         if ($776) {
          $$0268$i$i = 0;
         } else {
          $777 = ($$0259$i$i>>>0)>(16777215);
          if ($777) {
           $$0268$i$i = 31;
           break;
          }
          $778 = (($775) + 1048320)|0;
          $779 = $778 >>> 16;
          $780 = $779 & 8;
          $781 = $775 << $780;
          $782 = (($781) + 520192)|0;
          $783 = $782 >>> 16;
          $784 = $783 & 4;
          $785 = $784 | $780;
          $786 = $781 << $784;
          $787 = (($786) + 245760)|0;
          $788 = $787 >>> 16;
          $789 = $788 & 2;
          $790 = $785 | $789;
          $791 = (14 - ($790))|0;
          $792 = $786 << $789;
          $793 = $792 >>> 15;
          $794 = (($791) + ($793))|0;
          $795 = $794 << 1;
          $796 = (($794) + 7)|0;
          $797 = $$0259$i$i >>> $796;
          $798 = $797 & 1;
          $799 = $798 | $795;
          $$0268$i$i = $799;
         }
        } while(0);
        $800 = (136196 + ($$0268$i$i<<2)|0);
        $801 = ((($672)) + 28|0);
        HEAP32[$801>>2] = $$0268$i$i;
        $802 = ((($672)) + 16|0);
        $803 = ((($802)) + 4|0);
        HEAP32[$803>>2] = 0;
        HEAP32[$802>>2] = 0;
        $804 = HEAP32[(135896)>>2]|0;
        $805 = 1 << $$0268$i$i;
        $806 = $804 & $805;
        $807 = ($806|0)==(0);
        if ($807) {
         $808 = $804 | $805;
         HEAP32[(135896)>>2] = $808;
         HEAP32[$800>>2] = $672;
         $809 = ((($672)) + 24|0);
         HEAP32[$809>>2] = $800;
         $810 = ((($672)) + 12|0);
         HEAP32[$810>>2] = $672;
         $811 = ((($672)) + 8|0);
         HEAP32[$811>>2] = $672;
         break;
        }
        $812 = HEAP32[$800>>2]|0;
        $813 = ((($812)) + 4|0);
        $814 = HEAP32[$813>>2]|0;
        $815 = $814 & -8;
        $816 = ($815|0)==($$0259$i$i|0);
        L291: do {
         if ($816) {
          $$0261$lcssa$i$i = $812;
         } else {
          $817 = ($$0268$i$i|0)==(31);
          $818 = $$0268$i$i >>> 1;
          $819 = (25 - ($818))|0;
          $820 = $817 ? 0 : $819;
          $821 = $$0259$i$i << $820;
          $$02604$i$i = $821;$$02613$i$i = $812;
          while(1) {
           $828 = $$02604$i$i >>> 31;
           $829 = (((($$02613$i$i)) + 16|0) + ($828<<2)|0);
           $824 = HEAP32[$829>>2]|0;
           $830 = ($824|0)==(0|0);
           if ($830) {
            break;
           }
           $822 = $$02604$i$i << 1;
           $823 = ((($824)) + 4|0);
           $825 = HEAP32[$823>>2]|0;
           $826 = $825 & -8;
           $827 = ($826|0)==($$0259$i$i|0);
           if ($827) {
            $$0261$lcssa$i$i = $824;
            break L291;
           } else {
            $$02604$i$i = $822;$$02613$i$i = $824;
           }
          }
          HEAP32[$829>>2] = $672;
          $831 = ((($672)) + 24|0);
          HEAP32[$831>>2] = $$02613$i$i;
          $832 = ((($672)) + 12|0);
          HEAP32[$832>>2] = $672;
          $833 = ((($672)) + 8|0);
          HEAP32[$833>>2] = $672;
          break L238;
         }
        } while(0);
        $834 = ((($$0261$lcssa$i$i)) + 8|0);
        $835 = HEAP32[$834>>2]|0;
        $836 = ((($835)) + 12|0);
        HEAP32[$836>>2] = $672;
        HEAP32[$834>>2] = $672;
        $837 = ((($672)) + 8|0);
        HEAP32[$837>>2] = $835;
        $838 = ((($672)) + 12|0);
        HEAP32[$838>>2] = $$0261$lcssa$i$i;
        $839 = ((($672)) + 24|0);
        HEAP32[$839>>2] = 0;
       }
      } while(0);
      $968 = ((($660)) + 8|0);
      $$0 = $968;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (136340);
    while(1) {
     $840 = HEAP32[$$0$i$i$i>>2]|0;
     $841 = ($840>>>0)>($585>>>0);
     if (!($841)) {
      $842 = ((($$0$i$i$i)) + 4|0);
      $843 = HEAP32[$842>>2]|0;
      $844 = (($840) + ($843)|0);
      $845 = ($844>>>0)>($585>>>0);
      if ($845) {
       break;
      }
     }
     $846 = ((($$0$i$i$i)) + 8|0);
     $847 = HEAP32[$846>>2]|0;
     $$0$i$i$i = $847;
    }
    $848 = ((($844)) + -47|0);
    $849 = ((($848)) + 8|0);
    $850 = $849;
    $851 = $850 & 7;
    $852 = ($851|0)==(0);
    $853 = (0 - ($850))|0;
    $854 = $853 & 7;
    $855 = $852 ? 0 : $854;
    $856 = (($848) + ($855)|0);
    $857 = ((($585)) + 16|0);
    $858 = ($856>>>0)<($857>>>0);
    $859 = $858 ? $585 : $856;
    $860 = ((($859)) + 8|0);
    $861 = ((($859)) + 24|0);
    $862 = (($$723947$i) + -40)|0;
    $863 = ((($$748$i)) + 8|0);
    $864 = $863;
    $865 = $864 & 7;
    $866 = ($865|0)==(0);
    $867 = (0 - ($864))|0;
    $868 = $867 & 7;
    $869 = $866 ? 0 : $868;
    $870 = (($$748$i) + ($869)|0);
    $871 = (($862) - ($869))|0;
    HEAP32[(135916)>>2] = $870;
    HEAP32[(135904)>>2] = $871;
    $872 = $871 | 1;
    $873 = ((($870)) + 4|0);
    HEAP32[$873>>2] = $872;
    $874 = (($$748$i) + ($862)|0);
    $875 = ((($874)) + 4|0);
    HEAP32[$875>>2] = 40;
    $876 = HEAP32[(136380)>>2]|0;
    HEAP32[(135920)>>2] = $876;
    $877 = ((($859)) + 4|0);
    HEAP32[$877>>2] = 27;
    ;HEAP32[$860>>2]=HEAP32[(136340)>>2]|0;HEAP32[$860+4>>2]=HEAP32[(136340)+4>>2]|0;HEAP32[$860+8>>2]=HEAP32[(136340)+8>>2]|0;HEAP32[$860+12>>2]=HEAP32[(136340)+12>>2]|0;
    HEAP32[(136340)>>2] = $$748$i;
    HEAP32[(136344)>>2] = $$723947$i;
    HEAP32[(136352)>>2] = 0;
    HEAP32[(136348)>>2] = $860;
    $879 = $861;
    while(1) {
     $878 = ((($879)) + 4|0);
     HEAP32[$878>>2] = 7;
     $880 = ((($879)) + 8|0);
     $881 = ($880>>>0)<($844>>>0);
     if ($881) {
      $879 = $878;
     } else {
      break;
     }
    }
    $882 = ($859|0)==($585|0);
    if (!($882)) {
     $883 = $859;
     $884 = $585;
     $885 = (($883) - ($884))|0;
     $886 = HEAP32[$877>>2]|0;
     $887 = $886 & -2;
     HEAP32[$877>>2] = $887;
     $888 = $885 | 1;
     $889 = ((($585)) + 4|0);
     HEAP32[$889>>2] = $888;
     HEAP32[$859>>2] = $885;
     $890 = $885 >>> 3;
     $891 = ($885>>>0)<(256);
     if ($891) {
      $892 = $890 << 1;
      $893 = (135932 + ($892<<2)|0);
      $894 = HEAP32[33973]|0;
      $895 = 1 << $890;
      $896 = $894 & $895;
      $897 = ($896|0)==(0);
      if ($897) {
       $898 = $894 | $895;
       HEAP32[33973] = $898;
       $$pre$i$i = ((($893)) + 8|0);
       $$0206$i$i = $893;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $899 = ((($893)) + 8|0);
       $900 = HEAP32[$899>>2]|0;
       $$0206$i$i = $900;$$pre$phi$i$iZ2D = $899;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $585;
      $901 = ((($$0206$i$i)) + 12|0);
      HEAP32[$901>>2] = $585;
      $902 = ((($585)) + 8|0);
      HEAP32[$902>>2] = $$0206$i$i;
      $903 = ((($585)) + 12|0);
      HEAP32[$903>>2] = $893;
      break;
     }
     $904 = $885 >>> 8;
     $905 = ($904|0)==(0);
     if ($905) {
      $$0207$i$i = 0;
     } else {
      $906 = ($885>>>0)>(16777215);
      if ($906) {
       $$0207$i$i = 31;
      } else {
       $907 = (($904) + 1048320)|0;
       $908 = $907 >>> 16;
       $909 = $908 & 8;
       $910 = $904 << $909;
       $911 = (($910) + 520192)|0;
       $912 = $911 >>> 16;
       $913 = $912 & 4;
       $914 = $913 | $909;
       $915 = $910 << $913;
       $916 = (($915) + 245760)|0;
       $917 = $916 >>> 16;
       $918 = $917 & 2;
       $919 = $914 | $918;
       $920 = (14 - ($919))|0;
       $921 = $915 << $918;
       $922 = $921 >>> 15;
       $923 = (($920) + ($922))|0;
       $924 = $923 << 1;
       $925 = (($923) + 7)|0;
       $926 = $885 >>> $925;
       $927 = $926 & 1;
       $928 = $927 | $924;
       $$0207$i$i = $928;
      }
     }
     $929 = (136196 + ($$0207$i$i<<2)|0);
     $930 = ((($585)) + 28|0);
     HEAP32[$930>>2] = $$0207$i$i;
     $931 = ((($585)) + 20|0);
     HEAP32[$931>>2] = 0;
     HEAP32[$857>>2] = 0;
     $932 = HEAP32[(135896)>>2]|0;
     $933 = 1 << $$0207$i$i;
     $934 = $932 & $933;
     $935 = ($934|0)==(0);
     if ($935) {
      $936 = $932 | $933;
      HEAP32[(135896)>>2] = $936;
      HEAP32[$929>>2] = $585;
      $937 = ((($585)) + 24|0);
      HEAP32[$937>>2] = $929;
      $938 = ((($585)) + 12|0);
      HEAP32[$938>>2] = $585;
      $939 = ((($585)) + 8|0);
      HEAP32[$939>>2] = $585;
      break;
     }
     $940 = HEAP32[$929>>2]|0;
     $941 = ((($940)) + 4|0);
     $942 = HEAP32[$941>>2]|0;
     $943 = $942 & -8;
     $944 = ($943|0)==($885|0);
     L325: do {
      if ($944) {
       $$0202$lcssa$i$i = $940;
      } else {
       $945 = ($$0207$i$i|0)==(31);
       $946 = $$0207$i$i >>> 1;
       $947 = (25 - ($946))|0;
       $948 = $945 ? 0 : $947;
       $949 = $885 << $948;
       $$02014$i$i = $949;$$02023$i$i = $940;
       while(1) {
        $956 = $$02014$i$i >>> 31;
        $957 = (((($$02023$i$i)) + 16|0) + ($956<<2)|0);
        $952 = HEAP32[$957>>2]|0;
        $958 = ($952|0)==(0|0);
        if ($958) {
         break;
        }
        $950 = $$02014$i$i << 1;
        $951 = ((($952)) + 4|0);
        $953 = HEAP32[$951>>2]|0;
        $954 = $953 & -8;
        $955 = ($954|0)==($885|0);
        if ($955) {
         $$0202$lcssa$i$i = $952;
         break L325;
        } else {
         $$02014$i$i = $950;$$02023$i$i = $952;
        }
       }
       HEAP32[$957>>2] = $585;
       $959 = ((($585)) + 24|0);
       HEAP32[$959>>2] = $$02023$i$i;
       $960 = ((($585)) + 12|0);
       HEAP32[$960>>2] = $585;
       $961 = ((($585)) + 8|0);
       HEAP32[$961>>2] = $585;
       break L215;
      }
     } while(0);
     $962 = ((($$0202$lcssa$i$i)) + 8|0);
     $963 = HEAP32[$962>>2]|0;
     $964 = ((($963)) + 12|0);
     HEAP32[$964>>2] = $585;
     HEAP32[$962>>2] = $585;
     $965 = ((($585)) + 8|0);
     HEAP32[$965>>2] = $963;
     $966 = ((($585)) + 12|0);
     HEAP32[$966>>2] = $$0202$lcssa$i$i;
     $967 = ((($585)) + 24|0);
     HEAP32[$967>>2] = 0;
    }
   }
  } while(0);
  $969 = HEAP32[(135904)>>2]|0;
  $970 = ($969>>>0)>($$0192>>>0);
  if ($970) {
   $971 = (($969) - ($$0192))|0;
   HEAP32[(135904)>>2] = $971;
   $972 = HEAP32[(135916)>>2]|0;
   $973 = (($972) + ($$0192)|0);
   HEAP32[(135916)>>2] = $973;
   $974 = $971 | 1;
   $975 = ((($973)) + 4|0);
   HEAP32[$975>>2] = $974;
   $976 = $$0192 | 3;
   $977 = ((($972)) + 4|0);
   HEAP32[$977>>2] = $976;
   $978 = ((($972)) + 8|0);
   $$0 = $978;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $979 = (___errno_location()|0);
 HEAP32[$979>>2] = 48;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0194$i = 0, $$0194$in$i = 0, $$0346381 = 0, $$0347$lcssa = 0, $$0347380 = 0, $$0359 = 0, $$0366 = 0, $$1 = 0, $$1345 = 0, $$1350 = 0, $$1350$be = 0, $$1350$ph = 0, $$1353 = 0, $$1353$be = 0, $$1353$ph = 0, $$1361 = 0, $$1361$be = 0, $$1361$ph = 0, $$1365 = 0, $$1365$be = 0;
 var $$1365$ph = 0, $$2 = 0, $$3 = 0, $$3363 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink395 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond371 = 0, $cond372 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(135908)>>2]|0;
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -8;
 $7 = (($2) + ($6)|0);
 $8 = $5 & 1;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = HEAP32[$2>>2]|0;
   $11 = $5 & 3;
   $12 = ($11|0)==(0);
   if ($12) {
    return;
   }
   $13 = (0 - ($10))|0;
   $14 = (($2) + ($13)|0);
   $15 = (($10) + ($6))|0;
   $16 = ($14>>>0)<($3>>>0);
   if ($16) {
    return;
   }
   $17 = HEAP32[(135912)>>2]|0;
   $18 = ($17|0)==($14|0);
   if ($18) {
    $79 = ((($7)) + 4|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $80 & 3;
    $82 = ($81|0)==(3);
    if (!($82)) {
     $$1 = $14;$$1345 = $15;$88 = $14;
     break;
    }
    $83 = (($14) + ($15)|0);
    $84 = ((($14)) + 4|0);
    $85 = $15 | 1;
    $86 = $80 & -2;
    HEAP32[(135900)>>2] = $15;
    HEAP32[$79>>2] = $86;
    HEAP32[$84>>2] = $85;
    HEAP32[$83>>2] = $15;
    return;
   }
   $19 = $10 >>> 3;
   $20 = ($10>>>0)<(256);
   if ($20) {
    $21 = ((($14)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($14)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($22|0);
    if ($25) {
     $26 = 1 << $19;
     $27 = $26 ^ -1;
     $28 = HEAP32[33973]|0;
     $29 = $28 & $27;
     HEAP32[33973] = $29;
     $$1 = $14;$$1345 = $15;$88 = $14;
     break;
    } else {
     $30 = ((($22)) + 12|0);
     HEAP32[$30>>2] = $24;
     $31 = ((($24)) + 8|0);
     HEAP32[$31>>2] = $22;
     $$1 = $14;$$1345 = $15;$88 = $14;
     break;
    }
   }
   $32 = ((($14)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($14)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==($14|0);
   do {
    if ($36) {
     $41 = ((($14)) + 16|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $45 = HEAP32[$41>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$3 = 0;
       break;
      } else {
       $$1350$ph = $45;$$1353$ph = $41;
      }
     } else {
      $$1350$ph = $43;$$1353$ph = $42;
     }
     $$1350 = $$1350$ph;$$1353 = $$1353$ph;
     while(1) {
      $47 = ((($$1350)) + 20|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if ($49) {
       $50 = ((($$1350)) + 16|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = ($51|0)==(0|0);
       if ($52) {
        break;
       } else {
        $$1350$be = $51;$$1353$be = $50;
       }
      } else {
       $$1350$be = $48;$$1353$be = $47;
      }
      $$1350 = $$1350$be;$$1353 = $$1353$be;
     }
     HEAP32[$$1353>>2] = 0;
     $$3 = $$1350;
    } else {
     $37 = ((($14)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 12|0);
     HEAP32[$39>>2] = $35;
     $40 = ((($35)) + 8|0);
     HEAP32[$40>>2] = $38;
     $$3 = $35;
    }
   } while(0);
   $53 = ($33|0)==(0|0);
   if ($53) {
    $$1 = $14;$$1345 = $15;$88 = $14;
   } else {
    $54 = ((($14)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (136196 + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)==($14|0);
    if ($58) {
     HEAP32[$56>>2] = $$3;
     $cond371 = ($$3|0)==(0|0);
     if ($cond371) {
      $59 = 1 << $55;
      $60 = $59 ^ -1;
      $61 = HEAP32[(135896)>>2]|0;
      $62 = $61 & $60;
      HEAP32[(135896)>>2] = $62;
      $$1 = $14;$$1345 = $15;$88 = $14;
      break;
     }
    } else {
     $63 = ((($33)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($64|0)==($14|0);
     $66 = ((($33)) + 20|0);
     $$sink = $65 ? $63 : $66;
     HEAP32[$$sink>>2] = $$3;
     $67 = ($$3|0)==(0|0);
     if ($67) {
      $$1 = $14;$$1345 = $15;$88 = $14;
      break;
     }
    }
    $68 = ((($$3)) + 24|0);
    HEAP32[$68>>2] = $33;
    $69 = ((($14)) + 16|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(0|0);
    if (!($71)) {
     $72 = ((($$3)) + 16|0);
     HEAP32[$72>>2] = $70;
     $73 = ((($70)) + 24|0);
     HEAP32[$73>>2] = $$3;
    }
    $74 = ((($69)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75|0)==(0|0);
    if ($76) {
     $$1 = $14;$$1345 = $15;$88 = $14;
    } else {
     $77 = ((($$3)) + 20|0);
     HEAP32[$77>>2] = $75;
     $78 = ((($75)) + 24|0);
     HEAP32[$78>>2] = $$3;
     $$1 = $14;$$1345 = $15;$88 = $14;
    }
   }
  } else {
   $$1 = $2;$$1345 = $6;$88 = $2;
  }
 } while(0);
 $87 = ($88>>>0)<($7>>>0);
 if (!($87)) {
  return;
 }
 $89 = ((($7)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $90 & 1;
 $92 = ($91|0)==(0);
 if ($92) {
  return;
 }
 $93 = $90 & 2;
 $94 = ($93|0)==(0);
 if ($94) {
  $95 = HEAP32[(135916)>>2]|0;
  $96 = ($95|0)==($7|0);
  if ($96) {
   $97 = HEAP32[(135904)>>2]|0;
   $98 = (($97) + ($$1345))|0;
   HEAP32[(135904)>>2] = $98;
   HEAP32[(135916)>>2] = $$1;
   $99 = $98 | 1;
   $100 = ((($$1)) + 4|0);
   HEAP32[$100>>2] = $99;
   $101 = HEAP32[(135912)>>2]|0;
   $102 = ($$1|0)==($101|0);
   if (!($102)) {
    return;
   }
   HEAP32[(135912)>>2] = 0;
   HEAP32[(135900)>>2] = 0;
   return;
  }
  $103 = HEAP32[(135912)>>2]|0;
  $104 = ($103|0)==($7|0);
  if ($104) {
   $105 = HEAP32[(135900)>>2]|0;
   $106 = (($105) + ($$1345))|0;
   HEAP32[(135900)>>2] = $106;
   HEAP32[(135912)>>2] = $88;
   $107 = $106 | 1;
   $108 = ((($$1)) + 4|0);
   HEAP32[$108>>2] = $107;
   $109 = (($88) + ($106)|0);
   HEAP32[$109>>2] = $106;
   return;
  }
  $110 = $90 & -8;
  $111 = (($110) + ($$1345))|0;
  $112 = $90 >>> 3;
  $113 = ($90>>>0)<(256);
  do {
   if ($113) {
    $114 = ((($7)) + 8|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ((($7)) + 12|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ($117|0)==($115|0);
    if ($118) {
     $119 = 1 << $112;
     $120 = $119 ^ -1;
     $121 = HEAP32[33973]|0;
     $122 = $121 & $120;
     HEAP32[33973] = $122;
     break;
    } else {
     $123 = ((($115)) + 12|0);
     HEAP32[$123>>2] = $117;
     $124 = ((($117)) + 8|0);
     HEAP32[$124>>2] = $115;
     break;
    }
   } else {
    $125 = ((($7)) + 24|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((($7)) + 12|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($128|0)==($7|0);
    do {
     if ($129) {
      $134 = ((($7)) + 16|0);
      $135 = ((($134)) + 4|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = ($136|0)==(0|0);
      if ($137) {
       $138 = HEAP32[$134>>2]|0;
       $139 = ($138|0)==(0|0);
       if ($139) {
        $$3363 = 0;
        break;
       } else {
        $$1361$ph = $138;$$1365$ph = $134;
       }
      } else {
       $$1361$ph = $136;$$1365$ph = $135;
      }
      $$1361 = $$1361$ph;$$1365 = $$1365$ph;
      while(1) {
       $140 = ((($$1361)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $143 = ((($$1361)) + 16|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = ($144|0)==(0|0);
        if ($145) {
         break;
        } else {
         $$1361$be = $144;$$1365$be = $143;
        }
       } else {
        $$1361$be = $141;$$1365$be = $140;
       }
       $$1361 = $$1361$be;$$1365 = $$1365$be;
      }
      HEAP32[$$1365>>2] = 0;
      $$3363 = $$1361;
     } else {
      $130 = ((($7)) + 8|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = ((($131)) + 12|0);
      HEAP32[$132>>2] = $128;
      $133 = ((($128)) + 8|0);
      HEAP32[$133>>2] = $131;
      $$3363 = $128;
     }
    } while(0);
    $146 = ($126|0)==(0|0);
    if (!($146)) {
     $147 = ((($7)) + 28|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (136196 + ($148<<2)|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($7|0);
     if ($151) {
      HEAP32[$149>>2] = $$3363;
      $cond372 = ($$3363|0)==(0|0);
      if ($cond372) {
       $152 = 1 << $148;
       $153 = $152 ^ -1;
       $154 = HEAP32[(135896)>>2]|0;
       $155 = $154 & $153;
       HEAP32[(135896)>>2] = $155;
       break;
      }
     } else {
      $156 = ((($126)) + 16|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($157|0)==($7|0);
      $159 = ((($126)) + 20|0);
      $$sink395 = $158 ? $156 : $159;
      HEAP32[$$sink395>>2] = $$3363;
      $160 = ($$3363|0)==(0|0);
      if ($160) {
       break;
      }
     }
     $161 = ((($$3363)) + 24|0);
     HEAP32[$161>>2] = $126;
     $162 = ((($7)) + 16|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($163|0)==(0|0);
     if (!($164)) {
      $165 = ((($$3363)) + 16|0);
      HEAP32[$165>>2] = $163;
      $166 = ((($163)) + 24|0);
      HEAP32[$166>>2] = $$3363;
     }
     $167 = ((($162)) + 4|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = ($168|0)==(0|0);
     if (!($169)) {
      $170 = ((($$3363)) + 20|0);
      HEAP32[$170>>2] = $168;
      $171 = ((($168)) + 24|0);
      HEAP32[$171>>2] = $$3363;
     }
    }
   }
  } while(0);
  $172 = $111 | 1;
  $173 = ((($$1)) + 4|0);
  HEAP32[$173>>2] = $172;
  $174 = (($88) + ($111)|0);
  HEAP32[$174>>2] = $111;
  $175 = HEAP32[(135912)>>2]|0;
  $176 = ($$1|0)==($175|0);
  if ($176) {
   HEAP32[(135900)>>2] = $111;
   return;
  } else {
   $$2 = $111;
  }
 } else {
  $177 = $90 & -2;
  HEAP32[$89>>2] = $177;
  $178 = $$1345 | 1;
  $179 = ((($$1)) + 4|0);
  HEAP32[$179>>2] = $178;
  $180 = (($88) + ($$1345)|0);
  HEAP32[$180>>2] = $$1345;
  $$2 = $$1345;
 }
 $181 = $$2 >>> 3;
 $182 = ($$2>>>0)<(256);
 if ($182) {
  $183 = $181 << 1;
  $184 = (135932 + ($183<<2)|0);
  $185 = HEAP32[33973]|0;
  $186 = 1 << $181;
  $187 = $185 & $186;
  $188 = ($187|0)==(0);
  if ($188) {
   $189 = $185 | $186;
   HEAP32[33973] = $189;
   $$pre = ((($184)) + 8|0);
   $$0366 = $184;$$pre$phiZ2D = $$pre;
  } else {
   $190 = ((($184)) + 8|0);
   $191 = HEAP32[$190>>2]|0;
   $$0366 = $191;$$pre$phiZ2D = $190;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $192 = ((($$0366)) + 12|0);
  HEAP32[$192>>2] = $$1;
  $193 = ((($$1)) + 8|0);
  HEAP32[$193>>2] = $$0366;
  $194 = ((($$1)) + 12|0);
  HEAP32[$194>>2] = $184;
  return;
 }
 $195 = $$2 >>> 8;
 $196 = ($195|0)==(0);
 if ($196) {
  $$0359 = 0;
 } else {
  $197 = ($$2>>>0)>(16777215);
  if ($197) {
   $$0359 = 31;
  } else {
   $198 = (($195) + 1048320)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 8;
   $201 = $195 << $200;
   $202 = (($201) + 520192)|0;
   $203 = $202 >>> 16;
   $204 = $203 & 4;
   $205 = $204 | $200;
   $206 = $201 << $204;
   $207 = (($206) + 245760)|0;
   $208 = $207 >>> 16;
   $209 = $208 & 2;
   $210 = $205 | $209;
   $211 = (14 - ($210))|0;
   $212 = $206 << $209;
   $213 = $212 >>> 15;
   $214 = (($211) + ($213))|0;
   $215 = $214 << 1;
   $216 = (($214) + 7)|0;
   $217 = $$2 >>> $216;
   $218 = $217 & 1;
   $219 = $218 | $215;
   $$0359 = $219;
  }
 }
 $220 = (136196 + ($$0359<<2)|0);
 $221 = ((($$1)) + 28|0);
 HEAP32[$221>>2] = $$0359;
 $222 = ((($$1)) + 16|0);
 $223 = ((($$1)) + 20|0);
 HEAP32[$223>>2] = 0;
 HEAP32[$222>>2] = 0;
 $224 = HEAP32[(135896)>>2]|0;
 $225 = 1 << $$0359;
 $226 = $224 & $225;
 $227 = ($226|0)==(0);
 L112: do {
  if ($227) {
   $228 = $224 | $225;
   HEAP32[(135896)>>2] = $228;
   HEAP32[$220>>2] = $$1;
   $229 = ((($$1)) + 24|0);
   HEAP32[$229>>2] = $220;
   $230 = ((($$1)) + 12|0);
   HEAP32[$230>>2] = $$1;
   $231 = ((($$1)) + 8|0);
   HEAP32[$231>>2] = $$1;
  } else {
   $232 = HEAP32[$220>>2]|0;
   $233 = ((($232)) + 4|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = $234 & -8;
   $236 = ($235|0)==($$2|0);
   L115: do {
    if ($236) {
     $$0347$lcssa = $232;
    } else {
     $237 = ($$0359|0)==(31);
     $238 = $$0359 >>> 1;
     $239 = (25 - ($238))|0;
     $240 = $237 ? 0 : $239;
     $241 = $$2 << $240;
     $$0346381 = $241;$$0347380 = $232;
     while(1) {
      $248 = $$0346381 >>> 31;
      $249 = (((($$0347380)) + 16|0) + ($248<<2)|0);
      $244 = HEAP32[$249>>2]|0;
      $250 = ($244|0)==(0|0);
      if ($250) {
       break;
      }
      $242 = $$0346381 << 1;
      $243 = ((($244)) + 4|0);
      $245 = HEAP32[$243>>2]|0;
      $246 = $245 & -8;
      $247 = ($246|0)==($$2|0);
      if ($247) {
       $$0347$lcssa = $244;
       break L115;
      } else {
       $$0346381 = $242;$$0347380 = $244;
      }
     }
     HEAP32[$249>>2] = $$1;
     $251 = ((($$1)) + 24|0);
     HEAP32[$251>>2] = $$0347380;
     $252 = ((($$1)) + 12|0);
     HEAP32[$252>>2] = $$1;
     $253 = ((($$1)) + 8|0);
     HEAP32[$253>>2] = $$1;
     break L112;
    }
   } while(0);
   $254 = ((($$0347$lcssa)) + 8|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = ((($255)) + 12|0);
   HEAP32[$256>>2] = $$1;
   HEAP32[$254>>2] = $$1;
   $257 = ((($$1)) + 8|0);
   HEAP32[$257>>2] = $255;
   $258 = ((($$1)) + 12|0);
   HEAP32[$258>>2] = $$0347$lcssa;
   $259 = ((($$1)) + 24|0);
   HEAP32[$259>>2] = 0;
  }
 } while(0);
 $260 = HEAP32[(135924)>>2]|0;
 $261 = (($260) + -1)|0;
 HEAP32[(135924)>>2] = $261;
 $262 = ($261|0)==(0);
 if (!($262)) {
  return;
 }
 $$0194$in$i = (136348);
 while(1) {
  $$0194$i = HEAP32[$$0194$in$i>>2]|0;
  $263 = ($$0194$i|0)==(0|0);
  $264 = ((($$0194$i)) + 8|0);
  if ($263) {
   break;
  } else {
   $$0194$in$i = $264;
  }
 }
 HEAP32[(135924)>>2] = -1;
 return;
}
function _calloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = Math_imul($1, $0)|0;
  $4 = $1 | $0;
  $5 = ($4>>>0)>(65535);
  if ($5) {
   $6 = (($3>>>0) / ($0>>>0))&-1;
   $7 = ($6|0)==($1|0);
   $spec$select = $7 ? $3 : -1;
   $$0 = $spec$select;
  } else {
   $$0 = $3;
  }
 }
 $8 = (_malloc($$0)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  return ($8|0);
 }
 $10 = ((($8)) + -4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 3;
 $13 = ($12|0)==(0);
 if ($13) {
  return ($8|0);
 }
 (_memset(($8|0),0,($$0|0))|0);
 return ($8|0);
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 48;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 (_memcpy(($14|0),($0|0),($24|0))|0);
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1245 = 0, $$1245$be = 0, $$1245$ph = 0, $$1248 = 0, $$1248$be = 0, $$1248$ph = 0, $$2 = 0, $$3 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $storemerge = 0, $storemerge1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = $3 & 3;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ($1>>>0)<(256);
  if ($8) {
   $$2 = 0;
   return ($$2|0);
  }
  $9 = (($1) + 4)|0;
  $10 = ($4>>>0)<($9>>>0);
  if (!($10)) {
   $11 = (($4) - ($1))|0;
   $12 = HEAP32[(136372)>>2]|0;
   $13 = $12 << 1;
   $14 = ($11>>>0)>($13>>>0);
   if (!($14)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $15 = ($4>>>0)<($1>>>0);
 if (!($15)) {
  $16 = (($4) - ($1))|0;
  $17 = ($16>>>0)>(15);
  if (!($17)) {
   $$2 = $0;
   return ($$2|0);
  }
  $18 = (($0) + ($1)|0);
  $19 = $3 & 1;
  $20 = $19 | $1;
  $21 = $20 | 2;
  HEAP32[$2>>2] = $21;
  $22 = ((($18)) + 4|0);
  $23 = $16 | 3;
  HEAP32[$22>>2] = $23;
  $24 = ((($5)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 | 1;
  HEAP32[$24>>2] = $26;
  _dispose_chunk($18,$16);
  $$2 = $0;
  return ($$2|0);
 }
 $27 = HEAP32[(135916)>>2]|0;
 $28 = ($27|0)==($5|0);
 if ($28) {
  $29 = HEAP32[(135904)>>2]|0;
  $30 = (($29) + ($4))|0;
  $31 = ($30>>>0)>($1>>>0);
  $32 = (($30) - ($1))|0;
  $33 = (($0) + ($1)|0);
  if (!($31)) {
   $$2 = 0;
   return ($$2|0);
  }
  $34 = $32 | 1;
  $35 = ((($33)) + 4|0);
  $36 = $3 & 1;
  $37 = $36 | $1;
  $38 = $37 | 2;
  HEAP32[$2>>2] = $38;
  HEAP32[$35>>2] = $34;
  HEAP32[(135916)>>2] = $33;
  HEAP32[(135904)>>2] = $32;
  $$2 = $0;
  return ($$2|0);
 }
 $39 = HEAP32[(135912)>>2]|0;
 $40 = ($39|0)==($5|0);
 if ($40) {
  $41 = HEAP32[(135900)>>2]|0;
  $42 = (($41) + ($4))|0;
  $43 = ($42>>>0)<($1>>>0);
  if ($43) {
   $$2 = 0;
   return ($$2|0);
  }
  $44 = (($42) - ($1))|0;
  $45 = ($44>>>0)>(15);
  if ($45) {
   $46 = (($0) + ($1)|0);
   $47 = (($0) + ($42)|0);
   $48 = $3 & 1;
   $49 = $48 | $1;
   $50 = $49 | 2;
   HEAP32[$2>>2] = $50;
   $51 = ((($46)) + 4|0);
   $52 = $44 | 1;
   HEAP32[$51>>2] = $52;
   HEAP32[$47>>2] = $44;
   $53 = ((($47)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $54 & -2;
   HEAP32[$53>>2] = $55;
   $storemerge = $46;$storemerge1 = $44;
  } else {
   $56 = $3 & 1;
   $57 = $56 | $42;
   $58 = $57 | 2;
   HEAP32[$2>>2] = $58;
   $59 = (($0) + ($42)|0);
   $60 = ((($59)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 | 1;
   HEAP32[$60>>2] = $62;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(135900)>>2] = $storemerge1;
  HEAP32[(135912)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $63 = ((($5)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $$2 = 0;
  return ($$2|0);
 }
 $67 = $64 & -8;
 $68 = (($67) + ($4))|0;
 $69 = ($68>>>0)<($1>>>0);
 if ($69) {
  $$2 = 0;
  return ($$2|0);
 }
 $70 = (($68) - ($1))|0;
 $71 = $64 >>> 3;
 $72 = ($64>>>0)<(256);
 do {
  if ($72) {
   $73 = ((($5)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($5)) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)==($74|0);
   if ($77) {
    $78 = 1 << $71;
    $79 = $78 ^ -1;
    $80 = HEAP32[33973]|0;
    $81 = $80 & $79;
    HEAP32[33973] = $81;
    break;
   } else {
    $82 = ((($74)) + 12|0);
    HEAP32[$82>>2] = $76;
    $83 = ((($76)) + 8|0);
    HEAP32[$83>>2] = $74;
    break;
   }
  } else {
   $84 = ((($5)) + 24|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ((($5)) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==($5|0);
   do {
    if ($88) {
     $93 = ((($5)) + 16|0);
     $94 = ((($93)) + 4|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($95|0)==(0|0);
     if ($96) {
      $97 = HEAP32[$93>>2]|0;
      $98 = ($97|0)==(0|0);
      if ($98) {
       $$3 = 0;
       break;
      } else {
       $$1245$ph = $97;$$1248$ph = $93;
      }
     } else {
      $$1245$ph = $95;$$1248$ph = $94;
     }
     $$1245 = $$1245$ph;$$1248 = $$1248$ph;
     while(1) {
      $99 = ((($$1245)) + 20|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = ($100|0)==(0|0);
      if ($101) {
       $102 = ((($$1245)) + 16|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = ($103|0)==(0|0);
       if ($104) {
        break;
       } else {
        $$1245$be = $103;$$1248$be = $102;
       }
      } else {
       $$1245$be = $100;$$1248$be = $99;
      }
      $$1245 = $$1245$be;$$1248 = $$1248$be;
     }
     HEAP32[$$1248>>2] = 0;
     $$3 = $$1245;
    } else {
     $89 = ((($5)) + 8|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ((($90)) + 12|0);
     HEAP32[$91>>2] = $87;
     $92 = ((($87)) + 8|0);
     HEAP32[$92>>2] = $90;
     $$3 = $87;
    }
   } while(0);
   $105 = ($85|0)==(0|0);
   if (!($105)) {
    $106 = ((($5)) + 28|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (136196 + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($109|0)==($5|0);
    if ($110) {
     HEAP32[$108>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $111 = 1 << $107;
      $112 = $111 ^ -1;
      $113 = HEAP32[(135896)>>2]|0;
      $114 = $113 & $112;
      HEAP32[(135896)>>2] = $114;
      break;
     }
    } else {
     $115 = ((($85)) + 16|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==($5|0);
     $118 = ((($85)) + 20|0);
     $$sink = $117 ? $115 : $118;
     HEAP32[$$sink>>2] = $$3;
     $119 = ($$3|0)==(0|0);
     if ($119) {
      break;
     }
    }
    $120 = ((($$3)) + 24|0);
    HEAP32[$120>>2] = $85;
    $121 = ((($5)) + 16|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = ($122|0)==(0|0);
    if (!($123)) {
     $124 = ((($$3)) + 16|0);
     HEAP32[$124>>2] = $122;
     $125 = ((($122)) + 24|0);
     HEAP32[$125>>2] = $$3;
    }
    $126 = ((($121)) + 4|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = ($127|0)==(0|0);
    if (!($128)) {
     $129 = ((($$3)) + 20|0);
     HEAP32[$129>>2] = $127;
     $130 = ((($127)) + 24|0);
     HEAP32[$130>>2] = $$3;
    }
   }
  }
 } while(0);
 $131 = ($70>>>0)<(16);
 if ($131) {
  $132 = $3 & 1;
  $133 = $132 | $68;
  $134 = $133 | 2;
  HEAP32[$2>>2] = $134;
  $135 = (($0) + ($68)|0);
  $136 = ((($135)) + 4|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $137 | 1;
  HEAP32[$136>>2] = $138;
  $$2 = $0;
  return ($$2|0);
 } else {
  $139 = (($0) + ($1)|0);
  $140 = $3 & 1;
  $141 = $140 | $1;
  $142 = $141 | 2;
  HEAP32[$2>>2] = $142;
  $143 = ((($139)) + 4|0);
  $144 = $70 | 3;
  HEAP32[$143>>2] = $144;
  $145 = (($0) + ($68)|0);
  $146 = ((($145)) + 4|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $147 | 1;
  HEAP32[$146>>2] = $148;
  _dispose_chunk($139,$70);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$03649 = 0, $$0365$lcssa = 0, $$03658 = 0, $$0376 = 0, $$0383 = 0, $$1 = 0, $$1363 = 0, $$1371 = 0, $$1371$be = 0, $$1371$ph = 0, $$1374 = 0, $$1374$be = 0, $$1374$ph = 0, $$1378 = 0, $$1378$be = 0, $$1378$ph = 0, $$1382 = 0, $$1382$be = 0, $$1382$ph = 0, $$2 = 0;
 var $$3 = 0, $$3380 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink24 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(135912)>>2]|0;
   $14 = ($13|0)==($11|0);
   if ($14) {
    $75 = ((($2)) + 4|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $76 & 3;
    $78 = ($77|0)==(3);
    if (!($78)) {
     $$1 = $11;$$1363 = $12;
     break;
    }
    $79 = ((($11)) + 4|0);
    $80 = $12 | 1;
    $81 = $76 & -2;
    HEAP32[(135900)>>2] = $12;
    HEAP32[$75>>2] = $81;
    HEAP32[$79>>2] = $80;
    HEAP32[$2>>2] = $12;
    return;
   }
   $15 = $7 >>> 3;
   $16 = ($7>>>0)<(256);
   if ($16) {
    $17 = ((($11)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($11)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($18|0);
    if ($21) {
     $22 = 1 << $15;
     $23 = $22 ^ -1;
     $24 = HEAP32[33973]|0;
     $25 = $24 & $23;
     HEAP32[33973] = $25;
     $$1 = $11;$$1363 = $12;
     break;
    } else {
     $26 = ((($18)) + 12|0);
     HEAP32[$26>>2] = $20;
     $27 = ((($20)) + 8|0);
     HEAP32[$27>>2] = $18;
     $$1 = $11;$$1363 = $12;
     break;
    }
   }
   $28 = ((($11)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($11)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==($11|0);
   do {
    if ($32) {
     $37 = ((($11)) + 16|0);
     $38 = ((($37)) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0|0);
     if ($40) {
      $41 = HEAP32[$37>>2]|0;
      $42 = ($41|0)==(0|0);
      if ($42) {
       $$3 = 0;
       break;
      } else {
       $$1371$ph = $41;$$1374$ph = $37;
      }
     } else {
      $$1371$ph = $39;$$1374$ph = $38;
     }
     $$1371 = $$1371$ph;$$1374 = $$1374$ph;
     while(1) {
      $43 = ((($$1371)) + 20|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==(0|0);
      if ($45) {
       $46 = ((($$1371)) + 16|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = ($47|0)==(0|0);
       if ($48) {
        break;
       } else {
        $$1371$be = $47;$$1374$be = $46;
       }
      } else {
       $$1371$be = $44;$$1374$be = $43;
      }
      $$1371 = $$1371$be;$$1374 = $$1374$be;
     }
     HEAP32[$$1374>>2] = 0;
     $$3 = $$1371;
    } else {
     $33 = ((($11)) + 8|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ((($34)) + 12|0);
     HEAP32[$35>>2] = $31;
     $36 = ((($31)) + 8|0);
     HEAP32[$36>>2] = $34;
     $$3 = $31;
    }
   } while(0);
   $49 = ($29|0)==(0|0);
   if ($49) {
    $$1 = $11;$$1363 = $12;
   } else {
    $50 = ((($11)) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (136196 + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==($11|0);
    if ($54) {
     HEAP32[$52>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $55 = 1 << $51;
      $56 = $55 ^ -1;
      $57 = HEAP32[(135896)>>2]|0;
      $58 = $57 & $56;
      HEAP32[(135896)>>2] = $58;
      $$1 = $11;$$1363 = $12;
      break;
     }
    } else {
     $59 = ((($29)) + 16|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==($11|0);
     $62 = ((($29)) + 20|0);
     $$sink = $61 ? $59 : $62;
     HEAP32[$$sink>>2] = $$3;
     $63 = ($$3|0)==(0|0);
     if ($63) {
      $$1 = $11;$$1363 = $12;
      break;
     }
    }
    $64 = ((($$3)) + 24|0);
    HEAP32[$64>>2] = $29;
    $65 = ((($11)) + 16|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)==(0|0);
    if (!($67)) {
     $68 = ((($$3)) + 16|0);
     HEAP32[$68>>2] = $66;
     $69 = ((($66)) + 24|0);
     HEAP32[$69>>2] = $$3;
    }
    $70 = ((($65)) + 4|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($71|0)==(0|0);
    if ($72) {
     $$1 = $11;$$1363 = $12;
    } else {
     $73 = ((($$3)) + 20|0);
     HEAP32[$73>>2] = $71;
     $74 = ((($71)) + 24|0);
     HEAP32[$74>>2] = $$3;
     $$1 = $11;$$1363 = $12;
    }
   }
  } else {
   $$1 = $0;$$1363 = $1;
  }
 } while(0);
 $82 = ((($2)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 & 2;
 $85 = ($84|0)==(0);
 if ($85) {
  $86 = HEAP32[(135916)>>2]|0;
  $87 = ($86|0)==($2|0);
  if ($87) {
   $88 = HEAP32[(135904)>>2]|0;
   $89 = (($88) + ($$1363))|0;
   HEAP32[(135904)>>2] = $89;
   HEAP32[(135916)>>2] = $$1;
   $90 = $89 | 1;
   $91 = ((($$1)) + 4|0);
   HEAP32[$91>>2] = $90;
   $92 = HEAP32[(135912)>>2]|0;
   $93 = ($$1|0)==($92|0);
   if (!($93)) {
    return;
   }
   HEAP32[(135912)>>2] = 0;
   HEAP32[(135900)>>2] = 0;
   return;
  }
  $94 = HEAP32[(135912)>>2]|0;
  $95 = ($94|0)==($2|0);
  if ($95) {
   $96 = HEAP32[(135900)>>2]|0;
   $97 = (($96) + ($$1363))|0;
   HEAP32[(135900)>>2] = $97;
   HEAP32[(135912)>>2] = $$1;
   $98 = $97 | 1;
   $99 = ((($$1)) + 4|0);
   HEAP32[$99>>2] = $98;
   $100 = (($$1) + ($97)|0);
   HEAP32[$100>>2] = $97;
   return;
  }
  $101 = $83 & -8;
  $102 = (($101) + ($$1363))|0;
  $103 = $83 >>> 3;
  $104 = ($83>>>0)<(256);
  do {
   if ($104) {
    $105 = ((($2)) + 8|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = ((($2)) + 12|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ($108|0)==($106|0);
    if ($109) {
     $110 = 1 << $103;
     $111 = $110 ^ -1;
     $112 = HEAP32[33973]|0;
     $113 = $112 & $111;
     HEAP32[33973] = $113;
     break;
    } else {
     $114 = ((($106)) + 12|0);
     HEAP32[$114>>2] = $108;
     $115 = ((($108)) + 8|0);
     HEAP32[$115>>2] = $106;
     break;
    }
   } else {
    $116 = ((($2)) + 24|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ((($2)) + 12|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = ($119|0)==($2|0);
    do {
     if ($120) {
      $125 = ((($2)) + 16|0);
      $126 = ((($125)) + 4|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = ($127|0)==(0|0);
      if ($128) {
       $129 = HEAP32[$125>>2]|0;
       $130 = ($129|0)==(0|0);
       if ($130) {
        $$3380 = 0;
        break;
       } else {
        $$1378$ph = $129;$$1382$ph = $125;
       }
      } else {
       $$1378$ph = $127;$$1382$ph = $126;
      }
      $$1378 = $$1378$ph;$$1382 = $$1382$ph;
      while(1) {
       $131 = ((($$1378)) + 20|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = ($132|0)==(0|0);
       if ($133) {
        $134 = ((($$1378)) + 16|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = ($135|0)==(0|0);
        if ($136) {
         break;
        } else {
         $$1378$be = $135;$$1382$be = $134;
        }
       } else {
        $$1378$be = $132;$$1382$be = $131;
       }
       $$1378 = $$1378$be;$$1382 = $$1382$be;
      }
      HEAP32[$$1382>>2] = 0;
      $$3380 = $$1378;
     } else {
      $121 = ((($2)) + 8|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ((($122)) + 12|0);
      HEAP32[$123>>2] = $119;
      $124 = ((($119)) + 8|0);
      HEAP32[$124>>2] = $122;
      $$3380 = $119;
     }
    } while(0);
    $137 = ($117|0)==(0|0);
    if (!($137)) {
     $138 = ((($2)) + 28|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (136196 + ($139<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($2|0);
     if ($142) {
      HEAP32[$140>>2] = $$3380;
      $cond4 = ($$3380|0)==(0|0);
      if ($cond4) {
       $143 = 1 << $139;
       $144 = $143 ^ -1;
       $145 = HEAP32[(135896)>>2]|0;
       $146 = $145 & $144;
       HEAP32[(135896)>>2] = $146;
       break;
      }
     } else {
      $147 = ((($117)) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($148|0)==($2|0);
      $150 = ((($117)) + 20|0);
      $$sink24 = $149 ? $147 : $150;
      HEAP32[$$sink24>>2] = $$3380;
      $151 = ($$3380|0)==(0|0);
      if ($151) {
       break;
      }
     }
     $152 = ((($$3380)) + 24|0);
     HEAP32[$152>>2] = $117;
     $153 = ((($2)) + 16|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($154|0)==(0|0);
     if (!($155)) {
      $156 = ((($$3380)) + 16|0);
      HEAP32[$156>>2] = $154;
      $157 = ((($154)) + 24|0);
      HEAP32[$157>>2] = $$3380;
     }
     $158 = ((($153)) + 4|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==(0|0);
     if (!($160)) {
      $161 = ((($$3380)) + 20|0);
      HEAP32[$161>>2] = $159;
      $162 = ((($159)) + 24|0);
      HEAP32[$162>>2] = $$3380;
     }
    }
   }
  } while(0);
  $163 = $102 | 1;
  $164 = ((($$1)) + 4|0);
  HEAP32[$164>>2] = $163;
  $165 = (($$1) + ($102)|0);
  HEAP32[$165>>2] = $102;
  $166 = HEAP32[(135912)>>2]|0;
  $167 = ($$1|0)==($166|0);
  if ($167) {
   HEAP32[(135900)>>2] = $102;
   return;
  } else {
   $$2 = $102;
  }
 } else {
  $168 = $83 & -2;
  HEAP32[$82>>2] = $168;
  $169 = $$1363 | 1;
  $170 = ((($$1)) + 4|0);
  HEAP32[$170>>2] = $169;
  $171 = (($$1) + ($$1363)|0);
  HEAP32[$171>>2] = $$1363;
  $$2 = $$1363;
 }
 $172 = $$2 >>> 3;
 $173 = ($$2>>>0)<(256);
 if ($173) {
  $174 = $172 << 1;
  $175 = (135932 + ($174<<2)|0);
  $176 = HEAP32[33973]|0;
  $177 = 1 << $172;
  $178 = $176 & $177;
  $179 = ($178|0)==(0);
  if ($179) {
   $180 = $176 | $177;
   HEAP32[33973] = $180;
   $$pre = ((($175)) + 8|0);
   $$0383 = $175;$$pre$phiZ2D = $$pre;
  } else {
   $181 = ((($175)) + 8|0);
   $182 = HEAP32[$181>>2]|0;
   $$0383 = $182;$$pre$phiZ2D = $181;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $183 = ((($$0383)) + 12|0);
  HEAP32[$183>>2] = $$1;
  $184 = ((($$1)) + 8|0);
  HEAP32[$184>>2] = $$0383;
  $185 = ((($$1)) + 12|0);
  HEAP32[$185>>2] = $175;
  return;
 }
 $186 = $$2 >>> 8;
 $187 = ($186|0)==(0);
 if ($187) {
  $$0376 = 0;
 } else {
  $188 = ($$2>>>0)>(16777215);
  if ($188) {
   $$0376 = 31;
  } else {
   $189 = (($186) + 1048320)|0;
   $190 = $189 >>> 16;
   $191 = $190 & 8;
   $192 = $186 << $191;
   $193 = (($192) + 520192)|0;
   $194 = $193 >>> 16;
   $195 = $194 & 4;
   $196 = $195 | $191;
   $197 = $192 << $195;
   $198 = (($197) + 245760)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 2;
   $201 = $196 | $200;
   $202 = (14 - ($201))|0;
   $203 = $197 << $200;
   $204 = $203 >>> 15;
   $205 = (($202) + ($204))|0;
   $206 = $205 << 1;
   $207 = (($205) + 7)|0;
   $208 = $$2 >>> $207;
   $209 = $208 & 1;
   $210 = $209 | $206;
   $$0376 = $210;
  }
 }
 $211 = (136196 + ($$0376<<2)|0);
 $212 = ((($$1)) + 28|0);
 HEAP32[$212>>2] = $$0376;
 $213 = ((($$1)) + 16|0);
 $214 = ((($$1)) + 20|0);
 HEAP32[$214>>2] = 0;
 HEAP32[$213>>2] = 0;
 $215 = HEAP32[(135896)>>2]|0;
 $216 = 1 << $$0376;
 $217 = $215 & $216;
 $218 = ($217|0)==(0);
 if ($218) {
  $219 = $215 | $216;
  HEAP32[(135896)>>2] = $219;
  HEAP32[$211>>2] = $$1;
  $220 = ((($$1)) + 24|0);
  HEAP32[$220>>2] = $211;
  $221 = ((($$1)) + 12|0);
  HEAP32[$221>>2] = $$1;
  $222 = ((($$1)) + 8|0);
  HEAP32[$222>>2] = $$1;
  return;
 }
 $223 = HEAP32[$211>>2]|0;
 $224 = ((($223)) + 4|0);
 $225 = HEAP32[$224>>2]|0;
 $226 = $225 & -8;
 $227 = ($226|0)==($$2|0);
 L104: do {
  if ($227) {
   $$0365$lcssa = $223;
  } else {
   $228 = ($$0376|0)==(31);
   $229 = $$0376 >>> 1;
   $230 = (25 - ($229))|0;
   $231 = $228 ? 0 : $230;
   $232 = $$2 << $231;
   $$03649 = $232;$$03658 = $223;
   while(1) {
    $239 = $$03649 >>> 31;
    $240 = (((($$03658)) + 16|0) + ($239<<2)|0);
    $235 = HEAP32[$240>>2]|0;
    $241 = ($235|0)==(0|0);
    if ($241) {
     break;
    }
    $233 = $$03649 << 1;
    $234 = ((($235)) + 4|0);
    $236 = HEAP32[$234>>2]|0;
    $237 = $236 & -8;
    $238 = ($237|0)==($$2|0);
    if ($238) {
     $$0365$lcssa = $235;
     break L104;
    } else {
     $$03649 = $233;$$03658 = $235;
    }
   }
   HEAP32[$240>>2] = $$1;
   $242 = ((($$1)) + 24|0);
   HEAP32[$242>>2] = $$03658;
   $243 = ((($$1)) + 12|0);
   HEAP32[$243>>2] = $$1;
   $244 = ((($$1)) + 8|0);
   HEAP32[$244>>2] = $$1;
   return;
  }
 } while(0);
 $245 = ((($$0365$lcssa)) + 8|0);
 $246 = HEAP32[$245>>2]|0;
 $247 = ((($246)) + 12|0);
 HEAP32[$247>>2] = $$1;
 HEAP32[$245>>2] = $$1;
 $248 = ((($$1)) + 8|0);
 HEAP32[$248>>2] = $246;
 $249 = ((($$1)) + 12|0);
 HEAP32[$249>>2] = $$0365$lcssa;
 $250 = ((($$1)) + 24|0);
 HEAP32[$250>>2] = 0;
 return;
}
function _sbrk($0) {
 $0 = $0|0;
 var $$2 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_emscripten_get_sbrk_ptr()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + ($0))|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 48;
  $$2 = (-1);
  return ($$2|0);
 }
 $6 = (_emscripten_get_heap_size()|0);
 $7 = ($3>>>0)>($6>>>0);
 if ($7) {
  $8 = (_emscripten_resize_heap(($3|0))|0);
  $9 = ($8|0)==(0);
  if ($9) {
   $10 = (___errno_location()|0);
   HEAP32[$10>>2] = 48;
   $$2 = (-1);
   return ($$2|0);
  }
 }
 HEAP32[$1>>2] = $3;
 $11 = $2;
 $$2 = $11;
 return ($$2|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
    x = x | 0;
    return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = (getTempRet0() | 0);
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = (getTempRet0() | 0);
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = (getTempRet0() | 0);
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
    $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
    $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
    $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
    $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
    $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
    $4$1 = (getTempRet0() | 0);
    $6$0 = _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0;
    $7$0 = $2$0 ^ $1$0;
    $7$1 = $2$1 ^ $1$1;
    $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, (getTempRet0() | 0), 0) | 0;
    $10$0 = _i64Subtract($8$0 ^ $7$0 | 0, (getTempRet0() | 0) ^ $7$1 | 0, $7$0 | 0, $7$1 | 0) | 0;
    return $10$0 | 0;
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (setTempRet0(((($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0) | 0), 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = (getTempRet0() | 0);
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (setTempRet0((((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0) | 0), 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0(((high|0) < 0 ? -1 : 0) | 0);
    return (high >> (bits - 32))|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >>> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0((0) | 0);
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0(((high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))) | 0);
      return low << bits;
    }
    setTempRet0((low << (bits - 32)) | 0);
    return 0;
}
function _emscripten_get_sbrk_ptr() {
    return 136416;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >= 8192) {
      _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
      return dest|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      block_aligned_end = (aligned_end - 64)|0;

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}

  
function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&3](a1|0)|0;
}


function dynCall_iidiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iidiiii[index&1](a1|0,+a2,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&7](a1|0,a2|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&3](a1|0,a2|0,a3|0)|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&3](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&7](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&1](a1|0,a2|0);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&15](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0) {
 p0 = p0|0; abort(0);return 0;
}
function b1(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(1);return 0;
}
function b2(p0,p1) {
 p0 = p0|0;p1 = p1|0; abort(2);return 0;
}
function b3(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(3);return 0;
}
function b4(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(4);return 0;
}
function b5(p0) {
 p0 = p0|0; abort(5);
}
function b6(p0,p1) {
 p0 = p0|0;p1 = p1|0; abort(6);
}
function b7(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(7);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,___stdio_close,___emscripten_stdout_close,b0];
var FUNCTION_TABLE_iidiiii = [b1,_fmt_fp];
var FUNCTION_TABLE_iii = [b2,_qr_cmp_edge_pt,_qr_finder_vline_cmp,_qr_finder_center_cmp,_proc_kick_handler,_proc_video_handler,b2,b2];
var FUNCTION_TABLE_iiii = [b3,___stdio_write,_sn_write,___stdio_read];
var FUNCTION_TABLE_iiiii = [b4,___stdio_seek,___emscripten_stdout_seek,b4];
var FUNCTION_TABLE_vi = [b5,_zbar_image_free_data,__zbar_video_recycle_image,__zbar_video_recycle_shadow,_symbol_handler,_cleanup_ref,b5,b5];
var FUNCTION_TABLE_vii = [b6,_pop_arg_long_double];
var FUNCTION_TABLE_viiii = [b7,_convert_copy,_convert_uvp_append,_convert_yuv_pack,_convert_yuvp_to_rgb,_convert_uvp_resample,_convert_yuv_unpack,_convert_uv_resample,_convert_yuv_to_rgb,_convert_rgb_to_yuvp,_convert_rgb_to_yuv,_convert_rgb_resample,b7,b7,b7,b7];

  return { ___divdi3: ___divdi3, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, _bitshift64Ashr: _bitshift64Ashr, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_get_sbrk_ptr: _emscripten_get_sbrk_ptr, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, dynCall_ii: dynCall_ii, dynCall_iidiiii: dynCall_iidiiii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viiii: dynCall_viiii, establishStackSpace: establishStackSpace, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(asmGlobalArg, asmLibraryArg, buffer);

var ___divdi3 = Module["___divdi3"] = asm["___divdi3"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_get_sbrk_ptr = Module["_emscripten_get_sbrk_ptr"] = asm["_emscripten_get_sbrk_ptr"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iidiiii = Module["dynCall_iidiiii"] = asm["dynCall_iidiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;














































































if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = readBinary(memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    };
    var doBrowserLoad = function() {
      readAsync(memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    };
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      var useRequest = function() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      };
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}


var calledRun;

// Modularize mode returns a function, which can be called to
// create instances. The instances provide a then() method,
// must like a Promise, that receives a callback. The callback
// is called when the module is ready to run, with the module
// as a parameter. (Like a Promise, it also returns the module
// so you can use the output of .then(..)).
Module['then'] = function(func) {
  // We may already be ready to run code at this time. if
  // so, just queue a call to the callback.
  if (calledRun) {
    func(Module);
  } else {
    // we are not ready to call then() yet. we must call it
    // at the same time we would call onRuntimeInitialized.
    var old = Module['onRuntimeInitialized'];
    Module['onRuntimeInitialized'] = function() {
      if (old) old();
      func(Module);
    };
  }
  return Module;
};

/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;


dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function callMain(args) {

  var entryFunction = Module['_main'];


  args = args || [];

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(thisProgram);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {


    var ret = entryFunction(argc, argv);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      noExitRuntime = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      err('exception thrown: ' + toLog);
      quit_(1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }


  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (shouldRunNow) callMain(args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
}
Module['run'] = run;


function exit(status, implicit) {

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;

if (Module['noInitialRun']) shouldRunNow = false;


  noExitRuntime = true;

run();





// {{MODULE_ADDITIONS}}



Module = result;


  return Module
}
);
})();
if (typeof exports === 'object' && typeof module === 'object')
      module.exports = Module;
    else if (typeof define === 'function' && define['amd'])
      define([], function() { return Module; });
    else if (typeof exports === 'object')
      exports["Module"] = Module;
    